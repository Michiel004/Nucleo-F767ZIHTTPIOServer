
Nucleo-F767ZIHTTPTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b88  0801c020  0801c020  0002c020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fba8  0801fba8  000316e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801fba8  0801fba8  0002fba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fbb0  0801fbb0  000316e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fbb0  0801fbb0  0002fbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fbb4  0801fbb4  0002fbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000016e8  20000000  0801fbb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afd8  200016e8  080212a0  000316e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c6c0  080212a0  0003c6c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000316e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000479e6  00000000  00000000  00031716  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000843e  00000000  00000000  000790fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000026d8  00000000  00000000  00081540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024e0  00000000  00000000  00083c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003aba5  00000000  00000000  000860f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f90f  00000000  00000000  000c0c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001277d5  00000000  00000000  000f05ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00217d81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af18  00000000  00000000  00217dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200016e8 	.word	0x200016e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c008 	.word	0x0801c008

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200016ec 	.word	0x200016ec
 800023c:	0801c008 	.word	0x0801c008

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fb80 	bl	8000cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f017 fa04 	bl	8017a08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f017 f864 	bl	80176cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_IncTick+0x20>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <HAL_IncTick+0x24>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_IncTick+0x24>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004
 8000630:	20005854 	.word	0x20005854

08000634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  return uwTick;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <HAL_GetTick+0x14>)
 800063a:	681b      	ldr	r3, [r3, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20005854 	.word	0x20005854

0800064c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000654:	f7ff ffee 	bl	8000634 <HAL_GetTick>
 8000658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000664:	d005      	beq.n	8000672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_Delay+0x40>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000672:	bf00      	nop
 8000674:	f7ff ffde 	bl	8000634 <HAL_GetTick>
 8000678:	4602      	mov	r2, r0
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	429a      	cmp	r2, r3
 8000682:	d8f7      	bhi.n	8000674 <HAL_Delay+0x28>
  {
  }
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e031      	b.n	800070a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f017 f83c 	bl	801772c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 0310 	and.w	r3, r3, #16
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d116      	bne.n	80006fc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_Init+0x84>)
 80006d4:	4013      	ands	r3, r2
 80006d6:	f043 0202 	orr.w	r2, r3, #2
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 f964 	bl	80009ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f023 0303 	bic.w	r3, r3, #3
 80006f2:	f043 0201 	orr.w	r2, r3, #1
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
 80006fa:	e001      	b.n	8000700 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	ffffeefd 	.word	0xffffeefd

08000718 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800072c:	2b01      	cmp	r3, #1
 800072e:	d101      	bne.n	8000734 <HAL_ADC_ConfigChannel+0x1c>
 8000730:	2302      	movs	r3, #2
 8000732:	e12a      	b.n	800098a <HAL_ADC_ConfigChannel+0x272>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2201      	movs	r2, #1
 8000738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b09      	cmp	r3, #9
 8000742:	d93a      	bls.n	80007ba <HAL_ADC_ConfigChannel+0xa2>
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800074c:	d035      	beq.n	80007ba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68d9      	ldr	r1, [r3, #12]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	461a      	mov	r2, r3
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	3b1e      	subs	r3, #30
 8000764:	2207      	movs	r2, #7
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	400a      	ands	r2, r1
 8000772:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a87      	ldr	r2, [pc, #540]	; (8000998 <HAL_ADC_ConfigChannel+0x280>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d10a      	bne.n	8000794 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68d9      	ldr	r1, [r3, #12]
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	061a      	lsls	r2, r3, #24
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	430a      	orrs	r2, r1
 8000790:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000792:	e035      	b.n	8000800 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68d9      	ldr	r1, [r3, #12]
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4403      	add	r3, r0
 80007ac:	3b1e      	subs	r3, #30
 80007ae:	409a      	lsls	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007b8:	e022      	b.n	8000800 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6919      	ldr	r1, [r3, #16]
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	2207      	movs	r2, #7
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43da      	mvns	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	400a      	ands	r2, r1
 80007dc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6919      	ldr	r1, [r3, #16]
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	4603      	mov	r3, r0
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4403      	add	r3, r0
 80007f6:	409a      	lsls	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b06      	cmp	r3, #6
 8000806:	d824      	bhi.n	8000852 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	3b05      	subs	r3, #5
 800081a:	221f      	movs	r2, #31
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43da      	mvns	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	400a      	ands	r2, r1
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b29b      	uxth	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	3b05      	subs	r3, #5
 8000844:	fa00 f203 	lsl.w	r2, r0, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
 8000850:	e04c      	b.n	80008ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b0c      	cmp	r3, #12
 8000858:	d824      	bhi.n	80008a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	3b23      	subs	r3, #35	; 0x23
 800086c:	221f      	movs	r2, #31
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	400a      	ands	r2, r1
 800087a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	3b23      	subs	r3, #35	; 0x23
 8000896:	fa00 f203 	lsl.w	r2, r0, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	430a      	orrs	r2, r1
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
 80008a2:	e023      	b.n	80008ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4613      	mov	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	4413      	add	r3, r2
 80008b4:	3b41      	subs	r3, #65	; 0x41
 80008b6:	221f      	movs	r2, #31
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43da      	mvns	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	400a      	ands	r2, r1
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	3b41      	subs	r3, #65	; 0x41
 80008e0:	fa00 f203 	lsl.w	r2, r0, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a2a      	ldr	r2, [pc, #168]	; (800099c <HAL_ADC_ConfigChannel+0x284>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d10a      	bne.n	800090c <HAL_ADC_ConfigChannel+0x1f4>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008fe:	d105      	bne.n	800090c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <HAL_ADC_ConfigChannel+0x288>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <HAL_ADC_ConfigChannel+0x288>)
 8000906:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800090a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <HAL_ADC_ConfigChannel+0x284>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d109      	bne.n	800092a <HAL_ADC_ConfigChannel+0x212>
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b12      	cmp	r3, #18
 800091c:	d105      	bne.n	800092a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <HAL_ADC_ConfigChannel+0x288>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <HAL_ADC_ConfigChannel+0x288>)
 8000924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000928:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a1b      	ldr	r2, [pc, #108]	; (800099c <HAL_ADC_ConfigChannel+0x284>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d125      	bne.n	8000980 <HAL_ADC_ConfigChannel+0x268>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_ADC_ConfigChannel+0x280>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d003      	beq.n	8000946 <HAL_ADC_ConfigChannel+0x22e>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b11      	cmp	r3, #17
 8000944:	d11c      	bne.n	8000980 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_ADC_ConfigChannel+0x288>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <HAL_ADC_ConfigChannel+0x288>)
 800094c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000950:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_ADC_ConfigChannel+0x280>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d111      	bne.n	8000980 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_ADC_ConfigChannel+0x28c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <HAL_ADC_ConfigChannel+0x290>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	0c9a      	lsrs	r2, r3, #18
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000972:	e002      	b.n	800097a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3b01      	subs	r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f9      	bne.n	8000974 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	10000012 	.word	0x10000012
 800099c:	40012000 	.word	0x40012000
 80009a0:	40012300 	.word	0x40012300
 80009a4:	20001514 	.word	0x20001514
 80009a8:	431bde83 	.word	0x431bde83

080009ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80009b4:	4b78      	ldr	r3, [pc, #480]	; (8000b98 <ADC_Init+0x1ec>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	4a77      	ldr	r2, [pc, #476]	; (8000b98 <ADC_Init+0x1ec>)
 80009ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80009be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80009c0:	4b75      	ldr	r3, [pc, #468]	; (8000b98 <ADC_Init+0x1ec>)
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4973      	ldr	r1, [pc, #460]	; (8000b98 <ADC_Init+0x1ec>)
 80009ca:	4313      	orrs	r3, r2
 80009cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6859      	ldr	r1, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	691b      	ldr	r3, [r3, #16]
 80009e8:	021a      	lsls	r2, r3, #8
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	430a      	orrs	r2, r1
 80009f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6859      	ldr	r1, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	430a      	orrs	r2, r1
 8000a12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6899      	ldr	r1, [r3, #8]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68da      	ldr	r2, [r3, #12]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3a:	4a58      	ldr	r2, [pc, #352]	; (8000b9c <ADC_Init+0x1f0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d022      	beq.n	8000a86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6899      	ldr	r1, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6899      	ldr	r1, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	e00f      	b.n	8000aa6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689a      	ldr	r2, [r3, #8]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000aa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 0202 	bic.w	r2, r2, #2
 8000ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6899      	ldr	r1, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	005a      	lsls	r2, r3, #1
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d01b      	beq.n	8000b0c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ae2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000af2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6859      	ldr	r1, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	3b01      	subs	r3, #1
 8000b00:	035a      	lsls	r2, r3, #13
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	e007      	b.n	8000b1c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	051a      	lsls	r2, r3, #20
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6899      	ldr	r1, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b5e:	025a      	lsls	r2, r3, #9
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6899      	ldr	r1, [r3, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	029a      	lsls	r2, r3, #10
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	609a      	str	r2, [r3, #8]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40012300 	.word	0x40012300
 8000b9c:	0f000001 	.word	0x0f000001

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <__NVIC_SetPriorityGrouping+0x40>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x40>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00
 8000be4:	05fa0000 	.word	0x05fa0000

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	; (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	; (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	; (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	; 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	; 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4c 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d22:	f7ff ff61 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	6978      	ldr	r0, [r7, #20]
 8000d2e:	f7ff ffb1 	bl	8000c94 <NVIC_EncodePriority>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff80 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff54 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000d74:	4ba9      	ldr	r3, [pc, #676]	; (800101c <HAL_ETH_Init+0x2b8>)
 8000d76:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e183      	b.n	8001092 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d106      	bne.n	8000da4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f015 f816 	bl	8015dd0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b9e      	ldr	r3, [pc, #632]	; (8001020 <HAL_ETH_Init+0x2bc>)
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	4a9d      	ldr	r2, [pc, #628]	; (8001020 <HAL_ETH_Init+0x2bc>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6453      	str	r3, [r2, #68]	; 0x44
 8000db0:	4b9b      	ldr	r3, [pc, #620]	; (8001020 <HAL_ETH_Init+0x2bc>)
 8000db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000dbc:	4b99      	ldr	r3, [pc, #612]	; (8001024 <HAL_ETH_Init+0x2c0>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4a98      	ldr	r2, [pc, #608]	; (8001024 <HAL_ETH_Init+0x2c0>)
 8000dc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000dc6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000dc8:	4b96      	ldr	r3, [pc, #600]	; (8001024 <HAL_ETH_Init+0x2c0>)
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4994      	ldr	r1, [pc, #592]	; (8001024 <HAL_ETH_Init+0x2c0>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0201 	orr.w	r2, r2, #1
 8000de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dec:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000dee:	f7ff fc21 	bl	8000634 <HAL_GetTick>
 8000df2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000df4:	e011      	b.n	8000e1a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000df6:	f7ff fc1d 	bl	8000634 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e04:	d909      	bls.n	8000e1a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e13b      	b.n	8001092 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e4      	bne.n	8000df6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f023 031c 	bic.w	r3, r3, #28
 8000e3a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000e3c:	f001 ffb8 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8000e40:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4a78      	ldr	r2, [pc, #480]	; (8001028 <HAL_ETH_Init+0x2c4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d908      	bls.n	8000e5c <HAL_ETH_Init+0xf8>
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4a77      	ldr	r2, [pc, #476]	; (800102c <HAL_ETH_Init+0x2c8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d804      	bhi.n	8000e5c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e027      	b.n	8000eac <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	4a73      	ldr	r2, [pc, #460]	; (800102c <HAL_ETH_Init+0x2c8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d908      	bls.n	8000e76 <HAL_ETH_Init+0x112>
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	4a72      	ldr	r2, [pc, #456]	; (8001030 <HAL_ETH_Init+0x2cc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d804      	bhi.n	8000e76 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f043 030c 	orr.w	r3, r3, #12
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	e01a      	b.n	8000eac <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4a6d      	ldr	r2, [pc, #436]	; (8001030 <HAL_ETH_Init+0x2cc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d903      	bls.n	8000e86 <HAL_ETH_Init+0x122>
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4a6c      	ldr	r2, [pc, #432]	; (8001034 <HAL_ETH_Init+0x2d0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d911      	bls.n	8000eaa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4a6a      	ldr	r2, [pc, #424]	; (8001034 <HAL_ETH_Init+0x2d0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d908      	bls.n	8000ea0 <HAL_ETH_Init+0x13c>
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4a69      	ldr	r2, [pc, #420]	; (8001038 <HAL_ETH_Init+0x2d4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d804      	bhi.n	8000ea0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e005      	b.n	8000eac <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	e000      	b.n	8000eac <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000eaa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000eb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fc19 	bl	80016f2 <HAL_ETH_WritePHYRegister>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00b      	beq.n	8000ede <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 fca5 	bl	800181c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0d9      	b.n	8001092 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000ede:	20ff      	movs	r0, #255	; 0xff
 8000ee0:	f7ff fbb4 	bl	800064c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80a7 	beq.w	800103c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000eee:	f7ff fba1 	bl	8000634 <HAL_GetTick>
 8000ef2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2101      	movs	r1, #1
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fb90 	bl	8001622 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f02:	f7ff fb97 	bl	8000634 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d90f      	bls.n	8000f34 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f18:	6939      	ldr	r1, [r7, #16]
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fc7e 	bl	800181c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0ae      	b.n	8001092 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0da      	beq.n	8000ef4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f42:	2100      	movs	r1, #0
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 fbd4 	bl	80016f2 <HAL_ETH_WritePHYRegister>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fc60 	bl	800181c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f64:	2301      	movs	r3, #1
 8000f66:	e094      	b.n	8001092 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f68:	f7ff fb64 	bl	8000634 <HAL_GetTick>
 8000f6c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	461a      	mov	r2, r3
 8000f74:	2101      	movs	r1, #1
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fb53 	bl	8001622 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f7c:	f7ff fb5a 	bl	8000634 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d90f      	bls.n	8000fae <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f92:	6939      	ldr	r1, [r7, #16]
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 fc41 	bl	800181c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e071      	b.n	8001092 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0da      	beq.n	8000f6e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	211f      	movs	r1, #31
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fb2e 	bl	8001622 <HAL_ETH_ReadPHYRegister>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fd0:	6939      	ldr	r1, [r7, #16]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fc22 	bl	800181c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e056      	b.n	8001092 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	e002      	b.n	8000ffe <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	e037      	b.n	8001080 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	e032      	b.n	8001080 <HAL_ETH_Init+0x31c>
 800101a:	bf00      	nop
 800101c:	03938700 	.word	0x03938700
 8001020:	40023800 	.word	0x40023800
 8001024:	40013800 	.word	0x40013800
 8001028:	01312cff 	.word	0x01312cff
 800102c:	02160ebf 	.word	0x02160ebf
 8001030:	039386ff 	.word	0x039386ff
 8001034:	05f5e0ff 	.word	0x05f5e0ff
 8001038:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	085b      	lsrs	r3, r3, #1
 800104a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800104c:	4313      	orrs	r3, r2
 800104e:	b29b      	uxth	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fb4c 	bl	80016f2 <HAL_ETH_WritePHYRegister>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fbd8 	bl	800181c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e00c      	b.n	8001092 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001078:	f640 70ff 	movw	r0, #4095	; 0xfff
 800107c:	f7ff fae6 	bl	800064c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 fbca 	bl	800181c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop

0800109c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d101      	bne.n	80010bc <HAL_ETH_DMATxDescListInit+0x20>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e052      	b.n	8001162 <HAL_ETH_DMATxDescListInit+0xc6>
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2202      	movs	r2, #2
 80010c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e030      	b.n	800113a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	015b      	lsls	r3, r3, #5
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010e8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	461a      	mov	r2, r3
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	d208      	bcs.n	800112e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	015b      	lsls	r3, r3, #5
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	461a      	mov	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	e002      	b.n	8001134 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3ca      	bcc.n	80010d8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f241 0310 	movw	r3, #4112	; 0x1010
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ETH_DMARxDescListInit+0x20>
 800118a:	2302      	movs	r3, #2
 800118c:	e056      	b.n	800123c <HAL_ETH_DMARxDescListInit+0xce>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2202      	movs	r2, #2
 800119a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	e034      	b.n	8001214 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	015b      	lsls	r3, r3, #5
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011ba:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80011c2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d208      	bcs.n	8001208 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	461a      	mov	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	e002      	b.n	800120e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3c6      	bcc.n	80011aa <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	f241 030c 	movw	r3, #4108	; 0x100c
 8001226:	440b      	add	r3, r1
 8001228:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ETH_TransmitFrame+0x24>
 8001268:	2302      	movs	r3, #2
 800126a:	e0cd      	b.n	8001408 <HAL_ETH_TransmitFrame+0x1c0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001292:	2301      	movs	r3, #1
 8001294:	e0b8      	b.n	8001408 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da09      	bge.n	80012b4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2212      	movs	r2, #18
 80012a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0a9      	b.n	8001408 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d915      	bls.n	80012ea <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	4a54      	ldr	r2, [pc, #336]	; (8001414 <HAL_ETH_TransmitFrame+0x1cc>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0a9b      	lsrs	r3, r3, #10
 80012c8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4b51      	ldr	r3, [pc, #324]	; (8001414 <HAL_ETH_TransmitFrame+0x1cc>)
 80012ce:	fba3 1302 	umull	r1, r3, r3, r2
 80012d2:	0a9b      	lsrs	r3, r3, #10
 80012d4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e001      	b.n	80012ee <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d11c      	bne.n	800132e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001302:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800130e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800131e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	62da      	str	r2, [r3, #44]	; 0x2c
 800132c:	e04b      	b.n	80013c6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	e044      	b.n	80013be <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001342:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d107      	bne.n	800135a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001358:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001362:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3b01      	subs	r3, #1
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	429a      	cmp	r2, r3
 800136c:	d116      	bne.n	800139c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800137c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	4a25      	ldr	r2, [pc, #148]	; (8001418 <HAL_ETH_TransmitFrame+0x1d0>)
 8001382:	fb02 f203 	mul.w	r2, r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	4413      	add	r3, r2
 800138a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800138e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800139a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013aa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	3301      	adds	r3, #1
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3b6      	bcc.n	8001334 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f241 0314 	movw	r3, #4116	; 0x1014
 80013e2:	4413      	add	r3, r2
 80013e4:	2204      	movs	r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	f241 0304 	movw	r3, #4100	; 0x1004
 80013f0:	4413      	add	r3, r2
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	371c      	adds	r7, #28
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	ac02b00b 	.word	0xac02b00b
 8001418:	fffffa0c 	.word	0xfffffa0c

0800141c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001432:	2302      	movs	r3, #2
 8001434:	e074      	b.n	8001520 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001446:	e05a      	b.n	80014fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145c:	d10d      	bne.n	800147a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	461a      	mov	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
 8001478:	e041      	b.n	80014fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10b      	bne.n	80014a0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
 800149e:	e02e      	b.n	80014fe <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d103      	bne.n	80014c2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1b      	lsrs	r3, r3, #16
 80014ca:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014ce:	1f1a      	subs	r2, r3, #4
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	461a      	mov	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e010      	b.n	8001520 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db02      	blt.n	800150e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d99c      	bls.n	8001448 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f241 0314 	movw	r3, #4116	; 0x1014
 800153c:	4413      	add	r3, r2
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001544:	2b40      	cmp	r3, #64	; 0x40
 8001546:	d112      	bne.n	800156e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f014 fd01 	bl	8015f50 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	f241 0314 	movw	r3, #4116	; 0x1014
 8001556:	4413      	add	r3, r2
 8001558:	2240      	movs	r2, #64	; 0x40
 800155a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800156c:	e01b      	b.n	80015a6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	f241 0314 	movw	r3, #4116	; 0x1014
 8001576:	4413      	add	r3, r2
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b01      	cmp	r3, #1
 8001580:	d111      	bne.n	80015a6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f839 	bl	80015fa <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001590:	4413      	add	r3, r2
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	f241 0314 	movw	r3, #4116	; 0x1014
 80015ae:	4413      	add	r3, r2
 80015b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f241 0314 	movw	r3, #4116	; 0x1014
 80015be:	4413      	add	r3, r2
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ca:	d112      	bne.n	80015f2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f81e 	bl	800160e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	f241 0314 	movw	r3, #4116	; 0x1014
 80015da:	4413      	add	r3, r2
 80015dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015e0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	460b      	mov	r3, r1
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b82      	cmp	r3, #130	; 0x82
 8001642:	d101      	bne.n	8001648 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001644:	2302      	movs	r3, #2
 8001646:	e050      	b.n	80016ea <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2282      	movs	r2, #130	; 0x82
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 031c 	and.w	r3, r3, #28
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8a1b      	ldrh	r3, [r3, #16]
 8001664:	02db      	lsls	r3, r3, #11
 8001666:	b29b      	uxth	r3, r3
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4313      	orrs	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800166e:	897b      	ldrh	r3, [r7, #10]
 8001670:	019b      	lsls	r3, r3, #6
 8001672:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f023 0302 	bic.w	r3, r3, #2
 8001682:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001694:	f7fe ffce 	bl	8000634 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800169a:	e015      	b.n	80016c8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800169c:	f7fe ffca 	bl	8000634 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016aa:	d309      	bcc.n	80016c0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e014      	b.n	80016ea <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e4      	bne.n	800169c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	460b      	mov	r3, r1
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b42      	cmp	r3, #66	; 0x42
 8001712:	d101      	bne.n	8001718 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	e04e      	b.n	80017b6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2242      	movs	r2, #66	; 0x42
 800171c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 031c 	and.w	r3, r3, #28
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8a1b      	ldrh	r3, [r3, #16]
 8001734:	02db      	lsls	r3, r3, #11
 8001736:	b29b      	uxth	r3, r3
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	4313      	orrs	r3, r2
 800173c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800173e:	897b      	ldrh	r3, [r7, #10]
 8001740:	019b      	lsls	r3, r3, #6
 8001742:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800176e:	f7fe ff61 	bl	8000634 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001774:	e015      	b.n	80017a2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001776:	f7fe ff5d 	bl	8000634 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d309      	bcc.n	800179a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e00d      	b.n	80017b6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e4      	bne.n	8001776 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_ETH_Start+0x16>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e01f      	b.n	8001814 <HAL_ETH_Start+0x56>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fa1b 	bl	8001c20 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fa35 	bl	8001c5a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa7f 	bl	8001cf4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fa4c 	bl	8001c94 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fa61 	bl	8001cc4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0b0      	sub	sp, #192	; 0xc0
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001838:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001840:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800184a:	2300      	movs	r3, #0
 800184c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001866:	663b      	str	r3, [r7, #96]	; 0x60
 8001868:	e001      	b.n	800186e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800186e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001872:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001878:	2300      	movs	r3, #0
 800187a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80018f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f4:	4bab      	ldr	r3, [pc, #684]	; (8001ba4 <ETH_MACDMAConfig+0x388>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80018fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80018fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001900:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001904:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001908:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800190e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001912:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001916:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800191c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800191e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001920:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001924:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001928:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800192a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800192c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800192e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001930:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001932:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001936:	4313      	orrs	r3, r2
 8001938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001944:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001950:	2001      	movs	r0, #1
 8001952:	f7fe fe7b 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800195e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001960:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001964:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001968:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800196a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800196e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001974:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001976:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800197a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800197c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001980:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001984:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800198c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800198e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800199a:	2001      	movs	r0, #1
 800199c:	f7fe fe56 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019a8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80019b2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80019bc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80019c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019cc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019d0:	4013      	ands	r3, r2
 80019d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019da:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80019dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019e0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80019e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80019e6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80019e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80019ec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80019ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80019f2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80019f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80019f8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a0c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7fe fe17 	bl	800064c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a26:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a28:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7fe fe02 	bl	800064c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a50:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a5a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001a60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a64:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001a76:	2304      	movs	r3, #4
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a8a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a90:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001aa6:	4413      	add	r3, r2
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001aae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <ETH_MACDMAConfig+0x38c>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001aba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001abc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001abe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001ac0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001ac2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ac4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ac6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ac8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001aca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001acc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001ace:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001ad2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ad6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ada:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001adc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f241 0318 	movw	r3, #4120	; 0x1018
 8001aee:	4413      	add	r3, r2
 8001af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001af4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f241 0318 	movw	r3, #4120	; 0x1018
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7fe fda0 	bl	800064c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f241 0318 	movw	r3, #4120	; 0x1018
 8001b14:	4413      	add	r3, r2
 8001b16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b20:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b24:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b28:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b2c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b30:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b32:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001b36:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7fe fd79 	bl	800064c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b66:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d10d      	bne.n	8001b8c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b78:	4413      	add	r3, r2
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6811      	ldr	r1, [r2, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <ETH_MACDMAConfig+0x390>)
 8001b82:	431a      	orrs	r2, r3
 8001b84:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b88:	440b      	add	r3, r1
 8001b8a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	461a      	mov	r2, r3
 8001b92:	2100      	movs	r1, #0
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f80b 	bl	8001bb0 <ETH_MACAddressConfig>
}
 8001b9a:	bf00      	nop
 8001b9c:	37c0      	adds	r7, #192	; 0xc0
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	ff20810f 	.word	0xff20810f
 8001ba8:	f8de3f23 	.word	0xf8de3f23
 8001bac:	00010040 	.word	0x00010040

08001bb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3305      	adds	r3, #5
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	3204      	adds	r2, #4
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <ETH_MACAddressConfig+0x68>)
 8001bd2:	4413      	add	r3, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3303      	adds	r3, #3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	061a      	lsls	r2, r3, #24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3302      	adds	r3, #2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <ETH_MACAddressConfig+0x6c>)
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	6013      	str	r3, [r2, #0]
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40028040 	.word	0x40028040
 8001c1c:	40028044 	.word	0x40028044

08001c20 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0208 	orr.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f7fe fd01 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0204 	orr.w	r2, r2, #4
 8001c74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7fe fce4 	bl	800064c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ca4:	4413      	add	r3, r2
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6811      	ldr	r1, [r2, #0]
 8001cac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cb0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cb4:	440b      	add	r3, r1
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6811      	ldr	r1, [r2, #0]
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ce4:	440b      	add	r3, r1
 8001ce6:	601a      	str	r2, [r3, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6811      	ldr	r1, [r2, #0]
 8001d10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d14:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d18:	440b      	add	r3, r1
 8001d1a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d24:	4413      	add	r3, r2
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7fe fc8e 	bl	800064c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d3a:	440b      	add	r3, r1
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e175      	b.n	8002054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8164 	bne.w	800204e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d00b      	beq.n	8001da6 <HAL_GPIO_Init+0x5e>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d9a:	2b11      	cmp	r3, #17
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b12      	cmp	r3, #18
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x100>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80be 	beq.w	800204e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a64      	ldr	r2, [pc, #400]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <HAL_GPIO_Init+0x320>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eea:	4a60      	ldr	r2, [pc, #384]	; (800206c <HAL_GPIO_Init+0x324>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a57      	ldr	r2, [pc, #348]	; (8002070 <HAL_GPIO_Init+0x328>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d037      	beq.n	8001f86 <HAL_GPIO_Init+0x23e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_GPIO_Init+0x32c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d031      	beq.n	8001f82 <HAL_GPIO_Init+0x23a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a55      	ldr	r2, [pc, #340]	; (8002078 <HAL_GPIO_Init+0x330>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x236>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a54      	ldr	r2, [pc, #336]	; (800207c <HAL_GPIO_Init+0x334>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x232>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a53      	ldr	r2, [pc, #332]	; (8002080 <HAL_GPIO_Init+0x338>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a52      	ldr	r2, [pc, #328]	; (8002084 <HAL_GPIO_Init+0x33c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_GPIO_Init+0x340>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a50      	ldr	r2, [pc, #320]	; (800208c <HAL_GPIO_Init+0x344>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4f      	ldr	r2, [pc, #316]	; (8002090 <HAL_GPIO_Init+0x348>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x21e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4e      	ldr	r2, [pc, #312]	; (8002094 <HAL_GPIO_Init+0x34c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f5e:	2309      	movs	r3, #9
 8001f60:	e012      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f62:	230a      	movs	r3, #10
 8001f64:	e010      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f66:	2308      	movs	r3, #8
 8001f68:	e00e      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00c      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00a      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f72:	2305      	movs	r3, #5
 8001f74:	e008      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f76:	2304      	movs	r3, #4
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e004      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_GPIO_Init+0x240>
 8001f86:	2300      	movs	r3, #0
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f002 0203 	and.w	r2, r2, #3
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	4093      	lsls	r3, r2
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f98:	4934      	ldr	r1, [pc, #208]	; (800206c <HAL_GPIO_Init+0x324>)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff4:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_GPIO_Init+0x350>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_GPIO_Init+0x350>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_GPIO_Init+0x350>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_GPIO_Init+0x350>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3301      	adds	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	2b0f      	cmp	r3, #15
 8002058:	f67f ae86 	bls.w	8001d68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800205c:	bf00      	nop
 800205e:	3724      	adds	r7, #36	; 0x24
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40021c00 	.word	0x40021c00
 8002090:	40022000 	.word	0x40022000
 8002094:	40022400 	.word	0x40022400
 8002098:	40013c00 	.word	0x40013c00

0800209c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	460b      	mov	r3, r1
 8002108:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800211e:	e002      	b.n	8002126 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002120:	887a      	ldrh	r2, [r7, #2]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d006      	beq.n	8002158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f806 	bl	8002164 <HAL_GPIO_EXTI_Callback>
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800217a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217c:	b08f      	sub	sp, #60	; 0x3c
 800217e:	af0a      	add	r7, sp, #40	; 0x28
 8002180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e116      	b.n	80023ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f015 fbd2 	bl	8017950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f8de 	bl	800538c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	687e      	ldr	r6, [r7, #4]
 80021d8:	466d      	mov	r5, sp
 80021da:	f106 0410 	add.w	r4, r6, #16
 80021de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ee:	1d33      	adds	r3, r6, #4
 80021f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f2:	6838      	ldr	r0, [r7, #0]
 80021f4:	f003 f872 	bl	80052dc <USB_CoreInit>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0d7      	b.n	80023ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f003 f8cc 	bl	80053ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	e04a      	b.n	80022b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	333d      	adds	r3, #61	; 0x3d
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	333c      	adds	r3, #60	; 0x3c
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	b298      	uxth	r0, r3
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	3342      	adds	r3, #66	; 0x42
 8002258:	4602      	mov	r2, r0
 800225a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	333f      	adds	r3, #63	; 0x3f
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	3344      	adds	r3, #68	; 0x44
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3348      	adds	r3, #72	; 0x48
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	3350      	adds	r3, #80	; 0x50
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	3301      	adds	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3af      	bcc.n	800221c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e044      	b.n	800234c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	3301      	adds	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3b5      	bcc.n	80022c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	687e      	ldr	r6, [r7, #4]
 800235e:	466d      	mov	r5, sp
 8002360:	f106 0410 	add.w	r4, r6, #16
 8002364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002370:	e885 0003 	stmia.w	r5, {r0, r1}
 8002374:	1d33      	adds	r3, r6, #4
 8002376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f003 f843 	bl	8005404 <USB_DevInit>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e014      	b.n	80023ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f80b 	bl	80023c4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f9f5 	bl	80057a2 <USB_DevDisconnect>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080023c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_PCDEx_ActivateLPM+0x44>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	10000003 	.word	0x10000003

0800240c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000

0800242c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	; 0x40
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800245a:	f7fe f8eb 	bl	8000634 <HAL_GetTick>
 800245e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002460:	e009      	b.n	8002476 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002462:	f7fe f8e7 	bl	8000634 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002470:	d901      	bls.n	8002476 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e022      	b.n	80024bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002476:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002482:	d1ee      	bne.n	8002462 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800248a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002490:	f7fe f8d0 	bl	8000634 <HAL_GetTick>
 8002494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002496:	e009      	b.n	80024ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002498:	f7fe f8cc 	bl	8000634 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a6:	d901      	bls.n	80024ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e007      	b.n	80024bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024b8:	d1ee      	bne.n	8002498 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e29b      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8087 	beq.w	80025fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024f0:	4b96      	ldr	r3, [pc, #600]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d00c      	beq.n	8002516 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fc:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b08      	cmp	r3, #8
 8002506:	d112      	bne.n	800252e <HAL_RCC_OscConfig+0x62>
 8002508:	4b90      	ldr	r3, [pc, #576]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002514:	d10b      	bne.n	800252e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002516:	4b8d      	ldr	r3, [pc, #564]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d06c      	beq.n	80025fc <HAL_RCC_OscConfig+0x130>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d168      	bne.n	80025fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e275      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x7a>
 8002538:	4b84      	ldr	r3, [pc, #528]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a83      	ldr	r2, [pc, #524]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e02e      	b.n	80025a4 <HAL_RCC_OscConfig+0xd8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x9c>
 800254e:	4b7f      	ldr	r3, [pc, #508]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a7e      	ldr	r2, [pc, #504]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7b      	ldr	r2, [pc, #492]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e01d      	b.n	80025a4 <HAL_RCC_OscConfig+0xd8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002570:	d10c      	bne.n	800258c <HAL_RCC_OscConfig+0xc0>
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a75      	ldr	r2, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a72      	ldr	r2, [pc, #456]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	e00b      	b.n	80025a4 <HAL_RCC_OscConfig+0xd8>
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a6e      	ldr	r2, [pc, #440]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6b      	ldr	r2, [pc, #428]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe f842 	bl	8000634 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe f83e 	bl	8000634 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e229      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe8>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe f82e 	bl	8000634 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7fe f82a 	bl	8000634 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e215      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x110>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d069      	beq.n	80026de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800260a:	4b50      	ldr	r3, [pc, #320]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002616:	4b4d      	ldr	r3, [pc, #308]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b08      	cmp	r3, #8
 8002620:	d11c      	bne.n	800265c <HAL_RCC_OscConfig+0x190>
 8002622:	4b4a      	ldr	r3, [pc, #296]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b47      	ldr	r3, [pc, #284]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_RCC_OscConfig+0x17a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d001      	beq.n	8002646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e1e9      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	493d      	ldr	r1, [pc, #244]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e040      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d023      	beq.n	80026ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a38      	ldr	r2, [pc, #224]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fd ffe0 	bl	8000634 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002678:	f7fd ffdc 	bl	8000634 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1c7      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4929      	ldr	r1, [pc, #164]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
 80026aa:	e018      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fd ffbc 	bl	8000634 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fd ffb8 	bl	8000634 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1a3      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d038      	beq.n	800275c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	4a15      	ldr	r2, [pc, #84]	; (800274c <HAL_RCC_OscConfig+0x280>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7fd ff99 	bl	8000634 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7fd ff95 	bl	8000634 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e180      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x23a>
 8002724:	e01a      	b.n	800275c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x280>)
 8002728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x280>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fd ff7f 	bl	8000634 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273a:	f7fd ff7b 	bl	8000634 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d903      	bls.n	8002750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e166      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
 800274c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b92      	ldr	r3, [pc, #584]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80a4 	beq.w	80028b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b89      	ldr	r3, [pc, #548]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a88      	ldr	r2, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <HAL_RCC_OscConfig+0x4d4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d118      	bne.n	80027d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800279e:	4b80      	ldr	r3, [pc, #512]	; (80029a0 <HAL_RCC_OscConfig+0x4d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7f      	ldr	r2, [pc, #508]	; (80029a0 <HAL_RCC_OscConfig+0x4d4>)
 80027a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027aa:	f7fd ff43 	bl	8000634 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b2:	f7fd ff3f 	bl	8000634 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b64      	cmp	r3, #100	; 0x64
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e12a      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c4:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x4d4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x31a>
 80027d8:	4b70      	ldr	r3, [pc, #448]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a6f      	ldr	r2, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x33c>
 80027ee:	4b6b      	ldr	r3, [pc, #428]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a6a      	ldr	r2, [pc, #424]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a67      	ldr	r2, [pc, #412]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x35e>
 8002810:	4b62      	ldr	r3, [pc, #392]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a61      	ldr	r2, [pc, #388]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b5f      	ldr	r3, [pc, #380]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a5e      	ldr	r2, [pc, #376]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a5b      	ldr	r2, [pc, #364]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fd fef3 	bl	8000634 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fd feef 	bl	8000634 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e0d8      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002868:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x386>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7fd fedd 	bl	8000634 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fd fed9 	bl	8000634 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0c2      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b3d      	ldr	r3, [pc, #244]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a3c      	ldr	r2, [pc, #240]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80ae 	beq.w	8002a18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d06d      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d14b      	bne.n	8002968 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a31      	ldr	r2, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fd feaa 	bl	8000634 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fd fea6 	bl	8000634 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e091      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	019b      	lsls	r3, r3, #6
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	491b      	ldr	r1, [pc, #108]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fd fe78 	bl	8000634 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fd fe74 	bl	8000634 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e05f      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x47c>
 8002966:	e057      	b.n	8002a18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0b      	ldr	r2, [pc, #44]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fd fe5e 	bl	8000634 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fd fe5a 	bl	8000634 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e045      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCC_OscConfig+0x4d0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x4b0>
 800299a:	e03d      	b.n	8002a18 <HAL_RCC_OscConfig+0x54c>
 800299c:	40023800 	.word	0x40023800
 80029a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <HAL_RCC_OscConfig+0x558>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d030      	beq.n	8002a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d129      	bne.n	8002a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d122      	bne.n	8002a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029dc:	4293      	cmp	r3, r2
 80029de:	d119      	bne.n	8002a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d10f      	bne.n	8002a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0d0      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d910      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 020f 	bic.w	r2, r3, #15
 8002a56:	4965      	ldr	r1, [pc, #404]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0b8      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	494d      	ldr	r1, [pc, #308]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d040      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d115      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e073      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afa:	4b3d      	ldr	r3, [pc, #244]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06b      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4936      	ldr	r1, [pc, #216]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fd fd8a 	bl	8000634 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fd fd86 	bl	8000634 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e053      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4c:	4b27      	ldr	r3, [pc, #156]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d210      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5a:	4b24      	ldr	r3, [pc, #144]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 020f 	bic.w	r2, r3, #15
 8002b62:	4922      	ldr	r1, [pc, #136]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e032      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4916      	ldr	r1, [pc, #88]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bba:	f000 f821 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bcc:	5cd3      	ldrb	r3, [r2, r3]
 8002bce:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1d4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f014 ff14 	bl	8017a08 <HAL_InitTick>

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023c00 	.word	0x40023c00
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	0801f878 	.word	0x0801f878
 8002bf8:	20001514 	.word	0x20001514
 8002bfc:	20000000 	.word	0x20000000

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d007      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x32>
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d008      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x38>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 80b4 	bne.w	8002d94 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b5e      	ldr	r3, [pc, #376]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c2e:	60bb      	str	r3, [r7, #8]
      break;
 8002c30:	e0b3      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c32:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c34:	60bb      	str	r3, [r7, #8]
      break;
 8002c36:	e0b0      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b5a      	ldr	r3, [pc, #360]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c40:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c42:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d04a      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	f04f 0400 	mov.w	r4, #0
 8002c58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	ea03 0501 	and.w	r5, r3, r1
 8002c64:	ea04 0602 	and.w	r6, r4, r2
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4632      	mov	r2, r6
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f04f 0400 	mov.w	r4, #0
 8002c74:	0154      	lsls	r4, r2, #5
 8002c76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c7a:	014b      	lsls	r3, r1, #5
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4622      	mov	r2, r4
 8002c80:	1b49      	subs	r1, r1, r5
 8002c82:	eb62 0206 	sbc.w	r2, r2, r6
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	f04f 0400 	mov.w	r4, #0
 8002c8e:	0194      	lsls	r4, r2, #6
 8002c90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c94:	018b      	lsls	r3, r1, #6
 8002c96:	1a5b      	subs	r3, r3, r1
 8002c98:	eb64 0402 	sbc.w	r4, r4, r2
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	00e2      	lsls	r2, r4, #3
 8002ca6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002caa:	00d9      	lsls	r1, r3, #3
 8002cac:	460b      	mov	r3, r1
 8002cae:	4614      	mov	r4, r2
 8002cb0:	195b      	adds	r3, r3, r5
 8002cb2:	eb44 0406 	adc.w	r4, r4, r6
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	0262      	lsls	r2, r4, #9
 8002cc0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cc4:	0259      	lsls	r1, r3, #9
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4614      	mov	r4, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	4621      	mov	r1, r4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f04f 0400 	mov.w	r4, #0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4623      	mov	r3, r4
 8002cd8:	f7fd fb0a 	bl	80002f0 <__aeabi_uldivmod>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	e049      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	f04f 0400 	mov.w	r4, #0
 8002cee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	ea03 0501 	and.w	r5, r3, r1
 8002cfa:	ea04 0602 	and.w	r6, r4, r2
 8002cfe:	4629      	mov	r1, r5
 8002d00:	4632      	mov	r2, r6
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f04f 0400 	mov.w	r4, #0
 8002d0a:	0154      	lsls	r4, r2, #5
 8002d0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d10:	014b      	lsls	r3, r1, #5
 8002d12:	4619      	mov	r1, r3
 8002d14:	4622      	mov	r2, r4
 8002d16:	1b49      	subs	r1, r1, r5
 8002d18:	eb62 0206 	sbc.w	r2, r2, r6
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	0194      	lsls	r4, r2, #6
 8002d26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d2a:	018b      	lsls	r3, r1, #6
 8002d2c:	1a5b      	subs	r3, r3, r1
 8002d2e:	eb64 0402 	sbc.w	r4, r4, r2
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	00e2      	lsls	r2, r4, #3
 8002d3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d40:	00d9      	lsls	r1, r3, #3
 8002d42:	460b      	mov	r3, r1
 8002d44:	4614      	mov	r4, r2
 8002d46:	195b      	adds	r3, r3, r5
 8002d48:	eb44 0406 	adc.w	r4, r4, r6
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	02a2      	lsls	r2, r4, #10
 8002d56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d5a:	0299      	lsls	r1, r3, #10
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4614      	mov	r4, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	4621      	mov	r1, r4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f04f 0400 	mov.w	r4, #0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	f7fd fabf 	bl	80002f0 <__aeabi_uldivmod>
 8002d72:	4603      	mov	r3, r0
 8002d74:	460c      	mov	r4, r1
 8002d76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	60bb      	str	r3, [r7, #8]
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d96:	60bb      	str	r3, [r7, #8]
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200

08002db0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20001514 	.word	0x20001514

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dcc:	f7ff fff0 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4601      	mov	r1, r0
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	0a9b      	lsrs	r3, r3, #10
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4a03      	ldr	r2, [pc, #12]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	0801f888 	.word	0x0801f888

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df4:	f7ff ffdc 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002df8:	4601      	mov	r1, r0
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0b5b      	lsrs	r3, r3, #13
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4a03      	ldr	r2, [pc, #12]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	0801f888 	.word	0x0801f888

08002e18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	220f      	movs	r2, #15
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0203 	and.w	r2, r3, #3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_RCC_GetClockConfig+0x5c>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_RCC_GetClockConfig+0x5c>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_GetClockConfig+0x5c>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	08db      	lsrs	r3, r3, #3
 8002e52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e5a:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_RCC_GetClockConfig+0x60>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 020f 	and.w	r2, r3, #15
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	601a      	str	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40023c00 	.word	0x40023c00

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d012      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea4:	4b69      	ldr	r3, [pc, #420]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eae:	6093      	str	r3, [r2, #8]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	4964      	ldr	r1, [pc, #400]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d017      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	4959      	ldr	r1, [pc, #356]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef4:	d101      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d017      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f12:	4b4e      	ldr	r3, [pc, #312]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	494a      	ldr	r1, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f30:	d101      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 808b 	beq.w	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	4a39      	ldr	r2, [pc, #228]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a34      	ldr	r2, [pc, #208]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fd fb56 	bl	8000634 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fd fb52 	bl	8000634 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e38d      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d035      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d02e      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fde:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fea:	4a18      	ldr	r2, [pc, #96]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ff0:	4b16      	ldr	r3, [pc, #88]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d114      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fd fb1a 	bl	8000634 <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fd fb16 	bl	8000634 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e34f      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0ee      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003032:	d111      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003042:	400b      	ands	r3, r1
 8003044:	4901      	ldr	r1, [pc, #4]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
 800304a:	e00b      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800304c:	40023800 	.word	0x40023800
 8003050:	40007000 	.word	0x40007000
 8003054:	0ffffcff 	.word	0x0ffffcff
 8003058:	4bb3      	ldr	r3, [pc, #716]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4ab2      	ldr	r2, [pc, #712]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003062:	6093      	str	r3, [r2, #8]
 8003064:	4bb0      	ldr	r3, [pc, #704]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	49ad      	ldr	r1, [pc, #692]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003072:	4313      	orrs	r3, r2
 8003074:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003082:	4ba9      	ldr	r3, [pc, #676]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003088:	4aa7      	ldr	r2, [pc, #668]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800308a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003092:	4ba5      	ldr	r3, [pc, #660]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003094:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	49a2      	ldr	r1, [pc, #648]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b0:	4b9d      	ldr	r3, [pc, #628]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030be:	499a      	ldr	r1, [pc, #616]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d2:	4b95      	ldr	r3, [pc, #596]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e0:	4991      	ldr	r1, [pc, #580]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f4:	4b8c      	ldr	r3, [pc, #560]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003102:	4989      	ldr	r1, [pc, #548]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003116:	4b84      	ldr	r3, [pc, #528]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4980      	ldr	r1, [pc, #512]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003138:	4b7b      	ldr	r3, [pc, #492]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4978      	ldr	r1, [pc, #480]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f023 020c 	bic.w	r2, r3, #12
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003168:	496f      	ldr	r1, [pc, #444]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	4967      	ldr	r1, [pc, #412]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	495e      	ldr	r1, [pc, #376]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c0:	4b59      	ldr	r3, [pc, #356]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ce:	4956      	ldr	r1, [pc, #344]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031e2:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	494d      	ldr	r1, [pc, #308]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003204:	4b48      	ldr	r3, [pc, #288]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	4945      	ldr	r1, [pc, #276]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	493c      	ldr	r1, [pc, #240]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003248:	4b37      	ldr	r3, [pc, #220]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	4934      	ldr	r1, [pc, #208]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d011      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003278:	492b      	ldr	r1, [pc, #172]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003288:	d101      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800329a:	2301      	movs	r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032aa:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	491b      	ldr	r1, [pc, #108]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032dc:	4912      	ldr	r1, [pc, #72]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003300:	4909      	ldr	r1, [pc, #36]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	e002      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	4985      	ldr	r1, [pc, #532]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003340:	4b80      	ldr	r3, [pc, #512]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003346:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	497c      	ldr	r1, [pc, #496]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d005      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003366:	f040 80d6 	bne.w	8003516 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003376:	f7fd f95d 	bl	8000634 <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800337e:	f7fd f959 	bl	8000634 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b64      	cmp	r3, #100	; 0x64
 800338a:	d901      	bls.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e194      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003390:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d021      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x570>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d11d      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033b0:	4b64      	ldr	r3, [pc, #400]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033be:	4b61      	ldr	r3, [pc, #388]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c4:	0e1b      	lsrs	r3, r3, #24
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	019a      	lsls	r2, r3, #6
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	071b      	lsls	r3, r3, #28
 80033e4:	4957      	ldr	r1, [pc, #348]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800340a:	2b00      	cmp	r3, #0
 800340c:	d02e      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003416:	d129      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003418:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	0f1b      	lsrs	r3, r3, #28
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	019a      	lsls	r2, r3, #6
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	431a      	orrs	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	071b      	lsls	r3, r3, #28
 800344c:	493d      	ldr	r1, [pc, #244]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003454:	4b3b      	ldr	r3, [pc, #236]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800345a:	f023 021f 	bic.w	r2, r3, #31
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	3b01      	subs	r3, #1
 8003464:	4937      	ldr	r1, [pc, #220]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01d      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800347a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347e:	0e1b      	lsrs	r3, r3, #24
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003486:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348c:	0f1b      	lsrs	r3, r3, #28
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	019a      	lsls	r2, r3, #6
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	071b      	lsls	r3, r3, #28
 80034ac:	4925      	ldr	r1, [pc, #148]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d011      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	019a      	lsls	r2, r3, #6
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	071b      	lsls	r3, r3, #28
 80034dc:	4919      	ldr	r1, [pc, #100]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a16      	ldr	r2, [pc, #88]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fd f8a0 	bl	8000634 <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034f8:	f7fd f89c 	bl	8000634 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0d7      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b01      	cmp	r3, #1
 800351a:	f040 80cd 	bne.w	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352a:	f7fd f883 	bl	8000634 <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003532:	f7fd f87f 	bl	8000634 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b64      	cmp	r3, #100	; 0x64
 800353e:	d903      	bls.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0ba      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003554:	d0ed      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02e      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d12a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800357e:	4b51      	ldr	r3, [pc, #324]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800358c:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	0f1b      	lsrs	r3, r3, #28
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	019a      	lsls	r2, r3, #6
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	071b      	lsls	r3, r3, #28
 80035b2:	4944      	ldr	r1, [pc, #272]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035ba:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	021b      	lsls	r3, r3, #8
 80035cc:	493d      	ldr	r1, [pc, #244]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d022      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e8:	d11d      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	0e1b      	lsrs	r3, r3, #24
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035f8:	4b32      	ldr	r3, [pc, #200]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fe:	0f1b      	lsrs	r3, r3, #28
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	019a      	lsls	r2, r3, #6
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	431a      	orrs	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	071b      	lsls	r3, r3, #28
 800361e:	4929      	ldr	r1, [pc, #164]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d028      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	0e1b      	lsrs	r3, r3, #24
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	019a      	lsls	r2, r3, #6
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	431a      	orrs	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	071b      	lsls	r3, r3, #28
 8003666:	4917      	ldr	r1, [pc, #92]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4911      	ldr	r1, [pc, #68]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800368a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003690:	f7fc ffd0 	bl	8000634 <HAL_GetTick>
 8003694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003698:	f7fc ffcc 	bl	8000634 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e007      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b6:	d1ef      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800

080036c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e01d      	b.n	8003716 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f014 f83c 	bl	801776c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f000 fc20 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_TIM_Base_Start+0x50>)
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d00b      	beq.n	800375a <HAL_TIM_Base_Start+0x3a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d007      	beq.n	800375a <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	00010007 	.word	0x00010007

08003774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	4b0c      	ldr	r3, [pc, #48]	; (80037c4 <HAL_TIM_Base_Start_IT+0x50>)
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b06      	cmp	r3, #6
 800379c:	d00b      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0x42>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d007      	beq.n	80037b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	00010007 	.word	0x00010007

080037c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e01d      	b.n	8003816 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f815 	bl	800381e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3304      	adds	r3, #4
 8003804:	4619      	mov	r1, r3
 8003806:	4610      	mov	r0, r2
 8003808:	f000 fba0 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e01d      	b.n	8003880 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f013 fff1 	bl	8017840 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f000 fb6b 	bl	8003f4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e02d      	b.n	80038f8 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f825 	bl	8003900 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 fb3f 	bl	8003f4c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0208 	bic.w	r2, r2, #8
 80038dc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b02      	cmp	r3, #2
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0202 	mvn.w	r2, #2
 8003940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fada 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 facc 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fadd 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b04      	cmp	r3, #4
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0204 	mvn.w	r2, #4
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fab0 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 faa2 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fab3 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0208 	mvn.w	r2, #8
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2204      	movs	r2, #4
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa86 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa78 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fa89 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0210 	mvn.w	r2, #16
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2208      	movs	r2, #8
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa5c 	bl	8003f10 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa4e 	bl	8003efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fa5f 	bl	8003f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0201 	mvn.w	r2, #1
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f013 fe00 	bl	8017698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 ff9e 	bl	8004a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	d10e      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	d107      	bne.n	8003af2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 ff91 	bl	8004a14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d10e      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b40      	cmp	r3, #64	; 0x40
 8003b0c:	d107      	bne.n	8003b1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa0d 	bl	8003f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d10e      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d107      	bne.n	8003b4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0220 	mvn.w	r2, #32
 8003b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 ff51 	bl	80049ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_OC_ConfigChannel+0x1a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e06c      	b.n	8003c48 <HAL_TIM_OC_ConfigChannel+0xf4>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b14      	cmp	r3, #20
 8003b82:	d857      	bhi.n	8003c34 <HAL_TIM_OC_ConfigChannel+0xe0>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003be1 	.word	0x08003be1
 8003b90:	08003c35 	.word	0x08003c35
 8003b94:	08003c35 	.word	0x08003c35
 8003b98:	08003c35 	.word	0x08003c35
 8003b9c:	08003bef 	.word	0x08003bef
 8003ba0:	08003c35 	.word	0x08003c35
 8003ba4:	08003c35 	.word	0x08003c35
 8003ba8:	08003c35 	.word	0x08003c35
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c35 	.word	0x08003c35
 8003bb8:	08003c35 	.word	0x08003c35
 8003bbc:	08003c0b 	.word	0x08003c0b
 8003bc0:	08003c35 	.word	0x08003c35
 8003bc4:	08003c35 	.word	0x08003c35
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003c35 	.word	0x08003c35
 8003bd8:	08003c35 	.word	0x08003c35
 8003bdc:	08003c27 	.word	0x08003c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fa50 	bl	800408c <TIM_OC1_SetConfig>
      break;
 8003bec:	e023      	b.n	8003c36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fabb 	bl	8004170 <TIM_OC2_SetConfig>
      break;
 8003bfa:	e01c      	b.n	8003c36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fb2c 	bl	8004260 <TIM_OC3_SetConfig>
      break;
 8003c08:	e015      	b.n	8003c36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fb9b 	bl	800434c <TIM_OC4_SetConfig>
      break;
 8003c16:	e00e      	b.n	8003c36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fbec 	bl	80043fc <TIM_OC5_SetConfig>
      break;
 8003c24:	e007      	b.n	8003c36 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fc37 	bl	80044a0 <TIM_OC6_SetConfig>
      break;
 8003c32:	e000      	b.n	8003c36 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8003c34:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e08a      	b.n	8003d80 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f000 fc5a 	bl	8004548 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 020c 	bic.w	r2, r2, #12
 8003ca2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
 8003cb6:	e05a      	b.n	8003d6e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f000 fcde 	bl	800468e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699a      	ldr	r2, [r3, #24]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ce0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6999      	ldr	r1, [r3, #24]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	021a      	lsls	r2, r3, #8
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	619a      	str	r2, [r3, #24]
 8003cf6:	e03a      	b.n	8003d6e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11b      	bne.n	8003d36 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f000 fd2b 	bl	8004768 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 020c 	bic.w	r2, r2, #12
 8003d20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
 8003d34:	e01b      	b.n	8003d6e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6819      	ldr	r1, [r3, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f000 fd4b 	bl	80047e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d58:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69d9      	ldr	r1, [r3, #28]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	021a      	lsls	r2, r3, #8
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIM_ConfigClockSource+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e0a6      	b.n	8003eee <HAL_TIM_ConfigClockSource+0x166>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_TIM_ConfigClockSource+0x170>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d067      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0x120>
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d80b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x6c>
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d073      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0x140>
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d802      	bhi.n	8003dea <HAL_TIM_ConfigClockSource+0x62>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d06f      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003de8:	e078      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d06c      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0x140>
 8003dee:	2b30      	cmp	r3, #48	; 0x30
 8003df0:	d06a      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003df2:	e073      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003df4:	2b70      	cmp	r3, #112	; 0x70
 8003df6:	d00d      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x8c>
 8003df8:	2b70      	cmp	r3, #112	; 0x70
 8003dfa:	d804      	bhi.n	8003e06 <HAL_TIM_ConfigClockSource+0x7e>
 8003dfc:	2b50      	cmp	r3, #80	; 0x50
 8003dfe:	d033      	beq.n	8003e68 <HAL_TIM_ConfigClockSource+0xe0>
 8003e00:	2b60      	cmp	r3, #96	; 0x60
 8003e02:	d041      	beq.n	8003e88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e04:	e06a      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d066      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x152>
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	d017      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e12:	e063      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6899      	ldr	r1, [r3, #8]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f000 fd34 	bl	8004890 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	609a      	str	r2, [r3, #8]
      break;
 8003e40:	e04c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6899      	ldr	r1, [r3, #8]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f000 fd1d 	bl	8004890 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e64:	609a      	str	r2, [r3, #8]
      break;
 8003e66:	e039      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f000 fbdb 	bl	8004630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2150      	movs	r1, #80	; 0x50
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fcea 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8003e86:	e029      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f000 fc37 	bl	8004708 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2160      	movs	r1, #96	; 0x60
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fcda 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8003ea6:	e019      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	f000 fbbb 	bl	8004630 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fcca 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8003ec6:	e009      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fcc1 	bl	800485a <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e000      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	fffeff88 	.word	0xfffeff88

08003efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a40      	ldr	r2, [pc, #256]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d00f      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a3d      	ldr	r2, [pc, #244]	; (8004064 <TIM_Base_SetConfig+0x118>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a3c      	ldr	r2, [pc, #240]	; (8004068 <TIM_Base_SetConfig+0x11c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a3b      	ldr	r2, [pc, #236]	; (800406c <TIM_Base_SetConfig+0x120>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3a      	ldr	r2, [pc, #232]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d02b      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fac:	d027      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2c      	ldr	r2, [pc, #176]	; (8004064 <TIM_Base_SetConfig+0x118>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d023      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <TIM_Base_SetConfig+0x11c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01f      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2a      	ldr	r2, [pc, #168]	; (800406c <TIM_Base_SetConfig+0x120>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01b      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a29      	ldr	r2, [pc, #164]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d017      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <TIM_Base_SetConfig+0x128>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a27      	ldr	r2, [pc, #156]	; (8004078 <TIM_Base_SetConfig+0x12c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <TIM_Base_SetConfig+0x130>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <TIM_Base_SetConfig+0x134>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <TIM_Base_SetConfig+0x138>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <TIM_Base_SetConfig+0x13c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <TIM_Base_SetConfig+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_Base_SetConfig+0xf8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <TIM_Base_SetConfig+0x124>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d103      	bne.n	800404c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	615a      	str	r2, [r3, #20]
}
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40010400 	.word	0x40010400
 8004074:	40014000 	.word	0x40014000
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800
 8004080:	40001800 	.word	0x40001800
 8004084:	40001c00 	.word	0x40001c00
 8004088:	40002000 	.word	0x40002000

0800408c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0201 	bic.w	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <TIM_OC1_SetConfig+0xd8>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f023 0302 	bic.w	r3, r3, #2
 80040d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <TIM_OC1_SetConfig+0xdc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC1_SetConfig+0x64>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a20      	ldr	r2, [pc, #128]	; (800416c <TIM_OC1_SetConfig+0xe0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10c      	bne.n	800410a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f023 0308 	bic.w	r3, r3, #8
 80040f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <TIM_OC1_SetConfig+0xdc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_OC1_SetConfig+0x8e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <TIM_OC1_SetConfig+0xe0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d111      	bne.n	800413e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	fffeff8f 	.word	0xfffeff8f
 8004168:	40010000 	.word	0x40010000
 800416c:	40010400 	.word	0x40010400

08004170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <TIM_OC2_SetConfig+0xe4>)
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0320 	bic.w	r3, r3, #32
 80041ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a23      	ldr	r2, [pc, #140]	; (8004258 <TIM_OC2_SetConfig+0xe8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_OC2_SetConfig+0x68>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a22      	ldr	r2, [pc, #136]	; (800425c <TIM_OC2_SetConfig+0xec>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d10d      	bne.n	80041f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <TIM_OC2_SetConfig+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_OC2_SetConfig+0x94>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a17      	ldr	r2, [pc, #92]	; (800425c <TIM_OC2_SetConfig+0xec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d113      	bne.n	800422c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	feff8fff 	.word	0xfeff8fff
 8004258:	40010000 	.word	0x40010000
 800425c:	40010400 	.word	0x40010400

08004260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <TIM_OC3_SetConfig+0xe0>)
 800428c:	4013      	ands	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a22      	ldr	r2, [pc, #136]	; (8004344 <TIM_OC3_SetConfig+0xe4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d003      	beq.n	80042c6 <TIM_OC3_SetConfig+0x66>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a21      	ldr	r2, [pc, #132]	; (8004348 <TIM_OC3_SetConfig+0xe8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10d      	bne.n	80042e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a17      	ldr	r2, [pc, #92]	; (8004344 <TIM_OC3_SetConfig+0xe4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_OC3_SetConfig+0x92>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <TIM_OC3_SetConfig+0xe8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d113      	bne.n	800431a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	fffeff8f 	.word	0xfffeff8f
 8004344:	40010000 	.word	0x40010000
 8004348:	40010400 	.word	0x40010400

0800434c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <TIM_OC4_SetConfig+0xa4>)
 8004378:	4013      	ands	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	031b      	lsls	r3, r3, #12
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <TIM_OC4_SetConfig+0xa8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_OC4_SetConfig+0x68>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <TIM_OC4_SetConfig+0xac>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d109      	bne.n	80043c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	feff8fff 	.word	0xfeff8fff
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010400 	.word	0x40010400

080043fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <TIM_OC5_SetConfig+0x98>)
 8004428:	4013      	ands	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800443c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a12      	ldr	r2, [pc, #72]	; (8004498 <TIM_OC5_SetConfig+0x9c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC5_SetConfig+0x5e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <TIM_OC5_SetConfig+0xa0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d109      	bne.n	800446e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004460:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	fffeff8f 	.word	0xfffeff8f
 8004498:	40010000 	.word	0x40010000
 800449c:	40010400 	.word	0x40010400

080044a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <TIM_OC6_SetConfig+0x9c>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	051b      	lsls	r3, r3, #20
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <TIM_OC6_SetConfig+0xa0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_OC6_SetConfig+0x60>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a12      	ldr	r2, [pc, #72]	; (8004544 <TIM_OC6_SetConfig+0xa4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d109      	bne.n	8004514 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	feff8fff 	.word	0xfeff8fff
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a28      	ldr	r2, [pc, #160]	; (8004614 <TIM_TI1_SetConfig+0xcc>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01b      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457c:	d017      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a25      	ldr	r2, [pc, #148]	; (8004618 <TIM_TI1_SetConfig+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <TIM_TI1_SetConfig+0xd4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00f      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a23      	ldr	r2, [pc, #140]	; (8004620 <TIM_TI1_SetConfig+0xd8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00b      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <TIM_TI1_SetConfig+0xdc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d007      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <TIM_TI1_SetConfig+0xe0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_TI1_SetConfig+0x66>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <TIM_TI1_SetConfig+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <TIM_TI1_SetConfig+0x6a>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <TIM_TI1_SetConfig+0x6c>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e003      	b.n	80045d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f023 030a 	bic.w	r3, r3, #10
 80045ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 030a 	and.w	r3, r3, #10
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40010400 	.word	0x40010400
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 030a 	bic.w	r3, r3, #10
 800466c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800468e:	b480      	push	{r7}
 8004690:	b087      	sub	sp, #28
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f023 0210 	bic.w	r2, r3, #16
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f023 0210 	bic.w	r2, r3, #16
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	031b      	lsls	r3, r3, #12
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f023 0303 	bic.w	r3, r3, #3
 8004794:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80047b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	621a      	str	r2, [r3, #32]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800481e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	031b      	lsls	r3, r3, #12
 8004824:	b29b      	uxth	r3, r3
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004832:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	031b      	lsls	r3, r3, #12
 8004838:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	f043 0307 	orr.w	r3, r3, #7
 800487c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e06d      	b.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a30      	ldr	r2, [pc, #192]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a20      	ldr	r2, [pc, #128]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d022      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495a:	d01d      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a1d      	ldr	r2, [pc, #116]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10c      	bne.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40010000 	.word	0x40010000
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40000c00 	.word	0x40000c00
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40001800 	.word	0x40001800

080049ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e040      	b.n	8004abc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f012 ff3c 	bl	80178c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f82c 	bl	8004ac4 <UART_SetConfig>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e022      	b.n	8004abc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 faca 	bl	8005018 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fb51 	bl	800515c <UART_CheckIdleState>
 8004aba:	4603      	mov	r3, r0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4bb1      	ldr	r3, [pc, #708]	; (8004db8 <UART_SetConfig+0x2f4>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a9f      	ldr	r2, [pc, #636]	; (8004dbc <UART_SetConfig+0x2f8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d121      	bne.n	8004b88 <UART_SetConfig+0xc4>
 8004b44:	4b9e      	ldr	r3, [pc, #632]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d816      	bhi.n	8004b80 <UART_SetConfig+0xbc>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x94>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b6f 	.word	0x08004b6f
 8004b64:	08004b7b 	.word	0x08004b7b
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e151      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e14e      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004b74:	2304      	movs	r3, #4
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e14b      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e148      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004b80:	2310      	movs	r3, #16
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	bf00      	nop
 8004b86:	e144      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a8d      	ldr	r2, [pc, #564]	; (8004dc4 <UART_SetConfig+0x300>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d134      	bne.n	8004bfc <UART_SetConfig+0x138>
 8004b92:	4b8b      	ldr	r3, [pc, #556]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d829      	bhi.n	8004bf4 <UART_SetConfig+0x130>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0xe4>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004bf5 	.word	0x08004bf5
 8004bb0:	08004bf5 	.word	0x08004bf5
 8004bb4:	08004bf5 	.word	0x08004bf5
 8004bb8:	08004be9 	.word	0x08004be9
 8004bbc:	08004bf5 	.word	0x08004bf5
 8004bc0:	08004bf5 	.word	0x08004bf5
 8004bc4:	08004bf5 	.word	0x08004bf5
 8004bc8:	08004be3 	.word	0x08004be3
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bf5 	.word	0x08004bf5
 8004bd4:	08004bf5 	.word	0x08004bf5
 8004bd8:	08004bef 	.word	0x08004bef
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e117      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e114      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004be8:	2304      	movs	r3, #4
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e111      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004bee:	2308      	movs	r3, #8
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e10e      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	bf00      	nop
 8004bfa:	e10a      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a71      	ldr	r2, [pc, #452]	; (8004dc8 <UART_SetConfig+0x304>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d120      	bne.n	8004c48 <UART_SetConfig+0x184>
 8004c06:	4b6e      	ldr	r3, [pc, #440]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d00f      	beq.n	8004c34 <UART_SetConfig+0x170>
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d802      	bhi.n	8004c1e <UART_SetConfig+0x15a>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <UART_SetConfig+0x164>
 8004c1c:	e010      	b.n	8004c40 <UART_SetConfig+0x17c>
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d005      	beq.n	8004c2e <UART_SetConfig+0x16a>
 8004c22:	2b30      	cmp	r3, #48	; 0x30
 8004c24:	d009      	beq.n	8004c3a <UART_SetConfig+0x176>
 8004c26:	e00b      	b.n	8004c40 <UART_SetConfig+0x17c>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e0f1      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e0ee      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e0eb      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e0e8      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	bf00      	nop
 8004c46:	e0e4      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a5f      	ldr	r2, [pc, #380]	; (8004dcc <UART_SetConfig+0x308>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d120      	bne.n	8004c94 <UART_SetConfig+0x1d0>
 8004c52:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d00f      	beq.n	8004c80 <UART_SetConfig+0x1bc>
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d802      	bhi.n	8004c6a <UART_SetConfig+0x1a6>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <UART_SetConfig+0x1b0>
 8004c68:	e010      	b.n	8004c8c <UART_SetConfig+0x1c8>
 8004c6a:	2b80      	cmp	r3, #128	; 0x80
 8004c6c:	d005      	beq.n	8004c7a <UART_SetConfig+0x1b6>
 8004c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c70:	d009      	beq.n	8004c86 <UART_SetConfig+0x1c2>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x1c8>
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e0cb      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e0c8      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e0c5      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e0c2      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	bf00      	nop
 8004c92:	e0be      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a4d      	ldr	r2, [pc, #308]	; (8004dd0 <UART_SetConfig+0x30c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d124      	bne.n	8004ce8 <UART_SetConfig+0x224>
 8004c9e:	4b48      	ldr	r3, [pc, #288]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cac:	d012      	beq.n	8004cd4 <UART_SetConfig+0x210>
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb2:	d802      	bhi.n	8004cba <UART_SetConfig+0x1f6>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <UART_SetConfig+0x204>
 8004cb8:	e012      	b.n	8004ce0 <UART_SetConfig+0x21c>
 8004cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cbe:	d006      	beq.n	8004cce <UART_SetConfig+0x20a>
 8004cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc4:	d009      	beq.n	8004cda <UART_SetConfig+0x216>
 8004cc6:	e00b      	b.n	8004ce0 <UART_SetConfig+0x21c>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	77fb      	strb	r3, [r7, #31]
 8004ccc:	e0a1      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e09e      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e09b      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004cda:	2308      	movs	r3, #8
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e098      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	bf00      	nop
 8004ce6:	e094      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a39      	ldr	r2, [pc, #228]	; (8004dd4 <UART_SetConfig+0x310>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d124      	bne.n	8004d3c <UART_SetConfig+0x278>
 8004cf2:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d00:	d012      	beq.n	8004d28 <UART_SetConfig+0x264>
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d06:	d802      	bhi.n	8004d0e <UART_SetConfig+0x24a>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <UART_SetConfig+0x258>
 8004d0c:	e012      	b.n	8004d34 <UART_SetConfig+0x270>
 8004d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d12:	d006      	beq.n	8004d22 <UART_SetConfig+0x25e>
 8004d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d18:	d009      	beq.n	8004d2e <UART_SetConfig+0x26a>
 8004d1a:	e00b      	b.n	8004d34 <UART_SetConfig+0x270>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e077      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e074      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d28:	2304      	movs	r3, #4
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e071      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d2e:	2308      	movs	r3, #8
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e06e      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d34:	2310      	movs	r3, #16
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	bf00      	nop
 8004d3a:	e06a      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <UART_SetConfig+0x314>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d124      	bne.n	8004d90 <UART_SetConfig+0x2cc>
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d012      	beq.n	8004d7c <UART_SetConfig+0x2b8>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d802      	bhi.n	8004d62 <UART_SetConfig+0x29e>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <UART_SetConfig+0x2ac>
 8004d60:	e012      	b.n	8004d88 <UART_SetConfig+0x2c4>
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	d006      	beq.n	8004d76 <UART_SetConfig+0x2b2>
 8004d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d6c:	d009      	beq.n	8004d82 <UART_SetConfig+0x2be>
 8004d6e:	e00b      	b.n	8004d88 <UART_SetConfig+0x2c4>
 8004d70:	2300      	movs	r3, #0
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e04d      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d76:	2302      	movs	r3, #2
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e04a      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e047      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d82:	2308      	movs	r3, #8
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e044      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	bf00      	nop
 8004d8e:	e040      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <UART_SetConfig+0x318>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d139      	bne.n	8004e0e <UART_SetConfig+0x34a>
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <UART_SetConfig+0x2fc>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da8:	d027      	beq.n	8004dfa <UART_SetConfig+0x336>
 8004daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dae:	d817      	bhi.n	8004de0 <UART_SetConfig+0x31c>
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01c      	beq.n	8004dee <UART_SetConfig+0x32a>
 8004db4:	e027      	b.n	8004e06 <UART_SetConfig+0x342>
 8004db6:	bf00      	nop
 8004db8:	efff69f3 	.word	0xefff69f3
 8004dbc:	40011000 	.word	0x40011000
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40004400 	.word	0x40004400
 8004dc8:	40004800 	.word	0x40004800
 8004dcc:	40004c00 	.word	0x40004c00
 8004dd0:	40005000 	.word	0x40005000
 8004dd4:	40011400 	.word	0x40011400
 8004dd8:	40007800 	.word	0x40007800
 8004ddc:	40007c00 	.word	0x40007c00
 8004de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de4:	d006      	beq.n	8004df4 <UART_SetConfig+0x330>
 8004de6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dea:	d009      	beq.n	8004e00 <UART_SetConfig+0x33c>
 8004dec:	e00b      	b.n	8004e06 <UART_SetConfig+0x342>
 8004dee:	2300      	movs	r3, #0
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e00e      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004df4:	2302      	movs	r3, #2
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e00b      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e008      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004e00:	2308      	movs	r3, #8
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e005      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004e06:	2310      	movs	r3, #16
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	bf00      	nop
 8004e0c:	e001      	b.n	8004e12 <UART_SetConfig+0x34e>
 8004e0e:	2310      	movs	r3, #16
 8004e10:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1a:	d17f      	bne.n	8004f1c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004e1c:	7ffb      	ldrb	r3, [r7, #31]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d85c      	bhi.n	8004edc <UART_SetConfig+0x418>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x364>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e6d 	.word	0x08004e6d
 8004e30:	08004e8d 	.word	0x08004e8d
 8004e34:	08004edd 	.word	0x08004edd
 8004e38:	08004ea5 	.word	0x08004ea5
 8004e3c:	08004edd 	.word	0x08004edd
 8004e40:	08004edd 	.word	0x08004edd
 8004e44:	08004edd 	.word	0x08004edd
 8004e48:	08004ec5 	.word	0x08004ec5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fd ffbc 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004e50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	005a      	lsls	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	441a      	add	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	61bb      	str	r3, [r7, #24]
        break;
 8004e6a:	e03a      	b.n	8004ee2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fd ffc0 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8004e70:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	61bb      	str	r3, [r7, #24]
        break;
 8004e8a:	e02a      	b.n	8004ee2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	085a      	lsrs	r2, r3, #1
 8004e92:	4b5f      	ldr	r3, [pc, #380]	; (8005010 <UART_SetConfig+0x54c>)
 8004e94:	4413      	add	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6852      	ldr	r2, [r2, #4]
 8004e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	61bb      	str	r3, [r7, #24]
        break;
 8004ea2:	e01e      	b.n	8004ee2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea4:	f7fd feac 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8004ea8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	005a      	lsls	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	61bb      	str	r3, [r7, #24]
        break;
 8004ec2:	e00e      	b.n	8004ee2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	61bb      	str	r3, [r7, #24]
        break;
 8004eda:	e002      	b.n	8004ee2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
        break;
 8004ee0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b0f      	cmp	r3, #15
 8004ee6:	d916      	bls.n	8004f16 <UART_SetConfig+0x452>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eee:	d212      	bcs.n	8004f16 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f023 030f 	bic.w	r3, r3, #15
 8004ef8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	897a      	ldrh	r2, [r7, #10]
 8004f12:	60da      	str	r2, [r3, #12]
 8004f14:	e070      	b.n	8004ff8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
 8004f1a:	e06d      	b.n	8004ff8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004f1c:	7ffb      	ldrb	r3, [r7, #31]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d859      	bhi.n	8004fd6 <UART_SetConfig+0x512>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0x464>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f4d 	.word	0x08004f4d
 8004f2c:	08004f6b 	.word	0x08004f6b
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004fd7 	.word	0x08004fd7
 8004f38:	08004fa1 	.word	0x08004fa1
 8004f3c:	08004fd7 	.word	0x08004fd7
 8004f40:	08004fd7 	.word	0x08004fd7
 8004f44:	08004fd7 	.word	0x08004fd7
 8004f48:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f4c:	f7fd ff3c 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004f50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	085a      	lsrs	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	441a      	add	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	61bb      	str	r3, [r7, #24]
        break;
 8004f68:	e038      	b.n	8004fdc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6a:	f7fd ff41 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 8004f6e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085a      	lsrs	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	441a      	add	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	61bb      	str	r3, [r7, #24]
        break;
 8004f86:	e029      	b.n	8004fdc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	085a      	lsrs	r2, r3, #1
 8004f8e:	4b21      	ldr	r3, [pc, #132]	; (8005014 <UART_SetConfig+0x550>)
 8004f90:	4413      	add	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6852      	ldr	r2, [r2, #4]
 8004f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	61bb      	str	r3, [r7, #24]
        break;
 8004f9e:	e01d      	b.n	8004fdc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa0:	f7fd fe2e 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8004fa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	085a      	lsrs	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	441a      	add	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	61bb      	str	r3, [r7, #24]
        break;
 8004fbc:	e00e      	b.n	8004fdc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	61bb      	str	r3, [r7, #24]
        break;
 8004fd4:	e002      	b.n	8004fdc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	75fb      	strb	r3, [r7, #23]
        break;
 8004fda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d908      	bls.n	8004ff4 <UART_SetConfig+0x530>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe8:	d204      	bcs.n	8004ff4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	e001      	b.n	8004ff8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	01e84800 	.word	0x01e84800
 8005014:	00f42400 	.word	0x00f42400

08005018 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00a      	beq.n	8005042 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01a      	beq.n	800512e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005116:	d10a      	bne.n	800512e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af02      	add	r7, sp, #8
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800516a:	f7fb fa63 	bl	8000634 <HAL_GetTick>
 800516e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b08      	cmp	r3, #8
 800517c:	d10e      	bne.n	800519c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800517e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f82a 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e020      	b.n	80051de <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d10e      	bne.n	80051c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f814 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e00a      	b.n	80051de <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	e05d      	b.n	80052b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fe:	d059      	beq.n	80052b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fb fa18 	bl	8000634 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <UART_WaitOnFlagUntilTimeout+0x30>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11b      	bne.n	800524e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005224:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e042      	b.n	80052d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02b      	beq.n	80052b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526a:	d123      	bne.n	80052b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005274:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005284:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2220      	movs	r2, #32
 800529a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e00f      	b.n	80052d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d092      	beq.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052dc:	b084      	sub	sp, #16
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	f107 001c 	add.w	r0, r7, #28
 80052ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d120      	bne.n	8005336 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	4b20      	ldr	r3, [pc, #128]	; (8005388 <USB_CoreInit+0xac>)
 8005306:	4013      	ands	r3, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531a:	2b01      	cmp	r3, #1
 800531c:	d105      	bne.n	800532a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa52 	bl	80057d4 <USB_CoreReset>
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
 8005334:	e010      	b.n	8005358 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fa46 	bl	80057d4 <USB_CoreReset>
 8005348:	4603      	mov	r3, r0
 800534a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	2b01      	cmp	r3, #1
 800535c:	d10b      	bne.n	8005376 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f043 0206 	orr.w	r2, r3, #6
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005382:	b004      	add	sp, #16
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	ffbdffbf 	.word	0xffbdffbf

0800538c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 0201 	bic.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d106      	bne.n	80053da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]
 80053d8:	e00b      	b.n	80053f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	e001      	b.n	80053f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e003      	b.n	80053fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80053f2:	2032      	movs	r0, #50	; 0x32
 80053f4:	f7fb f92a 	bl	800064c <HAL_Delay>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005404:	b084      	sub	sp, #16
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e009      	b.n	8005438 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3340      	adds	r3, #64	; 0x40
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3301      	adds	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b0e      	cmp	r3, #14
 800543c:	d9f2      	bls.n	8005424 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800543e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d11c      	bne.n	800547e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005452:	f043 0302 	orr.w	r3, r3, #2
 8005456:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e005      	b.n	800548a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005490:	461a      	mov	r2, r3
 8005492:	2300      	movs	r3, #0
 8005494:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	4619      	mov	r1, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	461a      	mov	r2, r3
 80054a6:	680b      	ldr	r3, [r1, #0]
 80054a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10c      	bne.n	80054ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f959 	bl	8005770 <USB_SetDevSpeed>
 80054be:	e018      	b.n	80054f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054c0:	2101      	movs	r1, #1
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f954 	bl	8005770 <USB_SetDevSpeed>
 80054c8:	e013      	b.n	80054f2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d10c      	bne.n	80054ea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054d6:	2100      	movs	r1, #0
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f949 	bl	8005770 <USB_SetDevSpeed>
 80054de:	e008      	b.n	80054f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054e0:	2101      	movs	r1, #1
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f944 	bl	8005770 <USB_SetDevSpeed>
 80054e8:	e003      	b.n	80054f2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054ea:	2103      	movs	r1, #3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f93f 	bl	8005770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054f2:	2110      	movs	r1, #16
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f8f3 	bl	80056e0 <USB_FlushTxFifo>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f911 	bl	800572c <USB_FlushRxFifo>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005526:	461a      	mov	r2, r3
 8005528:	2300      	movs	r3, #0
 800552a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005532:	461a      	mov	r2, r3
 8005534:	2300      	movs	r3, #0
 8005536:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005538:	2300      	movs	r3, #0
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e043      	b.n	80055c6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d118      	bne.n	8005588 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	461a      	mov	r2, r3
 800556a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	e013      	b.n	800559a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e008      	b.n	800559a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	461a      	mov	r2, r3
 80055ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	3301      	adds	r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d3b7      	bcc.n	800553e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e043      	b.n	800565c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ea:	d118      	bne.n	800561e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	461a      	mov	r2, r3
 8005600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e013      	b.n	8005630 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	461a      	mov	r2, r3
 8005616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	e008      	b.n	8005630 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	2300      	movs	r3, #0
 800562e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	2300      	movs	r3, #0
 8005640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d3b7      	bcc.n	80055d4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005676:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005684:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f043 0210 	orr.w	r2, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <USB_DevInit+0x2d4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d105      	bne.n	80056c8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699a      	ldr	r2, [r3, #24]
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <USB_DevInit+0x2d8>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d4:	b004      	add	sp, #16
 80056d6:	4770      	bx	lr
 80056d8:	803c3800 	.word	0x803c3800
 80056dc:	40000004 	.word	0x40000004

080056e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	019b      	lsls	r3, r3, #6
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a09      	ldr	r2, [pc, #36]	; (8005728 <USB_FlushTxFifo+0x48>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e006      	b.n	800571a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b20      	cmp	r3, #32
 8005716:	d0f0      	beq.n	80056fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	00030d40 	.word	0x00030d40

0800572c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2210      	movs	r2, #16
 800573c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a09      	ldr	r2, [pc, #36]	; (800576c <USB_FlushRxFifo+0x40>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e006      	b.n	800575e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d0f0      	beq.n	800573e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	00030d40 	.word	0x00030d40

08005770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057bc:	f043 0302 	orr.w	r3, r3, #2
 80057c0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80057c2:	2003      	movs	r0, #3
 80057c4:	f7fa ff42 	bl	800064c <HAL_Delay>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <USB_CoreReset+0x64>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e01b      	b.n	800582a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	daf2      	bge.n	80057e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f043 0201 	orr.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3301      	adds	r3, #1
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <USB_CoreReset+0x64>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d0f0      	beq.n	800580a <USB_CoreReset+0x36>

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	00030d40 	.word	0x00030d40

0800583c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800584a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584e:	2b84      	cmp	r3, #132	; 0x84
 8005850:	d005      	beq.n	800585e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005852:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	3303      	adds	r3, #3
 800585c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005872:	f3ef 8305 	mrs	r3, IPSR
 8005876:	607b      	str	r3, [r7, #4]
  return(result);
 8005878:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800587a:	2b00      	cmp	r3, #0
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005894:	f001 fdee 	bl	8007474 <vTaskStartScheduler>
  
  return osOK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	bd80      	pop	{r7, pc}

0800589e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80058a2:	f7ff ffe3 	bl	800586c <inHandlerMode>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80058ac:	f001 ff00 	bl	80076b0 <xTaskGetTickCountFromISR>
 80058b0:	4603      	mov	r3, r0
 80058b2:	e002      	b.n	80058ba <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80058b4:	f001 feec 	bl	8007690 <xTaskGetTickCount>
 80058b8:	4603      	mov	r3, r0
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	bd80      	pop	{r7, pc}

080058be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80058be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c0:	b089      	sub	sp, #36	; 0x24
 80058c2:	af04      	add	r7, sp, #16
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <osThreadCreate+0x54>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01c      	beq.n	8005912 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685c      	ldr	r4, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681d      	ldr	r5, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691e      	ldr	r6, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff ffa6 	bl	800583c <makeFreeRtosPriority>
 80058f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058fa:	9202      	str	r2, [sp, #8]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	9100      	str	r1, [sp, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4632      	mov	r2, r6
 8005904:	4629      	mov	r1, r5
 8005906:	4620      	mov	r0, r4
 8005908:	f001 fb56 	bl	8006fb8 <xTaskCreateStatic>
 800590c:	4603      	mov	r3, r0
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	e01c      	b.n	800594c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685c      	ldr	r4, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800591e:	b29e      	uxth	r6, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff88 	bl	800583c <makeFreeRtosPriority>
 800592c:	4602      	mov	r2, r0
 800592e:	f107 030c 	add.w	r3, r7, #12
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	9200      	str	r2, [sp, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	4632      	mov	r2, r6
 800593a:	4629      	mov	r1, r5
 800593c:	4620      	mov	r0, r4
 800593e:	f001 fb9b 	bl	8007078 <xTaskCreate>
 8005942:	4603      	mov	r3, r0
 8005944:	2b01      	cmp	r3, #1
 8005946:	d001      	beq.n	800594c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005956 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 fcc2 	bl	80072e8 <vTaskDelete>
  return osOK;
 8005964:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <osDelay+0x16>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	e000      	b.n	8005986 <osDelay+0x18>
 8005984:	2301      	movs	r3, #1
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fd3e 	bl	8007408 <vTaskDelay>
  
  return osOK;
 800598c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4619      	mov	r1, r3
 80059ac:	2001      	movs	r0, #1
 80059ae:	f000 fc8e 	bl	80062ce <xQueueCreateMutexStatic>
 80059b2:	4603      	mov	r3, r0
 80059b4:	e003      	b.n	80059be <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80059b6:	2001      	movs	r0, #1
 80059b8:	f000 fc71 	bl	800629e <xQueueCreateMutex>
 80059bc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <osMutexWait+0x18>
    return osErrorParameter;
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	e03a      	b.n	8005a56 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ea:	d103      	bne.n	80059f4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e009      	b.n	8005a08 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <osMutexWait+0x40>
      ticks = 1;
 8005a04:	2301      	movs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005a08:	f7ff ff30 	bl	800586c <inHandlerMode>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d017      	beq.n	8005a42 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a12:	f107 0308 	add.w	r3, r7, #8
 8005a16:	461a      	mov	r2, r3
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 f894 	bl	8006b48 <xQueueReceiveFromISR>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d001      	beq.n	8005a2a <osMutexWait+0x62>
      return osErrorOS;
 8005a26:	23ff      	movs	r3, #255	; 0xff
 8005a28:	e015      	b.n	8005a56 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <osMutexWait+0x8c>
 8005a30:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <osMutexWait+0x98>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e008      	b.n	8005a54 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005a42:	68f9      	ldr	r1, [r7, #12]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 ff6f 	bl	8006928 <xQueueSemaphoreTake>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d001      	beq.n	8005a54 <osMutexWait+0x8c>
    return osErrorOS;
 8005a50:	23ff      	movs	r3, #255	; 0xff
 8005a52:	e000      	b.n	8005a56 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005a74:	f7ff fefa 	bl	800586c <inHandlerMode>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005a7e:	f107 0308 	add.w	r3, r7, #8
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fddb 	bl	8006640 <xQueueGiveFromISR>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d001      	beq.n	8005a94 <osMutexRelease+0x30>
      return osErrorOS;
 8005a90:	23ff      	movs	r3, #255	; 0xff
 8005a92:	e017      	b.n	8005ac4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <osMutexRelease+0x5e>
 8005a9a:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <osMutexRelease+0x68>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	e00a      	b.n	8005ac2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005aac:	2300      	movs	r3, #0
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc26 	bl	8006304 <xQueueGenericSend>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d001      	beq.n	8005ac2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005abe:	23ff      	movs	r3, #255	; 0xff
 8005ac0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d10b      	bne.n	8005b00 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	2303      	movs	r3, #3
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	2200      	movs	r2, #0
 8005af4:	2100      	movs	r1, #0
 8005af6:	2001      	movs	r0, #1
 8005af8:	f000 fada 	bl	80060b0 <xQueueGenericCreateStatic>
 8005afc:	4603      	mov	r3, r0
 8005afe:	e016      	b.n	8005b2e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e014      	b.n	8005b2e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d110      	bne.n	8005b2c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	2001      	movs	r0, #1
 8005b10:	f000 fb4b 	bl	80061aa <xQueueGenericCreate>
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <osSemaphoreCreate+0x58>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2100      	movs	r1, #0
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fbee 	bl	8006304 <xQueueGenericSend>
      return sema;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	e000      	b.n	8005b2e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005b2c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
	...

08005b38 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b42:	2300      	movs	r3, #0
 8005b44:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	e03a      	b.n	8005bc6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5a:	d103      	bne.n	8005b64 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e009      	b.n	8005b78 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <osSemaphoreWait+0x40>
      ticks = 1;
 8005b74:	2301      	movs	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005b78:	f7ff fe78 	bl	800586c <inHandlerMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	461a      	mov	r2, r3
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 ffdc 	bl	8006b48 <xQueueReceiveFromISR>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d001      	beq.n	8005b9a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005b96:	23ff      	movs	r3, #255	; 0xff
 8005b98:	e015      	b.n	8005bc6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d011      	beq.n	8005bc4 <osSemaphoreWait+0x8c>
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <osSemaphoreWait+0x98>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	e008      	b.n	8005bc4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 feb7 	bl	8006928 <xQueueSemaphoreTake>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005bc0:	23ff      	movs	r3, #255	; 0xff
 8005bc2:	e000      	b.n	8005bc6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005be4:	f7ff fe42 	bl	800586c <inHandlerMode>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fd23 	bl	8006640 <xQueueGiveFromISR>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c00:	23ff      	movs	r3, #255	; 0xff
 8005c02:	e017      	b.n	8005c34 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <osSemaphoreRelease+0x5e>
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <osSemaphoreRelease+0x68>)
 8005c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	e00a      	b.n	8005c32 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2100      	movs	r1, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 fb6e 	bl	8006304 <xQueueGenericSend>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d001      	beq.n	8005c32 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005c2e:	23ff      	movs	r3, #255	; 0xff
 8005c30:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005c48:	f7ff fe10 	bl	800586c <inHandlerMode>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005c52:	2382      	movs	r3, #130	; 0x82
 8005c54:	e003      	b.n	8005c5e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 f837 	bl	8006cca <vQueueDelete>

  return osOK; 
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005c66:	b590      	push	{r4, r7, lr}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af02      	add	r7, sp, #8
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <osMessageCreate+0x38>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00e      	beq.n	8005c9e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68dc      	ldr	r4, [r3, #12]
 8005c90:	2300      	movs	r3, #0
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4623      	mov	r3, r4
 8005c96:	f000 fa0b 	bl	80060b0 <xQueueGenericCreateStatic>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	e008      	b.n	8005cb0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f000 fa7e 	bl	80061aa <xQueueGenericCreate>
 8005cae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd90      	pop	{r4, r7, pc}

08005cb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <osMessagePut+0x1e>
    ticks = 1;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005cd6:	f7ff fdc9 	bl	800586c <inHandlerMode>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d018      	beq.n	8005d12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005ce0:	f107 0210 	add.w	r2, r7, #16
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	2300      	movs	r3, #0
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fc0c 	bl	8006508 <xQueueGenericSendFromISR>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d001      	beq.n	8005cfa <osMessagePut+0x42>
      return osErrorOS;
 8005cf6:	23ff      	movs	r3, #255	; 0xff
 8005cf8:	e018      	b.n	8005d2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d014      	beq.n	8005d2a <osMessagePut+0x72>
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <osMessagePut+0x7c>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	e00b      	b.n	8005d2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005d12:	f107 0108 	add.w	r1, r7, #8
 8005d16:	2300      	movs	r3, #0
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 faf2 	bl	8006304 <xQueueGenericSend>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d001      	beq.n	8005d2a <osMessagePut+0x72>
      return osErrorOS;
 8005d26:	23ff      	movs	r3, #255	; 0xff
 8005d28:	e000      	b.n	8005d2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b08b      	sub	sp, #44	; 0x2c
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10a      	bne.n	8005d68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005d52:	2380      	movs	r3, #128	; 0x80
 8005d54:	617b      	str	r3, [r7, #20]
    return event;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	461c      	mov	r4, r3
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d66:	e054      	b.n	8005e12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d76:	d103      	bne.n	8005d80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7e:	e009      	b.n	8005d94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <osMessageGet+0x5c>
      ticks = 1;
 8005d90:	2301      	movs	r3, #1
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005d94:	f7ff fd6a 	bl	800586c <inHandlerMode>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01c      	beq.n	8005dd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005d9e:	f107 0220 	add.w	r2, r7, #32
 8005da2:	f107 0314 	add.w	r3, r7, #20
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	68b8      	ldr	r0, [r7, #8]
 8005dac:	f000 fecc 	bl	8006b48 <xQueueReceiveFromISR>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d102      	bne.n	8005dbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005db6:	2310      	movs	r3, #16
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e001      	b.n	8005dc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01d      	beq.n	8005e02 <osMessageGet+0xca>
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <osMessageGet+0xe4>)
 8005dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	e014      	b.n	8005e02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005dd8:	f107 0314 	add.w	r3, r7, #20
 8005ddc:	3304      	adds	r3, #4
 8005dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de0:	4619      	mov	r1, r3
 8005de2:	68b8      	ldr	r0, [r7, #8]
 8005de4:	f000 fcbe 	bl	8006764 <xQueueReceive>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d102      	bne.n	8005df4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005dee:	2310      	movs	r3, #16
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e006      	b.n	8005e02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <osMessageGet+0xc6>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e000      	b.n	8005e00 <osMessageGet+0xc8>
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	461c      	mov	r4, r3
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	372c      	adds	r7, #44	; 0x2c
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd90      	pop	{r4, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005e28:	f7ff fd20 	bl	800586c <inHandlerMode>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 ff2a 	bl	8006c8c <uxQueueMessagesWaitingFromISR>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	e003      	b.n	8005e44 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 ff06 	bl	8006c4e <uxQueueMessagesWaiting>
 8005e42:	4603      	mov	r3, r0
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005e54:	f7ff fd0a 	bl	800586c <inHandlerMode>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <osMessageDelete+0x16>
    return osErrorISR;
 8005e5e:	2382      	movs	r3, #130	; 0x82
 8005e60:	e003      	b.n	8005e6a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 ff31 	bl	8006cca <vQueueDelete>

  return osOK; 
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f103 0208 	add.w	r2, r3, #8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f103 0208 	add.w	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f103 0208 	add.w	r2, r3, #8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f2a:	d103      	bne.n	8005f34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e00c      	b.n	8005f4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3308      	adds	r3, #8
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e002      	b.n	8005f42 <vListInsert+0x2e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d2f6      	bcs.n	8005f3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6892      	ldr	r2, [r2, #8]
 8005f9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6852      	ldr	r2, [r2, #4]
 8005fa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d103      	bne.n	8005fba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	1e5a      	subs	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	b672      	cpsid	i
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	b662      	cpsie	i
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	e7fe      	b.n	8006006 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006008:	f002 f9a6 	bl	8008358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006038:	3b01      	subs	r3, #1
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	441a      	add	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d114      	bne.n	8006088 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01a      	beq.n	800609c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3310      	adds	r3, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fc6e 	bl	800794c <xTaskRemoveFromEventList>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d012      	beq.n	800609c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <xQueueGenericReset+0xd0>)
 8006078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	e009      	b.n	800609c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3310      	adds	r3, #16
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fef0 	bl	8005e72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff feeb 	bl	8005e72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800609c:	f002 f98e 	bl	80083bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060a0:	2301      	movs	r3, #1
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	e000ed04 	.word	0xe000ed04

080060b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08e      	sub	sp, #56	; 0x38
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <xQueueGenericCreateStatic+0x2c>
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	b672      	cpsid	i
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	b662      	cpsie	i
 80060d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060da:	e7fe      	b.n	80060da <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <xQueueGenericCreateStatic+0x4a>
 80060e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e6:	b672      	cpsid	i
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	b662      	cpsie	i
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
 80060f8:	e7fe      	b.n	80060f8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <xQueueGenericCreateStatic+0x56>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <xQueueGenericCreateStatic+0x5a>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <xQueueGenericCreateStatic+0x5c>
 800610a:	2300      	movs	r3, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10b      	bne.n	8006128 <xQueueGenericCreateStatic+0x78>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	b672      	cpsid	i
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	b662      	cpsie	i
 8006124:	623b      	str	r3, [r7, #32]
 8006126:	e7fe      	b.n	8006126 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <xQueueGenericCreateStatic+0x84>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <xQueueGenericCreateStatic+0x88>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <xQueueGenericCreateStatic+0x8a>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <xQueueGenericCreateStatic+0xa6>
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	b672      	cpsid	i
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	b662      	cpsie	i
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e7fe      	b.n	8006154 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006156:	2348      	movs	r3, #72	; 0x48
 8006158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b48      	cmp	r3, #72	; 0x48
 800615e:	d00b      	beq.n	8006178 <xQueueGenericCreateStatic+0xc8>
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	b672      	cpsid	i
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	b662      	cpsie	i
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e7fe      	b.n	8006176 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006178:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00d      	beq.n	80061a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800618c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	4613      	mov	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f846 	bl	800622c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3730      	adds	r7, #48	; 0x30
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08a      	sub	sp, #40	; 0x28
 80061ae:	af02      	add	r7, sp, #8
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	4613      	mov	r3, r2
 80061b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <xQueueGenericCreate+0x2c>
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	b672      	cpsid	i
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	b662      	cpsie	i
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e004      	b.n	80061ec <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3348      	adds	r3, #72	; 0x48
 80061f0:	4618      	mov	r0, r3
 80061f2:	f002 f9d3 	bl	800859c <pvPortMalloc>
 80061f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d011      	beq.n	8006222 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	3348      	adds	r3, #72	; 0x48
 8006206:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006210:	79fa      	ldrb	r2, [r7, #7]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f805 	bl	800622c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006222:	69bb      	ldr	r3, [r7, #24]
	}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800625a:	2101      	movs	r1, #1
 800625c:	69b8      	ldr	r0, [r7, #24]
 800625e:	f7ff febd 	bl	8005fdc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800628a:	2300      	movs	r3, #0
 800628c:	2200      	movs	r2, #0
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f837 	bl	8006304 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b086      	sub	sp, #24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	4603      	mov	r3, r0
 80062a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062a8:	2301      	movs	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	461a      	mov	r2, r3
 80062b4:	6939      	ldr	r1, [r7, #16]
 80062b6:	6978      	ldr	r0, [r7, #20]
 80062b8:	f7ff ff77 	bl	80061aa <xQueueGenericCreate>
 80062bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff ffd3 	bl	800626a <prvInitialiseMutex>

		return xNewQueue;
 80062c4:	68fb      	ldr	r3, [r7, #12]
	}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b088      	sub	sp, #32
 80062d2:	af02      	add	r7, sp, #8
 80062d4:	4603      	mov	r3, r0
 80062d6:	6039      	str	r1, [r7, #0]
 80062d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062da:	2301      	movs	r3, #1
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	6939      	ldr	r1, [r7, #16]
 80062ec:	6978      	ldr	r0, [r7, #20]
 80062ee:	f7ff fedf 	bl	80060b0 <xQueueGenericCreateStatic>
 80062f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff ffb8 	bl	800626a <prvInitialiseMutex>

		return xNewQueue;
 80062fa:	68fb      	ldr	r3, [r7, #12]
	}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	; 0x38
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006312:	2300      	movs	r3, #0
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10b      	bne.n	8006338 <xQueueGenericSend+0x34>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	b672      	cpsid	i
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	b662      	cpsie	i
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
 8006336:	e7fe      	b.n	8006336 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <xQueueGenericSend+0x42>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <xQueueGenericSend+0x46>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <xQueueGenericSend+0x48>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <xQueueGenericSend+0x64>
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	b672      	cpsid	i
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	b662      	cpsie	i
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
 8006366:	e7fe      	b.n	8006366 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d103      	bne.n	8006376 <xQueueGenericSend+0x72>
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <xQueueGenericSend+0x76>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <xQueueGenericSend+0x78>
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <xQueueGenericSend+0x94>
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	b672      	cpsid	i
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	b662      	cpsie	i
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	e7fe      	b.n	8006396 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006398:	f001 fc96 	bl	8007cc8 <xTaskGetSchedulerState>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <xQueueGenericSend+0xa4>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <xQueueGenericSend+0xa8>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <xQueueGenericSend+0xaa>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <xQueueGenericSend+0xc6>
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	b672      	cpsid	i
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	b662      	cpsie	i
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ca:	f001 ffc5 	bl	8008358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <xQueueGenericSend+0xdc>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d129      	bne.n	8006434 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063e6:	f000 fcac 	bl	8006d42 <prvCopyDataToQueue>
 80063ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d010      	beq.n	8006416 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	3324      	adds	r3, #36	; 0x24
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 faa7 	bl	800794c <xTaskRemoveFromEventList>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d013      	beq.n	800642c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006404:	4b3f      	ldr	r3, [pc, #252]	; (8006504 <xQueueGenericSend+0x200>)
 8006406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640a:	601a      	str	r2, [r3, #0]
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	e00a      	b.n	800642c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d007      	beq.n	800642c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800641c:	4b39      	ldr	r3, [pc, #228]	; (8006504 <xQueueGenericSend+0x200>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800642c:	f001 ffc6 	bl	80083bc <vPortExitCritical>
				return pdPASS;
 8006430:	2301      	movs	r3, #1
 8006432:	e063      	b.n	80064fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800643a:	f001 ffbf 	bl	80083bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800643e:	2300      	movs	r3, #0
 8006440:	e05c      	b.n	80064fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	4618      	mov	r0, r3
 800644e:	f001 fae1 	bl	8007a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006452:	2301      	movs	r3, #1
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006456:	f001 ffb1 	bl	80083bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800645a:	f001 f86d 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800645e:	f001 ff7b 	bl	8008358 <vPortEnterCritical>
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006468:	b25b      	sxtb	r3, r3
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800646e:	d103      	bne.n	8006478 <xQueueGenericSend+0x174>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800647e:	b25b      	sxtb	r3, r3
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006484:	d103      	bne.n	800648e <xQueueGenericSend+0x18a>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800648e:	f001 ff95 	bl	80083bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006492:	1d3a      	adds	r2, r7, #4
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fad0 	bl	8007a40 <xTaskCheckForTimeOut>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d124      	bne.n	80064f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064a8:	f000 fd43 	bl	8006f32 <prvIsQueueFull>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	3310      	adds	r3, #16
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fa20 	bl	8007900 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c2:	f000 fcce 	bl	8006e62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064c6:	f001 f845 	bl	8007554 <xTaskResumeAll>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f47f af7c 	bne.w	80063ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80064d2:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <xQueueGenericSend+0x200>)
 80064d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	e772      	b.n	80063ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064e6:	f000 fcbc 	bl	8006e62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ea:	f001 f833 	bl	8007554 <xTaskResumeAll>
 80064ee:	e76c      	b.n	80063ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f000 fcb6 	bl	8006e62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f6:	f001 f82d 	bl	8007554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3738      	adds	r7, #56	; 0x38
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08e      	sub	sp, #56	; 0x38
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <xQueueGenericSendFromISR+0x30>
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	b672      	cpsid	i
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	b662      	cpsie	i
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
 8006536:	e7fe      	b.n	8006536 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <xQueueGenericSendFromISR+0x3e>
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueGenericSendFromISR+0x42>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueGenericSendFromISR+0x44>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10b      	bne.n	8006568 <xQueueGenericSendFromISR+0x60>
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	b672      	cpsid	i
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	b662      	cpsie	i
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	e7fe      	b.n	8006566 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d103      	bne.n	8006576 <xQueueGenericSendFromISR+0x6e>
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <xQueueGenericSendFromISR+0x72>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueGenericSendFromISR+0x74>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10b      	bne.n	8006598 <xQueueGenericSendFromISR+0x90>
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	b672      	cpsid	i
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	b662      	cpsie	i
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	e7fe      	b.n	8006596 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006598:	f001 ffbe 	bl	8008518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800659c:	f3ef 8211 	mrs	r2, BASEPRI
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	b672      	cpsid	i
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	b662      	cpsie	i
 80065b4:	61ba      	str	r2, [r7, #24]
 80065b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d302      	bcc.n	80065ce <xQueueGenericSendFromISR+0xc6>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d12c      	bne.n	8006628 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065de:	f000 fbb0 	bl	8006d42 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ea:	d112      	bne.n	8006612 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d016      	beq.n	8006622 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	3324      	adds	r3, #36	; 0x24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f9a7 	bl	800794c <xTaskRemoveFromEventList>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00e      	beq.n	8006622 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00b      	beq.n	8006622 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e007      	b.n	8006622 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006616:	3301      	adds	r3, #1
 8006618:	b2db      	uxtb	r3, r3
 800661a:	b25a      	sxtb	r2, r3
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006622:	2301      	movs	r3, #1
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006626:	e001      	b.n	800662c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006628:	2300      	movs	r3, #0
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006638:	4618      	mov	r0, r3
 800663a:	3738      	adds	r7, #56	; 0x38
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	; 0x38
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	b672      	cpsid	i
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	b662      	cpsie	i
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	e7fe      	b.n	800666a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <xQueueGiveFromISR+0x4c>
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	b672      	cpsid	i
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	b662      	cpsie	i
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	e7fe      	b.n	800668a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <xQueueGiveFromISR+0x5c>
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <xQueueGiveFromISR+0x60>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <xQueueGiveFromISR+0x62>
 80066a0:	2300      	movs	r3, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10b      	bne.n	80066be <xQueueGiveFromISR+0x7e>
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	b672      	cpsid	i
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	b662      	cpsie	i
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e7fe      	b.n	80066bc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066be:	f001 ff2b 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 80066c2:	f3ef 8211 	mrs	r2, BASEPRI
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
 80066da:	617a      	str	r2, [r7, #20]
 80066dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80066de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d22b      	bcs.n	800674a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006704:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670c:	d112      	bne.n	8006734 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800670e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d016      	beq.n	8006744 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	4618      	mov	r0, r3
 800671c:	f001 f916 	bl	800794c <xTaskRemoveFromEventList>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00e      	beq.n	8006744 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	e007      	b.n	8006744 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006738:	3301      	adds	r3, #1
 800673a:	b2db      	uxtb	r3, r3
 800673c:	b25a      	sxtb	r2, r3
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006744:	2301      	movs	r3, #1
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
 8006748:	e001      	b.n	800674e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800674a:	2300      	movs	r3, #0
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800675a:	4618      	mov	r0, r3
 800675c:	3738      	adds	r7, #56	; 0x38
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	; 0x30
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006770:	2300      	movs	r3, #0
 8006772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <xQueueReceive+0x32>
	__asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	b672      	cpsid	i
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	b662      	cpsie	i
 8006792:	623b      	str	r3, [r7, #32]
 8006794:	e7fe      	b.n	8006794 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <xQueueReceive+0x40>
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <xQueueReceive+0x44>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <xQueueReceive+0x46>
 80067a8:	2300      	movs	r3, #0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10b      	bne.n	80067c6 <xQueueReceive+0x62>
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	b672      	cpsid	i
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	b662      	cpsie	i
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e7fe      	b.n	80067c4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067c6:	f001 fa7f 	bl	8007cc8 <xTaskGetSchedulerState>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <xQueueReceive+0x72>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <xQueueReceive+0x76>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <xQueueReceive+0x78>
 80067da:	2300      	movs	r3, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <xQueueReceive+0x94>
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	b672      	cpsid	i
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	b662      	cpsie	i
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	e7fe      	b.n	80067f6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067f8:	f001 fdae 	bl	8008358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01f      	beq.n	8006848 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800680c:	f000 fb03 	bl	8006e16 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	1e5a      	subs	r2, r3, #1
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	3310      	adds	r3, #16
 8006824:	4618      	mov	r0, r3
 8006826:	f001 f891 	bl	800794c <xTaskRemoveFromEventList>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006830:	4b3c      	ldr	r3, [pc, #240]	; (8006924 <xQueueReceive+0x1c0>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006840:	f001 fdbc 	bl	80083bc <vPortExitCritical>
				return pdPASS;
 8006844:	2301      	movs	r3, #1
 8006846:	e069      	b.n	800691c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800684e:	f001 fdb5 	bl	80083bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006852:	2300      	movs	r3, #0
 8006854:	e062      	b.n	800691c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d106      	bne.n	800686a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f8d7 	bl	8007a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006866:	2301      	movs	r3, #1
 8006868:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800686a:	f001 fda7 	bl	80083bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800686e:	f000 fe63 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006872:	f001 fd71 	bl	8008358 <vPortEnterCritical>
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800687c:	b25b      	sxtb	r3, r3
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006882:	d103      	bne.n	800688c <xQueueReceive+0x128>
 8006884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006892:	b25b      	sxtb	r3, r3
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006898:	d103      	bne.n	80068a2 <xQueueReceive+0x13e>
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a2:	f001 fd8b 	bl	80083bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068a6:	1d3a      	adds	r2, r7, #4
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	4611      	mov	r1, r2
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f8c6 	bl	8007a40 <xTaskCheckForTimeOut>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d123      	bne.n	8006902 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068bc:	f000 fb23 	bl	8006f06 <prvIsQueueEmpty>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d017      	beq.n	80068f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	3324      	adds	r3, #36	; 0x24
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 f816 	bl	8007900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d6:	f000 fac4 	bl	8006e62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068da:	f000 fe3b 	bl	8007554 <xTaskResumeAll>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d189      	bne.n	80067f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80068e4:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <xQueueReceive+0x1c0>)
 80068e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	e780      	b.n	80067f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068f8:	f000 fab3 	bl	8006e62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068fc:	f000 fe2a 	bl	8007554 <xTaskResumeAll>
 8006900:	e77a      	b.n	80067f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006904:	f000 faad 	bl	8006e62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006908:	f000 fe24 	bl	8007554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800690c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690e:	f000 fafa 	bl	8006f06 <prvIsQueueEmpty>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	f43f af6f 	beq.w	80067f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800691a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800691c:	4618      	mov	r0, r3
 800691e:	3730      	adds	r7, #48	; 0x30
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08e      	sub	sp, #56	; 0x38
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <xQueueSemaphoreTake+0x34>
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	b672      	cpsid	i
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	b662      	cpsie	i
 8006958:	623b      	str	r3, [r7, #32]
 800695a:	e7fe      	b.n	800695a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <xQueueSemaphoreTake+0x54>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	b672      	cpsid	i
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	b662      	cpsie	i
 8006978:	61fb      	str	r3, [r7, #28]
 800697a:	e7fe      	b.n	800697a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800697c:	f001 f9a4 	bl	8007cc8 <xTaskGetSchedulerState>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <xQueueSemaphoreTake+0x64>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <xQueueSemaphoreTake+0x68>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <xQueueSemaphoreTake+0x6a>
 8006990:	2300      	movs	r3, #0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <xQueueSemaphoreTake+0x86>
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	b672      	cpsid	i
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	b662      	cpsie	i
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e7fe      	b.n	80069ac <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069ae:	f001 fcd3 	bl	8008358 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d024      	beq.n	8006a08 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	1e5a      	subs	r2, r3, #1
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80069ce:	f001 fb3d 	bl	800804c <pvTaskIncrementMutexHeldCount>
 80069d2:	4602      	mov	r2, r0
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00f      	beq.n	8006a00 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	3310      	adds	r3, #16
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 ffb1 	bl	800794c <xTaskRemoveFromEventList>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d007      	beq.n	8006a00 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069f0:	4b54      	ldr	r3, [pc, #336]	; (8006b44 <xQueueSemaphoreTake+0x21c>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a00:	f001 fcdc 	bl	80083bc <vPortExitCritical>
				return pdPASS;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e098      	b.n	8006b3a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d112      	bne.n	8006a34 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <xQueueSemaphoreTake+0x104>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	b672      	cpsid	i
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	b662      	cpsie	i
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e7fe      	b.n	8006a2a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a2c:	f001 fcc6 	bl	80083bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e082      	b.n	8006b3a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a3a:	f107 030c 	add.w	r3, r7, #12
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 ffe8 	bl	8007a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a44:	2301      	movs	r3, #1
 8006a46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a48:	f001 fcb8 	bl	80083bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a4c:	f000 fd74 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a50:	f001 fc82 	bl	8008358 <vPortEnterCritical>
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a60:	d103      	bne.n	8006a6a <xQueueSemaphoreTake+0x142>
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a76:	d103      	bne.n	8006a80 <xQueueSemaphoreTake+0x158>
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a80:	f001 fc9c 	bl	80083bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a84:	463a      	mov	r2, r7
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 ffd7 	bl	8007a40 <xTaskCheckForTimeOut>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d132      	bne.n	8006afe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a9a:	f000 fa34 	bl	8006f06 <prvIsQueueEmpty>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d026      	beq.n	8006af2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006aac:	f001 fc54 	bl	8008358 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 f925 	bl	8007d04 <xTaskPriorityInherit>
 8006aba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006abc:	f001 fc7e 	bl	80083bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	3324      	adds	r3, #36	; 0x24
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ff19 	bl	8007900 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ad0:	f000 f9c7 	bl	8006e62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ad4:	f000 fd3e 	bl	8007554 <xTaskResumeAll>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f47f af67 	bne.w	80069ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006ae0:	4b18      	ldr	r3, [pc, #96]	; (8006b44 <xQueueSemaphoreTake+0x21c>)
 8006ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	e75d      	b.n	80069ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006af2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af4:	f000 f9b5 	bl	8006e62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006af8:	f000 fd2c 	bl	8007554 <xTaskResumeAll>
 8006afc:	e757      	b.n	80069ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b00:	f000 f9af 	bl	8006e62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b04:	f000 fd26 	bl	8007554 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b0a:	f000 f9fc 	bl	8006f06 <prvIsQueueEmpty>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f43f af4c 	beq.w	80069ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b1c:	f001 fc1c 	bl	8008358 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b22:	f000 f8f6 	bl	8006d12 <prvGetDisinheritPriorityAfterTimeout>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 f9f0 	bl	8007f14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b34:	f001 fc42 	bl	80083bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3738      	adds	r7, #56	; 0x38
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	; 0x38
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <xQueueReceiveFromISR+0x2e>
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	b672      	cpsid	i
 8006b64:	f383 8811 	msr	BASEPRI, r3
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	b662      	cpsie	i
 8006b72:	623b      	str	r3, [r7, #32]
 8006b74:	e7fe      	b.n	8006b74 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <xQueueReceiveFromISR+0x3c>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <xQueueReceiveFromISR+0x40>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <xQueueReceiveFromISR+0x42>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <xQueueReceiveFromISR+0x5e>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	b672      	cpsid	i
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	b662      	cpsie	i
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ba6:	f001 fcb7 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 8006baa:	f3ef 8211 	mrs	r2, BASEPRI
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	b672      	cpsid	i
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	b662      	cpsie	i
 8006bc2:	61ba      	str	r2, [r7, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02f      	beq.n	8006c36 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be4:	f000 f917 	bl	8006e16 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	1e5a      	subs	r2, r3, #1
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bf8:	d112      	bne.n	8006c20 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	3310      	adds	r3, #16
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fea0 	bl	800794c <xTaskRemoveFromEventList>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	e007      	b.n	8006c30 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c24:	3301      	adds	r3, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	b25a      	sxtb	r2, r3
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c30:	2301      	movs	r3, #1
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	e001      	b.n	8006c3a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3738      	adds	r7, #56	; 0x38
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	60bb      	str	r3, [r7, #8]
 8006c72:	e7fe      	b.n	8006c72 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8006c74:	f001 fb70 	bl	8008358 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006c7e:	f001 fb9d 	bl	80083bc <vPortExitCritical>

	return uxReturn;
 8006c82:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <uxQueueMessagesWaitingFromISR+0x2a>
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	b672      	cpsid	i
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	b662      	cpsie	i
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e7fe      	b.n	8006cb4 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006cbc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <vQueueDelete+0x2a>
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	b672      	cpsid	i
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	b662      	cpsie	i
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	e7fe      	b.n	8006cf2 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f935 	bl	8006f64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 fd11 	bl	800872c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1c3 0307 	rsb	r3, r3, #7
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e001      	b.n	8006d34 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d34:	68fb      	ldr	r3, [r7, #12]
	}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b086      	sub	sp, #24
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10d      	bne.n	8006d7c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d14d      	bne.n	8006e04 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f849 	bl	8007e04 <xTaskPriorityDisinherit>
 8006d72:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
 8006d7a:	e043      	b.n	8006e04 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d119      	bne.n	8006db6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6858      	ldr	r0, [r3, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	f010 ffff 	bl	8017d90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	441a      	add	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d32b      	bcc.n	8006e04 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	e026      	b.n	8006e04 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68d8      	ldr	r0, [r3, #12]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	f010 ffe5 	bl	8017d90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	425b      	negs	r3, r3
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d207      	bcs.n	8006df2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	425b      	negs	r3, r3
 8006dec:	441a      	add	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d105      	bne.n	8006e04 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e0c:	697b      	ldr	r3, [r7, #20]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d018      	beq.n	8006e5a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	441a      	add	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d303      	bcc.n	8006e4a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68d9      	ldr	r1, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	461a      	mov	r2, r3
 8006e54:	6838      	ldr	r0, [r7, #0]
 8006e56:	f010 ff9b 	bl	8017d90 <memcpy>
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e6a:	f001 fa75 	bl	8008358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e74:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e76:	e011      	b.n	8006e9c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d012      	beq.n	8006ea6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3324      	adds	r3, #36	; 0x24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fd61 	bl	800794c <xTaskRemoveFromEventList>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e90:	f000 fe3a 	bl	8007b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dce9      	bgt.n	8006e78 <prvUnlockQueue+0x16>
 8006ea4:	e000      	b.n	8006ea8 <prvUnlockQueue+0x46>
					break;
 8006ea6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	22ff      	movs	r2, #255	; 0xff
 8006eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006eb0:	f001 fa84 	bl	80083bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006eb4:	f001 fa50 	bl	8008358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ebe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec0:	e011      	b.n	8006ee6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d012      	beq.n	8006ef0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3310      	adds	r3, #16
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fd3c 	bl	800794c <xTaskRemoveFromEventList>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006eda:	f000 fe15 	bl	8007b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dce9      	bgt.n	8006ec2 <prvUnlockQueue+0x60>
 8006eee:	e000      	b.n	8006ef2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ef0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006efa:	f001 fa5f 	bl	80083bc <vPortExitCritical>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f0e:	f001 fa23 	bl	8008358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	e001      	b.n	8006f24 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f24:	f001 fa4a 	bl	80083bc <vPortExitCritical>

	return xReturn;
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f3a:	f001 fa0d 	bl	8008358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d102      	bne.n	8006f50 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	e001      	b.n	8006f54 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f54:	f001 fa32 	bl	80083bc <vPortExitCritical>

	return xReturn;
 8006f58:	68fb      	ldr	r3, [r7, #12]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e016      	b.n	8006fa0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006f72:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <vQueueUnregisterQueue+0x50>)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	4413      	add	r3, r2
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d10b      	bne.n	8006f9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006f82:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <vQueueUnregisterQueue+0x50>)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2100      	movs	r1, #0
 8006f88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006f8c:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <vQueueUnregisterQueue+0x50>)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	4413      	add	r3, r2
 8006f94:	2200      	movs	r2, #0
 8006f96:	605a      	str	r2, [r3, #4]
				break;
 8006f98:	e005      	b.n	8006fa6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b07      	cmp	r3, #7
 8006fa4:	d9e5      	bls.n	8006f72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20005858 	.word	0x20005858

08006fb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <xTaskCreateStatic+0x2c>
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	b672      	cpsid	i
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	b662      	cpsie	i
 8006fe0:	623b      	str	r3, [r7, #32]
 8006fe2:	e7fe      	b.n	8006fe2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <xTaskCreateStatic+0x4a>
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	b672      	cpsid	i
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	b662      	cpsie	i
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e7fe      	b.n	8007000 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007002:	2354      	movs	r3, #84	; 0x54
 8007004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b54      	cmp	r3, #84	; 0x54
 800700a:	d00b      	beq.n	8007024 <xTaskCreateStatic+0x6c>
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	e7fe      	b.n	8007022 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007024:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01e      	beq.n	800706a <xTaskCreateStatic+0xb2>
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01b      	beq.n	800706a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	2202      	movs	r2, #2
 8007040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007044:	2300      	movs	r3, #0
 8007046:	9303      	str	r3, [sp, #12]
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	9302      	str	r3, [sp, #8]
 800704c:	f107 0314 	add.w	r3, r7, #20
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f850 	bl	8007102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007064:	f000 f8d6 	bl	8007214 <prvAddNewTaskToReadyList>
 8007068:	e001      	b.n	800706e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800706e:	697b      	ldr	r3, [r7, #20]
	}
 8007070:	4618      	mov	r0, r3
 8007072:	3728      	adds	r7, #40	; 0x28
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08c      	sub	sp, #48	; 0x30
 800707c:	af04      	add	r7, sp, #16
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f001 fa85 	bl	800859c <pvPortMalloc>
 8007092:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00e      	beq.n	80070b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800709a:	2054      	movs	r0, #84	; 0x54
 800709c:	f001 fa7e 	bl	800859c <pvPortMalloc>
 80070a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
 80070ae:	e005      	b.n	80070bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070b0:	6978      	ldr	r0, [r7, #20]
 80070b2:	f001 fb3b 	bl	800872c <vPortFree>
 80070b6:	e001      	b.n	80070bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d017      	beq.n	80070f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	2300      	movs	r3, #0
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	9302      	str	r3, [sp, #8]
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f80e 	bl	8007102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e6:	69f8      	ldr	r0, [r7, #28]
 80070e8:	f000 f894 	bl	8007214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070ec:	2301      	movs	r3, #1
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e002      	b.n	80070f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070f8:	69bb      	ldr	r3, [r7, #24]
	}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b088      	sub	sp, #32
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800711a:	440b      	add	r3, r1
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f023 0307 	bic.w	r3, r3, #7
 8007128:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <prvInitialiseNewTask+0x4a>
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	b672      	cpsid	i
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	b662      	cpsie	i
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e7fe      	b.n	800714a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01f      	beq.n	8007192 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007152:	2300      	movs	r3, #0
 8007154:	61fb      	str	r3, [r7, #28]
 8007156:	e012      	b.n	800717e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	7819      	ldrb	r1, [r3, #0]
 8007160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	3334      	adds	r3, #52	; 0x34
 8007168:	460a      	mov	r2, r1
 800716a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d006      	beq.n	8007186 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	3301      	adds	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	2b0f      	cmp	r3, #15
 8007182:	d9e9      	bls.n	8007158 <prvInitialiseNewTask+0x56>
 8007184:	e000      	b.n	8007188 <prvInitialiseNewTask+0x86>
			{
				break;
 8007186:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007190:	e003      	b.n	800719a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	2b06      	cmp	r3, #6
 800719e:	d901      	bls.n	80071a4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071a0:	2306      	movs	r3, #6
 80071a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	2200      	movs	r2, #0
 80071b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	3304      	adds	r3, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fe79 	bl	8005eb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	3318      	adds	r3, #24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe fe74 	bl	8005eb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	f1c3 0207 	rsb	r2, r3, #7
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e2:	2200      	movs	r2, #0
 80071e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	69b8      	ldr	r0, [r7, #24]
 80071f4:	f000 ffa4 	bl	8008140 <pxPortInitialiseStack>
 80071f8:	4602      	mov	r2, r0
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800720a:	bf00      	nop
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800721c:	f001 f89c 	bl	8008358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007220:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <prvAddNewTaskToReadyList+0xb8>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	4a29      	ldr	r2, [pc, #164]	; (80072cc <prvAddNewTaskToReadyList+0xb8>)
 8007228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800722a:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <prvAddNewTaskToReadyList+0xbc>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007232:	4a27      	ldr	r2, [pc, #156]	; (80072d0 <prvAddNewTaskToReadyList+0xbc>)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007238:	4b24      	ldr	r3, [pc, #144]	; (80072cc <prvAddNewTaskToReadyList+0xb8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d110      	bne.n	8007262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007240:	f000 fc86 	bl	8007b50 <prvInitialiseTaskLists>
 8007244:	e00d      	b.n	8007262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007246:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <prvAddNewTaskToReadyList+0xc0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800724e:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <prvAddNewTaskToReadyList+0xbc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	429a      	cmp	r2, r3
 800725a:	d802      	bhi.n	8007262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800725c:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <prvAddNewTaskToReadyList+0xbc>)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007262:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <prvAddNewTaskToReadyList+0xc4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	4a1b      	ldr	r2, [pc, #108]	; (80072d8 <prvAddNewTaskToReadyList+0xc4>)
 800726a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	2201      	movs	r2, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <prvAddNewTaskToReadyList+0xc8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4313      	orrs	r3, r2
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <prvAddNewTaskToReadyList+0xc8>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4a15      	ldr	r2, [pc, #84]	; (80072e0 <prvAddNewTaskToReadyList+0xcc>)
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3304      	adds	r3, #4
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f7fe fe19 	bl	8005ecc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800729a:	f001 f88f 	bl	80083bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <prvAddNewTaskToReadyList+0xc0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00e      	beq.n	80072c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <prvAddNewTaskToReadyList+0xbc>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d207      	bcs.n	80072c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <prvAddNewTaskToReadyList+0xd0>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20001804 	.word	0x20001804
 80072d0:	20001704 	.word	0x20001704
 80072d4:	20001810 	.word	0x20001810
 80072d8:	20001820 	.word	0x20001820
 80072dc:	2000180c 	.word	0x2000180c
 80072e0:	20001708 	.word	0x20001708
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80072f0:	f001 f832 	bl	8008358 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <vTaskDelete+0x18>
 80072fa:	4b39      	ldr	r3, [pc, #228]	; (80073e0 <vTaskDelete+0xf8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	e000      	b.n	8007302 <vTaskDelete+0x1a>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3304      	adds	r3, #4
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe fe3c 	bl	8005f86 <uxListRemove>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d115      	bne.n	8007340 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007318:	4932      	ldr	r1, [pc, #200]	; (80073e4 <vTaskDelete+0xfc>)
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10a      	bne.n	8007340 <vTaskDelete+0x58>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	2201      	movs	r2, #1
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	43da      	mvns	r2, r3
 8007336:	4b2c      	ldr	r3, [pc, #176]	; (80073e8 <vTaskDelete+0x100>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4013      	ands	r3, r2
 800733c:	4a2a      	ldr	r2, [pc, #168]	; (80073e8 <vTaskDelete+0x100>)
 800733e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3318      	adds	r3, #24
 800734c:	4618      	mov	r0, r3
 800734e:	f7fe fe1a 	bl	8005f86 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007352:	4b26      	ldr	r3, [pc, #152]	; (80073ec <vTaskDelete+0x104>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3301      	adds	r3, #1
 8007358:	4a24      	ldr	r2, [pc, #144]	; (80073ec <vTaskDelete+0x104>)
 800735a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800735c:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <vTaskDelete+0xf8>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	429a      	cmp	r2, r3
 8007364:	d10b      	bne.n	800737e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4820      	ldr	r0, [pc, #128]	; (80073f0 <vTaskDelete+0x108>)
 800736e:	f7fe fdad 	bl	8005ecc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007372:	4b20      	ldr	r3, [pc, #128]	; (80073f4 <vTaskDelete+0x10c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3301      	adds	r3, #1
 8007378:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <vTaskDelete+0x10c>)
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	e009      	b.n	8007392 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800737e:	4b1e      	ldr	r3, [pc, #120]	; (80073f8 <vTaskDelete+0x110>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3b01      	subs	r3, #1
 8007384:	4a1c      	ldr	r2, [pc, #112]	; (80073f8 <vTaskDelete+0x110>)
 8007386:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fc4d 	bl	8007c28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800738e:	f000 fc7b 	bl	8007c88 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007392:	f001 f813 	bl	80083bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <vTaskDelete+0x114>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01c      	beq.n	80073d8 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800739e:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <vTaskDelete+0xf8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d117      	bne.n	80073d8 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80073a8:	4b15      	ldr	r3, [pc, #84]	; (8007400 <vTaskDelete+0x118>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <vTaskDelete+0xe0>
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	b672      	cpsid	i
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	b662      	cpsie	i
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	e7fe      	b.n	80073c6 <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <vTaskDelete+0x11c>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20001704 	.word	0x20001704
 80073e4:	20001708 	.word	0x20001708
 80073e8:	2000180c 	.word	0x2000180c
 80073ec:	20001820 	.word	0x20001820
 80073f0:	200017d8 	.word	0x200017d8
 80073f4:	200017ec 	.word	0x200017ec
 80073f8:	20001804 	.word	0x20001804
 80073fc:	20001810 	.word	0x20001810
 8007400:	2000182c 	.word	0x2000182c
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d018      	beq.n	800744c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800741a:	4b14      	ldr	r3, [pc, #80]	; (800746c <vTaskDelay+0x64>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <vTaskDelay+0x32>
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	e7fe      	b.n	8007438 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800743a:	f000 f87d 	bl	8007538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fe17 	bl	8008074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007446:	f000 f885 	bl	8007554 <xTaskResumeAll>
 800744a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <vTaskDelay+0x68>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	2000182c 	.word	0x2000182c
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	; 0x28
 8007478:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007482:	463a      	mov	r2, r7
 8007484:	1d39      	adds	r1, r7, #4
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f00e fff8 	bl	8016480 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	460a      	mov	r2, r1
 80074a2:	491f      	ldr	r1, [pc, #124]	; (8007520 <vTaskStartScheduler+0xac>)
 80074a4:	481f      	ldr	r0, [pc, #124]	; (8007524 <vTaskStartScheduler+0xb0>)
 80074a6:	f7ff fd87 	bl	8006fb8 <xTaskCreateStatic>
 80074aa:	4602      	mov	r2, r0
 80074ac:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <vTaskStartScheduler+0xb4>)
 80074ae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074b0:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <vTaskStartScheduler+0xb4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074b8:	2301      	movs	r3, #1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e001      	b.n	80074c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d117      	bne.n	80074f8 <vTaskStartScheduler+0x84>
 80074c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074cc:	b672      	cpsid	i
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	b662      	cpsie	i
 80074dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <vTaskStartScheduler+0xb8>)
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074e6:	4b12      	ldr	r3, [pc, #72]	; (8007530 <vTaskStartScheduler+0xbc>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ec:	4b11      	ldr	r3, [pc, #68]	; (8007534 <vTaskStartScheduler+0xc0>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074f2:	f000 feb5 	bl	8008260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074f6:	e00f      	b.n	8007518 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074fe:	d10b      	bne.n	8007518 <vTaskStartScheduler+0xa4>
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	b672      	cpsid	i
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	b662      	cpsie	i
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e7fe      	b.n	8007516 <vTaskStartScheduler+0xa2>
}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	0801c020 	.word	0x0801c020
 8007524:	08007b21 	.word	0x08007b21
 8007528:	20001828 	.word	0x20001828
 800752c:	20001824 	.word	0x20001824
 8007530:	20001810 	.word	0x20001810
 8007534:	20001808 	.word	0x20001808

08007538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <vTaskSuspendAll+0x18>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	4a03      	ldr	r2, [pc, #12]	; (8007550 <vTaskSuspendAll+0x18>)
 8007544:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007546:	bf00      	nop
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	2000182c 	.word	0x2000182c

08007554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007562:	4b42      	ldr	r3, [pc, #264]	; (800766c <xTaskResumeAll+0x118>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <xTaskResumeAll+0x2e>
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	b672      	cpsid	i
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	b662      	cpsie	i
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	e7fe      	b.n	8007580 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007582:	f000 fee9 	bl	8008358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007586:	4b39      	ldr	r3, [pc, #228]	; (800766c <xTaskResumeAll+0x118>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a37      	ldr	r2, [pc, #220]	; (800766c <xTaskResumeAll+0x118>)
 800758e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007590:	4b36      	ldr	r3, [pc, #216]	; (800766c <xTaskResumeAll+0x118>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d161      	bne.n	800765c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007598:	4b35      	ldr	r3, [pc, #212]	; (8007670 <xTaskResumeAll+0x11c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d05d      	beq.n	800765c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075a0:	e02e      	b.n	8007600 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a2:	4b34      	ldr	r3, [pc, #208]	; (8007674 <xTaskResumeAll+0x120>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3318      	adds	r3, #24
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fce9 	bl	8005f86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe fce4 	bl	8005f86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c2:	2201      	movs	r2, #1
 80075c4:	409a      	lsls	r2, r3
 80075c6:	4b2c      	ldr	r3, [pc, #176]	; (8007678 <xTaskResumeAll+0x124>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <xTaskResumeAll+0x124>)
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4a27      	ldr	r2, [pc, #156]	; (800767c <xTaskResumeAll+0x128>)
 80075de:	441a      	add	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f7fe fc70 	bl	8005ecc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4b23      	ldr	r3, [pc, #140]	; (8007680 <xTaskResumeAll+0x12c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075fa:	4b22      	ldr	r3, [pc, #136]	; (8007684 <xTaskResumeAll+0x130>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007600:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <xTaskResumeAll+0x120>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1cc      	bne.n	80075a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800760e:	f000 fb3b 	bl	8007c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007612:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <xTaskResumeAll+0x134>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800761e:	f000 f859 	bl	80076d4 <xTaskIncrementTick>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <xTaskResumeAll+0x130>)
 800762a:	2201      	movs	r2, #1
 800762c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f1      	bne.n	800761e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800763a:	4b13      	ldr	r3, [pc, #76]	; (8007688 <xTaskResumeAll+0x134>)
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <xTaskResumeAll+0x130>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <xTaskResumeAll+0x138>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800765c:	f000 feae 	bl	80083bc <vPortExitCritical>

	return xAlreadyYielded;
 8007660:	68bb      	ldr	r3, [r7, #8]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000182c 	.word	0x2000182c
 8007670:	20001804 	.word	0x20001804
 8007674:	200017c4 	.word	0x200017c4
 8007678:	2000180c 	.word	0x2000180c
 800767c:	20001708 	.word	0x20001708
 8007680:	20001704 	.word	0x20001704
 8007684:	20001818 	.word	0x20001818
 8007688:	20001814 	.word	0x20001814
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <xTaskGetTickCount+0x1c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800769c:	687b      	ldr	r3, [r7, #4]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20001808 	.word	0x20001808

080076b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076b6:	f000 ff2f 	bl	8008518 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076be:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <xTaskGetTickCountFromISR+0x20>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076c4:	683b      	ldr	r3, [r7, #0]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20001808 	.word	0x20001808

080076d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076de:	4b4f      	ldr	r3, [pc, #316]	; (800781c <xTaskIncrementTick+0x148>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 8089 	bne.w	80077fa <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076e8:	4b4d      	ldr	r3, [pc, #308]	; (8007820 <xTaskIncrementTick+0x14c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076f0:	4a4b      	ldr	r2, [pc, #300]	; (8007820 <xTaskIncrementTick+0x14c>)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d121      	bne.n	8007740 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076fc:	4b49      	ldr	r3, [pc, #292]	; (8007824 <xTaskIncrementTick+0x150>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <xTaskIncrementTick+0x4a>
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	e7fe      	b.n	800771c <xTaskIncrementTick+0x48>
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <xTaskIncrementTick+0x150>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	4b40      	ldr	r3, [pc, #256]	; (8007828 <xTaskIncrementTick+0x154>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a3e      	ldr	r2, [pc, #248]	; (8007824 <xTaskIncrementTick+0x150>)
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4a3e      	ldr	r2, [pc, #248]	; (8007828 <xTaskIncrementTick+0x154>)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	4b3e      	ldr	r3, [pc, #248]	; (800782c <xTaskIncrementTick+0x158>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3301      	adds	r3, #1
 8007738:	4a3c      	ldr	r2, [pc, #240]	; (800782c <xTaskIncrementTick+0x158>)
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	f000 faa4 	bl	8007c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007740:	4b3b      	ldr	r3, [pc, #236]	; (8007830 <xTaskIncrementTick+0x15c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	429a      	cmp	r2, r3
 8007748:	d348      	bcc.n	80077dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800774a:	4b36      	ldr	r3, [pc, #216]	; (8007824 <xTaskIncrementTick+0x150>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d104      	bne.n	800775e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007754:	4b36      	ldr	r3, [pc, #216]	; (8007830 <xTaskIncrementTick+0x15c>)
 8007756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800775a:	601a      	str	r2, [r3, #0]
					break;
 800775c:	e03e      	b.n	80077dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775e:	4b31      	ldr	r3, [pc, #196]	; (8007824 <xTaskIncrementTick+0x150>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	429a      	cmp	r2, r3
 8007774:	d203      	bcs.n	800777e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007776:	4a2e      	ldr	r2, [pc, #184]	; (8007830 <xTaskIncrementTick+0x15c>)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800777c:	e02e      	b.n	80077dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	3304      	adds	r3, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fbff 	bl	8005f86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	3318      	adds	r3, #24
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe fbf6 	bl	8005f86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	2201      	movs	r2, #1
 80077a0:	409a      	lsls	r2, r3
 80077a2:	4b24      	ldr	r3, [pc, #144]	; (8007834 <xTaskIncrementTick+0x160>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	4a22      	ldr	r2, [pc, #136]	; (8007834 <xTaskIncrementTick+0x160>)
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4a1f      	ldr	r2, [pc, #124]	; (8007838 <xTaskIncrementTick+0x164>)
 80077ba:	441a      	add	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7fe fb82 	bl	8005ecc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	4b1b      	ldr	r3, [pc, #108]	; (800783c <xTaskIncrementTick+0x168>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3b9      	bcc.n	800774a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077d6:	2301      	movs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077da:	e7b6      	b.n	800774a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077dc:	4b17      	ldr	r3, [pc, #92]	; (800783c <xTaskIncrementTick+0x168>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e2:	4915      	ldr	r1, [pc, #84]	; (8007838 <xTaskIncrementTick+0x164>)
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d907      	bls.n	8007804 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e004      	b.n	8007804 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <xTaskIncrementTick+0x16c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3301      	adds	r3, #1
 8007800:	4a0f      	ldr	r2, [pc, #60]	; (8007840 <xTaskIncrementTick+0x16c>)
 8007802:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <xTaskIncrementTick+0x170>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800780c:	2301      	movs	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007810:	697b      	ldr	r3, [r7, #20]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000182c 	.word	0x2000182c
 8007820:	20001808 	.word	0x20001808
 8007824:	200017bc 	.word	0x200017bc
 8007828:	200017c0 	.word	0x200017c0
 800782c:	2000181c 	.word	0x2000181c
 8007830:	20001824 	.word	0x20001824
 8007834:	2000180c 	.word	0x2000180c
 8007838:	20001708 	.word	0x20001708
 800783c:	20001704 	.word	0x20001704
 8007840:	20001814 	.word	0x20001814
 8007844:	20001818 	.word	0x20001818

08007848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800784e:	4b27      	ldr	r3, [pc, #156]	; (80078ec <vTaskSwitchContext+0xa4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007856:	4b26      	ldr	r3, [pc, #152]	; (80078f0 <vTaskSwitchContext+0xa8>)
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800785c:	e040      	b.n	80078e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800785e:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <vTaskSwitchContext+0xa8>)
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007864:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <vTaskSwitchContext+0xac>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	fab3 f383 	clz	r3, r3
 8007870:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007872:	7afb      	ldrb	r3, [r7, #11]
 8007874:	f1c3 031f 	rsb	r3, r3, #31
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	491f      	ldr	r1, [pc, #124]	; (80078f8 <vTaskSwitchContext+0xb0>)
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	b672      	cpsid	i
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	b662      	cpsie	i
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e7fe      	b.n	80078a4 <vTaskSwitchContext+0x5c>
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <vTaskSwitchContext+0xb0>)
 80078b2:	4413      	add	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	605a      	str	r2, [r3, #4]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3308      	adds	r3, #8
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d104      	bne.n	80078d6 <vTaskSwitchContext+0x8e>
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4a07      	ldr	r2, [pc, #28]	; (80078fc <vTaskSwitchContext+0xb4>)
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	2000182c 	.word	0x2000182c
 80078f0:	20001818 	.word	0x20001818
 80078f4:	2000180c 	.word	0x2000180c
 80078f8:	20001708 	.word	0x20001708
 80078fc:	20001704 	.word	0x20001704

08007900 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10b      	bne.n	8007928 <vTaskPlaceOnEventList+0x28>
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	b672      	cpsid	i
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	b662      	cpsie	i
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	e7fe      	b.n	8007926 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007928:	4b07      	ldr	r3, [pc, #28]	; (8007948 <vTaskPlaceOnEventList+0x48>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3318      	adds	r3, #24
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fe faef 	bl	8005f14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007936:	2101      	movs	r1, #1
 8007938:	6838      	ldr	r0, [r7, #0]
 800793a:	f000 fb9b 	bl	8008074 <prvAddCurrentTaskToDelayedList>
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20001704 	.word	0x20001704

0800794c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10b      	bne.n	800797a <xTaskRemoveFromEventList+0x2e>
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	b672      	cpsid	i
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	b662      	cpsie	i
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e7fe      	b.n	8007978 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	3318      	adds	r3, #24
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fb01 	bl	8005f86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007984:	4b1d      	ldr	r3, [pc, #116]	; (80079fc <xTaskRemoveFromEventList+0xb0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11c      	bne.n	80079c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	3304      	adds	r3, #4
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe faf8 	bl	8005f86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	2201      	movs	r2, #1
 800799c:	409a      	lsls	r2, r3
 800799e:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <xTaskRemoveFromEventList+0xb4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <xTaskRemoveFromEventList+0xb4>)
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4a13      	ldr	r2, [pc, #76]	; (8007a04 <xTaskRemoveFromEventList+0xb8>)
 80079b6:	441a      	add	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7fe fa84 	bl	8005ecc <vListInsertEnd>
 80079c4:	e005      	b.n	80079d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	3318      	adds	r3, #24
 80079ca:	4619      	mov	r1, r3
 80079cc:	480e      	ldr	r0, [pc, #56]	; (8007a08 <xTaskRemoveFromEventList+0xbc>)
 80079ce:	f7fe fa7d 	bl	8005ecc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <xTaskRemoveFromEventList+0xc0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d905      	bls.n	80079ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079e0:	2301      	movs	r3, #1
 80079e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079e4:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <xTaskRemoveFromEventList+0xc4>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e001      	b.n	80079f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079f0:	697b      	ldr	r3, [r7, #20]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	2000182c 	.word	0x2000182c
 8007a00:	2000180c 	.word	0x2000180c
 8007a04:	20001708 	.word	0x20001708
 8007a08:	200017c4 	.word	0x200017c4
 8007a0c:	20001704 	.word	0x20001704
 8007a10:	20001818 	.word	0x20001818

08007a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <vTaskInternalSetTimeOutState+0x24>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a24:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <vTaskInternalSetTimeOutState+0x28>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	605a      	str	r2, [r3, #4]
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	2000181c 	.word	0x2000181c
 8007a3c:	20001808 	.word	0x20001808

08007a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b088      	sub	sp, #32
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <xTaskCheckForTimeOut+0x28>
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	e7fe      	b.n	8007a66 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xTaskCheckForTimeOut+0x46>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e7fe      	b.n	8007a84 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8007a86:	f000 fc67 	bl	8008358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <xTaskCheckForTimeOut+0xc0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa2:	d102      	bne.n	8007aaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	e023      	b.n	8007af2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b15      	ldr	r3, [pc, #84]	; (8007b04 <xTaskCheckForTimeOut+0xc4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d007      	beq.n	8007ac6 <xTaskCheckForTimeOut+0x86>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d302      	bcc.n	8007ac6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	e015      	b.n	8007af2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d20b      	bcs.n	8007ae8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff ff99 	bl	8007a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	61fb      	str	r3, [r7, #28]
 8007ae6:	e004      	b.n	8007af2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007af2:	f000 fc63 	bl	80083bc <vPortExitCritical>

	return xReturn;
 8007af6:	69fb      	ldr	r3, [r7, #28]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20001808 	.word	0x20001808
 8007b04:	2000181c 	.word	0x2000181c

08007b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b0c:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <vTaskMissedYield+0x14>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
}
 8007b12:	bf00      	nop
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	20001818 	.word	0x20001818

08007b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b28:	f000 f852 	bl	8007bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <prvIdleTask+0x28>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d9f9      	bls.n	8007b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <prvIdleTask+0x2c>)
 8007b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b44:	e7f0      	b.n	8007b28 <prvIdleTask+0x8>
 8007b46:	bf00      	nop
 8007b48:	20001708 	.word	0x20001708
 8007b4c:	e000ed04 	.word	0xe000ed04

08007b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b56:	2300      	movs	r3, #0
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	e00c      	b.n	8007b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	4413      	add	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4a12      	ldr	r2, [pc, #72]	; (8007bb0 <prvInitialiseTaskLists+0x60>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe f981 	bl	8005e72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3301      	adds	r3, #1
 8007b74:	607b      	str	r3, [r7, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b06      	cmp	r3, #6
 8007b7a:	d9ef      	bls.n	8007b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b7c:	480d      	ldr	r0, [pc, #52]	; (8007bb4 <prvInitialiseTaskLists+0x64>)
 8007b7e:	f7fe f978 	bl	8005e72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b82:	480d      	ldr	r0, [pc, #52]	; (8007bb8 <prvInitialiseTaskLists+0x68>)
 8007b84:	f7fe f975 	bl	8005e72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b88:	480c      	ldr	r0, [pc, #48]	; (8007bbc <prvInitialiseTaskLists+0x6c>)
 8007b8a:	f7fe f972 	bl	8005e72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b8e:	480c      	ldr	r0, [pc, #48]	; (8007bc0 <prvInitialiseTaskLists+0x70>)
 8007b90:	f7fe f96f 	bl	8005e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b94:	480b      	ldr	r0, [pc, #44]	; (8007bc4 <prvInitialiseTaskLists+0x74>)
 8007b96:	f7fe f96c 	bl	8005e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <prvInitialiseTaskLists+0x78>)
 8007b9c:	4a05      	ldr	r2, [pc, #20]	; (8007bb4 <prvInitialiseTaskLists+0x64>)
 8007b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <prvInitialiseTaskLists+0x7c>)
 8007ba2:	4a05      	ldr	r2, [pc, #20]	; (8007bb8 <prvInitialiseTaskLists+0x68>)
 8007ba4:	601a      	str	r2, [r3, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20001708 	.word	0x20001708
 8007bb4:	20001794 	.word	0x20001794
 8007bb8:	200017a8 	.word	0x200017a8
 8007bbc:	200017c4 	.word	0x200017c4
 8007bc0:	200017d8 	.word	0x200017d8
 8007bc4:	200017f0 	.word	0x200017f0
 8007bc8:	200017bc 	.word	0x200017bc
 8007bcc:	200017c0 	.word	0x200017c0

08007bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bd6:	e019      	b.n	8007c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bd8:	f000 fbbe 	bl	8008358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <prvCheckTasksWaitingTermination+0x4c>)
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe f9cc 	bl	8005f86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <prvCheckTasksWaitingTermination+0x50>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <prvCheckTasksWaitingTermination+0x50>)
 8007bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <prvCheckTasksWaitingTermination+0x54>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <prvCheckTasksWaitingTermination+0x54>)
 8007c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c02:	f000 fbdb 	bl	80083bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f80e 	bl	8007c28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <prvCheckTasksWaitingTermination+0x54>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e1      	bne.n	8007bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	200017d8 	.word	0x200017d8
 8007c20:	20001804 	.word	0x20001804
 8007c24:	200017ec 	.word	0x200017ec

08007c28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d108      	bne.n	8007c4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fd74 	bl	800872c <vPortFree>
				vPortFree( pxTCB );
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd71 	bl	800872c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c4a:	e019      	b.n	8007c80 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d103      	bne.n	8007c5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fd68 	bl	800872c <vPortFree>
	}
 8007c5c:	e010      	b.n	8007c80 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d00b      	beq.n	8007c80 <prvDeleteTCB+0x58>
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	b672      	cpsid	i
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	b662      	cpsie	i
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e7fe      	b.n	8007c7e <prvDeleteTCB+0x56>
	}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c8e:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <prvResetNextTaskUnblockTime+0x38>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ca0:	e008      	b.n	8007cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca2:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <prvResetNextTaskUnblockTime+0x38>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4a04      	ldr	r2, [pc, #16]	; (8007cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007cb2:	6013      	str	r3, [r2, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	200017bc 	.word	0x200017bc
 8007cc4:	20001824 	.word	0x20001824

08007cc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cce:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <xTaskGetSchedulerState+0x34>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	e008      	b.n	8007cee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cdc:	4b08      	ldr	r3, [pc, #32]	; (8007d00 <xTaskGetSchedulerState+0x38>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	e001      	b.n	8007cee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cee:	687b      	ldr	r3, [r7, #4]
	}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20001810 	.word	0x20001810
 8007d00:	2000182c 	.word	0x2000182c

08007d04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d069      	beq.n	8007dee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1e:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <xTaskPriorityInherit+0xf4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d259      	bcs.n	8007ddc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db06      	blt.n	8007d3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d30:	4b31      	ldr	r3, [pc, #196]	; (8007df8 <xTaskPriorityInherit+0xf4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	f1c3 0207 	rsb	r2, r3, #7
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6959      	ldr	r1, [r3, #20]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d46:	4613      	mov	r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4a2b      	ldr	r2, [pc, #172]	; (8007dfc <xTaskPriorityInherit+0xf8>)
 8007d50:	4413      	add	r3, r2
 8007d52:	4299      	cmp	r1, r3
 8007d54:	d13a      	bne.n	8007dcc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe f913 	bl	8005f86 <uxListRemove>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d115      	bne.n	8007d92 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	4924      	ldr	r1, [pc, #144]	; (8007dfc <xTaskPriorityInherit+0xf8>)
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xTaskPriorityInherit+0x8e>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	2201      	movs	r2, #1
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43da      	mvns	r2, r3
 8007d88:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <xTaskPriorityInherit+0xfc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <xTaskPriorityInherit+0xfc>)
 8007d90:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d92:	4b19      	ldr	r3, [pc, #100]	; (8007df8 <xTaskPriorityInherit+0xf4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	2201      	movs	r2, #1
 8007da2:	409a      	lsls	r2, r3
 8007da4:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <xTaskPriorityInherit+0xfc>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <xTaskPriorityInherit+0xfc>)
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	4613      	mov	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <xTaskPriorityInherit+0xf8>)
 8007dbc:	441a      	add	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fe f881 	bl	8005ecc <vListInsertEnd>
 8007dca:	e004      	b.n	8007dd6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <xTaskPriorityInherit+0xf4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e008      	b.n	8007dee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <xTaskPriorityInherit+0xf4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d201      	bcs.n	8007dee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dee:	68fb      	ldr	r3, [r7, #12]
	}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20001704 	.word	0x20001704
 8007dfc:	20001708 	.word	0x20001708
 8007e00:	2000180c 	.word	0x2000180c

08007e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d070      	beq.n	8007efc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e1a:	4b3b      	ldr	r3, [pc, #236]	; (8007f08 <xTaskPriorityDisinherit+0x104>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d00b      	beq.n	8007e3c <xTaskPriorityDisinherit+0x38>
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	b672      	cpsid	i
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	b662      	cpsie	i
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e7fe      	b.n	8007e3a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10b      	bne.n	8007e5c <xTaskPriorityDisinherit+0x58>
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	b672      	cpsid	i
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	b662      	cpsie	i
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	e7fe      	b.n	8007e5a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e60:	1e5a      	subs	r2, r3, #1
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d044      	beq.n	8007efc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d140      	bne.n	8007efc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe f881 	bl	8005f86 <uxListRemove>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d115      	bne.n	8007eb6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	491f      	ldr	r1, [pc, #124]	; (8007f0c <xTaskPriorityDisinherit+0x108>)
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <xTaskPriorityDisinherit+0xb2>
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	43da      	mvns	r2, r3
 8007eac:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <xTaskPriorityDisinherit+0x10c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	4a17      	ldr	r2, [pc, #92]	; (8007f10 <xTaskPriorityDisinherit+0x10c>)
 8007eb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	f1c3 0207 	rsb	r2, r3, #7
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	2201      	movs	r2, #1
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <xTaskPriorityDisinherit+0x10c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	4a0d      	ldr	r2, [pc, #52]	; (8007f10 <xTaskPriorityDisinherit+0x10c>)
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4a08      	ldr	r2, [pc, #32]	; (8007f0c <xTaskPriorityDisinherit+0x108>)
 8007eea:	441a      	add	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	f7fd ffea 	bl	8005ecc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007efc:	697b      	ldr	r3, [r7, #20]
	}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20001704 	.word	0x20001704
 8007f0c:	20001708 	.word	0x20001708
 8007f10:	2000180c 	.word	0x2000180c

08007f14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f22:	2301      	movs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8085 	beq.w	8008038 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10b      	bne.n	8007f4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8007f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3a:	b672      	cpsid	i
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	b662      	cpsie	i
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	e7fe      	b.n	8007f4c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d902      	bls.n	8007f5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e002      	b.n	8007f64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d064      	beq.n	8008038 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d15f      	bne.n	8008038 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f78:	4b31      	ldr	r3, [pc, #196]	; (8008040 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d10b      	bne.n	8007f9a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	b672      	cpsid	i
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	b662      	cpsie	i
 8007f96:	60bb      	str	r3, [r7, #8]
 8007f98:	e7fe      	b.n	8007f98 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	db04      	blt.n	8007fb8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f1c3 0207 	rsb	r2, r3, #7
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	6959      	ldr	r1, [r3, #20]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007fc8:	4413      	add	r3, r2
 8007fca:	4299      	cmp	r1, r3
 8007fcc:	d134      	bne.n	8008038 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd ffd7 	bl	8005f86 <uxListRemove>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d115      	bne.n	800800a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	4918      	ldr	r1, [pc, #96]	; (8008044 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	440b      	add	r3, r1
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	43da      	mvns	r2, r3
 8008000:	4b11      	ldr	r3, [pc, #68]	; (8008048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4013      	ands	r3, r2
 8008006:	4a10      	ldr	r2, [pc, #64]	; (8008048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008008:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	2201      	movs	r2, #1
 8008010:	409a      	lsls	r2, r3
 8008012:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4313      	orrs	r3, r2
 8008018:	4a0b      	ldr	r2, [pc, #44]	; (8008048 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4a06      	ldr	r2, [pc, #24]	; (8008044 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800802a:	441a      	add	r2, r3
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f7fd ff4a 	bl	8005ecc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008038:	bf00      	nop
 800803a:	3720      	adds	r7, #32
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	20001704 	.word	0x20001704
 8008044:	20001708 	.word	0x20001708
 8008048:	2000180c 	.word	0x2000180c

0800804c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <pvTaskIncrementMutexHeldCount+0x24>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <pvTaskIncrementMutexHeldCount+0x24>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800805e:	3201      	adds	r2, #1
 8008060:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008062:	4b03      	ldr	r3, [pc, #12]	; (8008070 <pvTaskIncrementMutexHeldCount+0x24>)
 8008064:	681b      	ldr	r3, [r3, #0]
	}
 8008066:	4618      	mov	r0, r3
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20001704 	.word	0x20001704

08008074 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800807e:	4b29      	ldr	r3, [pc, #164]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008084:	4b28      	ldr	r3, [pc, #160]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3304      	adds	r3, #4
 800808a:	4618      	mov	r0, r3
 800808c:	f7fd ff7b 	bl	8005f86 <uxListRemove>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008096:	4b24      	ldr	r3, [pc, #144]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	2201      	movs	r2, #1
 800809e:	fa02 f303 	lsl.w	r3, r2, r3
 80080a2:	43da      	mvns	r2, r3
 80080a4:	4b21      	ldr	r3, [pc, #132]	; (800812c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4013      	ands	r3, r2
 80080aa:	4a20      	ldr	r2, [pc, #128]	; (800812c <prvAddCurrentTaskToDelayedList+0xb8>)
 80080ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b4:	d10a      	bne.n	80080cc <prvAddCurrentTaskToDelayedList+0x58>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d007      	beq.n	80080cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080bc:	4b1a      	ldr	r3, [pc, #104]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	481a      	ldr	r0, [pc, #104]	; (8008130 <prvAddCurrentTaskToDelayedList+0xbc>)
 80080c6:	f7fd ff01 	bl	8005ecc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080ca:	e026      	b.n	800811a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080d4:	4b14      	ldr	r3, [pc, #80]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d209      	bcs.n	80080f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e4:	4b13      	ldr	r3, [pc, #76]	; (8008134 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	4b0f      	ldr	r3, [pc, #60]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3304      	adds	r3, #4
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f7fd ff0f 	bl	8005f14 <vListInsert>
}
 80080f6:	e010      	b.n	800811a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f8:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fd ff05 	bl	8005f14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <prvAddCurrentTaskToDelayedList+0xc8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	429a      	cmp	r2, r3
 8008112:	d202      	bcs.n	800811a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008114:	4a09      	ldr	r2, [pc, #36]	; (800813c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6013      	str	r3, [r2, #0]
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20001808 	.word	0x20001808
 8008128:	20001704 	.word	0x20001704
 800812c:	2000180c 	.word	0x2000180c
 8008130:	200017f0 	.word	0x200017f0
 8008134:	200017c0 	.word	0x200017c0
 8008138:	200017bc 	.word	0x200017bc
 800813c:	20001824 	.word	0x20001824

08008140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3b04      	subs	r3, #4
 8008150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3b04      	subs	r3, #4
 800815e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 0201 	bic.w	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3b04      	subs	r3, #4
 800816e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008170:	4a0c      	ldr	r2, [pc, #48]	; (80081a4 <pxPortInitialiseStack+0x64>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3b14      	subs	r3, #20
 800817a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3b04      	subs	r3, #4
 8008186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f06f 0202 	mvn.w	r2, #2
 800818e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3b20      	subs	r3, #32
 8008194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008196:	68fb      	ldr	r3, [r7, #12]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	080081a9 	.word	0x080081a9

080081a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081b2:	4b13      	ldr	r3, [pc, #76]	; (8008200 <prvTaskExitError+0x58>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ba:	d00b      	beq.n	80081d4 <prvTaskExitError+0x2c>
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	b672      	cpsid	i
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	b662      	cpsie	i
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e7fe      	b.n	80081d2 <prvTaskExitError+0x2a>
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	b672      	cpsid	i
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	b662      	cpsie	i
 80081e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081ea:	bf00      	nop
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0fc      	beq.n	80081ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081f2:	bf00      	nop
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000008 	.word	0x20000008
	...

08008210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <pxCurrentTCBConst2>)
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	6808      	ldr	r0, [r1, #0]
 8008216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	f380 8809 	msr	PSP, r0
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8811 	msr	BASEPRI, r0
 800822a:	4770      	bx	lr
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst2>:
 8008230:	20001704 	.word	0x20001704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008238:	4808      	ldr	r0, [pc, #32]	; (800825c <prvPortStartFirstTask+0x24>)
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	6800      	ldr	r0, [r0, #0]
 800823e:	f380 8808 	msr	MSP, r0
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f380 8814 	msr	CONTROL, r0
 800824a:	b662      	cpsie	i
 800824c:	b661      	cpsie	f
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	df00      	svc	0
 8008258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800825a:	bf00      	nop
 800825c:	e000ed08 	.word	0xe000ed08

08008260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008266:	4b36      	ldr	r3, [pc, #216]	; (8008340 <xPortStartScheduler+0xe0>)
 8008268:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	22ff      	movs	r2, #255	; 0xff
 8008276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008288:	b2da      	uxtb	r2, r3
 800828a:	4b2e      	ldr	r3, [pc, #184]	; (8008344 <xPortStartScheduler+0xe4>)
 800828c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800828e:	4b2e      	ldr	r3, [pc, #184]	; (8008348 <xPortStartScheduler+0xe8>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008294:	e009      	b.n	80082aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008296:	4b2c      	ldr	r3, [pc, #176]	; (8008348 <xPortStartScheduler+0xe8>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3b01      	subs	r3, #1
 800829c:	4a2a      	ldr	r2, [pc, #168]	; (8008348 <xPortStartScheduler+0xe8>)
 800829e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d0ef      	beq.n	8008296 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082b6:	4b24      	ldr	r3, [pc, #144]	; (8008348 <xPortStartScheduler+0xe8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f1c3 0307 	rsb	r3, r3, #7
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d00b      	beq.n	80082da <xPortStartScheduler+0x7a>
 80082c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c6:	b672      	cpsid	i
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	b662      	cpsie	i
 80082d6:	60bb      	str	r3, [r7, #8]
 80082d8:	e7fe      	b.n	80082d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082da:	4b1b      	ldr	r3, [pc, #108]	; (8008348 <xPortStartScheduler+0xe8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <xPortStartScheduler+0xe8>)
 80082e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082e4:	4b18      	ldr	r3, [pc, #96]	; (8008348 <xPortStartScheduler+0xe8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ec:	4a16      	ldr	r2, [pc, #88]	; (8008348 <xPortStartScheduler+0xe8>)
 80082ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082f8:	4b14      	ldr	r3, [pc, #80]	; (800834c <xPortStartScheduler+0xec>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a13      	ldr	r2, [pc, #76]	; (800834c <xPortStartScheduler+0xec>)
 80082fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008302:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008304:	4b11      	ldr	r3, [pc, #68]	; (800834c <xPortStartScheduler+0xec>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a10      	ldr	r2, [pc, #64]	; (800834c <xPortStartScheduler+0xec>)
 800830a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800830e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008310:	f000 f8d4 	bl	80084bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008314:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <xPortStartScheduler+0xf0>)
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800831a:	f000 f8f3 	bl	8008504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <xPortStartScheduler+0xf4>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a0c      	ldr	r2, [pc, #48]	; (8008354 <xPortStartScheduler+0xf4>)
 8008324:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008328:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800832a:	f7ff ff85 	bl	8008238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800832e:	f7ff fa8b 	bl	8007848 <vTaskSwitchContext>
	prvTaskExitError();
 8008332:	f7ff ff39 	bl	80081a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	e000e400 	.word	0xe000e400
 8008344:	20001830 	.word	0x20001830
 8008348:	20001834 	.word	0x20001834
 800834c:	e000ed20 	.word	0xe000ed20
 8008350:	20000008 	.word	0x20000008
 8008354:	e000ef34 	.word	0xe000ef34

08008358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	b672      	cpsid	i
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	b662      	cpsie	i
 8008372:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <vPortEnterCritical+0x5c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a0e      	ldr	r2, [pc, #56]	; (80083b4 <vPortEnterCritical+0x5c>)
 800837c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <vPortEnterCritical+0x5c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d110      	bne.n	80083a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <vPortEnterCritical+0x60>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <vPortEnterCritical+0x50>
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	b672      	cpsid	i
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	b662      	cpsie	i
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	e7fe      	b.n	80083a6 <vPortEnterCritical+0x4e>
	}
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20000008 	.word	0x20000008
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <vPortExitCritical+0x50>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10b      	bne.n	80083e2 <vPortExitCritical+0x26>
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	b672      	cpsid	i
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	b662      	cpsie	i
 80083de:	607b      	str	r3, [r7, #4]
 80083e0:	e7fe      	b.n	80083e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80083e2:	4b0a      	ldr	r3, [pc, #40]	; (800840c <vPortExitCritical+0x50>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4a08      	ldr	r2, [pc, #32]	; (800840c <vPortExitCritical+0x50>)
 80083ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <vPortExitCritical+0x50>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <vPortExitCritical+0x42>
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000008 	.word	0x20000008

08008410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008410:	f3ef 8009 	mrs	r0, PSP
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <pxCurrentTCBConst>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	f01e 0f10 	tst.w	lr, #16
 8008420:	bf08      	it	eq
 8008422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008434:	b672      	cpsid	i
 8008436:	f380 8811 	msr	BASEPRI, r0
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	b662      	cpsie	i
 8008444:	f7ff fa00 	bl	8007848 <vTaskSwitchContext>
 8008448:	f04f 0000 	mov.w	r0, #0
 800844c:	f380 8811 	msr	BASEPRI, r0
 8008450:	bc09      	pop	{r0, r3}
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	f01e 0f10 	tst.w	lr, #16
 800845e:	bf08      	it	eq
 8008460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008464:	f380 8809 	msr	PSP, r0
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop

08008470 <pxCurrentTCBConst>:
 8008470:	20001704 	.word	0x20001704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	b672      	cpsid	i
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	b662      	cpsie	i
 8008492:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008494:	f7ff f91e 	bl	80076d4 <xTaskIncrementTick>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800849e:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <SysTick_Handler+0x40>)
 80084a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <vPortSetupTimerInterrupt+0x38>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <vPortSetupTimerInterrupt+0x3c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <vPortSetupTimerInterrupt+0x40>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	099b      	lsrs	r3, r3, #6
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <vPortSetupTimerInterrupt+0x44>)
 80084da:	3b01      	subs	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084de:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010
 80084f4:	e000e018 	.word	0xe000e018
 80084f8:	20001514 	.word	0x20001514
 80084fc:	10624dd3 	.word	0x10624dd3
 8008500:	e000e014 	.word	0xe000e014

08008504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008514 <vPortEnableVFP+0x10>
 8008508:	6801      	ldr	r1, [r0, #0]
 800850a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800850e:	6001      	str	r1, [r0, #0]
 8008510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008512:	bf00      	nop
 8008514:	e000ed88 	.word	0xe000ed88

08008518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d915      	bls.n	8008556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800852a:	4a18      	ldr	r2, [pc, #96]	; (800858c <vPortValidateInterruptPriority+0x74>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008534:	4b16      	ldr	r3, [pc, #88]	; (8008590 <vPortValidateInterruptPriority+0x78>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	7afa      	ldrb	r2, [r7, #11]
 800853a:	429a      	cmp	r2, r3
 800853c:	d20b      	bcs.n	8008556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	e7fe      	b.n	8008554 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <vPortValidateInterruptPriority+0x7c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800855e:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <vPortValidateInterruptPriority+0x80>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d90b      	bls.n	800857e <vPortValidateInterruptPriority+0x66>
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	b672      	cpsid	i
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	b662      	cpsie	i
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	e7fe      	b.n	800857c <vPortValidateInterruptPriority+0x64>
	}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	e000e3f0 	.word	0xe000e3f0
 8008590:	20001830 	.word	0x20001830
 8008594:	e000ed0c 	.word	0xe000ed0c
 8008598:	20001834 	.word	0x20001834

0800859c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	; 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085a8:	f7fe ffc6 	bl	8007538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085ac:	4b5a      	ldr	r3, [pc, #360]	; (8008718 <pvPortMalloc+0x17c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085b4:	f000 f916 	bl	80087e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b8:	4b58      	ldr	r3, [pc, #352]	; (800871c <pvPortMalloc+0x180>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 8090 	bne.w	80086e6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80085cc:	2208      	movs	r2, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d015      	beq.n	800860a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f023 0307 	bic.w	r3, r3, #7
 80085e4:	3308      	adds	r3, #8
 80085e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <pvPortMalloc+0x6e>
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	b672      	cpsid	i
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	b662      	cpsie	i
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e7fe      	b.n	8008608 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d06a      	beq.n	80086e6 <pvPortMalloc+0x14a>
 8008610:	4b43      	ldr	r3, [pc, #268]	; (8008720 <pvPortMalloc+0x184>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d865      	bhi.n	80086e6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800861a:	4b42      	ldr	r3, [pc, #264]	; (8008724 <pvPortMalloc+0x188>)
 800861c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800861e:	4b41      	ldr	r3, [pc, #260]	; (8008724 <pvPortMalloc+0x188>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008624:	e004      	b.n	8008630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	429a      	cmp	r2, r3
 8008638:	d903      	bls.n	8008642 <pvPortMalloc+0xa6>
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f1      	bne.n	8008626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008642:	4b35      	ldr	r3, [pc, #212]	; (8008718 <pvPortMalloc+0x17c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008648:	429a      	cmp	r2, r3
 800864a:	d04c      	beq.n	80086e6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2208      	movs	r2, #8
 8008652:	4413      	add	r3, r2
 8008654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	1ad2      	subs	r2, r2, r3
 8008666:	2308      	movs	r3, #8
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	429a      	cmp	r2, r3
 800866c:	d920      	bls.n	80086b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800866e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4413      	add	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <pvPortMalloc+0xfc>
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	b672      	cpsid	i
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	b662      	cpsie	i
 8008694:	613b      	str	r3, [r7, #16]
 8008696:	e7fe      	b.n	8008696 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086aa:	69b8      	ldr	r0, [r7, #24]
 80086ac:	f000 f8fc 	bl	80088a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <pvPortMalloc+0x184>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	4a19      	ldr	r2, [pc, #100]	; (8008720 <pvPortMalloc+0x184>)
 80086bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086be:	4b18      	ldr	r3, [pc, #96]	; (8008720 <pvPortMalloc+0x184>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b19      	ldr	r3, [pc, #100]	; (8008728 <pvPortMalloc+0x18c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d203      	bcs.n	80086d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086ca:	4b15      	ldr	r3, [pc, #84]	; (8008720 <pvPortMalloc+0x184>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a16      	ldr	r2, [pc, #88]	; (8008728 <pvPortMalloc+0x18c>)
 80086d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	4b11      	ldr	r3, [pc, #68]	; (800871c <pvPortMalloc+0x180>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	431a      	orrs	r2, r3
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e6:	f7fe ff35 	bl	8007554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <pvPortMalloc+0x170>
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	b672      	cpsid	i
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	b662      	cpsie	i
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	e7fe      	b.n	800870a <pvPortMalloc+0x16e>
	return pvReturn;
 800870c:	69fb      	ldr	r3, [r7, #28]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3728      	adds	r7, #40	; 0x28
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20005440 	.word	0x20005440
 800871c:	2000544c 	.word	0x2000544c
 8008720:	20005444 	.word	0x20005444
 8008724:	20005438 	.word	0x20005438
 8008728:	20005448 	.word	0x20005448

0800872c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d04a      	beq.n	80087d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800873e:	2308      	movs	r3, #8
 8008740:	425b      	negs	r3, r3
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4413      	add	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	4b22      	ldr	r3, [pc, #136]	; (80087dc <vPortFree+0xb0>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4013      	ands	r3, r2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <vPortFree+0x46>
 800875a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875e:	b672      	cpsid	i
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	b662      	cpsie	i
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e7fe      	b.n	8008770 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <vPortFree+0x66>
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	b672      	cpsid	i
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	b662      	cpsie	i
 800878e:	60bb      	str	r3, [r7, #8]
 8008790:	e7fe      	b.n	8008790 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4b11      	ldr	r3, [pc, #68]	; (80087dc <vPortFree+0xb0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d019      	beq.n	80087d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d115      	bne.n	80087d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <vPortFree+0xb0>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b8:	f7fe febe 	bl	8007538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <vPortFree+0xb4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a06      	ldr	r2, [pc, #24]	; (80087e0 <vPortFree+0xb4>)
 80087c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ca:	6938      	ldr	r0, [r7, #16]
 80087cc:	f000 f86c 	bl	80088a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087d0:	f7fe fec0 	bl	8007554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	2000544c 	.word	0x2000544c
 80087e0:	20005444 	.word	0x20005444

080087e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087f0:	4b27      	ldr	r3, [pc, #156]	; (8008890 <prvHeapInit+0xac>)
 80087f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00c      	beq.n	8008818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3307      	adds	r3, #7
 8008802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <prvHeapInit+0xac>)
 8008814:	4413      	add	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <prvHeapInit+0xb0>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <prvHeapInit+0xb0>)
 8008824:	2200      	movs	r2, #0
 8008826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008830:	2208      	movs	r2, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a15      	ldr	r2, [pc, #84]	; (8008898 <prvHeapInit+0xb4>)
 8008844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <prvHeapInit+0xb4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800884e:	4b12      	ldr	r3, [pc, #72]	; (8008898 <prvHeapInit+0xb4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvHeapInit+0xb4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <prvHeapInit+0xb8>)
 8008872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <prvHeapInit+0xbc>)
 800887a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <prvHeapInit+0xc0>)
 800887e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	20001838 	.word	0x20001838
 8008894:	20005438 	.word	0x20005438
 8008898:	20005440 	.word	0x20005440
 800889c:	20005448 	.word	0x20005448
 80088a0:	20005444 	.word	0x20005444
 80088a4:	2000544c 	.word	0x2000544c

080088a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <prvInsertBlockIntoFreeList+0xac>)
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <prvInsertBlockIntoFreeList+0x14>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d8f7      	bhi.n	80088b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d108      	bne.n	80088ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	441a      	add	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	441a      	add	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d118      	bne.n	8008930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b15      	ldr	r3, [pc, #84]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d00d      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	441a      	add	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	e008      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <prvInsertBlockIntoFreeList+0xb0>)
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e003      	b.n	8008938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	429a      	cmp	r2, r3
 800893e:	d002      	beq.n	8008946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20005438 	.word	0x20005438
 8008958:	20005440 	.word	0x20005440

0800895c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	330c      	adds	r3, #12
 800896c:	461a      	mov	r2, r3
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f002 fa69 	bl	800ae48 <tcpip_send_msg_wait_sem>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800897a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008988:	e001      	b.n	800898e <netconn_apimsg+0x32>
  }
  return err;
 800898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08c      	sub	sp, #48	; 0x30
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	603a      	str	r2, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
 80089a4:	460b      	mov	r3, r1
 80089a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 f91f 	bl	8009bf0 <netconn_alloc>
 80089b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80089b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d054      	beq.n	8008a64 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80089ba:	79bb      	ldrb	r3, [r7, #6]
 80089bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80089be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80089c2:	f107 0308 	add.w	r3, r7, #8
 80089c6:	4619      	mov	r1, r3
 80089c8:	4829      	ldr	r0, [pc, #164]	; (8008a70 <netconn_new_with_proto_and_callback+0xd8>)
 80089ca:	f7ff ffc7 	bl	800895c <netconn_apimsg>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80089d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d043      	beq.n	8008a64 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <netconn_new_with_proto_and_callback+0x58>
 80089e4:	4b23      	ldr	r3, [pc, #140]	; (8008a74 <netconn_new_with_proto_and_callback+0xdc>)
 80089e6:	22a3      	movs	r2, #163	; 0xa3
 80089e8:	4923      	ldr	r1, [pc, #140]	; (8008a78 <netconn_new_with_proto_and_callback+0xe0>)
 80089ea:	4824      	ldr	r0, [pc, #144]	; (8008a7c <netconn_new_with_proto_and_callback+0xe4>)
 80089ec:	f010 f810 	bl	8018a10 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	3310      	adds	r3, #16
 80089f4:	4618      	mov	r0, r3
 80089f6:	f00d f8b2 	bl	8015b5e <sys_mbox_valid>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <netconn_new_with_proto_and_callback+0x74>
 8008a00:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <netconn_new_with_proto_and_callback+0xdc>)
 8008a02:	22a4      	movs	r2, #164	; 0xa4
 8008a04:	491e      	ldr	r1, [pc, #120]	; (8008a80 <netconn_new_with_proto_and_callback+0xe8>)
 8008a06:	481d      	ldr	r0, [pc, #116]	; (8008a7c <netconn_new_with_proto_and_callback+0xe4>)
 8008a08:	f010 f802 	bl	8018a10 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	3314      	adds	r3, #20
 8008a10:	4618      	mov	r0, r3
 8008a12:	f00d f8a4 	bl	8015b5e <sys_mbox_valid>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <netconn_new_with_proto_and_callback+0x90>
 8008a1c:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <netconn_new_with_proto_and_callback+0xdc>)
 8008a1e:	22a6      	movs	r2, #166	; 0xa6
 8008a20:	4918      	ldr	r1, [pc, #96]	; (8008a84 <netconn_new_with_proto_and_callback+0xec>)
 8008a22:	4816      	ldr	r0, [pc, #88]	; (8008a7c <netconn_new_with_proto_and_callback+0xe4>)
 8008a24:	f00f fff4 	bl	8018a10 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f00d f927 	bl	8015c80 <sys_sem_valid>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <netconn_new_with_proto_and_callback+0xac>
 8008a38:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <netconn_new_with_proto_and_callback+0xdc>)
 8008a3a:	22a9      	movs	r2, #169	; 0xa9
 8008a3c:	4912      	ldr	r1, [pc, #72]	; (8008a88 <netconn_new_with_proto_and_callback+0xf0>)
 8008a3e:	480f      	ldr	r0, [pc, #60]	; (8008a7c <netconn_new_with_proto_and_callback+0xe4>)
 8008a40:	f00f ffe6 	bl	8018a10 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	330c      	adds	r3, #12
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f00d f90c 	bl	8015c66 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	3310      	adds	r3, #16
 8008a52:	4618      	mov	r0, r3
 8008a54:	f00c fffc 	bl	8015a50 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a5a:	2007      	movs	r0, #7
 8008a5c:	f002 ff5c 	bl	800b918 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008a60:	2300      	movs	r3, #0
 8008a62:	e000      	b.n	8008a66 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3730      	adds	r7, #48	; 0x30
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	08009bc5 	.word	0x08009bc5
 8008a74:	0801c028 	.word	0x0801c028
 8008a78:	0801c05c 	.word	0x0801c05c
 8008a7c:	0801c080 	.word	0x0801c080
 8008a80:	0801c0a8 	.word	0x0801c0a8
 8008a84:	0801c0c0 	.word	0x0801c0c0
 8008a88:	0801c0e4 	.word	0x0801c0e4

08008a8c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08c      	sub	sp, #48	; 0x30
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e014      	b.n	8008ac8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008aa2:	2329      	movs	r3, #41	; 0x29
 8008aa4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008aa6:	f107 030c 	add.w	r3, r7, #12
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4808      	ldr	r0, [pc, #32]	; (8008ad0 <netconn_prepare_delete+0x44>)
 8008aae:	f7ff ff55 	bl	800895c <netconn_apimsg>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008ab8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <netconn_prepare_delete+0x3a>
    return err;
 8008ac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ac4:	e000      	b.n	8008ac8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3730      	adds	r7, #48	; 0x30
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	0800a129 	.word	0x0800a129

08008ad4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <netconn_delete+0x12>
    return ERR_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e00d      	b.n	8008b02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff ffd0 	bl	8008a8c <netconn_prepare_delete>
 8008aec:	4603      	mov	r3, r0
 8008aee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d102      	bne.n	8008afe <netconn_delete+0x2a>
    netconn_free(conn);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f8e7 	bl	8009ccc <netconn_free>
  }
  return err;
 8008afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08e      	sub	sp, #56	; 0x38
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d109      	bne.n	8008b34 <netconn_bind+0x28>
 8008b20:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <netconn_bind+0x5c>)
 8008b22:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008b26:	4911      	ldr	r1, [pc, #68]	; (8008b6c <netconn_bind+0x60>)
 8008b28:	4811      	ldr	r0, [pc, #68]	; (8008b70 <netconn_bind+0x64>)
 8008b2a:	f00f ff71 	bl	8018a10 <iprintf>
 8008b2e:	f06f 030f 	mvn.w	r3, #15
 8008b32:	e015      	b.n	8008b60 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008b3a:	4b0e      	ldr	r3, [pc, #56]	; (8008b74 <netconn_bind+0x68>)
 8008b3c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008b4a:	f107 0314 	add.w	r3, r7, #20
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4809      	ldr	r0, [pc, #36]	; (8008b78 <netconn_bind+0x6c>)
 8008b52:	f7ff ff03 	bl	800895c <netconn_apimsg>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008b5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3738      	adds	r7, #56	; 0x38
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	0801c028 	.word	0x0801c028
 8008b6c:	0801c160 	.word	0x0801c160
 8008b70:	0801c080 	.word	0x0801c080
 8008b74:	0801f85c 	.word	0x0801f85c
 8008b78:	0800a2f1 	.word	0x0800a2f1

08008b7c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08c      	sub	sp, #48	; 0x30
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <netconn_listen_with_backlog+0x26>
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <netconn_listen_with_backlog+0x48>)
 8008b90:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008b94:	490c      	ldr	r1, [pc, #48]	; (8008bc8 <netconn_listen_with_backlog+0x4c>)
 8008b96:	480d      	ldr	r0, [pc, #52]	; (8008bcc <netconn_listen_with_backlog+0x50>)
 8008b98:	f00f ff3a 	bl	8018a10 <iprintf>
 8008b9c:	f06f 030f 	mvn.w	r3, #15
 8008ba0:	e00c      	b.n	8008bbc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008ba6:	f107 030c 	add.w	r3, r7, #12
 8008baa:	4619      	mov	r1, r3
 8008bac:	4808      	ldr	r0, [pc, #32]	; (8008bd0 <netconn_listen_with_backlog+0x54>)
 8008bae:	f7ff fed5 	bl	800895c <netconn_apimsg>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008bb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3730      	adds	r7, #48	; 0x30
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	0801c028 	.word	0x0801c028
 8008bc8:	0801c1e0 	.word	0x0801c1e0
 8008bcc:	0801c080 	.word	0x0801c080
 8008bd0:	0800a369 	.word	0x0800a369

08008bd4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d109      	bne.n	8008bf8 <netconn_accept+0x24>
 8008be4:	4b3d      	ldr	r3, [pc, #244]	; (8008cdc <netconn_accept+0x108>)
 8008be6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008bea:	493d      	ldr	r1, [pc, #244]	; (8008ce0 <netconn_accept+0x10c>)
 8008bec:	483d      	ldr	r0, [pc, #244]	; (8008ce4 <netconn_accept+0x110>)
 8008bee:	f00f ff0f 	bl	8018a10 <iprintf>
 8008bf2:	f06f 030f 	mvn.w	r3, #15
 8008bf6:	e06c      	b.n	8008cd2 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d109      	bne.n	8008c18 <netconn_accept+0x44>
 8008c04:	4b35      	ldr	r3, [pc, #212]	; (8008cdc <netconn_accept+0x108>)
 8008c06:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008c0a:	4937      	ldr	r1, [pc, #220]	; (8008ce8 <netconn_accept+0x114>)
 8008c0c:	4835      	ldr	r0, [pc, #212]	; (8008ce4 <netconn_accept+0x110>)
 8008c0e:	f00f feff 	bl	8018a10 <iprintf>
 8008c12:	f06f 030f 	mvn.w	r3, #15
 8008c16:	e05c      	b.n	8008cd2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fb6c 	bl	80092f6 <netconn_err>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008c22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008c2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c2e:	e050      	b.n	8008cd2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3314      	adds	r3, #20
 8008c34:	4618      	mov	r0, r3
 8008c36:	f00c ff92 	bl	8015b5e <sys_mbox_valid>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <netconn_accept+0x78>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7f1b      	ldrb	r3, [r3, #28]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008c4c:	f06f 030e 	mvn.w	r3, #14
 8008c50:	e03f      	b.n	8008cd2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	7f1b      	ldrb	r3, [r3, #28]
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3314      	adds	r3, #20
 8008c62:	f107 020c 	add.w	r2, r7, #12
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f00c ff5c 	bl	8015b26 <sys_arch_mbox_tryfetch>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c74:	d10a      	bne.n	8008c8c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008c76:	f06f 0306 	mvn.w	r3, #6
 8008c7a:	e02a      	b.n	8008cd2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3314      	adds	r3, #20
 8008c80:	f107 010c 	add.w	r1, r7, #12
 8008c84:	2200      	movs	r2, #0
 8008c86:	4618      	mov	r0, r3
 8008c88:	f00c ff0e 	bl	8015aa8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <netconn_accept+0xcc>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f107 0213 	add.w	r2, r7, #19
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fb71 	bl	8009390 <lwip_netconn_is_err_msg>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008cb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cb8:	e00b      	b.n	8008cd2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008cc0:	f06f 030e 	mvn.w	r3, #14
 8008cc4:	e005      	b.n	8008cd2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008cd0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	0801c028 	.word	0x0801c028
 8008ce0:	0801c200 	.word	0x0801c200
 8008ce4:	0801c080 	.word	0x0801c080
 8008ce8:	0801c220 	.word	0x0801c220

08008cec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <netconn_recv_data+0x2c>
 8008d04:	4b58      	ldr	r3, [pc, #352]	; (8008e68 <netconn_recv_data+0x17c>)
 8008d06:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008d0a:	4958      	ldr	r1, [pc, #352]	; (8008e6c <netconn_recv_data+0x180>)
 8008d0c:	4858      	ldr	r0, [pc, #352]	; (8008e70 <netconn_recv_data+0x184>)
 8008d0e:	f00f fe7f 	bl	8018a10 <iprintf>
 8008d12:	f06f 030f 	mvn.w	r3, #15
 8008d16:	e0a2      	b.n	8008e5e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <netconn_recv_data+0x4c>
 8008d24:	4b50      	ldr	r3, [pc, #320]	; (8008e68 <netconn_recv_data+0x17c>)
 8008d26:	f240 224a 	movw	r2, #586	; 0x24a
 8008d2a:	4952      	ldr	r1, [pc, #328]	; (8008e74 <netconn_recv_data+0x188>)
 8008d2c:	4850      	ldr	r0, [pc, #320]	; (8008e70 <netconn_recv_data+0x184>)
 8008d2e:	f00f fe6f 	bl	8018a10 <iprintf>
 8008d32:	f06f 030f 	mvn.w	r3, #15
 8008d36:	e092      	b.n	8008e5e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3310      	adds	r3, #16
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f00c ff0e 	bl	8015b5e <sys_mbox_valid>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10e      	bne.n	8008d66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 fad4 	bl	80092f6 <netconn_err>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008d52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008d5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008d5e:	e07e      	b.n	8008e5e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008d60:	f06f 030a 	mvn.w	r3, #10
 8008d64:	e07b      	b.n	8008e5e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7f1b      	ldrb	r3, [r3, #28]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10f      	bne.n	8008d92 <netconn_recv_data+0xa6>
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	7f1b      	ldrb	r3, [r3, #28]
 8008d80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d104      	bne.n	8008d92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d023      	beq.n	8008dda <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3310      	adds	r3, #16
 8008d96:	f107 0218 	add.w	r2, r7, #24
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00c fec2 	bl	8015b26 <sys_arch_mbox_tryfetch>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008da8:	d11f      	bne.n	8008dea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 faa3 	bl	80092f6 <netconn_err>
 8008db0:	4603      	mov	r3, r0
 8008db2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008db4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008dbc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008dc0:	e04d      	b.n	8008e5e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	7f1b      	ldrb	r3, [r3, #28]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008dce:	f06f 030a 	mvn.w	r3, #10
 8008dd2:	e044      	b.n	8008e5e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008dd4:	f06f 0306 	mvn.w	r3, #6
 8008dd8:	e041      	b.n	8008e5e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3310      	adds	r3, #16
 8008dde:	f107 0118 	add.w	r1, r7, #24
 8008de2:	2200      	movs	r2, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f00c fe5f 	bl	8015aa8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d117      	bne.n	8008e26 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	f107 0217 	add.w	r2, r7, #23
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 fac6 	bl	8009390 <lwip_netconn_is_err_msg>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d009      	beq.n	8008e1e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e0e:	f113 0f0f 	cmn.w	r3, #15
 8008e12:	d101      	bne.n	8008e18 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e022      	b.n	8008e5e <netconn_recv_data+0x172>
      }
      return err;
 8008e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e1c:	e01f      	b.n	8008e5e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	891b      	ldrh	r3, [r3, #8]
 8008e22:	83fb      	strh	r3, [r7, #30]
 8008e24:	e00d      	b.n	8008e42 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d106      	bne.n	8008e3a <netconn_recv_data+0x14e>
 8008e2c:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <netconn_recv_data+0x17c>)
 8008e2e:	f240 2291 	movw	r2, #657	; 0x291
 8008e32:	4911      	ldr	r1, [pc, #68]	; (8008e78 <netconn_recv_data+0x18c>)
 8008e34:	480e      	ldr	r0, [pc, #56]	; (8008e70 <netconn_recv_data+0x184>)
 8008e36:	f00f fdeb 	bl	8018a10 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	891b      	ldrh	r3, [r3, #8]
 8008e40:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d005      	beq.n	8008e56 <netconn_recv_data+0x16a>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	8bfa      	ldrh	r2, [r7, #30]
 8008e50:	2101      	movs	r1, #1
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3720      	adds	r7, #32
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	0801c028 	.word	0x0801c028
 8008e6c:	0801c240 	.word	0x0801c240
 8008e70:	0801c080 	.word	0x0801c080
 8008e74:	0801c260 	.word	0x0801c260
 8008e78:	0801c27c 	.word	0x0801c27c

08008e7c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <netconn_tcp_recvd_msg+0x1e>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e96:	2b10      	cmp	r3, #16
 8008e98:	d009      	beq.n	8008eae <netconn_tcp_recvd_msg+0x32>
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <netconn_tcp_recvd_msg+0x50>)
 8008e9c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008ea0:	490b      	ldr	r1, [pc, #44]	; (8008ed0 <netconn_tcp_recvd_msg+0x54>)
 8008ea2:	480c      	ldr	r0, [pc, #48]	; (8008ed4 <netconn_tcp_recvd_msg+0x58>)
 8008ea4:	f00f fdb4 	bl	8018a10 <iprintf>
 8008ea8:	f06f 030f 	mvn.w	r3, #15
 8008eac:	e00a      	b.n	8008ec4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4806      	ldr	r0, [pc, #24]	; (8008ed8 <netconn_tcp_recvd_msg+0x5c>)
 8008ebe:	f7ff fd4d 	bl	800895c <netconn_apimsg>
 8008ec2:	4603      	mov	r3, r0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	0801c028 	.word	0x0801c028
 8008ed0:	0801c288 	.word	0x0801c288
 8008ed4:	0801c080 	.word	0x0801c080
 8008ed8:	0800a499 	.word	0x0800a499

08008edc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b090      	sub	sp, #64	; 0x40
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3310      	adds	r3, #16
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f00c fe35 	bl	8015b5e <sys_mbox_valid>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008efa:	f06f 030a 	mvn.w	r3, #10
 8008efe:	e06d      	b.n	8008fdc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	7f1b      	ldrb	r3, [r3, #28]
 8008f04:	b25b      	sxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da07      	bge.n	8008f1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	7f1b      	ldrb	r3, [r3, #28]
 8008f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008f18:	e039      	b.n	8008f8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7ff fee3 	bl	8008cec <netconn_recv_data>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008f2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008f34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f38:	e050      	b.n	8008fdc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10e      	bne.n	8008f68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <netconn_recv_data_tcp+0x7a>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	891b      	ldrh	r3, [r3, #8]
 8008f54:	e000      	b.n	8008f58 <netconn_recv_data_tcp+0x7c>
 8008f56:	2301      	movs	r3, #1
 8008f58:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008f5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f5c:	f107 0214 	add.w	r2, r7, #20
 8008f60:	4619      	mov	r1, r3
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7ff ff8a 	bl	8008e7c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d134      	bne.n	8008fd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d009      	beq.n	8008f8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	7f1b      	ldrb	r3, [r3, #28]
 8008f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008f86:	f06f 0306 	mvn.w	r3, #6
 8008f8a:	e027      	b.n	8008fdc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008f8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d005      	beq.n	8008fa2 <netconn_recv_data_tcp+0xc6>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10f      	bne.n	8008fca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f9a3 	bl	80092f6 <netconn_err>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008fb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <netconn_recv_data_tcp+0xe8>
          return err;
 8008fbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fc2:	e00b      	b.n	8008fdc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008fc4:	f06f 030d 	mvn.w	r3, #13
 8008fc8:	e008      	b.n	8008fdc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008fca:	2101      	movs	r1, #1
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f955 	bl	800927c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008fd2:	f06f 030e 	mvn.w	r3, #14
 8008fd6:	e001      	b.n	8008fdc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008fd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3740      	adds	r7, #64	; 0x40
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d109      	bne.n	800900c <netconn_recv+0x28>
 8008ff8:	4b32      	ldr	r3, [pc, #200]	; (80090c4 <netconn_recv+0xe0>)
 8008ffa:	f240 3263 	movw	r2, #867	; 0x363
 8008ffe:	4932      	ldr	r1, [pc, #200]	; (80090c8 <netconn_recv+0xe4>)
 8009000:	4832      	ldr	r0, [pc, #200]	; (80090cc <netconn_recv+0xe8>)
 8009002:	f00f fd05 	bl	8018a10 <iprintf>
 8009006:	f06f 030f 	mvn.w	r3, #15
 800900a:	e056      	b.n	80090ba <netconn_recv+0xd6>
  *new_buf = NULL;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <netconn_recv+0x48>
 8009018:	4b2a      	ldr	r3, [pc, #168]	; (80090c4 <netconn_recv+0xe0>)
 800901a:	f240 3265 	movw	r2, #869	; 0x365
 800901e:	492c      	ldr	r1, [pc, #176]	; (80090d0 <netconn_recv+0xec>)
 8009020:	482a      	ldr	r0, [pc, #168]	; (80090cc <netconn_recv+0xe8>)
 8009022:	f00f fcf5 	bl	8018a10 <iprintf>
 8009026:	f06f 030f 	mvn.w	r3, #15
 800902a:	e046      	b.n	80090ba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009034:	2b10      	cmp	r3, #16
 8009036:	d13a      	bne.n	80090ae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800903c:	2006      	movs	r0, #6
 800903e:	f002 fc19 	bl	800b874 <memp_malloc>
 8009042:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <netconn_recv+0x6c>
      return ERR_MEM;
 800904a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800904e:	e034      	b.n	80090ba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009050:	f107 030c 	add.w	r3, r7, #12
 8009054:	2200      	movs	r2, #0
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff ff3f 	bl	8008edc <netconn_recv_data_tcp>
 800905e:	4603      	mov	r3, r0
 8009060:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800906a:	6979      	ldr	r1, [r7, #20]
 800906c:	2006      	movs	r0, #6
 800906e:	f002 fc53 	bl	800b918 <memp_free>
      return err;
 8009072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009076:	e020      	b.n	80090ba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d106      	bne.n	800908c <netconn_recv+0xa8>
 800907e:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <netconn_recv+0xe0>)
 8009080:	f240 3279 	movw	r2, #889	; 0x379
 8009084:	4913      	ldr	r1, [pc, #76]	; (80090d4 <netconn_recv+0xf0>)
 8009086:	4811      	ldr	r0, [pc, #68]	; (80090cc <netconn_recv+0xe8>)
 8009088:	f00f fcc2 	bl	8018a10 <iprintf>

    buf->p = p;
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2200      	movs	r2, #0
 800909c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2200      	movs	r2, #0
 80090a2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	e005      	b.n	80090ba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80090ae:	2200      	movs	r2, #0
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fe1a 	bl	8008cec <netconn_recv_data>
 80090b8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	0801c028 	.word	0x0801c028
 80090c8:	0801c240 	.word	0x0801c240
 80090cc:	0801c080 	.word	0x0801c080
 80090d0:	0801c260 	.word	0x0801c260
 80090d4:	0801c2d8 	.word	0x0801c2d8

080090d8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	f107 0110 	add.w	r1, r7, #16
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	4613      	mov	r3, r2
 80090fa:	2201      	movs	r2, #1
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f805 	bl	800910c <netconn_write_vectors_partly>
 8009102:	4603      	mov	r3, r0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b092      	sub	sp, #72	; 0x48
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	460b      	mov	r3, r1
 800911c:	80fb      	strh	r3, [r7, #6]
 800911e:	4613      	mov	r3, r2
 8009120:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <netconn_write_vectors_partly+0x30>
 8009128:	4b4e      	ldr	r3, [pc, #312]	; (8009264 <netconn_write_vectors_partly+0x158>)
 800912a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800912e:	494e      	ldr	r1, [pc, #312]	; (8009268 <netconn_write_vectors_partly+0x15c>)
 8009130:	484e      	ldr	r0, [pc, #312]	; (800926c <netconn_write_vectors_partly+0x160>)
 8009132:	f00f fc6d 	bl	8018a10 <iprintf>
 8009136:	f06f 030f 	mvn.w	r3, #15
 800913a:	e08e      	b.n	800925a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009144:	2b10      	cmp	r3, #16
 8009146:	d009      	beq.n	800915c <netconn_write_vectors_partly+0x50>
 8009148:	4b46      	ldr	r3, [pc, #280]	; (8009264 <netconn_write_vectors_partly+0x158>)
 800914a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800914e:	4948      	ldr	r1, [pc, #288]	; (8009270 <netconn_write_vectors_partly+0x164>)
 8009150:	4846      	ldr	r0, [pc, #280]	; (800926c <netconn_write_vectors_partly+0x160>)
 8009152:	f00f fc5d 	bl	8018a10 <iprintf>
 8009156:	f06f 0305 	mvn.w	r3, #5
 800915a:	e07e      	b.n	800925a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	7f1b      	ldrb	r3, [r3, #28]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <netconn_write_vectors_partly+0x66>
 8009168:	797b      	ldrb	r3, [r7, #5]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <netconn_write_vectors_partly+0x6a>
 8009172:	2301      	movs	r3, #1
 8009174:	e000      	b.n	8009178 <netconn_write_vectors_partly+0x6c>
 8009176:	2300      	movs	r3, #0
 8009178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800917c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <netconn_write_vectors_partly+0x84>
 8009184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009186:	2b00      	cmp	r3, #0
 8009188:	d102      	bne.n	8009190 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800918a:	f06f 0305 	mvn.w	r3, #5
 800918e:	e064      	b.n	800925a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009194:	2300      	movs	r3, #0
 8009196:	643b      	str	r3, [r7, #64]	; 0x40
 8009198:	e015      	b.n	80091c6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800919a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	4413      	add	r3, r2
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091a6:	4413      	add	r3, r2
 80091a8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80091aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ac:	00db      	lsls	r3, r3, #3
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d202      	bcs.n	80091c0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80091ba:	f06f 0305 	mvn.w	r3, #5
 80091be:	e04c      	b.n	800925a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80091c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c2:	3301      	adds	r3, #1
 80091c4:	643b      	str	r3, [r7, #64]	; 0x40
 80091c6:	88fb      	ldrh	r3, [r7, #6]
 80091c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091ca:	429a      	cmp	r2, r3
 80091cc:	dbe5      	blt.n	800919a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80091ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e040      	b.n	800925a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80091d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da0a      	bge.n	80091f4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80091de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80091e4:	f06f 0305 	mvn.w	r3, #5
 80091e8:	e037      	b.n	800925a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80091ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80091ee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009204:	797b      	ldrb	r3, [r7, #5]
 8009206:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800920a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800920c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009212:	f107 0314 	add.w	r3, r7, #20
 8009216:	4619      	mov	r1, r3
 8009218:	4816      	ldr	r0, [pc, #88]	; (8009274 <netconn_write_vectors_partly+0x168>)
 800921a:	f7ff fb9f 	bl	800895c <netconn_apimsg>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009224:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009228:	2b00      	cmp	r3, #0
 800922a:	d114      	bne.n	8009256 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800922c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800922e:	2b00      	cmp	r3, #0
 8009230:	d002      	beq.n	8009238 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009236:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009244:	429a      	cmp	r2, r3
 8009246:	d006      	beq.n	8009256 <netconn_write_vectors_partly+0x14a>
 8009248:	4b06      	ldr	r3, [pc, #24]	; (8009264 <netconn_write_vectors_partly+0x158>)
 800924a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800924e:	490a      	ldr	r1, [pc, #40]	; (8009278 <netconn_write_vectors_partly+0x16c>)
 8009250:	4806      	ldr	r0, [pc, #24]	; (800926c <netconn_write_vectors_partly+0x160>)
 8009252:	f00f fbdd 	bl	8018a10 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009256:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800925a:	4618      	mov	r0, r3
 800925c:	3748      	adds	r7, #72	; 0x48
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	0801c028 	.word	0x0801c028
 8009268:	0801c300 	.word	0x0801c300
 800926c:	0801c080 	.word	0x0801c080
 8009270:	0801c31c 	.word	0x0801c31c
 8009274:	0800a89d 	.word	0x0800a89d
 8009278:	0801c340 	.word	0x0801c340

0800927c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08c      	sub	sp, #48	; 0x30
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d109      	bne.n	80092a2 <netconn_close_shutdown+0x26>
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <netconn_close_shutdown+0x50>)
 8009290:	f240 4247 	movw	r2, #1095	; 0x447
 8009294:	490e      	ldr	r1, [pc, #56]	; (80092d0 <netconn_close_shutdown+0x54>)
 8009296:	480f      	ldr	r0, [pc, #60]	; (80092d4 <netconn_close_shutdown+0x58>)
 8009298:	f00f fbba 	bl	8018a10 <iprintf>
 800929c:	f06f 030f 	mvn.w	r3, #15
 80092a0:	e010      	b.n	80092c4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80092aa:	2329      	movs	r3, #41	; 0x29
 80092ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80092ae:	f107 030c 	add.w	r3, r7, #12
 80092b2:	4619      	mov	r1, r3
 80092b4:	4808      	ldr	r0, [pc, #32]	; (80092d8 <netconn_close_shutdown+0x5c>)
 80092b6:	f7ff fb51 	bl	800895c <netconn_apimsg>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80092c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3730      	adds	r7, #48	; 0x30
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	0801c028 	.word	0x0801c028
 80092d0:	0801c364 	.word	0x0801c364
 80092d4:	0801c080 	.word	0x0801c080
 80092d8:	0800a9b5 	.word	0x0800a9b5

080092dc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80092e4:	2103      	movs	r1, #3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff ffc8 	bl	800927c <netconn_close_shutdown>
 80092ec:	4603      	mov	r3, r0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b084      	sub	sp, #16
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <netconn_err+0x12>
    return ERR_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	e00d      	b.n	8009324 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009308:	f00c fd44 	bl	8015d94 <sys_arch_protect>
 800930c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7a1b      	ldrb	r3, [r3, #8]
 8009312:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f00c fd48 	bl	8015db0 <sys_arch_unprotect>
  return err;
 8009320:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933a:	f113 0f0e 	cmn.w	r3, #14
 800933e:	d008      	beq.n	8009352 <lwip_netconn_err_to_msg+0x26>
 8009340:	f113 0f0d 	cmn.w	r3, #13
 8009344:	d003      	beq.n	800934e <lwip_netconn_err_to_msg+0x22>
 8009346:	f113 0f0f 	cmn.w	r3, #15
 800934a:	d004      	beq.n	8009356 <lwip_netconn_err_to_msg+0x2a>
 800934c:	e005      	b.n	800935a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800934e:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <lwip_netconn_err_to_msg+0x4c>)
 8009350:	e00e      	b.n	8009370 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009352:	4b0a      	ldr	r3, [pc, #40]	; (800937c <lwip_netconn_err_to_msg+0x50>)
 8009354:	e00c      	b.n	8009370 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <lwip_netconn_err_to_msg+0x54>)
 8009358:	e00a      	b.n	8009370 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800935a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d005      	beq.n	800936e <lwip_netconn_err_to_msg+0x42>
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <lwip_netconn_err_to_msg+0x58>)
 8009364:	227d      	movs	r2, #125	; 0x7d
 8009366:	4908      	ldr	r1, [pc, #32]	; (8009388 <lwip_netconn_err_to_msg+0x5c>)
 8009368:	4808      	ldr	r0, [pc, #32]	; (800938c <lwip_netconn_err_to_msg+0x60>)
 800936a:	f00f fb51 	bl	8018a10 <iprintf>
      return NULL;
 800936e:	2300      	movs	r3, #0
  }
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	0801f748 	.word	0x0801f748
 800937c:	0801f749 	.word	0x0801f749
 8009380:	0801f74a 	.word	0x0801f74a
 8009384:	0801c380 	.word	0x0801c380
 8009388:	0801c3b4 	.word	0x0801c3b4
 800938c:	0801c3c4 	.word	0x0801c3c4

08009390 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d105      	bne.n	80093ac <lwip_netconn_is_err_msg+0x1c>
 80093a0:	4b12      	ldr	r3, [pc, #72]	; (80093ec <lwip_netconn_is_err_msg+0x5c>)
 80093a2:	2285      	movs	r2, #133	; 0x85
 80093a4:	4912      	ldr	r1, [pc, #72]	; (80093f0 <lwip_netconn_is_err_msg+0x60>)
 80093a6:	4813      	ldr	r0, [pc, #76]	; (80093f4 <lwip_netconn_is_err_msg+0x64>)
 80093a8:	f00f fb32 	bl	8018a10 <iprintf>

  if (msg == &netconn_aborted) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a12      	ldr	r2, [pc, #72]	; (80093f8 <lwip_netconn_is_err_msg+0x68>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d104      	bne.n	80093be <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	22f3      	movs	r2, #243	; 0xf3
 80093b8:	701a      	strb	r2, [r3, #0]
    return 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e012      	b.n	80093e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a0e      	ldr	r2, [pc, #56]	; (80093fc <lwip_netconn_is_err_msg+0x6c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d104      	bne.n	80093d0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	22f2      	movs	r2, #242	; 0xf2
 80093ca:	701a      	strb	r2, [r3, #0]
    return 1;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e009      	b.n	80093e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a0b      	ldr	r2, [pc, #44]	; (8009400 <lwip_netconn_is_err_msg+0x70>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d104      	bne.n	80093e2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	22f1      	movs	r2, #241	; 0xf1
 80093dc:	701a      	strb	r2, [r3, #0]
    return 1;
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	0801c380 	.word	0x0801c380
 80093f0:	0801c3ec 	.word	0x0801c3ec
 80093f4:	0801c3c4 	.word	0x0801c3c4
 80093f8:	0801f748 	.word	0x0801f748
 80093fc:	0801f749 	.word	0x0801f749
 8009400:	0801f74a 	.word	0x0801f74a

08009404 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d105      	bne.n	8009424 <recv_udp+0x20>
 8009418:	4b34      	ldr	r3, [pc, #208]	; (80094ec <recv_udp+0xe8>)
 800941a:	22e5      	movs	r2, #229	; 0xe5
 800941c:	4934      	ldr	r1, [pc, #208]	; (80094f0 <recv_udp+0xec>)
 800941e:	4835      	ldr	r0, [pc, #212]	; (80094f4 <recv_udp+0xf0>)
 8009420:	f00f faf6 	bl	8018a10 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <recv_udp+0x32>
 800942a:	4b30      	ldr	r3, [pc, #192]	; (80094ec <recv_udp+0xe8>)
 800942c:	22e6      	movs	r2, #230	; 0xe6
 800942e:	4932      	ldr	r1, [pc, #200]	; (80094f8 <recv_udp+0xf4>)
 8009430:	4830      	ldr	r0, [pc, #192]	; (80094f4 <recv_udp+0xf0>)
 8009432:	f00f faed 	bl	8018a10 <iprintf>
  conn = (struct netconn *)arg;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <recv_udp+0x44>
    pbuf_free(p);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f003 f891 	bl	800c568 <pbuf_free>
    return;
 8009446:	e04d      	b.n	80094e4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	429a      	cmp	r2, r3
 8009450:	d005      	beq.n	800945e <recv_udp+0x5a>
 8009452:	4b26      	ldr	r3, [pc, #152]	; (80094ec <recv_udp+0xe8>)
 8009454:	22ee      	movs	r2, #238	; 0xee
 8009456:	4929      	ldr	r1, [pc, #164]	; (80094fc <recv_udp+0xf8>)
 8009458:	4826      	ldr	r0, [pc, #152]	; (80094f4 <recv_udp+0xf0>)
 800945a:	f00f fad9 	bl	8018a10 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800945e:	69fb      	ldr	r3, [r7, #28]
 8009460:	3310      	adds	r3, #16
 8009462:	4618      	mov	r0, r3
 8009464:	f00c fb7b 	bl	8015b5e <sys_mbox_valid>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d103      	bne.n	8009476 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f003 f87a 	bl	800c568 <pbuf_free>
    return;
 8009474:	e036      	b.n	80094e4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009476:	2006      	movs	r0, #6
 8009478:	f002 f9fc 	bl	800b874 <memp_malloc>
 800947c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d103      	bne.n	800948c <recv_udp+0x88>
    pbuf_free(p);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f003 f86f 	bl	800c568 <pbuf_free>
    return;
 800948a:	e02b      	b.n	80094e4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <recv_udp+0xa0>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	e000      	b.n	80094a6 <recv_udp+0xa2>
 80094a4:	2300      	movs	r3, #0
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80094ae:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	891b      	ldrh	r3, [r3, #8]
 80094b4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	3310      	adds	r3, #16
 80094ba:	69b9      	ldr	r1, [r7, #24]
 80094bc:	4618      	mov	r0, r3
 80094be:	f00c fad9 	bl	8015a74 <sys_mbox_trypost>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <recv_udp+0xcc>
    netbuf_delete(buf);
 80094c8:	69b8      	ldr	r0, [r7, #24]
 80094ca:	f001 faff 	bl	800aacc <netbuf_delete>
    return;
 80094ce:	e009      	b.n	80094e4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d005      	beq.n	80094e4 <recv_udp+0xe0>
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	8afa      	ldrh	r2, [r7, #22]
 80094de:	2100      	movs	r1, #0
 80094e0:	69f8      	ldr	r0, [r7, #28]
 80094e2:	4798      	blx	r3
  }
}
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	0801c380 	.word	0x0801c380
 80094f0:	0801c3f8 	.word	0x0801c3f8
 80094f4:	0801c3c4 	.word	0x0801c3c4
 80094f8:	0801c41c 	.word	0x0801c41c
 80094fc:	0801c43c 	.word	0x0801c43c

08009500 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <recv_tcp+0x22>
 8009514:	4b36      	ldr	r3, [pc, #216]	; (80095f0 <recv_tcp+0xf0>)
 8009516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800951a:	4936      	ldr	r1, [pc, #216]	; (80095f4 <recv_tcp+0xf4>)
 800951c:	4836      	ldr	r0, [pc, #216]	; (80095f8 <recv_tcp+0xf8>)
 800951e:	f00f fa77 	bl	8018a10 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d106      	bne.n	8009536 <recv_tcp+0x36>
 8009528:	4b31      	ldr	r3, [pc, #196]	; (80095f0 <recv_tcp+0xf0>)
 800952a:	f240 122d 	movw	r2, #301	; 0x12d
 800952e:	4933      	ldr	r1, [pc, #204]	; (80095fc <recv_tcp+0xfc>)
 8009530:	4831      	ldr	r0, [pc, #196]	; (80095f8 <recv_tcp+0xf8>)
 8009532:	f00f fa6d 	bl	8018a10 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d006      	beq.n	800954c <recv_tcp+0x4c>
 800953e:	4b2c      	ldr	r3, [pc, #176]	; (80095f0 <recv_tcp+0xf0>)
 8009540:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009544:	492e      	ldr	r1, [pc, #184]	; (8009600 <recv_tcp+0x100>)
 8009546:	482c      	ldr	r0, [pc, #176]	; (80095f8 <recv_tcp+0xf8>)
 8009548:	f00f fa62 	bl	8018a10 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d102      	bne.n	800955c <recv_tcp+0x5c>
    return ERR_VAL;
 8009556:	f06f 0305 	mvn.w	r3, #5
 800955a:	e045      	b.n	80095e8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	d006      	beq.n	8009574 <recv_tcp+0x74>
 8009566:	4b22      	ldr	r3, [pc, #136]	; (80095f0 <recv_tcp+0xf0>)
 8009568:	f240 1235 	movw	r2, #309	; 0x135
 800956c:	4925      	ldr	r1, [pc, #148]	; (8009604 <recv_tcp+0x104>)
 800956e:	4822      	ldr	r0, [pc, #136]	; (80095f8 <recv_tcp+0xf8>)
 8009570:	f00f fa4e 	bl	8018a10 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	3310      	adds	r3, #16
 8009578:	4618      	mov	r0, r3
 800957a:	f00c faf0 	bl	8015b5e <sys_mbox_valid>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10d      	bne.n	80095a0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d008      	beq.n	800959c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	891b      	ldrh	r3, [r3, #8]
 800958e:	4619      	mov	r1, r3
 8009590:	68b8      	ldr	r0, [r7, #8]
 8009592:	f003 ff97 	bl	800d4c4 <tcp_recved>
      pbuf_free(p);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f002 ffe6 	bl	800c568 <pbuf_free>
    }
    return ERR_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	e023      	b.n	80095e8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <recv_tcp+0xb2>
    msg = p;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	891b      	ldrh	r3, [r3, #8]
 80095ae:	83fb      	strh	r3, [r7, #30]
 80095b0:	e003      	b.n	80095ba <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <recv_tcp+0x108>)
 80095b4:	61bb      	str	r3, [r7, #24]
    len = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	3310      	adds	r3, #16
 80095be:	69b9      	ldr	r1, [r7, #24]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f00c fa57 	bl	8015a74 <sys_mbox_trypost>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095d0:	e00a      	b.n	80095e8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d005      	beq.n	80095e6 <recv_tcp+0xe6>
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	8bfa      	ldrh	r2, [r7, #30]
 80095e0:	2100      	movs	r1, #0
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	4798      	blx	r3
  }

  return ERR_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	0801c380 	.word	0x0801c380
 80095f4:	0801c45c 	.word	0x0801c45c
 80095f8:	0801c3c4 	.word	0x0801c3c4
 80095fc:	0801c480 	.word	0x0801c480
 8009600:	0801c4a0 	.word	0x0801c4a0
 8009604:	0801c4b8 	.word	0x0801c4b8
 8009608:	0801f74a 	.word	0x0801f74a

0800960c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d106      	bne.n	800962e <poll_tcp+0x22>
 8009620:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <poll_tcp+0xbc>)
 8009622:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009626:	4929      	ldr	r1, [pc, #164]	; (80096cc <poll_tcp+0xc0>)
 8009628:	4829      	ldr	r0, [pc, #164]	; (80096d0 <poll_tcp+0xc4>)
 800962a:	f00f f9f1 	bl	8018a10 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d104      	bne.n	8009640 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009636:	2101      	movs	r1, #1
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 ff63 	bl	800a504 <lwip_netconn_do_writemore>
 800963e:	e016      	b.n	800966e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	785b      	ldrb	r3, [r3, #1]
 8009644:	2b04      	cmp	r3, #4
 8009646:	d112      	bne.n	800966e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00a      	beq.n	8009666 <poll_tcp+0x5a>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	7a5b      	ldrb	r3, [r3, #9]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	7a5a      	ldrb	r2, [r3, #9]
 8009660:	3a01      	subs	r2, #1
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009666:	2101      	movs	r1, #1
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fbf7 	bl	8009e5c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	7f1b      	ldrb	r3, [r3, #28]
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b00      	cmp	r3, #0
 8009678:	d021      	beq.n	80096be <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d01d      	beq.n	80096be <poll_tcp+0xb2>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800968a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800968e:	d316      	bcc.n	80096be <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009698:	2b04      	cmp	r3, #4
 800969a:	d810      	bhi.n	80096be <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	7f1b      	ldrb	r3, [r3, #28]
 80096a0:	f023 0310 	bic.w	r3, r3, #16
 80096a4:	b2da      	uxtb	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <poll_tcp+0xb2>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	2200      	movs	r2, #0
 80096b8:	2102      	movs	r1, #2
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	0801c380 	.word	0x0801c380
 80096cc:	0801c4d8 	.word	0x0801c4d8
 80096d0:	0801c3c4 	.word	0x0801c3c4

080096d4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	4613      	mov	r3, r2
 80096e0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <sent_tcp+0x26>
 80096ec:	4b20      	ldr	r3, [pc, #128]	; (8009770 <sent_tcp+0x9c>)
 80096ee:	f240 1293 	movw	r2, #403	; 0x193
 80096f2:	4920      	ldr	r1, [pc, #128]	; (8009774 <sent_tcp+0xa0>)
 80096f4:	4820      	ldr	r0, [pc, #128]	; (8009778 <sent_tcp+0xa4>)
 80096f6:	f00f f98b 	bl	8018a10 <iprintf>

  if (conn) {
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d032      	beq.n	8009766 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d104      	bne.n	8009712 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009708:	2101      	movs	r1, #1
 800970a:	6978      	ldr	r0, [r7, #20]
 800970c:	f000 fefa 	bl	800a504 <lwip_netconn_do_writemore>
 8009710:	e007      	b.n	8009722 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b04      	cmp	r3, #4
 8009718:	d103      	bne.n	8009722 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800971a:	2101      	movs	r1, #1
 800971c:	6978      	ldr	r0, [r7, #20]
 800971e:	f000 fb9d 	bl	8009e5c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01d      	beq.n	8009766 <sent_tcp+0x92>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009732:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009736:	d316      	bcc.n	8009766 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009740:	2b04      	cmp	r3, #4
 8009742:	d810      	bhi.n	8009766 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	7f1b      	ldrb	r3, [r3, #28]
 8009748:	f023 0310 	bic.w	r3, r3, #16
 800974c:	b2da      	uxtb	r2, r3
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d005      	beq.n	8009766 <sent_tcp+0x92>
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	88fa      	ldrh	r2, [r7, #6]
 8009760:	2102      	movs	r1, #2
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	0801c380 	.word	0x0801c380
 8009774:	0801c4d8 	.word	0x0801c4d8
 8009778:	0801c3c4 	.word	0x0801c3c4

0800977c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d106      	bne.n	80097a0 <err_tcp+0x24>
 8009792:	4b5f      	ldr	r3, [pc, #380]	; (8009910 <err_tcp+0x194>)
 8009794:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009798:	495e      	ldr	r1, [pc, #376]	; (8009914 <err_tcp+0x198>)
 800979a:	485f      	ldr	r0, [pc, #380]	; (8009918 <err_tcp+0x19c>)
 800979c:	f00f f938 	bl	8018a10 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80097a0:	f00c faf8 	bl	8015d94 <sys_arch_protect>
 80097a4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	7f1b      	ldrb	r3, [r3, #28]
 80097b6:	f043 0301 	orr.w	r3, r3, #1
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	785b      	ldrb	r3, [r3, #1]
 80097c4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	2200      	movs	r2, #0
 80097ca:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80097cc:	69b8      	ldr	r0, [r7, #24]
 80097ce:	f00c faef 	bl	8015db0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d005      	beq.n	80097e6 <err_tcp+0x6a>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	2200      	movs	r2, #0
 80097e0:	2104      	movs	r1, #4
 80097e2:	69f8      	ldr	r0, [r7, #28]
 80097e4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80097e6:	69fb      	ldr	r3, [r7, #28]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <err_tcp+0x7e>
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	2200      	movs	r2, #0
 80097f4:	2100      	movs	r1, #0
 80097f6:	69f8      	ldr	r0, [r7, #28]
 80097f8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <err_tcp+0x92>
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2200      	movs	r2, #0
 8009808:	2102      	movs	r1, #2
 800980a:	69f8      	ldr	r0, [r7, #28]
 800980c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800980e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fd8a 	bl	800932c <lwip_netconn_err_to_msg>
 8009818:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	3310      	adds	r3, #16
 800981e:	4618      	mov	r0, r3
 8009820:	f00c f99d 	bl	8015b5e <sys_mbox_valid>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	3310      	adds	r3, #16
 800982e:	6939      	ldr	r1, [r7, #16]
 8009830:	4618      	mov	r0, r3
 8009832:	f00c f91f 	bl	8015a74 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	3314      	adds	r3, #20
 800983a:	4618      	mov	r0, r3
 800983c:	f00c f98f 	bl	8015b5e <sys_mbox_valid>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	3314      	adds	r3, #20
 800984a:	6939      	ldr	r1, [r7, #16]
 800984c:	4618      	mov	r0, r3
 800984e:	f00c f911 	bl	8015a74 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d005      	beq.n	8009864 <err_tcp+0xe8>
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	2b04      	cmp	r3, #4
 800985c:	d002      	beq.n	8009864 <err_tcp+0xe8>
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	2b03      	cmp	r3, #3
 8009862:	d143      	bne.n	80098ec <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	7f1b      	ldrb	r3, [r3, #28]
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b00      	cmp	r3, #0
 800986e:	bf14      	ite	ne
 8009870:	2301      	movne	r3, #1
 8009872:	2300      	moveq	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	7f1b      	ldrb	r3, [r3, #28]
 800987c:	f023 0304 	bic.w	r3, r3, #4
 8009880:	b2da      	uxtb	r2, r3
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d13b      	bne.n	8009904 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <err_tcp+0x126>
 8009894:	4b1e      	ldr	r3, [pc, #120]	; (8009910 <err_tcp+0x194>)
 8009896:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800989a:	4920      	ldr	r1, [pc, #128]	; (800991c <err_tcp+0x1a0>)
 800989c:	481e      	ldr	r0, [pc, #120]	; (8009918 <err_tcp+0x19c>)
 800989e:	f00f f8b7 	bl	8018a10 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	d104      	bne.n	80098b2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	2200      	movs	r2, #0
 80098ae:	711a      	strb	r2, [r3, #4]
 80098b0:	e003      	b.n	80098ba <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	330c      	adds	r3, #12
 80098c2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80098c4:	68b8      	ldr	r0, [r7, #8]
 80098c6:	f00c f9db 	bl	8015c80 <sys_sem_valid>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <err_tcp+0x162>
 80098d0:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <err_tcp+0x194>)
 80098d2:	f240 12ef 	movw	r2, #495	; 0x1ef
 80098d6:	4912      	ldr	r1, [pc, #72]	; (8009920 <err_tcp+0x1a4>)
 80098d8:	480f      	ldr	r0, [pc, #60]	; (8009918 <err_tcp+0x19c>)
 80098da:	f00f f899 	bl	8018a10 <iprintf>
      conn->current_msg = NULL;
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	2200      	movs	r2, #0
 80098e2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80098e4:	68b8      	ldr	r0, [r7, #8]
 80098e6:	f00c f9b1 	bl	8015c4c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80098ea:	e00b      	b.n	8009904 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d008      	beq.n	8009906 <err_tcp+0x18a>
 80098f4:	4b06      	ldr	r3, [pc, #24]	; (8009910 <err_tcp+0x194>)
 80098f6:	f240 12f7 	movw	r2, #503	; 0x1f7
 80098fa:	490a      	ldr	r1, [pc, #40]	; (8009924 <err_tcp+0x1a8>)
 80098fc:	4806      	ldr	r0, [pc, #24]	; (8009918 <err_tcp+0x19c>)
 80098fe:	f00f f887 	bl	8018a10 <iprintf>
  }
}
 8009902:	e000      	b.n	8009906 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009904:	bf00      	nop
}
 8009906:	bf00      	nop
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	0801c380 	.word	0x0801c380
 8009914:	0801c4d8 	.word	0x0801c4d8
 8009918:	0801c3c4 	.word	0x0801c3c4
 800991c:	0801c4e8 	.word	0x0801c4e8
 8009920:	0801c504 	.word	0x0801c504
 8009924:	0801c520 	.word	0x0801c520

08009928 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f004 fc85 	bl	800e248 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800993e:	490a      	ldr	r1, [pc, #40]	; (8009968 <setup_tcp+0x40>)
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f004 fc93 	bl	800e26c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009946:	4909      	ldr	r1, [pc, #36]	; (800996c <setup_tcp+0x44>)
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f004 fcb1 	bl	800e2b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800994e:	2202      	movs	r2, #2
 8009950:	4907      	ldr	r1, [pc, #28]	; (8009970 <setup_tcp+0x48>)
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f004 fd08 	bl	800e368 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009958:	4906      	ldr	r1, [pc, #24]	; (8009974 <setup_tcp+0x4c>)
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f004 fcca 	bl	800e2f4 <tcp_err>
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	08009501 	.word	0x08009501
 800996c:	080096d5 	.word	0x080096d5
 8009970:	0800960d 	.word	0x0800960d
 8009974:	0800977d 	.word	0x0800977d

08009978 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009978:	b590      	push	{r4, r7, lr}
 800997a:	b089      	sub	sp, #36	; 0x24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <accept_function+0x1e>
    return ERR_VAL;
 8009990:	f06f 0305 	mvn.w	r3, #5
 8009994:	e0a1      	b.n	8009ada <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	3314      	adds	r3, #20
 800999a:	4618      	mov	r0, r3
 800999c:	f00c f8df 	bl	8015b5e <sys_mbox_valid>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d102      	bne.n	80099ac <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80099a6:	f06f 0305 	mvn.w	r3, #5
 80099aa:	e096      	b.n	8009ada <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d11b      	bne.n	80099ea <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	f103 0414 	add.w	r4, r3, #20
 80099b8:	f06f 000c 	mvn.w	r0, #12
 80099bc:	f7ff fcb6 	bl	800932c <lwip_netconn_err_to_msg>
 80099c0:	4603      	mov	r3, r0
 80099c2:	4619      	mov	r1, r3
 80099c4:	4620      	mov	r0, r4
 80099c6:	f00c f855 	bl	8015a74 <sys_mbox_trypost>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d109      	bne.n	80099e4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <accept_function+0x6c>
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	2200      	movs	r2, #0
 80099de:	2100      	movs	r1, #0
 80099e0:	69f8      	ldr	r0, [r7, #28]
 80099e2:	4798      	blx	r3
    }
    return ERR_VAL;
 80099e4:	f06f 0305 	mvn.w	r3, #5
 80099e8:	e077      	b.n	8009ada <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80099ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d006      	beq.n	8009a00 <accept_function+0x88>
 80099f2:	4b3c      	ldr	r3, [pc, #240]	; (8009ae4 <accept_function+0x16c>)
 80099f4:	f240 222a 	movw	r2, #554	; 0x22a
 80099f8:	493b      	ldr	r1, [pc, #236]	; (8009ae8 <accept_function+0x170>)
 80099fa:	483c      	ldr	r0, [pc, #240]	; (8009aec <accept_function+0x174>)
 80099fc:	f00f f808 	bl	8018a10 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f000 f8f0 	bl	8009bf0 <netconn_alloc>
 8009a10:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d11b      	bne.n	8009a50 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	f103 0414 	add.w	r4, r3, #20
 8009a1e:	f06f 000c 	mvn.w	r0, #12
 8009a22:	f7ff fc83 	bl	800932c <lwip_netconn_err_to_msg>
 8009a26:	4603      	mov	r3, r0
 8009a28:	4619      	mov	r1, r3
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f00c f822 	bl	8015a74 <sys_mbox_trypost>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d005      	beq.n	8009a4a <accept_function+0xd2>
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	2200      	movs	r2, #0
 8009a44:	2100      	movs	r1, #0
 8009a46:	69f8      	ldr	r0, [r7, #28]
 8009a48:	4798      	blx	r3
    }
    return ERR_MEM;
 8009a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a4e:	e044      	b.n	8009ada <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009a56:	69b8      	ldr	r0, [r7, #24]
 8009a58:	f7ff ff66 	bl	8009928 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	3314      	adds	r3, #20
 8009a60:	69b9      	ldr	r1, [r7, #24]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f00c f806 	bl	8015a74 <sys_mbox_trypost>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d02a      	beq.n	8009ac4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009a74:	2100      	movs	r1, #0
 8009a76:	6978      	ldr	r0, [r7, #20]
 8009a78:	f004 fbe6 	bl	800e248 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6978      	ldr	r0, [r7, #20]
 8009a80:	f004 fbf4 	bl	800e26c <tcp_recv>
    tcp_sent(pcb, NULL);
 8009a84:	2100      	movs	r1, #0
 8009a86:	6978      	ldr	r0, [r7, #20]
 8009a88:	f004 fc12 	bl	800e2b0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2100      	movs	r1, #0
 8009a90:	6978      	ldr	r0, [r7, #20]
 8009a92:	f004 fc69 	bl	800e368 <tcp_poll>
    tcp_err(pcb, NULL);
 8009a96:	2100      	movs	r1, #0
 8009a98:	6978      	ldr	r0, [r7, #20]
 8009a9a:	f004 fc2b 	bl	800e2f4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	3310      	adds	r3, #16
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f00b ffd1 	bl	8015a50 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	3310      	adds	r3, #16
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f00c f864 	bl	8015b80 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009ab8:	69b8      	ldr	r0, [r7, #24]
 8009aba:	f000 f907 	bl	8009ccc <netconn_free>
    return ERR_MEM;
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ac2:	e00a      	b.n	8009ada <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <accept_function+0x160>
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	69f8      	ldr	r0, [r7, #28]
 8009ad6:	4798      	blx	r3
  }

  return ERR_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3724      	adds	r7, #36	; 0x24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0801c380 	.word	0x0801c380
 8009ae8:	0801c53c 	.word	0x0801c53c
 8009aec:	0801c3c4 	.word	0x0801c3c4

08009af0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009af0:	b590      	push	{r4, r7, lr}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d006      	beq.n	8009b14 <pcb_new+0x24>
 8009b06:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <pcb_new+0xc4>)
 8009b08:	f240 2265 	movw	r2, #613	; 0x265
 8009b0c:	492a      	ldr	r1, [pc, #168]	; (8009bb8 <pcb_new+0xc8>)
 8009b0e:	482b      	ldr	r0, [pc, #172]	; (8009bbc <pcb_new+0xcc>)
 8009b10:	f00e ff7e 	bl	8018a10 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b1e:	2b10      	cmp	r3, #16
 8009b20:	d022      	beq.n	8009b68 <pcb_new+0x78>
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d133      	bne.n	8009b8e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681c      	ldr	r4, [r3, #0]
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f009 fc76 	bl	801341e <udp_new_ip_type>
 8009b32:	4603      	mov	r3, r0
 8009b34:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d02a      	beq.n	8009b96 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b22      	cmp	r3, #34	; 0x22
 8009b48:	d104      	bne.n	8009b54 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6858      	ldr	r0, [r3, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	4917      	ldr	r1, [pc, #92]	; (8009bc0 <pcb_new+0xd0>)
 8009b62:	f009 fbe3 	bl	801332c <udp_recv>
      }
      break;
 8009b66:	e016      	b.n	8009b96 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681c      	ldr	r4, [r3, #0]
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f004 fb5c 	bl	800e22c <tcp_new_ip_type>
 8009b74:	4603      	mov	r3, r0
 8009b76:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fece 	bl	8009928 <setup_tcp>
      }
      break;
 8009b8c:	e005      	b.n	8009b9a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	22fa      	movs	r2, #250	; 0xfa
 8009b92:	711a      	strb	r2, [r3, #4]
      return;
 8009b94:	e00a      	b.n	8009bac <pcb_new+0xbc>
      break;
 8009b96:	bf00      	nop
 8009b98:	e000      	b.n	8009b9c <pcb_new+0xac>
      break;
 8009b9a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d102      	bne.n	8009bac <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	22ff      	movs	r2, #255	; 0xff
 8009baa:	711a      	strb	r2, [r3, #4]
  }
}
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd90      	pop	{r4, r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	0801c380 	.word	0x0801c380
 8009bb8:	0801c564 	.word	0x0801c564
 8009bbc:	0801c3c4 	.word	0x0801c3c4
 8009bc0:	08009405 	.word	0x08009405

08009bc4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f7ff ff85 	bl	8009af0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6039      	str	r1, [r7, #0]
 8009bfa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009c00:	2007      	movs	r0, #7
 8009c02:	f001 fe37 	bl	800b874 <memp_malloc>
 8009c06:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <netconn_alloc+0x22>
    return NULL;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	e052      	b.n	8009cb8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	79fa      	ldrb	r2, [r7, #7]
 8009c1c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009c24:	79fb      	ldrb	r3, [r7, #7]
 8009c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d004      	beq.n	8009c38 <netconn_alloc+0x48>
 8009c2e:	2b20      	cmp	r3, #32
 8009c30:	d105      	bne.n	8009c3e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009c32:	2306      	movs	r3, #6
 8009c34:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009c36:	e00a      	b.n	8009c4e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009c38:	2306      	movs	r3, #6
 8009c3a:	617b      	str	r3, [r7, #20]
      break;
 8009c3c:	e007      	b.n	8009c4e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009c3e:	4b20      	ldr	r3, [pc, #128]	; (8009cc0 <netconn_alloc+0xd0>)
 8009c40:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009c44:	491f      	ldr	r1, [pc, #124]	; (8009cc4 <netconn_alloc+0xd4>)
 8009c46:	4820      	ldr	r0, [pc, #128]	; (8009cc8 <netconn_alloc+0xd8>)
 8009c48:	f00e fee2 	bl	8018a10 <iprintf>
      goto free_and_return;
 8009c4c:	e02f      	b.n	8009cae <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3310      	adds	r3, #16
 8009c52:	6979      	ldr	r1, [r7, #20]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f00b fed9 	bl	8015a0c <sys_mbox_new>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d125      	bne.n	8009cac <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	330c      	adds	r3, #12
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f00b ff97 	bl	8015b9a <sys_sem_new>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d005      	beq.n	8009c7e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3310      	adds	r3, #16
 8009c76:	4618      	mov	r0, r3
 8009c78:	f00b feea 	bl	8015a50 <sys_mbox_free>
    goto free_and_return;
 8009c7c:	e017      	b.n	8009cae <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3314      	adds	r3, #20
 8009c82:	4618      	mov	r0, r3
 8009c84:	f00b ff7c 	bl	8015b80 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	7cfa      	ldrb	r2, [r7, #19]
 8009ca6:	771a      	strb	r2, [r3, #28]
  return conn;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	e005      	b.n	8009cb8 <netconn_alloc+0xc8>
    goto free_and_return;
 8009cac:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	2007      	movs	r0, #7
 8009cb2:	f001 fe31 	bl	800b918 <memp_free>
  return NULL;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	0801c380 	.word	0x0801c380
 8009cc4:	0801c584 	.word	0x0801c584
 8009cc8:	0801c3c4 	.word	0x0801c3c4

08009ccc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d006      	beq.n	8009cea <netconn_free+0x1e>
 8009cdc:	4b1b      	ldr	r3, [pc, #108]	; (8009d4c <netconn_free+0x80>)
 8009cde:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009ce2:	491b      	ldr	r1, [pc, #108]	; (8009d50 <netconn_free+0x84>)
 8009ce4:	481b      	ldr	r0, [pc, #108]	; (8009d54 <netconn_free+0x88>)
 8009ce6:	f00e fe93 	bl	8018a10 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3310      	adds	r3, #16
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f00b ff35 	bl	8015b5e <sys_mbox_valid>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d006      	beq.n	8009d08 <netconn_free+0x3c>
 8009cfa:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <netconn_free+0x80>)
 8009cfc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009d00:	4915      	ldr	r1, [pc, #84]	; (8009d58 <netconn_free+0x8c>)
 8009d02:	4814      	ldr	r0, [pc, #80]	; (8009d54 <netconn_free+0x88>)
 8009d04:	f00e fe84 	bl	8018a10 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3314      	adds	r3, #20
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f00b ff26 	bl	8015b5e <sys_mbox_valid>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d006      	beq.n	8009d26 <netconn_free+0x5a>
 8009d18:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <netconn_free+0x80>)
 8009d1a:	f240 3227 	movw	r2, #807	; 0x327
 8009d1e:	490f      	ldr	r1, [pc, #60]	; (8009d5c <netconn_free+0x90>)
 8009d20:	480c      	ldr	r0, [pc, #48]	; (8009d54 <netconn_free+0x88>)
 8009d22:	f00e fe75 	bl	8018a10 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	330c      	adds	r3, #12
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f00b ff9b 	bl	8015c66 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	330c      	adds	r3, #12
 8009d34:	4618      	mov	r0, r3
 8009d36:	f00b ffb4 	bl	8015ca2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	2007      	movs	r0, #7
 8009d3e:	f001 fdeb 	bl	800b918 <memp_free>
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	0801c380 	.word	0x0801c380
 8009d50:	0801c5ac 	.word	0x0801c5ac
 8009d54:	0801c3c4 	.word	0x0801c3c4
 8009d58:	0801c5dc 	.word	0x0801c5dc
 8009d5c:	0801c618 	.word	0x0801c618

08009d60 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3310      	adds	r3, #16
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f00b fef6 	bl	8015b5e <sys_mbox_valid>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d02f      	beq.n	8009dd8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009d78:	e018      	b.n	8009dac <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d82:	2b10      	cmp	r3, #16
 8009d84:	d10e      	bne.n	8009da4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f107 020f 	add.w	r2, r7, #15
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fafe 	bl	8009390 <lwip_netconn_is_err_msg>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d108      	bne.n	8009dac <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f002 fbe3 	bl	800c568 <pbuf_free>
 8009da2:	e003      	b.n	8009dac <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fe90 	bl	800aacc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3310      	adds	r3, #16
 8009db0:	f107 0210 	add.w	r2, r7, #16
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f00b feb5 	bl	8015b26 <sys_arch_mbox_tryfetch>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc2:	d1da      	bne.n	8009d7a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3310      	adds	r3, #16
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f00b fe41 	bl	8015a50 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3310      	adds	r3, #16
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f00b fed4 	bl	8015b80 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3314      	adds	r3, #20
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f00b febe 	bl	8015b5e <sys_mbox_valid>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d034      	beq.n	8009e52 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009de8:	e01d      	b.n	8009e26 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f107 020e 	add.w	r2, r7, #14
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff facc 	bl	8009390 <lwip_netconn_is_err_msg>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d113      	bne.n	8009e26 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009e02:	6978      	ldr	r0, [r7, #20]
 8009e04:	f7ff ffac 	bl	8009d60 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d007      	beq.n	8009e20 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f003 f98d 	bl	800d134 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009e20:	6978      	ldr	r0, [r7, #20]
 8009e22:	f7ff ff53 	bl	8009ccc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3314      	adds	r3, #20
 8009e2a:	f107 0210 	add.w	r2, r7, #16
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f00b fe78 	bl	8015b26 <sys_arch_mbox_tryfetch>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e3c:	d1d5      	bne.n	8009dea <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3314      	adds	r3, #20
 8009e42:	4618      	mov	r0, r3
 8009e44:	f00b fe04 	bl	8015a50 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3314      	adds	r3, #20
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f00b fe97 	bl	8015b80 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009e52:	bf00      	nop
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <lwip_netconn_do_close_internal+0x24>
 8009e72:	4ba1      	ldr	r3, [pc, #644]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 8009e74:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009e78:	49a0      	ldr	r1, [pc, #640]	; (800a0fc <lwip_netconn_do_close_internal+0x2a0>)
 8009e7a:	48a1      	ldr	r0, [pc, #644]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 8009e7c:	f00e fdc8 	bl	8018a10 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e88:	2b10      	cmp	r3, #16
 8009e8a:	d006      	beq.n	8009e9a <lwip_netconn_do_close_internal+0x3e>
 8009e8c:	4b9a      	ldr	r3, [pc, #616]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 8009e8e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009e92:	499c      	ldr	r1, [pc, #624]	; (800a104 <lwip_netconn_do_close_internal+0x2a8>)
 8009e94:	489a      	ldr	r0, [pc, #616]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 8009e96:	f00e fdbb 	bl	8018a10 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	785b      	ldrb	r3, [r3, #1]
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d006      	beq.n	8009eb0 <lwip_netconn_do_close_internal+0x54>
 8009ea2:	4b95      	ldr	r3, [pc, #596]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 8009ea4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009ea8:	4997      	ldr	r1, [pc, #604]	; (800a108 <lwip_netconn_do_close_internal+0x2ac>)
 8009eaa:	4895      	ldr	r0, [pc, #596]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 8009eac:	f00e fdb0 	bl	8018a10 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d106      	bne.n	8009ec6 <lwip_netconn_do_close_internal+0x6a>
 8009eb8:	4b8f      	ldr	r3, [pc, #572]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 8009eba:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009ebe:	4993      	ldr	r1, [pc, #588]	; (800a10c <lwip_netconn_do_close_internal+0x2b0>)
 8009ec0:	488f      	ldr	r0, [pc, #572]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 8009ec2:	f00e fda5 	bl	8018a10 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a1b      	ldr	r3, [r3, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <lwip_netconn_do_close_internal+0x80>
 8009ece:	4b8a      	ldr	r3, [pc, #552]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 8009ed0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009ed4:	498e      	ldr	r1, [pc, #568]	; (800a110 <lwip_netconn_do_close_internal+0x2b4>)
 8009ed6:	488a      	ldr	r0, [pc, #552]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 8009ed8:	f00e fd9a 	bl	8018a10 <iprintf>

  tpcb = conn->pcb.tcp;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	7a1b      	ldrb	r3, [r3, #8]
 8009ee8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d102      	bne.n	8009f06 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009f00:	2301      	movs	r3, #1
 8009f02:	75bb      	strb	r3, [r7, #22]
 8009f04:	e01f      	b.n	8009f46 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00e      	beq.n	8009f2a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009f10:	2b05      	cmp	r3, #5
 8009f12:	d007      	beq.n	8009f24 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009f18:	2b06      	cmp	r3, #6
 8009f1a:	d003      	beq.n	8009f24 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d102      	bne.n	8009f2a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009f24:	2301      	movs	r3, #1
 8009f26:	75bb      	strb	r3, [r7, #22]
 8009f28:	e00d      	b.n	8009f46 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009f2a:	7b7b      	ldrb	r3, [r7, #13]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d008      	beq.n	8009f42 <lwip_netconn_do_close_internal+0xe6>
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	8b5b      	ldrh	r3, [r3, #26]
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	75bb      	strb	r3, [r7, #22]
 8009f40:	e001      	b.n	8009f46 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009f46:	7dbb      	ldrb	r3, [r7, #22]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d003      	beq.n	8009f54 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6938      	ldr	r0, [r7, #16]
 8009f50:	f004 f97a 	bl	800e248 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	7d1b      	ldrb	r3, [r3, #20]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d104      	bne.n	8009f66 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	6938      	ldr	r0, [r7, #16]
 8009f60:	f004 f9ea 	bl	800e338 <tcp_accept>
 8009f64:	e01d      	b.n	8009fa2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6938      	ldr	r0, [r7, #16]
 8009f70:	f004 f97c 	bl	800e26c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009f74:	2100      	movs	r1, #0
 8009f76:	6938      	ldr	r0, [r7, #16]
 8009f78:	f004 f9de 	bl	800e338 <tcp_accept>
    }
    if (shut_tx) {
 8009f7c:	7b7b      	ldrb	r3, [r7, #13]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009f82:	2100      	movs	r1, #0
 8009f84:	6938      	ldr	r0, [r7, #16]
 8009f86:	f004 f993 	bl	800e2b0 <tcp_sent>
    }
    if (shut_close) {
 8009f8a:	7dbb      	ldrb	r3, [r7, #22]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d008      	beq.n	8009fa2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009f90:	2200      	movs	r2, #0
 8009f92:	2100      	movs	r1, #0
 8009f94:	6938      	ldr	r0, [r7, #16]
 8009f96:	f004 f9e7 	bl	800e368 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	6938      	ldr	r0, [r7, #16]
 8009f9e:	f004 f9a9 	bl	800e2f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009fa2:	7dbb      	ldrb	r3, [r7, #22]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009fa8:	6938      	ldr	r0, [r7, #16]
 8009faa:	f002 ff7f 	bl	800ceac <tcp_close>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	75fb      	strb	r3, [r7, #23]
 8009fb2:	e007      	b.n	8009fc4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	7b7a      	ldrb	r2, [r7, #13]
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6938      	ldr	r0, [r7, #16]
 8009fbc:	f002 ffa2 	bl	800cf04 <tcp_shutdown>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d102      	bne.n	8009fd2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	757b      	strb	r3, [r7, #21]
 8009fd0:	e016      	b.n	800a000 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fda:	d10f      	bne.n	8009ffc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	7a5b      	ldrb	r3, [r3, #9]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10c      	bne.n	800a000 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009fea:	7dbb      	ldrb	r3, [r7, #22]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d007      	beq.n	800a000 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009ff0:	6938      	ldr	r0, [r7, #16]
 8009ff2:	f003 f89f 	bl	800d134 <tcp_abort>
          err = ERR_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	75fb      	strb	r3, [r7, #23]
 8009ffa:	e001      	b.n	800a000 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a000:	7d7b      	ldrb	r3, [r7, #21]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d044      	beq.n	800a090 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	330c      	adds	r3, #12
 800a00e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a1b      	ldr	r3, [r3, #32]
 800a014:	7dfa      	ldrb	r2, [r7, #23]
 800a016:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d129      	bne.n	800a080 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00c      	beq.n	800a04c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <lwip_netconn_do_close_internal+0x1f0>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2200      	movs	r2, #0
 800a046:	2104      	movs	r1, #4
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	4798      	blx	r3
      }
      if (shut_rx) {
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d009      	beq.n	800a066 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <lwip_netconn_do_close_internal+0x20a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05e:	2200      	movs	r2, #0
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4798      	blx	r3
      }
      if (shut_tx) {
 800a066:	7b7b      	ldrb	r3, [r7, #13]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <lwip_netconn_do_close_internal+0x224>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a078:	2200      	movs	r2, #0
 800a07a:	2102      	movs	r1, #2
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a086:	68b8      	ldr	r0, [r7, #8]
 800a088:	f00b fde0 	bl	8015c4c <sys_sem_signal>
    }
    return ERR_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	e02e      	b.n	800a0ee <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a090:	7d7b      	ldrb	r3, [r7, #21]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d11e      	bne.n	800a0d4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	7d1b      	ldrb	r3, [r3, #20]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d106      	bne.n	800a0ac <lwip_netconn_do_close_internal+0x250>
 800a09e:	4b16      	ldr	r3, [pc, #88]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 800a0a0:	f240 4241 	movw	r2, #1089	; 0x441
 800a0a4:	491b      	ldr	r1, [pc, #108]	; (800a114 <lwip_netconn_do_close_internal+0x2b8>)
 800a0a6:	4816      	ldr	r0, [pc, #88]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 800a0a8:	f00e fcb2 	bl	8018a10 <iprintf>
    if (shut_tx) {
 800a0ac:	7b7b      	ldrb	r3, [r7, #13]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a0b2:	4919      	ldr	r1, [pc, #100]	; (800a118 <lwip_netconn_do_close_internal+0x2bc>)
 800a0b4:	6938      	ldr	r0, [r7, #16]
 800a0b6:	f004 f8fb 	bl	800e2b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4917      	ldr	r1, [pc, #92]	; (800a11c <lwip_netconn_do_close_internal+0x2c0>)
 800a0be:	6938      	ldr	r0, [r7, #16]
 800a0c0:	f004 f952 	bl	800e368 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a0c4:	4916      	ldr	r1, [pc, #88]	; (800a120 <lwip_netconn_do_close_internal+0x2c4>)
 800a0c6:	6938      	ldr	r0, [r7, #16]
 800a0c8:	f004 f914 	bl	800e2f4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	6938      	ldr	r0, [r7, #16]
 800a0d0:	f004 f8ba 	bl	800e248 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a0d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d106      	bne.n	800a0ea <lwip_netconn_do_close_internal+0x28e>
 800a0dc:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <lwip_netconn_do_close_internal+0x29c>)
 800a0de:	f240 424d 	movw	r2, #1101	; 0x44d
 800a0e2:	4910      	ldr	r1, [pc, #64]	; (800a124 <lwip_netconn_do_close_internal+0x2c8>)
 800a0e4:	4806      	ldr	r0, [pc, #24]	; (800a100 <lwip_netconn_do_close_internal+0x2a4>)
 800a0e6:	f00e fc93 	bl	8018a10 <iprintf>
  return err;
 800a0ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	0801c380 	.word	0x0801c380
 800a0fc:	0801c654 	.word	0x0801c654
 800a100:	0801c3c4 	.word	0x0801c3c4
 800a104:	0801c664 	.word	0x0801c664
 800a108:	0801c684 	.word	0x0801c684
 800a10c:	0801c6a8 	.word	0x0801c6a8
 800a110:	0801c4e8 	.word	0x0801c4e8
 800a114:	0801c6bc 	.word	0x0801c6bc
 800a118:	080096d5 	.word	0x080096d5
 800a11c:	0800960d 	.word	0x0800960d
 800a120:	0800977d 	.word	0x0800977d
 800a124:	0801c6e0 	.word	0x0801c6e0

0800a128 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	785b      	ldrb	r3, [r3, #1]
 800a13a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00d      	beq.n	800a15e <lwip_netconn_do_delconn+0x36>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a14c:	2b10      	cmp	r3, #16
 800a14e:	d006      	beq.n	800a15e <lwip_netconn_do_delconn+0x36>
 800a150:	4b60      	ldr	r3, [pc, #384]	; (800a2d4 <lwip_netconn_do_delconn+0x1ac>)
 800a152:	f240 425f 	movw	r2, #1119	; 0x45f
 800a156:	4960      	ldr	r1, [pc, #384]	; (800a2d8 <lwip_netconn_do_delconn+0x1b0>)
 800a158:	4860      	ldr	r0, [pc, #384]	; (800a2dc <lwip_netconn_do_delconn+0x1b4>)
 800a15a:	f00e fc59 	bl	8018a10 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a15e:	7afb      	ldrb	r3, [r7, #11]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <lwip_netconn_do_delconn+0x48>
 800a164:	7afb      	ldrb	r3, [r7, #11]
 800a166:	2b02      	cmp	r3, #2
 800a168:	d002      	beq.n	800a170 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d109      	bne.n	800a184 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	2b03      	cmp	r3, #3
 800a174:	d10a      	bne.n	800a18c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	7f1b      	ldrb	r3, [r3, #28]
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	22fb      	movs	r2, #251	; 0xfb
 800a188:	711a      	strb	r2, [r3, #4]
 800a18a:	e097      	b.n	800a2bc <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d10d      	bne.n	800a1ae <lwip_netconn_do_delconn+0x86>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	7f1b      	ldrb	r3, [r3, #28]
 800a198:	f003 0304 	and.w	r3, r3, #4
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d106      	bne.n	800a1ae <lwip_netconn_do_delconn+0x86>
 800a1a0:	4b4c      	ldr	r3, [pc, #304]	; (800a2d4 <lwip_netconn_do_delconn+0x1ac>)
 800a1a2:	f240 427b 	movw	r2, #1147	; 0x47b
 800a1a6:	494e      	ldr	r1, [pc, #312]	; (800a2e0 <lwip_netconn_do_delconn+0x1b8>)
 800a1a8:	484c      	ldr	r0, [pc, #304]	; (800a2dc <lwip_netconn_do_delconn+0x1b4>)
 800a1aa:	f00e fc31 	bl	8018a10 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff fdd1 	bl	8009d60 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d05f      	beq.n	800a288 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d2:	2b10      	cmp	r3, #16
 800a1d4:	d00e      	beq.n	800a1f4 <lwip_netconn_do_delconn+0xcc>
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	d000      	beq.n	800a1dc <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800a1da:	e051      	b.n	800a280 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f009 f8bd 	bl	801336c <udp_remove>
          break;
 800a1f2:	e045      	b.n	800a280 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d006      	beq.n	800a20c <lwip_netconn_do_delconn+0xe4>
 800a1fe:	4b35      	ldr	r3, [pc, #212]	; (800a2d4 <lwip_netconn_do_delconn+0x1ac>)
 800a200:	f240 4294 	movw	r2, #1172	; 0x494
 800a204:	4937      	ldr	r1, [pc, #220]	; (800a2e4 <lwip_netconn_do_delconn+0x1bc>)
 800a206:	4835      	ldr	r0, [pc, #212]	; (800a2dc <lwip_netconn_do_delconn+0x1b4>)
 800a208:	f00e fc02 	bl	8018a10 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2204      	movs	r2, #4
 800a212:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2203      	movs	r2, #3
 800a218:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2100      	movs	r1, #0
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff fe17 	bl	8009e5c <lwip_netconn_do_close_internal>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d04a      	beq.n	800a2ca <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d006      	beq.n	800a24c <lwip_netconn_do_delconn+0x124>
 800a23e:	4b25      	ldr	r3, [pc, #148]	; (800a2d4 <lwip_netconn_do_delconn+0x1ac>)
 800a240:	f240 429a 	movw	r2, #1178	; 0x49a
 800a244:	4928      	ldr	r1, [pc, #160]	; (800a2e8 <lwip_netconn_do_delconn+0x1c0>)
 800a246:	4825      	ldr	r0, [pc, #148]	; (800a2dc <lwip_netconn_do_delconn+0x1b4>)
 800a248:	f00e fbe2 	bl	8018a10 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a24c:	4827      	ldr	r0, [pc, #156]	; (800a2ec <lwip_netconn_do_delconn+0x1c4>)
 800a24e:	f00b fd6e 	bl	8015d2e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	330c      	adds	r3, #12
 800a258:	2100      	movs	r1, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f00b fcc5 	bl	8015bea <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a260:	4822      	ldr	r0, [pc, #136]	; (800a2ec <lwip_netconn_do_delconn+0x1c4>)
 800a262:	f00b fd55 	bl	8015d10 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d02c      	beq.n	800a2ca <lwip_netconn_do_delconn+0x1a2>
 800a270:	4b18      	ldr	r3, [pc, #96]	; (800a2d4 <lwip_netconn_do_delconn+0x1ac>)
 800a272:	f240 429e 	movw	r2, #1182	; 0x49e
 800a276:	491c      	ldr	r1, [pc, #112]	; (800a2e8 <lwip_netconn_do_delconn+0x1c0>)
 800a278:	4818      	ldr	r0, [pc, #96]	; (800a2dc <lwip_netconn_do_delconn+0x1b4>)
 800a27a:	f00e fbc9 	bl	8018a10 <iprintf>
          return;
 800a27e:	e024      	b.n	800a2ca <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2200      	movs	r2, #0
 800a286:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <lwip_netconn_do_delconn+0x17a>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	6810      	ldr	r0, [r2, #0]
 800a29c:	2200      	movs	r2, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <lwip_netconn_do_delconn+0x194>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	6810      	ldr	r0, [r2, #0]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	330c      	adds	r3, #12
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f00b fcdc 	bl	8015c80 <sys_sem_valid>
 800a2c8:	e000      	b.n	800a2cc <lwip_netconn_do_delconn+0x1a4>
          return;
 800a2ca:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0801c380 	.word	0x0801c380
 800a2d8:	0801c6f0 	.word	0x0801c6f0
 800a2dc:	0801c3c4 	.word	0x0801c3c4
 800a2e0:	0801c704 	.word	0x0801c704
 800a2e4:	0801c724 	.word	0x0801c724
 800a2e8:	0801c740 	.word	0x0801c740
 800a2ec:	20005898 	.word	0x20005898

0800a2f0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d026      	beq.n	800a354 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a310:	2b10      	cmp	r3, #16
 800a312:	d00e      	beq.n	800a332 <lwip_netconn_do_bind+0x42>
 800a314:	2b20      	cmp	r3, #32
 800a316:	d119      	bne.n	800a34c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6858      	ldr	r0, [r3, #4]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6899      	ldr	r1, [r3, #8]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	899b      	ldrh	r3, [r3, #12]
 800a326:	461a      	mov	r2, r3
 800a328:	f008 ff78 	bl	801321c <udp_bind>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]
        break;
 800a330:	e012      	b.n	800a358 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	6858      	ldr	r0, [r3, #4]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6899      	ldr	r1, [r3, #8]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	899b      	ldrh	r3, [r3, #12]
 800a340:	461a      	mov	r2, r3
 800a342:	f002 ff03 	bl	800d14c <tcp_bind>
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]
        break;
 800a34a:	e005      	b.n	800a358 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a34c:	23fa      	movs	r3, #250	; 0xfa
 800a34e:	73fb      	strb	r3, [r7, #15]
        break;
 800a350:	bf00      	nop
 800a352:	e001      	b.n	800a358 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 800a354:	23fa      	movs	r3, #250	; 0xfa
 800a356:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	7bfa      	ldrb	r2, [r7, #15]
 800a35c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d07f      	beq.n	800a47e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d175      	bne.n	800a478 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d165      	bne.n	800a462 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	7d1b      	ldrb	r3, [r3, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a3a2:	23fa      	movs	r3, #250	; 0xfa
 800a3a4:	72fb      	strb	r3, [r7, #11]
 800a3a6:	e06c      	b.n	800a482 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a3a8:	23ff      	movs	r3, #255	; 0xff
 800a3aa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f107 020b 	add.w	r2, r7, #11
 800a3b6:	7cf9      	ldrb	r1, [r7, #19]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 ff7f 	bl	800d2bc <tcp_listen_with_backlog_and_err>
 800a3be:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d05d      	beq.n	800a482 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3310      	adds	r3, #16
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f00b fbc6 	bl	8015b5e <sys_mbox_valid>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3310      	adds	r3, #16
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f00b fb36 	bl	8015a50 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f00b fbc8 	bl	8015b80 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	3314      	adds	r3, #20
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f00b fbaf 	bl	8015b5e <sys_mbox_valid>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d108      	bne.n	800a418 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3314      	adds	r3, #20
 800a40c:	2106      	movs	r1, #6
 800a40e:	4618      	mov	r0, r3
 800a410:	f00b fafc 	bl	8015a0c <sys_mbox_new>
 800a414:	4603      	mov	r3, r0
 800a416:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a418:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d118      	bne.n	800a452 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2202      	movs	r2, #2
 800a426:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f003 ff03 	bl	800e248 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	4912      	ldr	r1, [pc, #72]	; (800a494 <lwip_netconn_do_listen+0x12c>)
 800a44a:	4618      	mov	r0, r3
 800a44c:	f003 ff74 	bl	800e338 <tcp_accept>
 800a450:	e017      	b.n	800a482 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f002 fd2a 	bl	800ceac <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2200      	movs	r2, #0
 800a45e:	605a      	str	r2, [r3, #4]
 800a460:	e00f      	b.n	800a482 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d102      	bne.n	800a472 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	72fb      	strb	r3, [r7, #11]
 800a470:	e007      	b.n	800a482 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a472:	23f5      	movs	r3, #245	; 0xf5
 800a474:	72fb      	strb	r3, [r7, #11]
 800a476:	e004      	b.n	800a482 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a478:	23f0      	movs	r3, #240	; 0xf0
 800a47a:	72fb      	strb	r3, [r7, #11]
 800a47c:	e001      	b.n	800a482 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a47e:	23f5      	movs	r3, #245	; 0xf5
 800a480:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a482:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a48a:	bf00      	nop
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	08009979 	.word	0x08009979

0800a498 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d022      	beq.n	800a4fa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4be:	2b10      	cmp	r3, #16
 800a4c0:	d11b      	bne.n	800a4fa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ce:	d202      	bcs.n	800a4d6 <lwip_netconn_do_recv+0x3e>
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	e001      	b.n	800a4da <lwip_netconn_do_recv+0x42>
 800a4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4da:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	89fa      	ldrh	r2, [r7, #14]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f002 ffec 	bl	800d4c4 <tcp_recved>
        remaining -= recved;
 800a4ec:	89fb      	ldrh	r3, [r7, #14]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e6      	bne.n	800a4c8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a4fa:	bf00      	nop
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <lwip_netconn_do_writemore+0x24>
 800a51a:	4b96      	ldr	r3, [pc, #600]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a51c:	f240 6273 	movw	r2, #1651	; 0x673
 800a520:	4995      	ldr	r1, [pc, #596]	; (800a778 <lwip_netconn_do_writemore+0x274>)
 800a522:	4896      	ldr	r0, [pc, #600]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a524:	f00e fa74 	bl	8018a10 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d006      	beq.n	800a53e <lwip_netconn_do_writemore+0x3a>
 800a530:	4b90      	ldr	r3, [pc, #576]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a532:	f240 6274 	movw	r2, #1652	; 0x674
 800a536:	4992      	ldr	r1, [pc, #584]	; (800a780 <lwip_netconn_do_writemore+0x27c>)
 800a538:	4890      	ldr	r0, [pc, #576]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a53a:	f00e fa69 	bl	8018a10 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <lwip_netconn_do_writemore+0x50>
 800a546:	4b8b      	ldr	r3, [pc, #556]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a548:	f240 6275 	movw	r2, #1653	; 0x675
 800a54c:	498d      	ldr	r1, [pc, #564]	; (800a784 <lwip_netconn_do_writemore+0x280>)
 800a54e:	488b      	ldr	r0, [pc, #556]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a550:	f00e fa5e 	bl	8018a10 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d106      	bne.n	800a56a <lwip_netconn_do_writemore+0x66>
 800a55c:	4b85      	ldr	r3, [pc, #532]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a55e:	f240 6276 	movw	r2, #1654	; 0x676
 800a562:	4989      	ldr	r1, [pc, #548]	; (800a788 <lwip_netconn_do_writemore+0x284>)
 800a564:	4885      	ldr	r0, [pc, #532]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a566:	f00e fa53 	bl	8018a10 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a1b      	ldr	r3, [r3, #32]
 800a56e:	699a      	ldr	r2, [r3, #24]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	429a      	cmp	r2, r3
 800a578:	d306      	bcc.n	800a588 <lwip_netconn_do_writemore+0x84>
 800a57a:	4b7e      	ldr	r3, [pc, #504]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a57c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800a580:	4982      	ldr	r1, [pc, #520]	; (800a78c <lwip_netconn_do_writemore+0x288>)
 800a582:	487e      	ldr	r0, [pc, #504]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a584:	f00e fa44 	bl	8018a10 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	899b      	ldrh	r3, [r3, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <lwip_netconn_do_writemore+0x9c>
 800a592:	4b78      	ldr	r3, [pc, #480]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a594:	f240 6279 	movw	r2, #1657	; 0x679
 800a598:	497d      	ldr	r1, [pc, #500]	; (800a790 <lwip_netconn_do_writemore+0x28c>)
 800a59a:	4878      	ldr	r0, [pc, #480]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a59c:	f00e fa38 	bl	8018a10 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	7f1b      	ldrb	r3, [r3, #28]
 800a5a6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7f1b      	ldrb	r3, [r3, #28]
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d104      	bne.n	800a5be <lwip_netconn_do_writemore+0xba>
 800a5b4:	7ebb      	ldrb	r3, [r7, #26]
 800a5b6:	f003 0304 	and.w	r3, r3, #4
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <lwip_netconn_do_writemore+0xbe>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <lwip_netconn_do_writemore+0xc0>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	689b      	ldr	r3, [r3, #8]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f0:	d307      	bcc.n	800a602 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a5f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5f6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a5f8:	7ebb      	ldrb	r3, [r7, #26]
 800a5fa:	f043 0302 	orr.w	r3, r3, #2
 800a5fe:	76bb      	strb	r3, [r7, #26]
 800a600:	e001      	b.n	800a606 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a60e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a610:	89fa      	ldrh	r2, [r7, #14]
 800a612:	8bbb      	ldrh	r3, [r7, #28]
 800a614:	429a      	cmp	r2, r3
 800a616:	d216      	bcs.n	800a646 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a618:	89fb      	ldrh	r3, [r7, #14]
 800a61a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a61c:	7e3b      	ldrb	r3, [r7, #24]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00d      	beq.n	800a63e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a622:	8bbb      	ldrh	r3, [r7, #28]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10e      	bne.n	800a646 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <lwip_netconn_do_writemore+0x134>
 800a632:	f06f 0306 	mvn.w	r3, #6
 800a636:	e000      	b.n	800a63a <lwip_netconn_do_writemore+0x136>
 800a638:	2300      	movs	r3, #0
 800a63a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a63c:	e07d      	b.n	800a73a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a63e:	7ebb      	ldrb	r3, [r7, #26]
 800a640:	f043 0302 	orr.w	r3, r3, #2
 800a644:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	691a      	ldr	r2, [r3, #16]
 800a64c:	8bbb      	ldrh	r3, [r7, #28]
 800a64e:	441a      	add	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d906      	bls.n	800a66a <lwip_netconn_do_writemore+0x166>
 800a65c:	4b45      	ldr	r3, [pc, #276]	; (800a774 <lwip_netconn_do_writemore+0x270>)
 800a65e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800a662:	494c      	ldr	r1, [pc, #304]	; (800a794 <lwip_netconn_do_writemore+0x290>)
 800a664:	4845      	ldr	r0, [pc, #276]	; (800a77c <lwip_netconn_do_writemore+0x278>)
 800a666:	f00e f9d3 	bl	8018a10 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a66a:	8bbb      	ldrh	r3, [r7, #28]
 800a66c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a670:	4293      	cmp	r3, r2
 800a672:	d103      	bne.n	800a67c <lwip_netconn_do_writemore+0x178>
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67a:	d209      	bcs.n	800a690 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a680:	8bba      	ldrh	r2, [r7, #28]
 800a682:	429a      	cmp	r2, r3
 800a684:	d10b      	bne.n	800a69e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	899b      	ldrh	r3, [r3, #12]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d906      	bls.n	800a69e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a690:	2301      	movs	r3, #1
 800a692:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a694:	7ebb      	ldrb	r3, [r7, #26]
 800a696:	f043 0302 	orr.w	r3, r3, #2
 800a69a:	76bb      	strb	r3, [r7, #26]
 800a69c:	e001      	b.n	800a6a2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6858      	ldr	r0, [r3, #4]
 800a6a6:	7ebb      	ldrb	r3, [r7, #26]
 800a6a8:	8bba      	ldrh	r2, [r7, #28]
 800a6aa:	6979      	ldr	r1, [r7, #20]
 800a6ac:	f006 fd08 	bl	80110c0 <tcp_write>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a6b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d12c      	bne.n	800a716 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	6999      	ldr	r1, [r3, #24]
 800a6c2:	8bba      	ldrh	r2, [r7, #28]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	6919      	ldr	r1, [r3, #16]
 800a6d2:	8bba      	ldrh	r2, [r7, #28]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	440a      	add	r2, r1
 800a6da:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a1b      	ldr	r3, [r3, #32]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d113      	bne.n	800a716 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	899a      	ldrh	r2, [r3, #12]
 800a6f4:	3a01      	subs	r2, #1
 800a6f6:	b292      	uxth	r2, r2
 800a6f8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	899b      	ldrh	r3, [r3, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d008      	beq.n	800a716 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	689a      	ldr	r2, [r3, #8]
 800a70a:	3208      	adds	r2, #8
 800a70c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	2200      	movs	r2, #0
 800a714:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a716:	7e7b      	ldrb	r3, [r7, #25]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <lwip_netconn_do_writemore+0x222>
 800a71c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a720:	2b00      	cmp	r3, #0
 800a722:	f43f af50 	beq.w	800a5c6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a726:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <lwip_netconn_do_writemore+0x234>
 800a72e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a736:	d146      	bne.n	800a7c6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a738:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a73a:	7e3b      	ldrb	r3, [r7, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02b      	beq.n	800a798 <lwip_netconn_do_writemore+0x294>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	699a      	ldr	r2, [r3, #24]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d223      	bcs.n	800a798 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <lwip_netconn_do_writemore+0x260>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	2200      	movs	r2, #0
 800a75e:	2103      	movs	r1, #3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	7f1b      	ldrb	r3, [r3, #28]
 800a768:	f043 0310 	orr.w	r3, r3, #16
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	771a      	strb	r2, [r3, #28]
 800a772:	e028      	b.n	800a7c6 <lwip_netconn_do_writemore+0x2c2>
 800a774:	0801c380 	.word	0x0801c380
 800a778:	0801c4d8 	.word	0x0801c4d8
 800a77c:	0801c3c4 	.word	0x0801c3c4
 800a780:	0801c7e0 	.word	0x0801c7e0
 800a784:	0801c4e8 	.word	0x0801c4e8
 800a788:	0801c800 	.word	0x0801c800
 800a78c:	0801c818 	.word	0x0801c818
 800a790:	0801c858 	.word	0x0801c858
 800a794:	0801c880 	.word	0x0801c880
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a7a0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a7a4:	d305      	bcc.n	800a7b2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	d909      	bls.n	800a7c6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <lwip_netconn_do_writemore+0x2c2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2103      	movs	r1, #3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a7c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d11d      	bne.n	800a80a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	699a      	ldr	r2, [r3, #24]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d002      	beq.n	800a7e4 <lwip_netconn_do_writemore+0x2e0>
 800a7de:	7e3b      	ldrb	r3, [r7, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f007 fa53 	bl	8011c98 <tcp_output>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a7f6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a7fa:	f113 0f04 	cmn.w	r3, #4
 800a7fe:	d12c      	bne.n	800a85a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a800:	7b3b      	ldrb	r3, [r7, #12]
 800a802:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a804:	2301      	movs	r3, #1
 800a806:	76fb      	strb	r3, [r7, #27]
 800a808:	e027      	b.n	800a85a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a80a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a80e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a812:	d120      	bne.n	800a856 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	4618      	mov	r0, r3
 800a81a:	f007 fa3d 	bl	8011c98 <tcp_output>
 800a81e:	4603      	mov	r3, r0
 800a820:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a822:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a826:	f113 0f04 	cmn.w	r3, #4
 800a82a:	d104      	bne.n	800a836 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a82c:	7b7b      	ldrb	r3, [r7, #13]
 800a82e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a830:	2301      	movs	r3, #1
 800a832:	76fb      	strb	r3, [r7, #27]
 800a834:	e011      	b.n	800a85a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a836:	7e3b      	ldrb	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00e      	beq.n	800a85a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a1b      	ldr	r3, [r3, #32]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <lwip_netconn_do_writemore+0x348>
 800a846:	f06f 0306 	mvn.w	r3, #6
 800a84a:	e000      	b.n	800a84e <lwip_netconn_do_writemore+0x34a>
 800a84c:	2300      	movs	r3, #0
 800a84e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a850:	2301      	movs	r3, #1
 800a852:	76fb      	strb	r3, [r7, #27]
 800a854:	e001      	b.n	800a85a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a856:	2301      	movs	r3, #1
 800a858:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a85a:	7efb      	ldrb	r3, [r7, #27]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d015      	beq.n	800a88c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	330c      	adds	r3, #12
 800a868:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	7ffa      	ldrb	r2, [r7, #31]
 800a870:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a884:	68b8      	ldr	r0, [r7, #8]
 800a886:	f00b f9e1 	bl	8015c4c <sys_sem_signal>
 800a88a:	e002      	b.n	800a892 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a88c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a890:	e000      	b.n	800a894 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3720      	adds	r7, #32
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fe fd22 	bl	80092f6 <netconn_err>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d166      	bne.n	800a98c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c8:	2b10      	cmp	r3, #16
 800a8ca:	d15d      	bne.n	800a988 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a8d6:	23fb      	movs	r3, #251	; 0xfb
 800a8d8:	73fb      	strb	r3, [r7, #15]
 800a8da:	e057      	b.n	800a98c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d04d      	beq.n	800a982 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d006      	beq.n	800a906 <lwip_netconn_do_write+0x6a>
 800a8f8:	4b28      	ldr	r3, [pc, #160]	; (800a99c <lwip_netconn_do_write+0x100>)
 800a8fa:	f240 7223 	movw	r2, #1827	; 0x723
 800a8fe:	4928      	ldr	r1, [pc, #160]	; (800a9a0 <lwip_netconn_do_write+0x104>)
 800a900:	4828      	ldr	r0, [pc, #160]	; (800a9a4 <lwip_netconn_do_write+0x108>)
 800a902:	f00e f885 	bl	8018a10 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <lwip_netconn_do_write+0x80>
 800a90e:	4b23      	ldr	r3, [pc, #140]	; (800a99c <lwip_netconn_do_write+0x100>)
 800a910:	f240 7224 	movw	r2, #1828	; 0x724
 800a914:	4924      	ldr	r1, [pc, #144]	; (800a9a8 <lwip_netconn_do_write+0x10c>)
 800a916:	4823      	ldr	r0, [pc, #140]	; (800a9a4 <lwip_netconn_do_write+0x108>)
 800a918:	f00e f87a 	bl	8018a10 <iprintf>
        msg->conn->current_msg = msg;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2100      	movs	r1, #0
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fdea 	bl	800a504 <lwip_netconn_do_writemore>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d02e      	beq.n	800a994 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	785b      	ldrb	r3, [r3, #1]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d006      	beq.n	800a94e <lwip_netconn_do_write+0xb2>
 800a940:	4b16      	ldr	r3, [pc, #88]	; (800a99c <lwip_netconn_do_write+0x100>)
 800a942:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a946:	4919      	ldr	r1, [pc, #100]	; (800a9ac <lwip_netconn_do_write+0x110>)
 800a948:	4816      	ldr	r0, [pc, #88]	; (800a9a4 <lwip_netconn_do_write+0x108>)
 800a94a:	f00e f861 	bl	8018a10 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a94e:	4818      	ldr	r0, [pc, #96]	; (800a9b0 <lwip_netconn_do_write+0x114>)
 800a950:	f00b f9ed 	bl	8015d2e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	330c      	adds	r3, #12
 800a95a:	2100      	movs	r1, #0
 800a95c:	4618      	mov	r0, r3
 800a95e:	f00b f944 	bl	8015bea <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a962:	4813      	ldr	r0, [pc, #76]	; (800a9b0 <lwip_netconn_do_write+0x114>)
 800a964:	f00b f9d4 	bl	8015d10 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d110      	bne.n	800a994 <lwip_netconn_do_write+0xf8>
 800a972:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <lwip_netconn_do_write+0x100>)
 800a974:	f240 722c 	movw	r2, #1836	; 0x72c
 800a978:	490c      	ldr	r1, [pc, #48]	; (800a9ac <lwip_netconn_do_write+0x110>)
 800a97a:	480a      	ldr	r0, [pc, #40]	; (800a9a4 <lwip_netconn_do_write+0x108>)
 800a97c:	f00e f848 	bl	8018a10 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a980:	e008      	b.n	800a994 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a982:	23f5      	movs	r3, #245	; 0xf5
 800a984:	73fb      	strb	r3, [r7, #15]
 800a986:	e001      	b.n	800a98c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a988:	23fa      	movs	r3, #250	; 0xfa
 800a98a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	7bfa      	ldrb	r2, [r7, #15]
 800a990:	711a      	strb	r2, [r3, #4]
 800a992:	e000      	b.n	800a996 <lwip_netconn_do_write+0xfa>
        return;
 800a994:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	0801c380 	.word	0x0801c380
 800a9a0:	0801c724 	.word	0x0801c724
 800a9a4:	0801c3c4 	.word	0x0801c3c4
 800a9a8:	0801c8ac 	.word	0x0801c8ac
 800a9ac:	0801c740 	.word	0x0801c740
 800a9b0:	20005898 	.word	0x20005898

0800a9b4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d069      	beq.n	800aaa6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a9dc:	2b10      	cmp	r3, #16
 800a9de:	d162      	bne.n	800aaa6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d002      	beq.n	800a9ee <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a9e8:	7afb      	ldrb	r3, [r7, #11]
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d05b      	beq.n	800aaa6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d103      	bne.n	800a9fc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	22f5      	movs	r2, #245	; 0xf5
 800a9f8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a9fa:	e059      	b.n	800aab0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d103      	bne.n	800aa0a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	22fb      	movs	r2, #251	; 0xfb
 800aa06:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800aa08:	e052      	b.n	800aab0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	7a1b      	ldrb	r3, [r3, #8]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff f9a0 	bl	8009d60 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d006      	beq.n	800aa38 <lwip_netconn_do_close+0x84>
 800aa2a:	4b23      	ldr	r3, [pc, #140]	; (800aab8 <lwip_netconn_do_close+0x104>)
 800aa2c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800aa30:	4922      	ldr	r1, [pc, #136]	; (800aabc <lwip_netconn_do_close+0x108>)
 800aa32:	4823      	ldr	r0, [pc, #140]	; (800aac0 <lwip_netconn_do_close+0x10c>)
 800aa34:	f00d ffec 	bl	8018a10 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2204      	movs	r2, #4
 800aa3e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff fa04 	bl	8009e5c <lwip_netconn_do_close_internal>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d029      	beq.n	800aaae <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d006      	beq.n	800aa72 <lwip_netconn_do_close+0xbe>
 800aa64:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <lwip_netconn_do_close+0x104>)
 800aa66:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800aa6a:	4916      	ldr	r1, [pc, #88]	; (800aac4 <lwip_netconn_do_close+0x110>)
 800aa6c:	4814      	ldr	r0, [pc, #80]	; (800aac0 <lwip_netconn_do_close+0x10c>)
 800aa6e:	f00d ffcf 	bl	8018a10 <iprintf>
        UNLOCK_TCPIP_CORE();
 800aa72:	4815      	ldr	r0, [pc, #84]	; (800aac8 <lwip_netconn_do_close+0x114>)
 800aa74:	f00b f95b 	bl	8015d2e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	330c      	adds	r3, #12
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4618      	mov	r0, r3
 800aa82:	f00b f8b2 	bl	8015bea <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800aa86:	4810      	ldr	r0, [pc, #64]	; (800aac8 <lwip_netconn_do_close+0x114>)
 800aa88:	f00b f942 	bl	8015d10 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	785b      	ldrb	r3, [r3, #1]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <lwip_netconn_do_close+0xfa>
 800aa96:	4b08      	ldr	r3, [pc, #32]	; (800aab8 <lwip_netconn_do_close+0x104>)
 800aa98:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800aa9c:	4909      	ldr	r1, [pc, #36]	; (800aac4 <lwip_netconn_do_close+0x110>)
 800aa9e:	4808      	ldr	r0, [pc, #32]	; (800aac0 <lwip_netconn_do_close+0x10c>)
 800aaa0:	f00d ffb6 	bl	8018a10 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800aaa4:	e003      	b.n	800aaae <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	22f5      	movs	r2, #245	; 0xf5
 800aaaa:	711a      	strb	r2, [r3, #4]
 800aaac:	e000      	b.n	800aab0 <lwip_netconn_do_close+0xfc>
      return;
 800aaae:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	0801c380 	.word	0x0801c380
 800aabc:	0801c724 	.word	0x0801c724
 800aac0:	0801c3c4 	.word	0x0801c3c4
 800aac4:	0801c740 	.word	0x0801c740
 800aac8:	20005898 	.word	0x20005898

0800aacc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d013      	beq.n	800ab02 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00b      	beq.n	800aafa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 fd3e 	bl	800c568 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	605a      	str	r2, [r3, #4]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685a      	ldr	r2, [r3, #4]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	2006      	movs	r0, #6
 800aafe:	f000 ff0b 	bl	800b918 <memp_free>
  }
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d108      	bne.n	800ab30 <netbuf_data+0x24>
 800ab1e:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <netbuf_data+0x80>)
 800ab20:	22c6      	movs	r2, #198	; 0xc6
 800ab22:	491b      	ldr	r1, [pc, #108]	; (800ab90 <netbuf_data+0x84>)
 800ab24:	481b      	ldr	r0, [pc, #108]	; (800ab94 <netbuf_data+0x88>)
 800ab26:	f00d ff73 	bl	8018a10 <iprintf>
 800ab2a:	f06f 030f 	mvn.w	r3, #15
 800ab2e:	e029      	b.n	800ab84 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d108      	bne.n	800ab48 <netbuf_data+0x3c>
 800ab36:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <netbuf_data+0x80>)
 800ab38:	22c7      	movs	r2, #199	; 0xc7
 800ab3a:	4917      	ldr	r1, [pc, #92]	; (800ab98 <netbuf_data+0x8c>)
 800ab3c:	4815      	ldr	r0, [pc, #84]	; (800ab94 <netbuf_data+0x88>)
 800ab3e:	f00d ff67 	bl	8018a10 <iprintf>
 800ab42:	f06f 030f 	mvn.w	r3, #15
 800ab46:	e01d      	b.n	800ab84 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d108      	bne.n	800ab60 <netbuf_data+0x54>
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <netbuf_data+0x80>)
 800ab50:	22c8      	movs	r2, #200	; 0xc8
 800ab52:	4912      	ldr	r1, [pc, #72]	; (800ab9c <netbuf_data+0x90>)
 800ab54:	480f      	ldr	r0, [pc, #60]	; (800ab94 <netbuf_data+0x88>)
 800ab56:	f00d ff5b 	bl	8018a10 <iprintf>
 800ab5a:	f06f 030f 	mvn.w	r3, #15
 800ab5e:	e011      	b.n	800ab84 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <netbuf_data+0x62>
    return ERR_BUF;
 800ab68:	f06f 0301 	mvn.w	r3, #1
 800ab6c:	e00a      	b.n	800ab84 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	895a      	ldrh	r2, [r3, #10]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ab82:	2300      	movs	r3, #0
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3710      	adds	r7, #16
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	0801c8d8 	.word	0x0801c8d8
 800ab90:	0801c9e0 	.word	0x0801c9e0
 800ab94:	0801c928 	.word	0x0801c928
 800ab98:	0801c9fc 	.word	0x0801c9fc
 800ab9c:	0801ca1c 	.word	0x0801ca1c

0800aba0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800abaa:	f008 f93d 	bl	8012e28 <sys_timeouts_sleeptime>
 800abae:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abb6:	d10b      	bne.n	800abd0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800abb8:	4813      	ldr	r0, [pc, #76]	; (800ac08 <tcpip_timeouts_mbox_fetch+0x68>)
 800abba:	f00b f8b8 	bl	8015d2e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800abbe:	2200      	movs	r2, #0
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f00a ff70 	bl	8015aa8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800abc8:	480f      	ldr	r0, [pc, #60]	; (800ac08 <tcpip_timeouts_mbox_fetch+0x68>)
 800abca:	f00b f8a1 	bl	8015d10 <sys_mutex_lock>
    return;
 800abce:	e018      	b.n	800ac02 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d102      	bne.n	800abdc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800abd6:	f008 f8ed 	bl	8012db4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800abda:	e7e6      	b.n	800abaa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800abdc:	480a      	ldr	r0, [pc, #40]	; (800ac08 <tcpip_timeouts_mbox_fetch+0x68>)
 800abde:	f00b f8a6 	bl	8015d2e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f00a ff5e 	bl	8015aa8 <sys_arch_mbox_fetch>
 800abec:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800abee:	4806      	ldr	r0, [pc, #24]	; (800ac08 <tcpip_timeouts_mbox_fetch+0x68>)
 800abf0:	f00b f88e 	bl	8015d10 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abfa:	d102      	bne.n	800ac02 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800abfc:	f008 f8da 	bl	8012db4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac00:	e7d3      	b.n	800abaa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20005898 	.word	0x20005898

0800ac0c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ac14:	4810      	ldr	r0, [pc, #64]	; (800ac58 <tcpip_thread+0x4c>)
 800ac16:	f00b f87b 	bl	8015d10 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ac1a:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <tcpip_thread+0x50>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d005      	beq.n	800ac2e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ac22:	4b0e      	ldr	r3, [pc, #56]	; (800ac5c <tcpip_thread+0x50>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a0e      	ldr	r2, [pc, #56]	; (800ac60 <tcpip_thread+0x54>)
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac2e:	f107 030c 	add.w	r3, r7, #12
 800ac32:	4619      	mov	r1, r3
 800ac34:	480b      	ldr	r0, [pc, #44]	; (800ac64 <tcpip_thread+0x58>)
 800ac36:	f7ff ffb3 	bl	800aba0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d106      	bne.n	800ac4e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ac40:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <tcpip_thread+0x5c>)
 800ac42:	2291      	movs	r2, #145	; 0x91
 800ac44:	4909      	ldr	r1, [pc, #36]	; (800ac6c <tcpip_thread+0x60>)
 800ac46:	480a      	ldr	r0, [pc, #40]	; (800ac70 <tcpip_thread+0x64>)
 800ac48:	f00d fee2 	bl	8018a10 <iprintf>
      continue;
 800ac4c:	e003      	b.n	800ac56 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f80f 	bl	800ac74 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac56:	e7ea      	b.n	800ac2e <tcpip_thread+0x22>
 800ac58:	20005898 	.word	0x20005898
 800ac5c:	20005450 	.word	0x20005450
 800ac60:	20005454 	.word	0x20005454
 800ac64:	20005458 	.word	0x20005458
 800ac68:	0801ca70 	.word	0x0801ca70
 800ac6c:	0801caa0 	.word	0x0801caa0
 800ac70:	0801cac0 	.word	0x0801cac0

0800ac74 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d018      	beq.n	800acb6 <tcpip_thread_handle_msg+0x42>
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d021      	beq.n	800accc <tcpip_thread_handle_msg+0x58>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d126      	bne.n	800acda <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	6850      	ldr	r0, [r2, #4]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6892      	ldr	r2, [r2, #8]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4798      	blx	r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d004      	beq.n	800acac <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f001 fc5e 	bl	800c568 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	2009      	movs	r0, #9
 800acb0:	f000 fe32 	bl	800b918 <memp_free>
      break;
 800acb4:	e018      	b.n	800ace8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6892      	ldr	r2, [r2, #8]
 800acbe:	4610      	mov	r0, r2
 800acc0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	2008      	movs	r0, #8
 800acc6:	f000 fe27 	bl	800b918 <memp_free>
      break;
 800acca:	e00d      	b.n	800ace8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	6892      	ldr	r2, [r2, #8]
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
      break;
 800acd8:	e006      	b.n	800ace8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <tcpip_thread_handle_msg+0x7c>)
 800acdc:	22cf      	movs	r2, #207	; 0xcf
 800acde:	4905      	ldr	r1, [pc, #20]	; (800acf4 <tcpip_thread_handle_msg+0x80>)
 800ace0:	4805      	ldr	r0, [pc, #20]	; (800acf8 <tcpip_thread_handle_msg+0x84>)
 800ace2:	f00d fe95 	bl	8018a10 <iprintf>
      break;
 800ace6:	bf00      	nop
  }
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	0801ca70 	.word	0x0801ca70
 800acf4:	0801caa0 	.word	0x0801caa0
 800acf8:	0801cac0 	.word	0x0801cac0

0800acfc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ad08:	481a      	ldr	r0, [pc, #104]	; (800ad74 <tcpip_inpkt+0x78>)
 800ad0a:	f00a ff28 	bl	8015b5e <sys_mbox_valid>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d105      	bne.n	800ad20 <tcpip_inpkt+0x24>
 800ad14:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <tcpip_inpkt+0x7c>)
 800ad16:	22fc      	movs	r2, #252	; 0xfc
 800ad18:	4918      	ldr	r1, [pc, #96]	; (800ad7c <tcpip_inpkt+0x80>)
 800ad1a:	4819      	ldr	r0, [pc, #100]	; (800ad80 <tcpip_inpkt+0x84>)
 800ad1c:	f00d fe78 	bl	8018a10 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ad20:	2009      	movs	r0, #9
 800ad22:	f000 fda7 	bl	800b874 <memp_malloc>
 800ad26:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ad2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad32:	e01a      	b.n	800ad6a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ad4c:	6979      	ldr	r1, [r7, #20]
 800ad4e:	4809      	ldr	r0, [pc, #36]	; (800ad74 <tcpip_inpkt+0x78>)
 800ad50:	f00a fe90 	bl	8015a74 <sys_mbox_trypost>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d006      	beq.n	800ad68 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad5a:	6979      	ldr	r1, [r7, #20]
 800ad5c:	2009      	movs	r0, #9
 800ad5e:	f000 fddb 	bl	800b918 <memp_free>
    return ERR_MEM;
 800ad62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad66:	e000      	b.n	800ad6a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ad68:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20005458 	.word	0x20005458
 800ad78:	0801ca70 	.word	0x0801ca70
 800ad7c:	0801cae8 	.word	0x0801cae8
 800ad80:	0801cac0 	.word	0x0801cac0

0800ad84 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ad94:	f003 0318 	and.w	r3, r3, #24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ad9c:	4a08      	ldr	r2, [pc, #32]	; (800adc0 <tcpip_input+0x3c>)
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff ffab 	bl	800acfc <tcpip_inpkt>
 800ada6:	4603      	mov	r3, r0
 800ada8:	e005      	b.n	800adb6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800adaa:	4a06      	ldr	r2, [pc, #24]	; (800adc4 <tcpip_input+0x40>)
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7ff ffa4 	bl	800acfc <tcpip_inpkt>
 800adb4:	4603      	mov	r3, r0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	08015861 	.word	0x08015861
 800adc4:	08014781 	.word	0x08014781

0800adc8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800add2:	4819      	ldr	r0, [pc, #100]	; (800ae38 <tcpip_try_callback+0x70>)
 800add4:	f00a fec3 	bl	8015b5e <sys_mbox_valid>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <tcpip_try_callback+0x24>
 800adde:	4b17      	ldr	r3, [pc, #92]	; (800ae3c <tcpip_try_callback+0x74>)
 800ade0:	f240 125d 	movw	r2, #349	; 0x15d
 800ade4:	4916      	ldr	r1, [pc, #88]	; (800ae40 <tcpip_try_callback+0x78>)
 800ade6:	4817      	ldr	r0, [pc, #92]	; (800ae44 <tcpip_try_callback+0x7c>)
 800ade8:	f00d fe12 	bl	8018a10 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800adec:	2008      	movs	r0, #8
 800adee:	f000 fd41 	bl	800b874 <memp_malloc>
 800adf2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d102      	bne.n	800ae00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800adfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adfe:	e017      	b.n	800ae30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ae12:	68f9      	ldr	r1, [r7, #12]
 800ae14:	4808      	ldr	r0, [pc, #32]	; (800ae38 <tcpip_try_callback+0x70>)
 800ae16:	f00a fe2d 	bl	8015a74 <sys_mbox_trypost>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d006      	beq.n	800ae2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ae20:	68f9      	ldr	r1, [r7, #12]
 800ae22:	2008      	movs	r0, #8
 800ae24:	f000 fd78 	bl	800b918 <memp_free>
    return ERR_MEM;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae2c:	e000      	b.n	800ae30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20005458 	.word	0x20005458
 800ae3c:	0801ca70 	.word	0x0801ca70
 800ae40:	0801cae8 	.word	0x0801cae8
 800ae44:	0801cac0 	.word	0x0801cac0

0800ae48 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ae54:	4806      	ldr	r0, [pc, #24]	; (800ae70 <tcpip_send_msg_wait_sem+0x28>)
 800ae56:	f00a ff5b 	bl	8015d10 <sys_mutex_lock>
  fn(apimsg);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	68b8      	ldr	r0, [r7, #8]
 800ae5e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ae60:	4803      	ldr	r0, [pc, #12]	; (800ae70 <tcpip_send_msg_wait_sem+0x28>)
 800ae62:	f00a ff64 	bl	8015d2e <sys_mutex_unlock>
  return ERR_OK;
 800ae66:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20005898 	.word	0x20005898

0800ae74 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af02      	add	r7, sp, #8
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ae7e:	f000 f871 	bl	800af64 <lwip_init>

  tcpip_init_done = initfunc;
 800ae82:	4a17      	ldr	r2, [pc, #92]	; (800aee0 <tcpip_init+0x6c>)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ae88:	4a16      	ldr	r2, [pc, #88]	; (800aee4 <tcpip_init+0x70>)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ae8e:	2106      	movs	r1, #6
 800ae90:	4815      	ldr	r0, [pc, #84]	; (800aee8 <tcpip_init+0x74>)
 800ae92:	f00a fdbb 	bl	8015a0c <sys_mbox_new>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d006      	beq.n	800aeaa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ae9c:	4b13      	ldr	r3, [pc, #76]	; (800aeec <tcpip_init+0x78>)
 800ae9e:	f240 2261 	movw	r2, #609	; 0x261
 800aea2:	4913      	ldr	r1, [pc, #76]	; (800aef0 <tcpip_init+0x7c>)
 800aea4:	4813      	ldr	r0, [pc, #76]	; (800aef4 <tcpip_init+0x80>)
 800aea6:	f00d fdb3 	bl	8018a10 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aeaa:	4813      	ldr	r0, [pc, #76]	; (800aef8 <tcpip_init+0x84>)
 800aeac:	f00a ff14 	bl	8015cd8 <sys_mutex_new>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d006      	beq.n	800aec4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <tcpip_init+0x78>)
 800aeb8:	f240 2265 	movw	r2, #613	; 0x265
 800aebc:	490f      	ldr	r1, [pc, #60]	; (800aefc <tcpip_init+0x88>)
 800aebe:	480d      	ldr	r0, [pc, #52]	; (800aef4 <tcpip_init+0x80>)
 800aec0:	f00d fda6 	bl	8018a10 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aec4:	2300      	movs	r3, #0
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aecc:	2200      	movs	r2, #0
 800aece:	490c      	ldr	r1, [pc, #48]	; (800af00 <tcpip_init+0x8c>)
 800aed0:	480c      	ldr	r0, [pc, #48]	; (800af04 <tcpip_init+0x90>)
 800aed2:	f00a ff39 	bl	8015d48 <sys_thread_new>
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20005450 	.word	0x20005450
 800aee4:	20005454 	.word	0x20005454
 800aee8:	20005458 	.word	0x20005458
 800aeec:	0801ca70 	.word	0x0801ca70
 800aef0:	0801caf8 	.word	0x0801caf8
 800aef4:	0801cac0 	.word	0x0801cac0
 800aef8:	20005898 	.word	0x20005898
 800aefc:	0801cb1c 	.word	0x0801cb1c
 800af00:	0800ac0d 	.word	0x0800ac0d
 800af04:	0801cb40 	.word	0x0801cb40

0800af08 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800af12:	88fb      	ldrh	r3, [r7, #6]
 800af14:	021b      	lsls	r3, r3, #8
 800af16:	b21a      	sxth	r2, r3
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	0a1b      	lsrs	r3, r3, #8
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	b21b      	sxth	r3, r3
 800af20:	4313      	orrs	r3, r2
 800af22:	b21b      	sxth	r3, r3
 800af24:	b29b      	uxth	r3, r3
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	061a      	lsls	r2, r3, #24
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af46:	431a      	orrs	r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	0a1b      	lsrs	r3, r3, #8
 800af4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af50:	431a      	orrs	r2, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	0e1b      	lsrs	r3, r3, #24
 800af56:	4313      	orrs	r3, r2
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800af6e:	f00a fea5 	bl	8015cbc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800af72:	f000 f8d5 	bl	800b120 <mem_init>
  memp_init();
 800af76:	f000 fc31 	bl	800b7dc <memp_init>
  pbuf_init();
  netif_init();
 800af7a:	f000 fcf7 	bl	800b96c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800af7e:	f007 ff8b 	bl	8012e98 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800af82:	f001 fd8b 	bl	800ca9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800af86:	f007 fecf 	bl	8012d28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800af8a:	bf00      	nop
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
	...

0800af94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800af9e:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <ptr_to_mem+0x20>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	4413      	add	r3, r2
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	2000545c 	.word	0x2000545c

0800afb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a05      	ldr	r2, [pc, #20]	; (800afd8 <mem_to_ptr+0x20>)
 800afc4:	6812      	ldr	r2, [r2, #0]
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	b29b      	uxth	r3, r3
}
 800afca:	4618      	mov	r0, r3
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	2000545c 	.word	0x2000545c

0800afdc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800afdc:	b590      	push	{r4, r7, lr}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800afe4:	4b45      	ldr	r3, [pc, #276]	; (800b0fc <plug_holes+0x120>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	429a      	cmp	r2, r3
 800afec:	d206      	bcs.n	800affc <plug_holes+0x20>
 800afee:	4b44      	ldr	r3, [pc, #272]	; (800b100 <plug_holes+0x124>)
 800aff0:	f240 12df 	movw	r2, #479	; 0x1df
 800aff4:	4943      	ldr	r1, [pc, #268]	; (800b104 <plug_holes+0x128>)
 800aff6:	4844      	ldr	r0, [pc, #272]	; (800b108 <plug_holes+0x12c>)
 800aff8:	f00d fd0a 	bl	8018a10 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800affc:	4b43      	ldr	r3, [pc, #268]	; (800b10c <plug_holes+0x130>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d306      	bcc.n	800b014 <plug_holes+0x38>
 800b006:	4b3e      	ldr	r3, [pc, #248]	; (800b100 <plug_holes+0x124>)
 800b008:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b00c:	4940      	ldr	r1, [pc, #256]	; (800b110 <plug_holes+0x134>)
 800b00e:	483e      	ldr	r0, [pc, #248]	; (800b108 <plug_holes+0x12c>)
 800b010:	f00d fcfe 	bl	8018a10 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	791b      	ldrb	r3, [r3, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d006      	beq.n	800b02a <plug_holes+0x4e>
 800b01c:	4b38      	ldr	r3, [pc, #224]	; (800b100 <plug_holes+0x124>)
 800b01e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b022:	493c      	ldr	r1, [pc, #240]	; (800b114 <plug_holes+0x138>)
 800b024:	4838      	ldr	r0, [pc, #224]	; (800b108 <plug_holes+0x12c>)
 800b026:	f00d fcf3 	bl	8018a10 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b032:	d906      	bls.n	800b042 <plug_holes+0x66>
 800b034:	4b32      	ldr	r3, [pc, #200]	; (800b100 <plug_holes+0x124>)
 800b036:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b03a:	4937      	ldr	r1, [pc, #220]	; (800b118 <plug_holes+0x13c>)
 800b03c:	4832      	ldr	r0, [pc, #200]	; (800b108 <plug_holes+0x12c>)
 800b03e:	f00d fce7 	bl	8018a10 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f7ff ffa4 	bl	800af94 <ptr_to_mem>
 800b04c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	429a      	cmp	r2, r3
 800b054:	d024      	beq.n	800b0a0 <plug_holes+0xc4>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	791b      	ldrb	r3, [r3, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d120      	bne.n	800b0a0 <plug_holes+0xc4>
 800b05e:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <plug_holes+0x130>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	429a      	cmp	r2, r3
 800b066:	d01b      	beq.n	800b0a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b068:	4b2c      	ldr	r3, [pc, #176]	; (800b11c <plug_holes+0x140>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d102      	bne.n	800b078 <plug_holes+0x9c>
      lfree = mem;
 800b072:	4a2a      	ldr	r2, [pc, #168]	; (800b11c <plug_holes+0x140>)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	881a      	ldrh	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b088:	d00a      	beq.n	800b0a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff ff80 	bl	800af94 <ptr_to_mem>
 800b094:	4604      	mov	r4, r0
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7ff ff8e 	bl	800afb8 <mem_to_ptr>
 800b09c:	4603      	mov	r3, r0
 800b09e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	885b      	ldrh	r3, [r3, #2]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff ff75 	bl	800af94 <ptr_to_mem>
 800b0aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d01f      	beq.n	800b0f4 <plug_holes+0x118>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	791b      	ldrb	r3, [r3, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d11b      	bne.n	800b0f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b0bc:	4b17      	ldr	r3, [pc, #92]	; (800b11c <plug_holes+0x140>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d102      	bne.n	800b0cc <plug_holes+0xf0>
      lfree = pmem;
 800b0c6:	4a15      	ldr	r2, [pc, #84]	; (800b11c <plug_holes+0x140>)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	881a      	ldrh	r2, [r3, #0]
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0dc:	d00a      	beq.n	800b0f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff ff56 	bl	800af94 <ptr_to_mem>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f7ff ff64 	bl	800afb8 <mem_to_ptr>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd90      	pop	{r4, r7, pc}
 800b0fc:	2000545c 	.word	0x2000545c
 800b100:	0801cb50 	.word	0x0801cb50
 800b104:	0801cb80 	.word	0x0801cb80
 800b108:	0801cb98 	.word	0x0801cb98
 800b10c:	20005460 	.word	0x20005460
 800b110:	0801cbc0 	.word	0x0801cbc0
 800b114:	0801cbdc 	.word	0x0801cbdc
 800b118:	0801cbf8 	.word	0x0801cbf8
 800b11c:	20005468 	.word	0x20005468

0800b120 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b126:	4b1f      	ldr	r3, [pc, #124]	; (800b1a4 <mem_init+0x84>)
 800b128:	3303      	adds	r3, #3
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	461a      	mov	r2, r3
 800b130:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <mem_init+0x88>)
 800b132:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b134:	4b1c      	ldr	r3, [pc, #112]	; (800b1a8 <mem_init+0x88>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b140:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b14e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b152:	f7ff ff1f 	bl	800af94 <ptr_to_mem>
 800b156:	4602      	mov	r2, r0
 800b158:	4b14      	ldr	r3, [pc, #80]	; (800b1ac <mem_init+0x8c>)
 800b15a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800b15c:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <mem_init+0x8c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2201      	movs	r2, #1
 800b162:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b164:	4b11      	ldr	r3, [pc, #68]	; (800b1ac <mem_init+0x8c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b16c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b16e:	4b0f      	ldr	r3, [pc, #60]	; (800b1ac <mem_init+0x8c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b176:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b178:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <mem_init+0x88>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a0c      	ldr	r2, [pc, #48]	; (800b1b0 <mem_init+0x90>)
 800b17e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b180:	480c      	ldr	r0, [pc, #48]	; (800b1b4 <mem_init+0x94>)
 800b182:	f00a fda9 	bl	8015cd8 <sys_mutex_new>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d006      	beq.n	800b19a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b18c:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <mem_init+0x98>)
 800b18e:	f240 221f 	movw	r2, #543	; 0x21f
 800b192:	490a      	ldr	r1, [pc, #40]	; (800b1bc <mem_init+0x9c>)
 800b194:	480a      	ldr	r0, [pc, #40]	; (800b1c0 <mem_init+0xa0>)
 800b196:	f00d fc3b 	bl	8018a10 <iprintf>
  }
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200058b4 	.word	0x200058b4
 800b1a8:	2000545c 	.word	0x2000545c
 800b1ac:	20005460 	.word	0x20005460
 800b1b0:	20005468 	.word	0x20005468
 800b1b4:	20005464 	.word	0x20005464
 800b1b8:	0801cb50 	.word	0x0801cb50
 800b1bc:	0801cc24 	.word	0x0801cc24
 800b1c0:	0801cb98 	.word	0x0801cb98

0800b1c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff fef3 	bl	800afb8 <mem_to_ptr>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff feda 	bl	800af94 <ptr_to_mem>
 800b1e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	885b      	ldrh	r3, [r3, #2]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff fed4 	bl	800af94 <ptr_to_mem>
 800b1ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	881b      	ldrh	r3, [r3, #0]
 800b1f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1f6:	d818      	bhi.n	800b22a <mem_link_valid+0x66>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b200:	d813      	bhi.n	800b22a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b206:	8afa      	ldrh	r2, [r7, #22]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d004      	beq.n	800b216 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	881b      	ldrh	r3, [r3, #0]
 800b210:	8afa      	ldrh	r2, [r7, #22]
 800b212:	429a      	cmp	r2, r3
 800b214:	d109      	bne.n	800b22a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b216:	4b08      	ldr	r3, [pc, #32]	; (800b238 <mem_link_valid+0x74>)
 800b218:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d006      	beq.n	800b22e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	885b      	ldrh	r3, [r3, #2]
 800b224:	8afa      	ldrh	r2, [r7, #22]
 800b226:	429a      	cmp	r2, r3
 800b228:	d001      	beq.n	800b22e <mem_link_valid+0x6a>
    return 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	e000      	b.n	800b230 <mem_link_valid+0x6c>
  }
  return 1;
 800b22e:	2301      	movs	r3, #1
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20005460 	.word	0x20005460

0800b23c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d070      	beq.n	800b32c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f003 0303 	and.w	r3, r3, #3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00d      	beq.n	800b270 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b254:	4b37      	ldr	r3, [pc, #220]	; (800b334 <mem_free+0xf8>)
 800b256:	f240 2273 	movw	r2, #627	; 0x273
 800b25a:	4937      	ldr	r1, [pc, #220]	; (800b338 <mem_free+0xfc>)
 800b25c:	4837      	ldr	r0, [pc, #220]	; (800b33c <mem_free+0x100>)
 800b25e:	f00d fbd7 	bl	8018a10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b262:	f00a fd97 	bl	8015d94 <sys_arch_protect>
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f00a fda1 	bl	8015db0 <sys_arch_unprotect>
    return;
 800b26e:	e05e      	b.n	800b32e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3b08      	subs	r3, #8
 800b274:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b276:	4b32      	ldr	r3, [pc, #200]	; (800b340 <mem_free+0x104>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d306      	bcc.n	800b28e <mem_free+0x52>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f103 020c 	add.w	r2, r3, #12
 800b286:	4b2f      	ldr	r3, [pc, #188]	; (800b344 <mem_free+0x108>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d90d      	bls.n	800b2aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b28e:	4b29      	ldr	r3, [pc, #164]	; (800b334 <mem_free+0xf8>)
 800b290:	f240 227f 	movw	r2, #639	; 0x27f
 800b294:	492c      	ldr	r1, [pc, #176]	; (800b348 <mem_free+0x10c>)
 800b296:	4829      	ldr	r0, [pc, #164]	; (800b33c <mem_free+0x100>)
 800b298:	f00d fbba 	bl	8018a10 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b29c:	f00a fd7a 	bl	8015d94 <sys_arch_protect>
 800b2a0:	6138      	str	r0, [r7, #16]
 800b2a2:	6938      	ldr	r0, [r7, #16]
 800b2a4:	f00a fd84 	bl	8015db0 <sys_arch_unprotect>
    return;
 800b2a8:	e041      	b.n	800b32e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b2aa:	4828      	ldr	r0, [pc, #160]	; (800b34c <mem_free+0x110>)
 800b2ac:	f00a fd30 	bl	8015d10 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	791b      	ldrb	r3, [r3, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d110      	bne.n	800b2da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b2b8:	4b1e      	ldr	r3, [pc, #120]	; (800b334 <mem_free+0xf8>)
 800b2ba:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b2be:	4924      	ldr	r1, [pc, #144]	; (800b350 <mem_free+0x114>)
 800b2c0:	481e      	ldr	r0, [pc, #120]	; (800b33c <mem_free+0x100>)
 800b2c2:	f00d fba5 	bl	8018a10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b2c6:	4821      	ldr	r0, [pc, #132]	; (800b34c <mem_free+0x110>)
 800b2c8:	f00a fd31 	bl	8015d2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2cc:	f00a fd62 	bl	8015d94 <sys_arch_protect>
 800b2d0:	6178      	str	r0, [r7, #20]
 800b2d2:	6978      	ldr	r0, [r7, #20]
 800b2d4:	f00a fd6c 	bl	8015db0 <sys_arch_unprotect>
    return;
 800b2d8:	e029      	b.n	800b32e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b2da:	69f8      	ldr	r0, [r7, #28]
 800b2dc:	f7ff ff72 	bl	800b1c4 <mem_link_valid>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d110      	bne.n	800b308 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b2e6:	4b13      	ldr	r3, [pc, #76]	; (800b334 <mem_free+0xf8>)
 800b2e8:	f240 2295 	movw	r2, #661	; 0x295
 800b2ec:	4919      	ldr	r1, [pc, #100]	; (800b354 <mem_free+0x118>)
 800b2ee:	4813      	ldr	r0, [pc, #76]	; (800b33c <mem_free+0x100>)
 800b2f0:	f00d fb8e 	bl	8018a10 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b2f4:	4815      	ldr	r0, [pc, #84]	; (800b34c <mem_free+0x110>)
 800b2f6:	f00a fd1a 	bl	8015d2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2fa:	f00a fd4b 	bl	8015d94 <sys_arch_protect>
 800b2fe:	61b8      	str	r0, [r7, #24]
 800b300:	69b8      	ldr	r0, [r7, #24]
 800b302:	f00a fd55 	bl	8015db0 <sys_arch_unprotect>
    return;
 800b306:	e012      	b.n	800b32e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	2200      	movs	r2, #0
 800b30c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b30e:	4b12      	ldr	r3, [pc, #72]	; (800b358 <mem_free+0x11c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69fa      	ldr	r2, [r7, #28]
 800b314:	429a      	cmp	r2, r3
 800b316:	d202      	bcs.n	800b31e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b318:	4a0f      	ldr	r2, [pc, #60]	; (800b358 <mem_free+0x11c>)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b31e:	69f8      	ldr	r0, [r7, #28]
 800b320:	f7ff fe5c 	bl	800afdc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b324:	4809      	ldr	r0, [pc, #36]	; (800b34c <mem_free+0x110>)
 800b326:	f00a fd02 	bl	8015d2e <sys_mutex_unlock>
 800b32a:	e000      	b.n	800b32e <mem_free+0xf2>
    return;
 800b32c:	bf00      	nop
}
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	0801cb50 	.word	0x0801cb50
 800b338:	0801cc40 	.word	0x0801cc40
 800b33c:	0801cb98 	.word	0x0801cb98
 800b340:	2000545c 	.word	0x2000545c
 800b344:	20005460 	.word	0x20005460
 800b348:	0801cc64 	.word	0x0801cc64
 800b34c:	20005464 	.word	0x20005464
 800b350:	0801cc80 	.word	0x0801cc80
 800b354:	0801cca8 	.word	0x0801cca8
 800b358:	20005468 	.word	0x20005468

0800b35c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b088      	sub	sp, #32
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b368:	887b      	ldrh	r3, [r7, #2]
 800b36a:	3303      	adds	r3, #3
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	f023 0303 	bic.w	r3, r3, #3
 800b372:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b374:	8bfb      	ldrh	r3, [r7, #30]
 800b376:	2b0b      	cmp	r3, #11
 800b378:	d801      	bhi.n	800b37e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b37a:	230c      	movs	r3, #12
 800b37c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b37e:	8bfb      	ldrh	r3, [r7, #30]
 800b380:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b384:	d803      	bhi.n	800b38e <mem_trim+0x32>
 800b386:	8bfa      	ldrh	r2, [r7, #30]
 800b388:	887b      	ldrh	r3, [r7, #2]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d201      	bcs.n	800b392 <mem_trim+0x36>
    return NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	e0d8      	b.n	800b544 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b392:	4b6e      	ldr	r3, [pc, #440]	; (800b54c <mem_trim+0x1f0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d304      	bcc.n	800b3a6 <mem_trim+0x4a>
 800b39c:	4b6c      	ldr	r3, [pc, #432]	; (800b550 <mem_trim+0x1f4>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d306      	bcc.n	800b3b4 <mem_trim+0x58>
 800b3a6:	4b6b      	ldr	r3, [pc, #428]	; (800b554 <mem_trim+0x1f8>)
 800b3a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b3ac:	496a      	ldr	r1, [pc, #424]	; (800b558 <mem_trim+0x1fc>)
 800b3ae:	486b      	ldr	r0, [pc, #428]	; (800b55c <mem_trim+0x200>)
 800b3b0:	f00d fb2e 	bl	8018a10 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b3b4:	4b65      	ldr	r3, [pc, #404]	; (800b54c <mem_trim+0x1f0>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d304      	bcc.n	800b3c8 <mem_trim+0x6c>
 800b3be:	4b64      	ldr	r3, [pc, #400]	; (800b550 <mem_trim+0x1f4>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d307      	bcc.n	800b3d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b3c8:	f00a fce4 	bl	8015d94 <sys_arch_protect>
 800b3cc:	60b8      	str	r0, [r7, #8]
 800b3ce:	68b8      	ldr	r0, [r7, #8]
 800b3d0:	f00a fcee 	bl	8015db0 <sys_arch_unprotect>
    return rmem;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	e0b5      	b.n	800b544 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3b08      	subs	r3, #8
 800b3dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b3de:	69b8      	ldr	r0, [r7, #24]
 800b3e0:	f7ff fdea 	bl	800afb8 <mem_to_ptr>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	881a      	ldrh	r2, [r3, #0]
 800b3ec:	8afb      	ldrh	r3, [r7, #22]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	3b08      	subs	r3, #8
 800b3f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b3f6:	8bfa      	ldrh	r2, [r7, #30]
 800b3f8:	8abb      	ldrh	r3, [r7, #20]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d906      	bls.n	800b40c <mem_trim+0xb0>
 800b3fe:	4b55      	ldr	r3, [pc, #340]	; (800b554 <mem_trim+0x1f8>)
 800b400:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b404:	4956      	ldr	r1, [pc, #344]	; (800b560 <mem_trim+0x204>)
 800b406:	4855      	ldr	r0, [pc, #340]	; (800b55c <mem_trim+0x200>)
 800b408:	f00d fb02 	bl	8018a10 <iprintf>
  if (newsize > size) {
 800b40c:	8bfa      	ldrh	r2, [r7, #30]
 800b40e:	8abb      	ldrh	r3, [r7, #20]
 800b410:	429a      	cmp	r2, r3
 800b412:	d901      	bls.n	800b418 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b414:	2300      	movs	r3, #0
 800b416:	e095      	b.n	800b544 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b418:	8bfa      	ldrh	r2, [r7, #30]
 800b41a:	8abb      	ldrh	r3, [r7, #20]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d101      	bne.n	800b424 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	e08f      	b.n	800b544 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b424:	484f      	ldr	r0, [pc, #316]	; (800b564 <mem_trim+0x208>)
 800b426:	f00a fc73 	bl	8015d10 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff fdb0 	bl	800af94 <ptr_to_mem>
 800b434:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	791b      	ldrb	r3, [r3, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d13f      	bne.n	800b4be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b446:	d106      	bne.n	800b456 <mem_trim+0xfa>
 800b448:	4b42      	ldr	r3, [pc, #264]	; (800b554 <mem_trim+0x1f8>)
 800b44a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b44e:	4946      	ldr	r1, [pc, #280]	; (800b568 <mem_trim+0x20c>)
 800b450:	4842      	ldr	r0, [pc, #264]	; (800b55c <mem_trim+0x200>)
 800b452:	f00d fadd 	bl	8018a10 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b45c:	8afa      	ldrh	r2, [r7, #22]
 800b45e:	8bfb      	ldrh	r3, [r7, #30]
 800b460:	4413      	add	r3, r2
 800b462:	b29b      	uxth	r3, r3
 800b464:	3308      	adds	r3, #8
 800b466:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b468:	4b40      	ldr	r3, [pc, #256]	; (800b56c <mem_trim+0x210>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d106      	bne.n	800b480 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b472:	89fb      	ldrh	r3, [r7, #14]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fd8d 	bl	800af94 <ptr_to_mem>
 800b47a:	4602      	mov	r2, r0
 800b47c:	4b3b      	ldr	r3, [pc, #236]	; (800b56c <mem_trim+0x210>)
 800b47e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b480:	89fb      	ldrh	r3, [r7, #14]
 800b482:	4618      	mov	r0, r3
 800b484:	f7ff fd86 	bl	800af94 <ptr_to_mem>
 800b488:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2200      	movs	r2, #0
 800b48e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	89ba      	ldrh	r2, [r7, #12]
 800b494:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	8afa      	ldrh	r2, [r7, #22]
 800b49a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	89fa      	ldrh	r2, [r7, #14]
 800b4a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4aa:	d047      	beq.n	800b53c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fd6f 	bl	800af94 <ptr_to_mem>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	89fb      	ldrh	r3, [r7, #14]
 800b4ba:	8053      	strh	r3, [r2, #2]
 800b4bc:	e03e      	b.n	800b53c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b4be:	8bfb      	ldrh	r3, [r7, #30]
 800b4c0:	f103 0214 	add.w	r2, r3, #20
 800b4c4:	8abb      	ldrh	r3, [r7, #20]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d838      	bhi.n	800b53c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b4ca:	8afa      	ldrh	r2, [r7, #22]
 800b4cc:	8bfb      	ldrh	r3, [r7, #30]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4de:	d106      	bne.n	800b4ee <mem_trim+0x192>
 800b4e0:	4b1c      	ldr	r3, [pc, #112]	; (800b554 <mem_trim+0x1f8>)
 800b4e2:	f240 3216 	movw	r2, #790	; 0x316
 800b4e6:	4920      	ldr	r1, [pc, #128]	; (800b568 <mem_trim+0x20c>)
 800b4e8:	481c      	ldr	r0, [pc, #112]	; (800b55c <mem_trim+0x200>)
 800b4ea:	f00d fa91 	bl	8018a10 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b4ee:	89fb      	ldrh	r3, [r7, #14]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff fd4f 	bl	800af94 <ptr_to_mem>
 800b4f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b4f8:	4b1c      	ldr	r3, [pc, #112]	; (800b56c <mem_trim+0x210>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d202      	bcs.n	800b508 <mem_trim+0x1ac>
      lfree = mem2;
 800b502:	4a1a      	ldr	r2, [pc, #104]	; (800b56c <mem_trim+0x210>)
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	2200      	movs	r2, #0
 800b50c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	881a      	ldrh	r2, [r3, #0]
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	8afa      	ldrh	r2, [r7, #22]
 800b51a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	89fa      	ldrh	r2, [r7, #14]
 800b520:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b52a:	d007      	beq.n	800b53c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fd2f 	bl	800af94 <ptr_to_mem>
 800b536:	4602      	mov	r2, r0
 800b538:	89fb      	ldrh	r3, [r7, #14]
 800b53a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b53c:	4809      	ldr	r0, [pc, #36]	; (800b564 <mem_trim+0x208>)
 800b53e:	f00a fbf6 	bl	8015d2e <sys_mutex_unlock>
  return rmem;
 800b542:	687b      	ldr	r3, [r7, #4]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3720      	adds	r7, #32
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	2000545c 	.word	0x2000545c
 800b550:	20005460 	.word	0x20005460
 800b554:	0801cb50 	.word	0x0801cb50
 800b558:	0801ccdc 	.word	0x0801ccdc
 800b55c:	0801cb98 	.word	0x0801cb98
 800b560:	0801ccf4 	.word	0x0801ccf4
 800b564:	20005464 	.word	0x20005464
 800b568:	0801cd14 	.word	0x0801cd14
 800b56c:	20005468 	.word	0x20005468

0800b570 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b088      	sub	sp, #32
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <mem_malloc+0x14>
    return NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	e0e2      	b.n	800b74a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b584:	88fb      	ldrh	r3, [r7, #6]
 800b586:	3303      	adds	r3, #3
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b590:	8bbb      	ldrh	r3, [r7, #28]
 800b592:	2b0b      	cmp	r3, #11
 800b594:	d801      	bhi.n	800b59a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b596:	230c      	movs	r3, #12
 800b598:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b59a:	8bbb      	ldrh	r3, [r7, #28]
 800b59c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b5a0:	d803      	bhi.n	800b5aa <mem_malloc+0x3a>
 800b5a2:	8bba      	ldrh	r2, [r7, #28]
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d201      	bcs.n	800b5ae <mem_malloc+0x3e>
    return NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e0cd      	b.n	800b74a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b5ae:	4869      	ldr	r0, [pc, #420]	; (800b754 <mem_malloc+0x1e4>)
 800b5b0:	f00a fbae 	bl	8015d10 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b5b4:	4b68      	ldr	r3, [pc, #416]	; (800b758 <mem_malloc+0x1e8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fcfd 	bl	800afb8 <mem_to_ptr>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	83fb      	strh	r3, [r7, #30]
 800b5c2:	e0b7      	b.n	800b734 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b5c4:	8bfb      	ldrh	r3, [r7, #30]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fce4 	bl	800af94 <ptr_to_mem>
 800b5cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	791b      	ldrb	r3, [r3, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f040 80a7 	bne.w	800b726 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	8bfb      	ldrh	r3, [r7, #30]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	f1a3 0208 	sub.w	r2, r3, #8
 800b5e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	f0c0 809c 	bcc.w	800b726 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	8bfb      	ldrh	r3, [r7, #30]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	f1a3 0208 	sub.w	r2, r3, #8
 800b5fc:	8bbb      	ldrh	r3, [r7, #28]
 800b5fe:	3314      	adds	r3, #20
 800b600:	429a      	cmp	r2, r3
 800b602:	d333      	bcc.n	800b66c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b604:	8bfa      	ldrh	r2, [r7, #30]
 800b606:	8bbb      	ldrh	r3, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	3308      	adds	r3, #8
 800b60e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b610:	8a7b      	ldrh	r3, [r7, #18]
 800b612:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b616:	d106      	bne.n	800b626 <mem_malloc+0xb6>
 800b618:	4b50      	ldr	r3, [pc, #320]	; (800b75c <mem_malloc+0x1ec>)
 800b61a:	f240 3287 	movw	r2, #903	; 0x387
 800b61e:	4950      	ldr	r1, [pc, #320]	; (800b760 <mem_malloc+0x1f0>)
 800b620:	4850      	ldr	r0, [pc, #320]	; (800b764 <mem_malloc+0x1f4>)
 800b622:	f00d f9f5 	bl	8018a10 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b626:	8a7b      	ldrh	r3, [r7, #18]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff fcb3 	bl	800af94 <ptr_to_mem>
 800b62e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	881a      	ldrh	r2, [r3, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	8bfa      	ldrh	r2, [r7, #30]
 800b642:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	8a7a      	ldrh	r2, [r7, #18]
 800b648:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2201      	movs	r2, #1
 800b64e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b658:	d00b      	beq.n	800b672 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fc98 	bl	800af94 <ptr_to_mem>
 800b664:	4602      	mov	r2, r0
 800b666:	8a7b      	ldrh	r3, [r7, #18]
 800b668:	8053      	strh	r3, [r2, #2]
 800b66a:	e002      	b.n	800b672 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2201      	movs	r2, #1
 800b670:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b672:	4b39      	ldr	r3, [pc, #228]	; (800b758 <mem_malloc+0x1e8>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d127      	bne.n	800b6cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b67c:	4b36      	ldr	r3, [pc, #216]	; (800b758 <mem_malloc+0x1e8>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b682:	e005      	b.n	800b690 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	881b      	ldrh	r3, [r3, #0]
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff fc83 	bl	800af94 <ptr_to_mem>
 800b68e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	791b      	ldrb	r3, [r3, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d004      	beq.n	800b6a2 <mem_malloc+0x132>
 800b698:	4b33      	ldr	r3, [pc, #204]	; (800b768 <mem_malloc+0x1f8>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69ba      	ldr	r2, [r7, #24]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d1f0      	bne.n	800b684 <mem_malloc+0x114>
          }
          lfree = cur;
 800b6a2:	4a2d      	ldr	r2, [pc, #180]	; (800b758 <mem_malloc+0x1e8>)
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b6a8:	4b2b      	ldr	r3, [pc, #172]	; (800b758 <mem_malloc+0x1e8>)
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	4b2e      	ldr	r3, [pc, #184]	; (800b768 <mem_malloc+0x1f8>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d00b      	beq.n	800b6cc <mem_malloc+0x15c>
 800b6b4:	4b28      	ldr	r3, [pc, #160]	; (800b758 <mem_malloc+0x1e8>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	791b      	ldrb	r3, [r3, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <mem_malloc+0x15c>
 800b6be:	4b27      	ldr	r3, [pc, #156]	; (800b75c <mem_malloc+0x1ec>)
 800b6c0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b6c4:	4929      	ldr	r1, [pc, #164]	; (800b76c <mem_malloc+0x1fc>)
 800b6c6:	4827      	ldr	r0, [pc, #156]	; (800b764 <mem_malloc+0x1f4>)
 800b6c8:	f00d f9a2 	bl	8018a10 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b6cc:	4821      	ldr	r0, [pc, #132]	; (800b754 <mem_malloc+0x1e4>)
 800b6ce:	f00a fb2e 	bl	8015d2e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b6d2:	8bba      	ldrh	r2, [r7, #28]
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	3308      	adds	r3, #8
 800b6da:	4a23      	ldr	r2, [pc, #140]	; (800b768 <mem_malloc+0x1f8>)
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d906      	bls.n	800b6f0 <mem_malloc+0x180>
 800b6e2:	4b1e      	ldr	r3, [pc, #120]	; (800b75c <mem_malloc+0x1ec>)
 800b6e4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800b6e8:	4921      	ldr	r1, [pc, #132]	; (800b770 <mem_malloc+0x200>)
 800b6ea:	481e      	ldr	r0, [pc, #120]	; (800b764 <mem_malloc+0x1f4>)
 800b6ec:	f00d f990 	bl	8018a10 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f003 0303 	and.w	r3, r3, #3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d006      	beq.n	800b708 <mem_malloc+0x198>
 800b6fa:	4b18      	ldr	r3, [pc, #96]	; (800b75c <mem_malloc+0x1ec>)
 800b6fc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b700:	491c      	ldr	r1, [pc, #112]	; (800b774 <mem_malloc+0x204>)
 800b702:	4818      	ldr	r0, [pc, #96]	; (800b764 <mem_malloc+0x1f4>)
 800b704:	f00d f984 	bl	8018a10 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <mem_malloc+0x1b0>
 800b712:	4b12      	ldr	r3, [pc, #72]	; (800b75c <mem_malloc+0x1ec>)
 800b714:	f240 32be 	movw	r2, #958	; 0x3be
 800b718:	4917      	ldr	r1, [pc, #92]	; (800b778 <mem_malloc+0x208>)
 800b71a:	4812      	ldr	r0, [pc, #72]	; (800b764 <mem_malloc+0x1f4>)
 800b71c:	f00d f978 	bl	8018a10 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	3308      	adds	r3, #8
 800b724:	e011      	b.n	800b74a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b726:	8bfb      	ldrh	r3, [r7, #30]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff fc33 	bl	800af94 <ptr_to_mem>
 800b72e:	4603      	mov	r3, r0
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b734:	8bfa      	ldrh	r2, [r7, #30]
 800b736:	8bbb      	ldrh	r3, [r7, #28]
 800b738:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b73c:	429a      	cmp	r2, r3
 800b73e:	f4ff af41 	bcc.w	800b5c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b742:	4804      	ldr	r0, [pc, #16]	; (800b754 <mem_malloc+0x1e4>)
 800b744:	f00a faf3 	bl	8015d2e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20005464 	.word	0x20005464
 800b758:	20005468 	.word	0x20005468
 800b75c:	0801cb50 	.word	0x0801cb50
 800b760:	0801cd14 	.word	0x0801cd14
 800b764:	0801cb98 	.word	0x0801cb98
 800b768:	20005460 	.word	0x20005460
 800b76c:	0801cd28 	.word	0x0801cd28
 800b770:	0801cd44 	.word	0x0801cd44
 800b774:	0801cd74 	.word	0x0801cd74
 800b778:	0801cda4 	.word	0x0801cda4

0800b77c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	3303      	adds	r3, #3
 800b792:	f023 0303 	bic.w	r3, r3, #3
 800b796:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	e011      	b.n	800b7c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	881b      	ldrh	r3, [r3, #0]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	885b      	ldrh	r3, [r3, #2]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	dbe7      	blt.n	800b79e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b7ce:	bf00      	nop
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
	...

0800b7dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	80fb      	strh	r3, [r7, #6]
 800b7e6:	e009      	b.n	800b7fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b7e8:	88fb      	ldrh	r3, [r7, #6]
 800b7ea:	4a08      	ldr	r2, [pc, #32]	; (800b80c <memp_init+0x30>)
 800b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff ffc3 	bl	800b77c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b7f6:	88fb      	ldrh	r3, [r7, #6]
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	80fb      	strh	r3, [r7, #6]
 800b7fc:	88fb      	ldrh	r3, [r7, #6]
 800b7fe:	2b0c      	cmp	r3, #12
 800b800:	d9f2      	bls.n	800b7e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b802:	bf00      	nop
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	0801f7e8 	.word	0x0801f7e8

0800b810 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b818:	f00a fabc 	bl	8015d94 <sys_arch_protect>
 800b81c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d015      	beq.n	800b858 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	6812      	ldr	r2, [r2, #0]
 800b834:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	f003 0303 	and.w	r3, r3, #3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <do_memp_malloc_pool+0x3e>
 800b840:	4b09      	ldr	r3, [pc, #36]	; (800b868 <do_memp_malloc_pool+0x58>)
 800b842:	f240 1219 	movw	r2, #281	; 0x119
 800b846:	4909      	ldr	r1, [pc, #36]	; (800b86c <do_memp_malloc_pool+0x5c>)
 800b848:	4809      	ldr	r0, [pc, #36]	; (800b870 <do_memp_malloc_pool+0x60>)
 800b84a:	f00d f8e1 	bl	8018a10 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f00a faae 	bl	8015db0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	e003      	b.n	800b860 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f00a faa9 	bl	8015db0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	0801cdc8 	.word	0x0801cdc8
 800b86c:	0801cdf8 	.word	0x0801cdf8
 800b870:	0801ce1c 	.word	0x0801ce1c

0800b874 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b87e:	79fb      	ldrb	r3, [r7, #7]
 800b880:	2b0c      	cmp	r3, #12
 800b882:	d908      	bls.n	800b896 <memp_malloc+0x22>
 800b884:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <memp_malloc+0x3c>)
 800b886:	f240 1257 	movw	r2, #343	; 0x157
 800b88a:	490a      	ldr	r1, [pc, #40]	; (800b8b4 <memp_malloc+0x40>)
 800b88c:	480a      	ldr	r0, [pc, #40]	; (800b8b8 <memp_malloc+0x44>)
 800b88e:	f00d f8bf 	bl	8018a10 <iprintf>
 800b892:	2300      	movs	r3, #0
 800b894:	e008      	b.n	800b8a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	4a08      	ldr	r2, [pc, #32]	; (800b8bc <memp_malloc+0x48>)
 800b89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff ffb6 	bl	800b810 <do_memp_malloc_pool>
 800b8a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	0801cdc8 	.word	0x0801cdc8
 800b8b4:	0801ce58 	.word	0x0801ce58
 800b8b8:	0801ce1c 	.word	0x0801ce1c
 800b8bc:	0801f7e8 	.word	0x0801f7e8

0800b8c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <do_memp_free_pool+0x22>
 800b8d4:	4b0d      	ldr	r3, [pc, #52]	; (800b90c <do_memp_free_pool+0x4c>)
 800b8d6:	f240 126d 	movw	r2, #365	; 0x16d
 800b8da:	490d      	ldr	r1, [pc, #52]	; (800b910 <do_memp_free_pool+0x50>)
 800b8dc:	480d      	ldr	r0, [pc, #52]	; (800b914 <do_memp_free_pool+0x54>)
 800b8de:	f00d f897 	bl	8018a10 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b8e6:	f00a fa55 	bl	8015d94 <sys_arch_protect>
 800b8ea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	689b      	ldr	r3, [r3, #8]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b8fe:	68b8      	ldr	r0, [r7, #8]
 800b900:	f00a fa56 	bl	8015db0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b904:	bf00      	nop
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	0801cdc8 	.word	0x0801cdc8
 800b910:	0801ce78 	.word	0x0801ce78
 800b914:	0801ce1c 	.word	0x0801ce1c

0800b918 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	6039      	str	r1, [r7, #0]
 800b922:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b924:	79fb      	ldrb	r3, [r7, #7]
 800b926:	2b0c      	cmp	r3, #12
 800b928:	d907      	bls.n	800b93a <memp_free+0x22>
 800b92a:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <memp_free+0x44>)
 800b92c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b930:	490b      	ldr	r1, [pc, #44]	; (800b960 <memp_free+0x48>)
 800b932:	480c      	ldr	r0, [pc, #48]	; (800b964 <memp_free+0x4c>)
 800b934:	f00d f86c 	bl	8018a10 <iprintf>
 800b938:	e00c      	b.n	800b954 <memp_free+0x3c>

  if (mem == NULL) {
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d008      	beq.n	800b952 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	4a09      	ldr	r2, [pc, #36]	; (800b968 <memp_free+0x50>)
 800b944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7ff ffb8 	bl	800b8c0 <do_memp_free_pool>
 800b950:	e000      	b.n	800b954 <memp_free+0x3c>
    return;
 800b952:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	0801cdc8 	.word	0x0801cdc8
 800b960:	0801ce98 	.word	0x0801ce98
 800b964:	0801ce1c 	.word	0x0801ce1c
 800b968:	0801f7e8 	.word	0x0801f7e8

0800b96c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b96c:	b480      	push	{r7}
 800b96e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b970:	bf00      	nop
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d108      	bne.n	800b9a2 <netif_add+0x26>
 800b990:	4b56      	ldr	r3, [pc, #344]	; (800baec <netif_add+0x170>)
 800b992:	f240 1227 	movw	r2, #295	; 0x127
 800b996:	4956      	ldr	r1, [pc, #344]	; (800baf0 <netif_add+0x174>)
 800b998:	4856      	ldr	r0, [pc, #344]	; (800baf4 <netif_add+0x178>)
 800b99a:	f00d f839 	bl	8018a10 <iprintf>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e09f      	b.n	800bae2 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d108      	bne.n	800b9ba <netif_add+0x3e>
 800b9a8:	4b50      	ldr	r3, [pc, #320]	; (800baec <netif_add+0x170>)
 800b9aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b9ae:	4952      	ldr	r1, [pc, #328]	; (800baf8 <netif_add+0x17c>)
 800b9b0:	4850      	ldr	r0, [pc, #320]	; (800baf4 <netif_add+0x178>)
 800b9b2:	f00d f82d 	bl	8018a10 <iprintf>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e093      	b.n	800bae2 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b9c0:	4b4e      	ldr	r3, [pc, #312]	; (800bafc <netif_add+0x180>)
 800b9c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b9ca:	4b4c      	ldr	r3, [pc, #304]	; (800bafc <netif_add+0x180>)
 800b9cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b9d4:	4b49      	ldr	r3, [pc, #292]	; (800bafc <netif_add+0x180>)
 800b9d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	4a44      	ldr	r2, [pc, #272]	; (800bb00 <netif_add+0x184>)
 800b9ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a3a      	ldr	r2, [r7, #32]
 800ba02:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800ba04:	4b3f      	ldr	r3, [pc, #252]	; (800bb04 <netif_add+0x188>)
 800ba06:	781a      	ldrb	r2, [r3, #0]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba12:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	68b9      	ldr	r1, [r7, #8]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f914 	bl	800bc48 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <netif_add+0xb4>
    return NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e058      	b.n	800bae2 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba36:	2bff      	cmp	r3, #255	; 0xff
 800ba38:	d103      	bne.n	800ba42 <netif_add+0xc6>
        netif->num = 0;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 800ba42:	2300      	movs	r3, #0
 800ba44:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ba46:	4b30      	ldr	r3, [pc, #192]	; (800bb08 <netif_add+0x18c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	e02b      	b.n	800baa6 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d106      	bne.n	800ba64 <netif_add+0xe8>
 800ba56:	4b25      	ldr	r3, [pc, #148]	; (800baec <netif_add+0x170>)
 800ba58:	f240 128b 	movw	r2, #395	; 0x18b
 800ba5c:	492b      	ldr	r1, [pc, #172]	; (800bb0c <netif_add+0x190>)
 800ba5e:	4825      	ldr	r0, [pc, #148]	; (800baf4 <netif_add+0x178>)
 800ba60:	f00c ffd6 	bl	8018a10 <iprintf>
        num_netifs++;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	3301      	adds	r3, #1
 800ba68:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2bff      	cmp	r3, #255	; 0xff
 800ba6e:	dd06      	ble.n	800ba7e <netif_add+0x102>
 800ba70:	4b1e      	ldr	r3, [pc, #120]	; (800baec <netif_add+0x170>)
 800ba72:	f240 128d 	movw	r2, #397	; 0x18d
 800ba76:	4926      	ldr	r1, [pc, #152]	; (800bb10 <netif_add+0x194>)
 800ba78:	481e      	ldr	r0, [pc, #120]	; (800baf4 <netif_add+0x178>)
 800ba7a:	f00c ffc9 	bl	8018a10 <iprintf>
        if (netif2->num == netif->num) {
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d108      	bne.n	800baa0 <netif_add+0x124>
          netif->num++;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba94:	3301      	adds	r3, #1
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 800ba9e:	e005      	b.n	800baac <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1d0      	bne.n	800ba4e <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1be      	bne.n	800ba30 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bab8:	2bfe      	cmp	r3, #254	; 0xfe
 800baba:	d103      	bne.n	800bac4 <netif_add+0x148>
    netif_num = 0;
 800babc:	4b11      	ldr	r3, [pc, #68]	; (800bb04 <netif_add+0x188>)
 800babe:	2200      	movs	r2, #0
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	e006      	b.n	800bad2 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800baca:	3301      	adds	r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	4b0d      	ldr	r3, [pc, #52]	; (800bb04 <netif_add+0x188>)
 800bad0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bad2:	4b0d      	ldr	r3, [pc, #52]	; (800bb08 <netif_add+0x18c>)
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bada:	4a0b      	ldr	r2, [pc, #44]	; (800bb08 <netif_add+0x18c>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bae0:	68fb      	ldr	r3, [r7, #12]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	0801ceb4 	.word	0x0801ceb4
 800baf0:	0801cf48 	.word	0x0801cf48
 800baf4:	0801cf04 	.word	0x0801cf04
 800baf8:	0801cf64 	.word	0x0801cf64
 800bafc:	0801f85c 	.word	0x0801f85c
 800bb00:	0800be39 	.word	0x0800be39
 800bb04:	200054a0 	.word	0x200054a0
 800bb08:	20008fa0 	.word	0x20008fa0
 800bb0c:	0801cf88 	.word	0x0801cf88
 800bb10:	0801cf9c 	.word	0x0801cf9c

0800bb14 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f002 fdc7 	bl	800e6b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f007 fc85 	bl	8013438 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bb2e:	bf00      	nop
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <netif_do_set_ipaddr+0x20>
 800bb4a:	4b1d      	ldr	r3, [pc, #116]	; (800bbc0 <netif_do_set_ipaddr+0x88>)
 800bb4c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bb50:	491c      	ldr	r1, [pc, #112]	; (800bbc4 <netif_do_set_ipaddr+0x8c>)
 800bb52:	481d      	ldr	r0, [pc, #116]	; (800bbc8 <netif_do_set_ipaddr+0x90>)
 800bb54:	f00c ff5c 	bl	8018a10 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <netif_do_set_ipaddr+0x34>
 800bb5e:	4b18      	ldr	r3, [pc, #96]	; (800bbc0 <netif_do_set_ipaddr+0x88>)
 800bb60:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bb64:	4917      	ldr	r1, [pc, #92]	; (800bbc4 <netif_do_set_ipaddr+0x8c>)
 800bb66:	4818      	ldr	r0, [pc, #96]	; (800bbc8 <netif_do_set_ipaddr+0x90>)
 800bb68:	f00c ff52 	bl	8018a10 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3304      	adds	r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d01c      	beq.n	800bbb4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	3304      	adds	r3, #4
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bb8a:	f107 0314 	add.w	r3, r7, #20
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff ffbf 	bl	800bb14 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <netif_do_set_ipaddr+0x6a>
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	e000      	b.n	800bba4 <netif_do_set_ipaddr+0x6c>
 800bba2:	2300      	movs	r3, #0
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bba8:	2101      	movs	r1, #1
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 f8d2 	bl	800bd54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e000      	b.n	800bbb6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	0801ceb4 	.word	0x0801ceb4
 800bbc4:	0801cfcc 	.word	0x0801cfcc
 800bbc8:	0801cf04 	.word	0x0801cf04

0800bbcc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3308      	adds	r3, #8
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d00a      	beq.n	800bbfc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <netif_do_set_netmask+0x26>
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	e000      	b.n	800bbf4 <netif_do_set_netmask+0x28>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e000      	b.n	800bbfe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b085      	sub	sp, #20
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d00a      	beq.n	800bc3a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d002      	beq.n	800bc30 <netif_do_set_gw+0x26>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	e000      	b.n	800bc32 <netif_do_set_gw+0x28>
 800bc30:	2300      	movs	r3, #0
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bc36:	2301      	movs	r3, #1
 800bc38:	e000      	b.n	800bc3c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bc56:	2300      	movs	r3, #0
 800bc58:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bc64:	4b1c      	ldr	r3, [pc, #112]	; (800bcd8 <netif_set_addr+0x90>)
 800bc66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bc6e:	4b1a      	ldr	r3, [pc, #104]	; (800bcd8 <netif_set_addr+0x90>)
 800bc70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d101      	bne.n	800bc7c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bc78:	4b17      	ldr	r3, [pc, #92]	; (800bcd8 <netif_set_addr+0x90>)
 800bc7a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <netif_set_addr+0x42>
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <netif_set_addr+0x46>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e000      	b.n	800bc90 <netif_set_addr+0x48>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d006      	beq.n	800bca6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bc98:	f107 0310 	add.w	r3, r7, #16
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	68b9      	ldr	r1, [r7, #8]
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f7ff ff49 	bl	800bb38 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bca6:	69fa      	ldr	r2, [r7, #28]
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f7ff ff8e 	bl	800bbcc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	6839      	ldr	r1, [r7, #0]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff ffa8 	bl	800bc0a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d106      	bne.n	800bcce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bcc0:	f107 0310 	add.w	r3, r7, #16
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	68b9      	ldr	r1, [r7, #8]
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f7ff ff35 	bl	800bb38 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bcce:	bf00      	nop
 800bcd0:	3720      	adds	r7, #32
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	0801f85c 	.word	0x0801f85c

0800bcdc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bce4:	4a04      	ldr	r2, [pc, #16]	; (800bcf8 <netif_set_default+0x1c>)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bcea:	bf00      	nop
 800bcec:	370c      	adds	r7, #12
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	20008fa4 	.word	0x20008fa4

0800bcfc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d107      	bne.n	800bd1a <netif_set_up+0x1e>
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <netif_set_up+0x4c>)
 800bd0c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800bd10:	490e      	ldr	r1, [pc, #56]	; (800bd4c <netif_set_up+0x50>)
 800bd12:	480f      	ldr	r0, [pc, #60]	; (800bd50 <netif_set_up+0x54>)
 800bd14:	f00c fe7c 	bl	8018a10 <iprintf>
 800bd18:	e013      	b.n	800bd42 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bd20:	f003 0301 	and.w	r3, r3, #1
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10c      	bne.n	800bd42 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bd3a:	2103      	movs	r1, #3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 f809 	bl	800bd54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	0801ceb4 	.word	0x0801ceb4
 800bd4c:	0801d03c 	.word	0x0801d03c
 800bd50:	0801cf04 	.word	0x0801cf04

0800bd54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <netif_issue_reports+0x20>
 800bd66:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <netif_issue_reports+0x74>)
 800bd68:	f240 326d 	movw	r2, #877	; 0x36d
 800bd6c:	4917      	ldr	r1, [pc, #92]	; (800bdcc <netif_issue_reports+0x78>)
 800bd6e:	4818      	ldr	r0, [pc, #96]	; (800bdd0 <netif_issue_reports+0x7c>)
 800bd70:	f00c fe4e 	bl	8018a10 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bd7a:	f003 0304 	and.w	r3, r3, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01e      	beq.n	800bdc0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bd88:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d017      	beq.n	800bdc0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd90:	78fb      	ldrb	r3, [r7, #3]
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d013      	beq.n	800bdc2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00e      	beq.n	800bdc2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bdaa:	f003 0308 	and.w	r3, r3, #8
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d007      	beq.n	800bdc2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f008 faa7 	bl	801430c <etharp_request>
 800bdbe:	e000      	b.n	800bdc2 <netif_issue_reports+0x6e>
    return;
 800bdc0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	0801ceb4 	.word	0x0801ceb4
 800bdcc:	0801d058 	.word	0x0801d058
 800bdd0:	0801cf04 	.word	0x0801cf04

0800bdd4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d107      	bne.n	800bdf2 <netif_set_down+0x1e>
 800bde2:	4b12      	ldr	r3, [pc, #72]	; (800be2c <netif_set_down+0x58>)
 800bde4:	f240 329b 	movw	r2, #923	; 0x39b
 800bde8:	4911      	ldr	r1, [pc, #68]	; (800be30 <netif_set_down+0x5c>)
 800bdea:	4812      	ldr	r0, [pc, #72]	; (800be34 <netif_set_down+0x60>)
 800bdec:	f00c fe10 	bl	8018a10 <iprintf>
 800bdf0:	e019      	b.n	800be26 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d012      	beq.n	800be26 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800be06:	f023 0301 	bic.w	r3, r3, #1
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800be18:	f003 0308 	and.w	r3, r3, #8
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f007 fe31 	bl	8013a88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	0801ceb4 	.word	0x0801ceb4
 800be30:	0801d07c 	.word	0x0801d07c
 800be34:	0801cf04 	.word	0x0801cf04

0800be38 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800be44:	f06f 030b 	mvn.w	r3, #11
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d013      	beq.n	800be8c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800be64:	4b0d      	ldr	r3, [pc, #52]	; (800be9c <netif_get_by_index+0x48>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	60fb      	str	r3, [r7, #12]
 800be6a:	e00c      	b.n	800be86 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800be72:	3301      	adds	r3, #1
 800be74:	b2db      	uxtb	r3, r3
 800be76:	79fa      	ldrb	r2, [r7, #7]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d101      	bne.n	800be80 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	e006      	b.n	800be8e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	60fb      	str	r3, [r7, #12]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1ef      	bne.n	800be6c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	20008fa0 	.word	0x20008fa0

0800bea0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bea6:	f009 ff75 	bl	8015d94 <sys_arch_protect>
 800beaa:	6038      	str	r0, [r7, #0]
 800beac:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <pbuf_free_ooseq+0x44>)
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	6838      	ldr	r0, [r7, #0]
 800beb4:	f009 ff7c 	bl	8015db0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800beb8:	4b0b      	ldr	r3, [pc, #44]	; (800bee8 <pbuf_free_ooseq+0x48>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	607b      	str	r3, [r7, #4]
 800bebe:	e00a      	b.n	800bed6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d003      	beq.n	800bed0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f002 fc31 	bl	800e730 <tcp_free_ooseq>
      return;
 800bece:	e005      	b.n	800bedc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	607b      	str	r3, [r7, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f1      	bne.n	800bec0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	20008fa8 	.word	0x20008fa8
 800bee8:	20008fb0 	.word	0x20008fb0

0800beec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bef4:	f7ff ffd4 	bl	800bea0 <pbuf_free_ooseq>
}
 800bef8:	bf00      	nop
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bf06:	f009 ff45 	bl	8015d94 <sys_arch_protect>
 800bf0a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <pbuf_pool_is_empty+0x4c>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bf12:	4b0e      	ldr	r3, [pc, #56]	; (800bf4c <pbuf_pool_is_empty+0x4c>)
 800bf14:	2201      	movs	r2, #1
 800bf16:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f009 ff49 	bl	8015db0 <sys_arch_unprotect>

  if (!queued) {
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10f      	bne.n	800bf44 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bf24:	2100      	movs	r1, #0
 800bf26:	480a      	ldr	r0, [pc, #40]	; (800bf50 <pbuf_pool_is_empty+0x50>)
 800bf28:	f7fe ff4e 	bl	800adc8 <tcpip_try_callback>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d008      	beq.n	800bf44 <pbuf_pool_is_empty+0x44>
 800bf32:	f009 ff2f 	bl	8015d94 <sys_arch_protect>
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <pbuf_pool_is_empty+0x4c>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f009 ff36 	bl	8015db0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	20008fa8 	.word	0x20008fa8
 800bf50:	0800beed 	.word	0x0800beed

0800bf54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	460b      	mov	r3, r1
 800bf64:	80fb      	strh	r3, [r7, #6]
 800bf66:	4613      	mov	r3, r2
 800bf68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	88fa      	ldrh	r2, [r7, #6]
 800bf7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	88ba      	ldrh	r2, [r7, #4]
 800bf80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bf82:	8b3b      	ldrh	r3, [r7, #24]
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	7f3a      	ldrb	r2, [r7, #28]
 800bf8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	73da      	strb	r2, [r3, #15]
}
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08c      	sub	sp, #48	; 0x30
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	4603      	mov	r3, r0
 800bfb0:	71fb      	strb	r3, [r7, #7]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	80bb      	strh	r3, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bfba:	79fb      	ldrb	r3, [r7, #7]
 800bfbc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bfbe:	887b      	ldrh	r3, [r7, #2]
 800bfc0:	2b41      	cmp	r3, #65	; 0x41
 800bfc2:	d00b      	beq.n	800bfdc <pbuf_alloc+0x34>
 800bfc4:	2b41      	cmp	r3, #65	; 0x41
 800bfc6:	dc02      	bgt.n	800bfce <pbuf_alloc+0x26>
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d007      	beq.n	800bfdc <pbuf_alloc+0x34>
 800bfcc:	e0c2      	b.n	800c154 <pbuf_alloc+0x1ac>
 800bfce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bfd2:	d00b      	beq.n	800bfec <pbuf_alloc+0x44>
 800bfd4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bfd8:	d070      	beq.n	800c0bc <pbuf_alloc+0x114>
 800bfda:	e0bb      	b.n	800c154 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bfdc:	887a      	ldrh	r2, [r7, #2]
 800bfde:	88bb      	ldrh	r3, [r7, #4]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	f000 f8d2 	bl	800c18c <pbuf_alloc_reference>
 800bfe8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bfea:	e0bd      	b.n	800c168 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bfec:	2300      	movs	r3, #0
 800bfee:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bff4:	88bb      	ldrh	r3, [r7, #4]
 800bff6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bff8:	200c      	movs	r0, #12
 800bffa:	f7ff fc3b 	bl	800b874 <memp_malloc>
 800bffe:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d109      	bne.n	800c01a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800c006:	f7ff ff7b 	bl	800bf00 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d002      	beq.n	800c016 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800c010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c012:	f000 faa9 	bl	800c568 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c016:	2300      	movs	r3, #0
 800c018:	e0a7      	b.n	800c16a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c01a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c01c:	3303      	adds	r3, #3
 800c01e:	b29b      	uxth	r3, r3
 800c020:	f023 0303 	bic.w	r3, r3, #3
 800c024:	b29b      	uxth	r3, r3
 800c026:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	8b7a      	ldrh	r2, [r7, #26]
 800c02e:	4293      	cmp	r3, r2
 800c030:	bf28      	it	cs
 800c032:	4613      	movcs	r3, r2
 800c034:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c038:	3310      	adds	r3, #16
 800c03a:	693a      	ldr	r2, [r7, #16]
 800c03c:	4413      	add	r3, r2
 800c03e:	3303      	adds	r3, #3
 800c040:	f023 0303 	bic.w	r3, r3, #3
 800c044:	4618      	mov	r0, r3
 800c046:	89f9      	ldrh	r1, [r7, #14]
 800c048:	8b7a      	ldrh	r2, [r7, #26]
 800c04a:	2300      	movs	r3, #0
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	460b      	mov	r3, r1
 800c054:	4601      	mov	r1, r0
 800c056:	6938      	ldr	r0, [r7, #16]
 800c058:	f7ff ff7c 	bl	800bf54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f003 0303 	and.w	r3, r3, #3
 800c064:	2b00      	cmp	r3, #0
 800c066:	d006      	beq.n	800c076 <pbuf_alloc+0xce>
 800c068:	4b42      	ldr	r3, [pc, #264]	; (800c174 <pbuf_alloc+0x1cc>)
 800c06a:	f240 1201 	movw	r2, #257	; 0x101
 800c06e:	4942      	ldr	r1, [pc, #264]	; (800c178 <pbuf_alloc+0x1d0>)
 800c070:	4842      	ldr	r0, [pc, #264]	; (800c17c <pbuf_alloc+0x1d4>)
 800c072:	f00c fccd 	bl	8018a10 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c076:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c078:	3303      	adds	r3, #3
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c082:	d106      	bne.n	800c092 <pbuf_alloc+0xea>
 800c084:	4b3b      	ldr	r3, [pc, #236]	; (800c174 <pbuf_alloc+0x1cc>)
 800c086:	f240 1203 	movw	r2, #259	; 0x103
 800c08a:	493d      	ldr	r1, [pc, #244]	; (800c180 <pbuf_alloc+0x1d8>)
 800c08c:	483b      	ldr	r0, [pc, #236]	; (800c17c <pbuf_alloc+0x1d4>)
 800c08e:	f00c fcbf 	bl	8018a10 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	d102      	bne.n	800c09e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	627b      	str	r3, [r7, #36]	; 0x24
 800c09c:	e002      	b.n	800c0a4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c0a8:	8b7a      	ldrh	r2, [r7, #26]
 800c0aa:	89fb      	ldrh	r3, [r7, #14]
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c0b4:	8b7b      	ldrh	r3, [r7, #26]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d19e      	bne.n	800bff8 <pbuf_alloc+0x50>
      break;
 800c0ba:	e055      	b.n	800c168 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c0bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0be:	3303      	adds	r3, #3
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	88bb      	ldrh	r3, [r7, #4]
 800c0ca:	3303      	adds	r3, #3
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f023 0303 	bic.w	r3, r3, #3
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	4413      	add	r3, r2
 800c0d6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c0d8:	8b3b      	ldrh	r3, [r7, #24]
 800c0da:	3310      	adds	r3, #16
 800c0dc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c0de:	8b3a      	ldrh	r2, [r7, #24]
 800c0e0:	88bb      	ldrh	r3, [r7, #4]
 800c0e2:	3303      	adds	r3, #3
 800c0e4:	f023 0303 	bic.w	r3, r3, #3
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d306      	bcc.n	800c0fa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c0ec:	8afa      	ldrh	r2, [r7, #22]
 800c0ee:	88bb      	ldrh	r3, [r7, #4]
 800c0f0:	3303      	adds	r3, #3
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d201      	bcs.n	800c0fe <pbuf_alloc+0x156>
        return NULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e035      	b.n	800c16a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c0fe:	8afb      	ldrh	r3, [r7, #22]
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fa35 	bl	800b570 <mem_malloc>
 800c106:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <pbuf_alloc+0x16a>
        return NULL;
 800c10e:	2300      	movs	r3, #0
 800c110:	e02b      	b.n	800c16a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c114:	3310      	adds	r3, #16
 800c116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c118:	4413      	add	r3, r2
 800c11a:	3303      	adds	r3, #3
 800c11c:	f023 0303 	bic.w	r3, r3, #3
 800c120:	4618      	mov	r0, r3
 800c122:	88b9      	ldrh	r1, [r7, #4]
 800c124:	88ba      	ldrh	r2, [r7, #4]
 800c126:	2300      	movs	r3, #0
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	887b      	ldrh	r3, [r7, #2]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	460b      	mov	r3, r1
 800c130:	4601      	mov	r1, r0
 800c132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c134:	f7ff ff0e 	bl	800bf54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	2b00      	cmp	r3, #0
 800c142:	d010      	beq.n	800c166 <pbuf_alloc+0x1be>
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <pbuf_alloc+0x1cc>)
 800c146:	f240 1223 	movw	r2, #291	; 0x123
 800c14a:	490e      	ldr	r1, [pc, #56]	; (800c184 <pbuf_alloc+0x1dc>)
 800c14c:	480b      	ldr	r0, [pc, #44]	; (800c17c <pbuf_alloc+0x1d4>)
 800c14e:	f00c fc5f 	bl	8018a10 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c152:	e008      	b.n	800c166 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c154:	4b07      	ldr	r3, [pc, #28]	; (800c174 <pbuf_alloc+0x1cc>)
 800c156:	f240 1227 	movw	r2, #295	; 0x127
 800c15a:	490b      	ldr	r1, [pc, #44]	; (800c188 <pbuf_alloc+0x1e0>)
 800c15c:	4807      	ldr	r0, [pc, #28]	; (800c17c <pbuf_alloc+0x1d4>)
 800c15e:	f00c fc57 	bl	8018a10 <iprintf>
      return NULL;
 800c162:	2300      	movs	r3, #0
 800c164:	e001      	b.n	800c16a <pbuf_alloc+0x1c2>
      break;
 800c166:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3728      	adds	r7, #40	; 0x28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	0801d0e4 	.word	0x0801d0e4
 800c178:	0801d114 	.word	0x0801d114
 800c17c:	0801d144 	.word	0x0801d144
 800c180:	0801d16c 	.word	0x0801d16c
 800c184:	0801d1a0 	.word	0x0801d1a0
 800c188:	0801d1cc 	.word	0x0801d1cc

0800c18c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af02      	add	r7, sp, #8
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	460b      	mov	r3, r1
 800c196:	807b      	strh	r3, [r7, #2]
 800c198:	4613      	mov	r3, r2
 800c19a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c19c:	883b      	ldrh	r3, [r7, #0]
 800c19e:	2b41      	cmp	r3, #65	; 0x41
 800c1a0:	d009      	beq.n	800c1b6 <pbuf_alloc_reference+0x2a>
 800c1a2:	883b      	ldrh	r3, [r7, #0]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d006      	beq.n	800c1b6 <pbuf_alloc_reference+0x2a>
 800c1a8:	4b0f      	ldr	r3, [pc, #60]	; (800c1e8 <pbuf_alloc_reference+0x5c>)
 800c1aa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c1ae:	490f      	ldr	r1, [pc, #60]	; (800c1ec <pbuf_alloc_reference+0x60>)
 800c1b0:	480f      	ldr	r0, [pc, #60]	; (800c1f0 <pbuf_alloc_reference+0x64>)
 800c1b2:	f00c fc2d 	bl	8018a10 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c1b6:	200b      	movs	r0, #11
 800c1b8:	f7ff fb5c 	bl	800b874 <memp_malloc>
 800c1bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e00b      	b.n	800c1e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c1c8:	8879      	ldrh	r1, [r7, #2]
 800c1ca:	887a      	ldrh	r2, [r7, #2]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	883b      	ldrh	r3, [r7, #0]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f7ff febb 	bl	800bf54 <pbuf_init_alloced_pbuf>
  return p;
 800c1de:	68fb      	ldr	r3, [r7, #12]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	0801d0e4 	.word	0x0801d0e4
 800c1ec:	0801d1e8 	.word	0x0801d1e8
 800c1f0:	0801d144 	.word	0x0801d144

0800c1f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	607b      	str	r3, [r7, #4]
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]
 800c200:	460b      	mov	r3, r1
 800c202:	81bb      	strh	r3, [r7, #12]
 800c204:	4613      	mov	r3, r2
 800c206:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c208:	7bfb      	ldrb	r3, [r7, #15]
 800c20a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c20c:	8a7b      	ldrh	r3, [r7, #18]
 800c20e:	3303      	adds	r3, #3
 800c210:	f023 0203 	bic.w	r2, r3, #3
 800c214:	89bb      	ldrh	r3, [r7, #12]
 800c216:	441a      	add	r2, r3
 800c218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d901      	bls.n	800c222 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c21e:	2300      	movs	r3, #0
 800c220:	e018      	b.n	800c254 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c222:	6a3b      	ldr	r3, [r7, #32]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d007      	beq.n	800c238 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c228:	8a7b      	ldrh	r3, [r7, #18]
 800c22a:	3303      	adds	r3, #3
 800c22c:	f023 0303 	bic.w	r3, r3, #3
 800c230:	6a3a      	ldr	r2, [r7, #32]
 800c232:	4413      	add	r3, r2
 800c234:	617b      	str	r3, [r7, #20]
 800c236:	e001      	b.n	800c23c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c238:	2300      	movs	r3, #0
 800c23a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	89b9      	ldrh	r1, [r7, #12]
 800c240:	89ba      	ldrh	r2, [r7, #12]
 800c242:	2302      	movs	r3, #2
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	897b      	ldrh	r3, [r7, #10]
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	460b      	mov	r3, r1
 800c24c:	6979      	ldr	r1, [r7, #20]
 800c24e:	f7ff fe81 	bl	800bf54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c252:	687b      	ldr	r3, [r7, #4]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <pbuf_realloc+0x20>
 800c26e:	4b3a      	ldr	r3, [pc, #232]	; (800c358 <pbuf_realloc+0xfc>)
 800c270:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c274:	4939      	ldr	r1, [pc, #228]	; (800c35c <pbuf_realloc+0x100>)
 800c276:	483a      	ldr	r0, [pc, #232]	; (800c360 <pbuf_realloc+0x104>)
 800c278:	f00c fbca 	bl	8018a10 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	891b      	ldrh	r3, [r3, #8]
 800c280:	887a      	ldrh	r2, [r7, #2]
 800c282:	429a      	cmp	r2, r3
 800c284:	d264      	bcs.n	800c350 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	891a      	ldrh	r2, [r3, #8]
 800c28a:	887b      	ldrh	r3, [r7, #2]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c290:	887b      	ldrh	r3, [r7, #2]
 800c292:	817b      	strh	r3, [r7, #10]
  q = p;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c298:	e018      	b.n	800c2cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	895b      	ldrh	r3, [r3, #10]
 800c29e:	897a      	ldrh	r2, [r7, #10]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	891a      	ldrh	r2, [r3, #8]
 800c2a8:	893b      	ldrh	r3, [r7, #8]
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <pbuf_realloc+0x70>
 800c2be:	4b26      	ldr	r3, [pc, #152]	; (800c358 <pbuf_realloc+0xfc>)
 800c2c0:	f240 12af 	movw	r2, #431	; 0x1af
 800c2c4:	4927      	ldr	r1, [pc, #156]	; (800c364 <pbuf_realloc+0x108>)
 800c2c6:	4826      	ldr	r0, [pc, #152]	; (800c360 <pbuf_realloc+0x104>)
 800c2c8:	f00c fba2 	bl	8018a10 <iprintf>
  while (rem_len > q->len) {
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	895b      	ldrh	r3, [r3, #10]
 800c2d0:	897a      	ldrh	r2, [r7, #10]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d8e1      	bhi.n	800c29a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	7b1b      	ldrb	r3, [r3, #12]
 800c2da:	f003 030f 	and.w	r3, r3, #15
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d122      	bne.n	800c328 <pbuf_realloc+0xcc>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	895b      	ldrh	r3, [r3, #10]
 800c2e6:	897a      	ldrh	r2, [r7, #10]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d01d      	beq.n	800c328 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	7b5b      	ldrb	r3, [r3, #13]
 800c2f0:	f003 0302 	and.w	r3, r3, #2
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d117      	bne.n	800c328 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	b29a      	uxth	r2, r3
 800c304:	897b      	ldrh	r3, [r7, #10]
 800c306:	4413      	add	r3, r2
 800c308:	b29b      	uxth	r3, r3
 800c30a:	4619      	mov	r1, r3
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f7ff f825 	bl	800b35c <mem_trim>
 800c312:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d106      	bne.n	800c328 <pbuf_realloc+0xcc>
 800c31a:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <pbuf_realloc+0xfc>)
 800c31c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c320:	4911      	ldr	r1, [pc, #68]	; (800c368 <pbuf_realloc+0x10c>)
 800c322:	480f      	ldr	r0, [pc, #60]	; (800c360 <pbuf_realloc+0x104>)
 800c324:	f00c fb74 	bl	8018a10 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	897a      	ldrh	r2, [r7, #10]
 800c32c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	895a      	ldrh	r2, [r3, #10]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d004      	beq.n	800c348 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f910 	bl	800c568 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	e000      	b.n	800c352 <pbuf_realloc+0xf6>
    return;
 800c350:	bf00      	nop

}
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	0801d0e4 	.word	0x0801d0e4
 800c35c:	0801d1fc 	.word	0x0801d1fc
 800c360:	0801d144 	.word	0x0801d144
 800c364:	0801d214 	.word	0x0801d214
 800c368:	0801d22c 	.word	0x0801d22c

0800c36c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	4613      	mov	r3, r2
 800c378:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d106      	bne.n	800c38e <pbuf_add_header_impl+0x22>
 800c380:	4b2b      	ldr	r3, [pc, #172]	; (800c430 <pbuf_add_header_impl+0xc4>)
 800c382:	f240 12df 	movw	r2, #479	; 0x1df
 800c386:	492b      	ldr	r1, [pc, #172]	; (800c434 <pbuf_add_header_impl+0xc8>)
 800c388:	482b      	ldr	r0, [pc, #172]	; (800c438 <pbuf_add_header_impl+0xcc>)
 800c38a:	f00c fb41 	bl	8018a10 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <pbuf_add_header_impl+0x30>
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39a:	d301      	bcc.n	800c3a0 <pbuf_add_header_impl+0x34>
    return 1;
 800c39c:	2301      	movs	r3, #1
 800c39e:	e043      	b.n	800c428 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <pbuf_add_header_impl+0x3e>
    return 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	e03e      	b.n	800c428 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	891a      	ldrh	r2, [r3, #8]
 800c3b2:	8a7b      	ldrh	r3, [r7, #18]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	8a7a      	ldrh	r2, [r7, #18]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d901      	bls.n	800c3c2 <pbuf_add_header_impl+0x56>
    return 1;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e032      	b.n	800c428 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	7b1b      	ldrb	r3, [r3, #12]
 800c3c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c3c8:	8a3b      	ldrh	r3, [r7, #16]
 800c3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00c      	beq.n	800c3ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	425b      	negs	r3, r3
 800c3da:	4413      	add	r3, r2
 800c3dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3310      	adds	r3, #16
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d20d      	bcs.n	800c404 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e01d      	b.n	800c428 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c3ec:	79fb      	ldrb	r3, [r7, #7]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d006      	beq.n	800c400 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	425b      	negs	r3, r3
 800c3fa:	4413      	add	r3, r2
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	e001      	b.n	800c404 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c400:	2301      	movs	r3, #1
 800c402:	e011      	b.n	800c428 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	895a      	ldrh	r2, [r3, #10]
 800c40e:	8a7b      	ldrh	r3, [r7, #18]
 800c410:	4413      	add	r3, r2
 800c412:	b29a      	uxth	r2, r3
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	891a      	ldrh	r2, [r3, #8]
 800c41c:	8a7b      	ldrh	r3, [r7, #18]
 800c41e:	4413      	add	r3, r2
 800c420:	b29a      	uxth	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	811a      	strh	r2, [r3, #8]


  return 0;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	0801d0e4 	.word	0x0801d0e4
 800c434:	0801d248 	.word	0x0801d248
 800c438:	0801d144 	.word	0x0801d144

0800c43c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c446:	2200      	movs	r2, #0
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff ff8e 	bl	800c36c <pbuf_add_header_impl>
 800c450:	4603      	mov	r3, r0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <pbuf_remove_header+0x1e>
 800c46c:	4b20      	ldr	r3, [pc, #128]	; (800c4f0 <pbuf_remove_header+0x94>)
 800c46e:	f240 224b 	movw	r2, #587	; 0x24b
 800c472:	4920      	ldr	r1, [pc, #128]	; (800c4f4 <pbuf_remove_header+0x98>)
 800c474:	4820      	ldr	r0, [pc, #128]	; (800c4f8 <pbuf_remove_header+0x9c>)
 800c476:	f00c facb 	bl	8018a10 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d003      	beq.n	800c488 <pbuf_remove_header+0x2c>
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c486:	d301      	bcc.n	800c48c <pbuf_remove_header+0x30>
    return 1;
 800c488:	2301      	movs	r3, #1
 800c48a:	e02c      	b.n	800c4e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <pbuf_remove_header+0x3a>
    return 0;
 800c492:	2300      	movs	r3, #0
 800c494:	e027      	b.n	800c4e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	895b      	ldrh	r3, [r3, #10]
 800c49e:	89fa      	ldrh	r2, [r7, #14]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d908      	bls.n	800c4b6 <pbuf_remove_header+0x5a>
 800c4a4:	4b12      	ldr	r3, [pc, #72]	; (800c4f0 <pbuf_remove_header+0x94>)
 800c4a6:	f240 2255 	movw	r2, #597	; 0x255
 800c4aa:	4914      	ldr	r1, [pc, #80]	; (800c4fc <pbuf_remove_header+0xa0>)
 800c4ac:	4812      	ldr	r0, [pc, #72]	; (800c4f8 <pbuf_remove_header+0x9c>)
 800c4ae:	f00c faaf 	bl	8018a10 <iprintf>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e017      	b.n	800c4e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685a      	ldr	r2, [r3, #4]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	441a      	add	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	895a      	ldrh	r2, [r3, #10]
 800c4cc:	89fb      	ldrh	r3, [r7, #14]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	891a      	ldrh	r2, [r3, #8]
 800c4da:	89fb      	ldrh	r3, [r7, #14]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0801d0e4 	.word	0x0801d0e4
 800c4f4:	0801d248 	.word	0x0801d248
 800c4f8:	0801d144 	.word	0x0801d144
 800c4fc:	0801d254 	.word	0x0801d254

0800c500 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	807b      	strh	r3, [r7, #2]
 800c50c:	4613      	mov	r3, r2
 800c50e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c514:	2b00      	cmp	r3, #0
 800c516:	da08      	bge.n	800c52a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c51c:	425b      	negs	r3, r3
 800c51e:	4619      	mov	r1, r3
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ff9b 	bl	800c45c <pbuf_remove_header>
 800c526:	4603      	mov	r3, r0
 800c528:	e007      	b.n	800c53a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c52a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c52e:	787a      	ldrb	r2, [r7, #1]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7ff ff1a 	bl	800c36c <pbuf_add_header_impl>
 800c538:	4603      	mov	r3, r0
  }
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	460b      	mov	r3, r1
 800c54c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c54e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c552:	2201      	movs	r2, #1
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff ffd2 	bl	800c500 <pbuf_header_impl>
 800c55c:	4603      	mov	r3, r0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
	...

0800c568 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b088      	sub	sp, #32
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10b      	bne.n	800c58e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d106      	bne.n	800c58a <pbuf_free+0x22>
 800c57c:	4b3b      	ldr	r3, [pc, #236]	; (800c66c <pbuf_free+0x104>)
 800c57e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c582:	493b      	ldr	r1, [pc, #236]	; (800c670 <pbuf_free+0x108>)
 800c584:	483b      	ldr	r0, [pc, #236]	; (800c674 <pbuf_free+0x10c>)
 800c586:	f00c fa43 	bl	8018a10 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e069      	b.n	800c662 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c592:	e062      	b.n	800c65a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c594:	f009 fbfe 	bl	8015d94 <sys_arch_protect>
 800c598:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7b9b      	ldrb	r3, [r3, #14]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <pbuf_free+0x48>
 800c5a2:	4b32      	ldr	r3, [pc, #200]	; (800c66c <pbuf_free+0x104>)
 800c5a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c5a8:	4933      	ldr	r1, [pc, #204]	; (800c678 <pbuf_free+0x110>)
 800c5aa:	4832      	ldr	r0, [pc, #200]	; (800c674 <pbuf_free+0x10c>)
 800c5ac:	f00c fa30 	bl	8018a10 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7b9b      	ldrb	r3, [r3, #14]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	739a      	strb	r2, [r3, #14]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	7b9b      	ldrb	r3, [r3, #14]
 800c5c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c5c2:	69b8      	ldr	r0, [r7, #24]
 800c5c4:	f009 fbf4 	bl	8015db0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d143      	bne.n	800c656 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7b1b      	ldrb	r3, [r3, #12]
 800c5d8:	f003 030f 	and.w	r3, r3, #15
 800c5dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	7b5b      	ldrb	r3, [r3, #13]
 800c5e2:	f003 0302 	and.w	r3, r3, #2
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d011      	beq.n	800c60e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <pbuf_free+0x9c>
 800c5f6:	4b1d      	ldr	r3, [pc, #116]	; (800c66c <pbuf_free+0x104>)
 800c5f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c5fc:	491f      	ldr	r1, [pc, #124]	; (800c67c <pbuf_free+0x114>)
 800c5fe:	481d      	ldr	r0, [pc, #116]	; (800c674 <pbuf_free+0x10c>)
 800c600:	f00c fa06 	bl	8018a10 <iprintf>
        pc->custom_free_function(p);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	4798      	blx	r3
 800c60c:	e01d      	b.n	800c64a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b02      	cmp	r3, #2
 800c612:	d104      	bne.n	800c61e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	200c      	movs	r0, #12
 800c618:	f7ff f97e 	bl	800b918 <memp_free>
 800c61c:	e015      	b.n	800c64a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c61e:	7bfb      	ldrb	r3, [r7, #15]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d104      	bne.n	800c62e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c624:	6879      	ldr	r1, [r7, #4]
 800c626:	200b      	movs	r0, #11
 800c628:	f7ff f976 	bl	800b918 <memp_free>
 800c62c:	e00d      	b.n	800c64a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d103      	bne.n	800c63c <pbuf_free+0xd4>
          mem_free(p);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7fe fe01 	bl	800b23c <mem_free>
 800c63a:	e006      	b.n	800c64a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c63c:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <pbuf_free+0x104>)
 800c63e:	f240 320f 	movw	r2, #783	; 0x30f
 800c642:	490f      	ldr	r1, [pc, #60]	; (800c680 <pbuf_free+0x118>)
 800c644:	480b      	ldr	r0, [pc, #44]	; (800c674 <pbuf_free+0x10c>)
 800c646:	f00c f9e3 	bl	8018a10 <iprintf>
        }
      }
      count++;
 800c64a:	7ffb      	ldrb	r3, [r7, #31]
 800c64c:	3301      	adds	r3, #1
 800c64e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	607b      	str	r3, [r7, #4]
 800c654:	e001      	b.n	800c65a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c656:	2300      	movs	r3, #0
 800c658:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d199      	bne.n	800c594 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c660:	7ffb      	ldrb	r3, [r7, #31]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3720      	adds	r7, #32
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	0801d0e4 	.word	0x0801d0e4
 800c670:	0801d248 	.word	0x0801d248
 800c674:	0801d144 	.word	0x0801d144
 800c678:	0801d274 	.word	0x0801d274
 800c67c:	0801d28c 	.word	0x0801d28c
 800c680:	0801d2b0 	.word	0x0801d2b0

0800c684 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c690:	e005      	b.n	800c69e <pbuf_clen+0x1a>
    ++len;
 800c692:	89fb      	ldrh	r3, [r7, #14]
 800c694:	3301      	adds	r3, #1
 800c696:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1f6      	bne.n	800c692 <pbuf_clen+0xe>
  }
  return len;
 800c6a4:	89fb      	ldrh	r3, [r7, #14]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
	...

0800c6b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d016      	beq.n	800c6f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c6c2:	f009 fb67 	bl	8015d94 <sys_arch_protect>
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7b9b      	ldrb	r3, [r3, #14]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	739a      	strb	r2, [r3, #14]
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f009 fb6b 	bl	8015db0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	7b9b      	ldrb	r3, [r3, #14]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d106      	bne.n	800c6f0 <pbuf_ref+0x3c>
 800c6e2:	4b05      	ldr	r3, [pc, #20]	; (800c6f8 <pbuf_ref+0x44>)
 800c6e4:	f240 3242 	movw	r2, #834	; 0x342
 800c6e8:	4904      	ldr	r1, [pc, #16]	; (800c6fc <pbuf_ref+0x48>)
 800c6ea:	4805      	ldr	r0, [pc, #20]	; (800c700 <pbuf_ref+0x4c>)
 800c6ec:	f00c f990 	bl	8018a10 <iprintf>
  }
}
 800c6f0:	bf00      	nop
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	0801d0e4 	.word	0x0801d0e4
 800c6fc:	0801d2c4 	.word	0x0801d2c4
 800c700:	0801d144 	.word	0x0801d144

0800c704 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <pbuf_cat+0x16>
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d107      	bne.n	800c72a <pbuf_cat+0x26>
 800c71a:	4b20      	ldr	r3, [pc, #128]	; (800c79c <pbuf_cat+0x98>)
 800c71c:	f240 325a 	movw	r2, #858	; 0x35a
 800c720:	491f      	ldr	r1, [pc, #124]	; (800c7a0 <pbuf_cat+0x9c>)
 800c722:	4820      	ldr	r0, [pc, #128]	; (800c7a4 <pbuf_cat+0xa0>)
 800c724:	f00c f974 	bl	8018a10 <iprintf>
 800c728:	e034      	b.n	800c794 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	e00a      	b.n	800c746 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	891a      	ldrh	r2, [r3, #8]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	891b      	ldrh	r3, [r3, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1f0      	bne.n	800c730 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	891a      	ldrh	r2, [r3, #8]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	895b      	ldrh	r3, [r3, #10]
 800c756:	429a      	cmp	r2, r3
 800c758:	d006      	beq.n	800c768 <pbuf_cat+0x64>
 800c75a:	4b10      	ldr	r3, [pc, #64]	; (800c79c <pbuf_cat+0x98>)
 800c75c:	f240 3262 	movw	r2, #866	; 0x362
 800c760:	4911      	ldr	r1, [pc, #68]	; (800c7a8 <pbuf_cat+0xa4>)
 800c762:	4810      	ldr	r0, [pc, #64]	; (800c7a4 <pbuf_cat+0xa0>)
 800c764:	f00c f954 	bl	8018a10 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d006      	beq.n	800c77e <pbuf_cat+0x7a>
 800c770:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <pbuf_cat+0x98>)
 800c772:	f240 3263 	movw	r2, #867	; 0x363
 800c776:	490d      	ldr	r1, [pc, #52]	; (800c7ac <pbuf_cat+0xa8>)
 800c778:	480a      	ldr	r0, [pc, #40]	; (800c7a4 <pbuf_cat+0xa0>)
 800c77a:	f00c f949 	bl	8018a10 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	891a      	ldrh	r2, [r3, #8]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	891b      	ldrh	r3, [r3, #8]
 800c786:	4413      	add	r3, r2
 800c788:	b29a      	uxth	r2, r3
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	0801d0e4 	.word	0x0801d0e4
 800c7a0:	0801d2d8 	.word	0x0801d2d8
 800c7a4:	0801d144 	.word	0x0801d144
 800c7a8:	0801d310 	.word	0x0801d310
 800c7ac:	0801d340 	.word	0x0801d340

0800c7b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	617b      	str	r3, [r7, #20]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d008      	beq.n	800c7da <pbuf_copy+0x2a>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <pbuf_copy+0x2a>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	891a      	ldrh	r2, [r3, #8]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	891b      	ldrh	r3, [r3, #8]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d209      	bcs.n	800c7ee <pbuf_copy+0x3e>
 800c7da:	4b57      	ldr	r3, [pc, #348]	; (800c938 <pbuf_copy+0x188>)
 800c7dc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c7e0:	4956      	ldr	r1, [pc, #344]	; (800c93c <pbuf_copy+0x18c>)
 800c7e2:	4857      	ldr	r0, [pc, #348]	; (800c940 <pbuf_copy+0x190>)
 800c7e4:	f00c f914 	bl	8018a10 <iprintf>
 800c7e8:	f06f 030f 	mvn.w	r3, #15
 800c7ec:	e09f      	b.n	800c92e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	895b      	ldrh	r3, [r3, #10]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	1ad2      	subs	r2, r2, r3
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	895b      	ldrh	r3, [r3, #10]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	1acb      	subs	r3, r1, r3
 800c802:	429a      	cmp	r2, r3
 800c804:	d306      	bcc.n	800c814 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	895b      	ldrh	r3, [r3, #10]
 800c80a:	461a      	mov	r2, r3
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e005      	b.n	800c820 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	895b      	ldrh	r3, [r3, #10]
 800c818:	461a      	mov	r2, r3
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685a      	ldr	r2, [r3, #4]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	18d0      	adds	r0, r2, r3
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	4413      	add	r3, r2
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	4619      	mov	r1, r3
 800c834:	f00b faac 	bl	8017d90 <memcpy>
    offset_to += len;
 800c838:	697a      	ldr	r2, [r7, #20]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	4413      	add	r3, r2
 800c846:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	895b      	ldrh	r3, [r3, #10]
 800c84c:	461a      	mov	r2, r3
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	4293      	cmp	r3, r2
 800c852:	d906      	bls.n	800c862 <pbuf_copy+0xb2>
 800c854:	4b38      	ldr	r3, [pc, #224]	; (800c938 <pbuf_copy+0x188>)
 800c856:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c85a:	493a      	ldr	r1, [pc, #232]	; (800c944 <pbuf_copy+0x194>)
 800c85c:	4838      	ldr	r0, [pc, #224]	; (800c940 <pbuf_copy+0x190>)
 800c85e:	f00c f8d7 	bl	8018a10 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	895b      	ldrh	r3, [r3, #10]
 800c866:	461a      	mov	r2, r3
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d906      	bls.n	800c87c <pbuf_copy+0xcc>
 800c86e:	4b32      	ldr	r3, [pc, #200]	; (800c938 <pbuf_copy+0x188>)
 800c870:	f240 32da 	movw	r2, #986	; 0x3da
 800c874:	4934      	ldr	r1, [pc, #208]	; (800c948 <pbuf_copy+0x198>)
 800c876:	4832      	ldr	r0, [pc, #200]	; (800c940 <pbuf_copy+0x190>)
 800c878:	f00c f8ca 	bl	8018a10 <iprintf>
    if (offset_from >= p_from->len) {
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	895b      	ldrh	r3, [r3, #10]
 800c880:	461a      	mov	r2, r3
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	4293      	cmp	r3, r2
 800c886:	d304      	bcc.n	800c892 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	895b      	ldrh	r3, [r3, #10]
 800c896:	461a      	mov	r2, r3
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d114      	bne.n	800c8c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10c      	bne.n	800c8c8 <pbuf_copy+0x118>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d009      	beq.n	800c8c8 <pbuf_copy+0x118>
 800c8b4:	4b20      	ldr	r3, [pc, #128]	; (800c938 <pbuf_copy+0x188>)
 800c8b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c8ba:	4924      	ldr	r1, [pc, #144]	; (800c94c <pbuf_copy+0x19c>)
 800c8bc:	4820      	ldr	r0, [pc, #128]	; (800c940 <pbuf_copy+0x190>)
 800c8be:	f00c f8a7 	bl	8018a10 <iprintf>
 800c8c2:	f06f 030f 	mvn.w	r3, #15
 800c8c6:	e032      	b.n	800c92e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d013      	beq.n	800c8f6 <pbuf_copy+0x146>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	895a      	ldrh	r2, [r3, #10]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	891b      	ldrh	r3, [r3, #8]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d10d      	bne.n	800c8f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d009      	beq.n	800c8f6 <pbuf_copy+0x146>
 800c8e2:	4b15      	ldr	r3, [pc, #84]	; (800c938 <pbuf_copy+0x188>)
 800c8e4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c8e8:	4919      	ldr	r1, [pc, #100]	; (800c950 <pbuf_copy+0x1a0>)
 800c8ea:	4815      	ldr	r0, [pc, #84]	; (800c940 <pbuf_copy+0x190>)
 800c8ec:	f00c f890 	bl	8018a10 <iprintf>
 800c8f0:	f06f 0305 	mvn.w	r3, #5
 800c8f4:	e01b      	b.n	800c92e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d013      	beq.n	800c924 <pbuf_copy+0x174>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	895a      	ldrh	r2, [r3, #10]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	891b      	ldrh	r3, [r3, #8]
 800c904:	429a      	cmp	r2, r3
 800c906:	d10d      	bne.n	800c924 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d009      	beq.n	800c924 <pbuf_copy+0x174>
 800c910:	4b09      	ldr	r3, [pc, #36]	; (800c938 <pbuf_copy+0x188>)
 800c912:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c916:	490e      	ldr	r1, [pc, #56]	; (800c950 <pbuf_copy+0x1a0>)
 800c918:	4809      	ldr	r0, [pc, #36]	; (800c940 <pbuf_copy+0x190>)
 800c91a:	f00c f879 	bl	8018a10 <iprintf>
 800c91e:	f06f 0305 	mvn.w	r3, #5
 800c922:	e004      	b.n	800c92e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f47f af61 	bne.w	800c7ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	0801d0e4 	.word	0x0801d0e4
 800c93c:	0801d38c 	.word	0x0801d38c
 800c940:	0801d144 	.word	0x0801d144
 800c944:	0801d3bc 	.word	0x0801d3bc
 800c948:	0801d3d4 	.word	0x0801d3d4
 800c94c:	0801d3f0 	.word	0x0801d3f0
 800c950:	0801d400 	.word	0x0801d400

0800c954 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4611      	mov	r1, r2
 800c960:	461a      	mov	r2, r3
 800c962:	460b      	mov	r3, r1
 800c964:	80fb      	strh	r3, [r7, #6]
 800c966:	4613      	mov	r3, r2
 800c968:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d108      	bne.n	800c98a <pbuf_copy_partial+0x36>
 800c978:	4b2b      	ldr	r3, [pc, #172]	; (800ca28 <pbuf_copy_partial+0xd4>)
 800c97a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c97e:	492b      	ldr	r1, [pc, #172]	; (800ca2c <pbuf_copy_partial+0xd8>)
 800c980:	482b      	ldr	r0, [pc, #172]	; (800ca30 <pbuf_copy_partial+0xdc>)
 800c982:	f00c f845 	bl	8018a10 <iprintf>
 800c986:	2300      	movs	r3, #0
 800c988:	e04a      	b.n	800ca20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d108      	bne.n	800c9a2 <pbuf_copy_partial+0x4e>
 800c990:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <pbuf_copy_partial+0xd4>)
 800c992:	f240 420b 	movw	r2, #1035	; 0x40b
 800c996:	4927      	ldr	r1, [pc, #156]	; (800ca34 <pbuf_copy_partial+0xe0>)
 800c998:	4825      	ldr	r0, [pc, #148]	; (800ca30 <pbuf_copy_partial+0xdc>)
 800c99a:	f00c f839 	bl	8018a10 <iprintf>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e03e      	b.n	800ca20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	61fb      	str	r3, [r7, #28]
 800c9a6:	e034      	b.n	800ca12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c9a8:	88bb      	ldrh	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00a      	beq.n	800c9c4 <pbuf_copy_partial+0x70>
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	895b      	ldrh	r3, [r3, #10]
 800c9b2:	88ba      	ldrh	r2, [r7, #4]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d305      	bcc.n	800c9c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	895b      	ldrh	r3, [r3, #10]
 800c9bc:	88ba      	ldrh	r2, [r7, #4]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	80bb      	strh	r3, [r7, #4]
 800c9c2:	e023      	b.n	800ca0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	895a      	ldrh	r2, [r3, #10]
 800c9c8:	88bb      	ldrh	r3, [r7, #4]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c9ce:	8b3a      	ldrh	r2, [r7, #24]
 800c9d0:	88fb      	ldrh	r3, [r7, #6]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d901      	bls.n	800c9da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c9d6:	88fb      	ldrh	r3, [r7, #6]
 800c9d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c9da:	8b7b      	ldrh	r3, [r7, #26]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	18d0      	adds	r0, r2, r3
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	88bb      	ldrh	r3, [r7, #4]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	8b3a      	ldrh	r2, [r7, #24]
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	f00b f9d0 	bl	8017d90 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c9f0:	8afa      	ldrh	r2, [r7, #22]
 800c9f2:	8b3b      	ldrh	r3, [r7, #24]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c9f8:	8b7a      	ldrh	r2, [r7, #26]
 800c9fa:	8b3b      	ldrh	r3, [r7, #24]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ca00:	88fa      	ldrh	r2, [r7, #6]
 800ca02:	8b3b      	ldrh	r3, [r7, #24]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	61fb      	str	r3, [r7, #28]
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <pbuf_copy_partial+0xca>
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1c4      	bne.n	800c9a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ca1e:	8afb      	ldrh	r3, [r7, #22]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	0801d0e4 	.word	0x0801d0e4
 800ca2c:	0801d42c 	.word	0x0801d42c
 800ca30:	0801d144 	.word	0x0801d144
 800ca34:	0801d44c 	.word	0x0801d44c

0800ca38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	603a      	str	r2, [r7, #0]
 800ca42:	71fb      	strb	r3, [r7, #7]
 800ca44:	460b      	mov	r3, r1
 800ca46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	8919      	ldrh	r1, [r3, #8]
 800ca4c:	88ba      	ldrh	r2, [r7, #4]
 800ca4e:	79fb      	ldrb	r3, [r7, #7]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7ff faa9 	bl	800bfa8 <pbuf_alloc>
 800ca56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <pbuf_clone+0x2a>
    return NULL;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e011      	b.n	800ca86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff fea3 	bl	800c7b0 <pbuf_copy>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ca6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d006      	beq.n	800ca84 <pbuf_clone+0x4c>
 800ca76:	4b06      	ldr	r3, [pc, #24]	; (800ca90 <pbuf_clone+0x58>)
 800ca78:	f240 5224 	movw	r2, #1316	; 0x524
 800ca7c:	4905      	ldr	r1, [pc, #20]	; (800ca94 <pbuf_clone+0x5c>)
 800ca7e:	4806      	ldr	r0, [pc, #24]	; (800ca98 <pbuf_clone+0x60>)
 800ca80:	f00b ffc6 	bl	8018a10 <iprintf>
  return q;
 800ca84:	68fb      	ldr	r3, [r7, #12]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	0801d0e4 	.word	0x0801d0e4
 800ca94:	0801d558 	.word	0x0801d558
 800ca98:	0801d144 	.word	0x0801d144

0800ca9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800caa0:	f00b ffce 	bl	8018a40 <rand>
 800caa4:	4603      	mov	r3, r0
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800caac:	b29b      	uxth	r3, r3
 800caae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	4b01      	ldr	r3, [pc, #4]	; (800cabc <tcp_init+0x20>)
 800cab6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cab8:	bf00      	nop
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	2000000c 	.word	0x2000000c

0800cac0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7d1b      	ldrb	r3, [r3, #20]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d105      	bne.n	800cadc <tcp_free+0x1c>
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <tcp_free+0x2c>)
 800cad2:	22d4      	movs	r2, #212	; 0xd4
 800cad4:	4906      	ldr	r1, [pc, #24]	; (800caf0 <tcp_free+0x30>)
 800cad6:	4807      	ldr	r0, [pc, #28]	; (800caf4 <tcp_free+0x34>)
 800cad8:	f00b ff9a 	bl	8018a10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	2001      	movs	r0, #1
 800cae0:	f7fe ff1a 	bl	800b918 <memp_free>
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	0801d5e4 	.word	0x0801d5e4
 800caf0:	0801d614 	.word	0x0801d614
 800caf4:	0801d628 	.word	0x0801d628

0800caf8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7d1b      	ldrb	r3, [r3, #20]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d105      	bne.n	800cb14 <tcp_free_listen+0x1c>
 800cb08:	4b06      	ldr	r3, [pc, #24]	; (800cb24 <tcp_free_listen+0x2c>)
 800cb0a:	22df      	movs	r2, #223	; 0xdf
 800cb0c:	4906      	ldr	r1, [pc, #24]	; (800cb28 <tcp_free_listen+0x30>)
 800cb0e:	4807      	ldr	r0, [pc, #28]	; (800cb2c <tcp_free_listen+0x34>)
 800cb10:	f00b ff7e 	bl	8018a10 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	2002      	movs	r0, #2
 800cb18:	f7fe fefe 	bl	800b918 <memp_free>
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	0801d5e4 	.word	0x0801d5e4
 800cb28:	0801d650 	.word	0x0801d650
 800cb2c:	0801d628 	.word	0x0801d628

0800cb30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cb34:	f001 f89a 	bl	800dc6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cb38:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <tcp_tmr+0x28>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <tcp_tmr+0x28>)
 800cb42:	701a      	strb	r2, [r3, #0]
 800cb44:	4b04      	ldr	r3, [pc, #16]	; (800cb58 <tcp_tmr+0x28>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	f003 0301 	and.w	r3, r3, #1
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cb50:	f000 fd4e 	bl	800d5f0 <tcp_slowtmr>
  }
}
 800cb54:	bf00      	nop
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	200054a1 	.word	0x200054a1

0800cb5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d105      	bne.n	800cb78 <tcp_remove_listener+0x1c>
 800cb6c:	4b0d      	ldr	r3, [pc, #52]	; (800cba4 <tcp_remove_listener+0x48>)
 800cb6e:	22ff      	movs	r2, #255	; 0xff
 800cb70:	490d      	ldr	r1, [pc, #52]	; (800cba8 <tcp_remove_listener+0x4c>)
 800cb72:	480e      	ldr	r0, [pc, #56]	; (800cbac <tcp_remove_listener+0x50>)
 800cb74:	f00b ff4c 	bl	8018a10 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e00a      	b.n	800cb94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d102      	bne.n	800cb8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1f1      	bne.n	800cb7e <tcp_remove_listener+0x22>
    }
  }
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	0801d5e4 	.word	0x0801d5e4
 800cba8:	0801d66c 	.word	0x0801d66c
 800cbac:	0801d628 	.word	0x0801d628

0800cbb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d106      	bne.n	800cbcc <tcp_listen_closed+0x1c>
 800cbbe:	4b14      	ldr	r3, [pc, #80]	; (800cc10 <tcp_listen_closed+0x60>)
 800cbc0:	f240 1211 	movw	r2, #273	; 0x111
 800cbc4:	4913      	ldr	r1, [pc, #76]	; (800cc14 <tcp_listen_closed+0x64>)
 800cbc6:	4814      	ldr	r0, [pc, #80]	; (800cc18 <tcp_listen_closed+0x68>)
 800cbc8:	f00b ff22 	bl	8018a10 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7d1b      	ldrb	r3, [r3, #20]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d006      	beq.n	800cbe2 <tcp_listen_closed+0x32>
 800cbd4:	4b0e      	ldr	r3, [pc, #56]	; (800cc10 <tcp_listen_closed+0x60>)
 800cbd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cbda:	4910      	ldr	r1, [pc, #64]	; (800cc1c <tcp_listen_closed+0x6c>)
 800cbdc:	480e      	ldr	r0, [pc, #56]	; (800cc18 <tcp_listen_closed+0x68>)
 800cbde:	f00b ff17 	bl	8018a10 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	e00b      	b.n	800cc00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cbe8:	4a0d      	ldr	r2, [pc, #52]	; (800cc20 <tcp_listen_closed+0x70>)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7ff ffb1 	bl	800cb5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d9f0      	bls.n	800cbe8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cc06:	bf00      	nop
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	0801d5e4 	.word	0x0801d5e4
 800cc14:	0801d694 	.word	0x0801d694
 800cc18:	0801d628 	.word	0x0801d628
 800cc1c:	0801d6a0 	.word	0x0801d6a0
 800cc20:	0801f834 	.word	0x0801f834

0800cc24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cc24:	b5b0      	push	{r4, r5, r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af04      	add	r7, sp, #16
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d106      	bne.n	800cc44 <tcp_close_shutdown+0x20>
 800cc36:	4b61      	ldr	r3, [pc, #388]	; (800cdbc <tcp_close_shutdown+0x198>)
 800cc38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cc3c:	4960      	ldr	r1, [pc, #384]	; (800cdc0 <tcp_close_shutdown+0x19c>)
 800cc3e:	4861      	ldr	r0, [pc, #388]	; (800cdc4 <tcp_close_shutdown+0x1a0>)
 800cc40:	f00b fee6 	bl	8018a10 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d066      	beq.n	800cd18 <tcp_close_shutdown+0xf4>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	7d1b      	ldrb	r3, [r3, #20]
 800cc4e:	2b04      	cmp	r3, #4
 800cc50:	d003      	beq.n	800cc5a <tcp_close_shutdown+0x36>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	7d1b      	ldrb	r3, [r3, #20]
 800cc56:	2b07      	cmp	r3, #7
 800cc58:	d15e      	bne.n	800cd18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d104      	bne.n	800cc6c <tcp_close_shutdown+0x48>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc6a:	d055      	beq.n	800cd18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	8b5b      	ldrh	r3, [r3, #26]
 800cc70:	f003 0310 	and.w	r3, r3, #16
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d106      	bne.n	800cc86 <tcp_close_shutdown+0x62>
 800cc78:	4b50      	ldr	r3, [pc, #320]	; (800cdbc <tcp_close_shutdown+0x198>)
 800cc7a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cc7e:	4952      	ldr	r1, [pc, #328]	; (800cdc8 <tcp_close_shutdown+0x1a4>)
 800cc80:	4850      	ldr	r0, [pc, #320]	; (800cdc4 <tcp_close_shutdown+0x1a0>)
 800cc82:	f00b fec5 	bl	8018a10 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc8e:	687d      	ldr	r5, [r7, #4]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	3304      	adds	r3, #4
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	8ad2      	ldrh	r2, [r2, #22]
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	8b09      	ldrh	r1, [r1, #24]
 800cc9c:	9102      	str	r1, [sp, #8]
 800cc9e:	9201      	str	r2, [sp, #4]
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	462b      	mov	r3, r5
 800cca4:	4622      	mov	r2, r4
 800cca6:	4601      	mov	r1, r0
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f005 fdbb 	bl	8012824 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f001 fb8a 	bl	800e3c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ccb4:	4b45      	ldr	r3, [pc, #276]	; (800cdcc <tcp_close_shutdown+0x1a8>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d105      	bne.n	800ccca <tcp_close_shutdown+0xa6>
 800ccbe:	4b43      	ldr	r3, [pc, #268]	; (800cdcc <tcp_close_shutdown+0x1a8>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	4a41      	ldr	r2, [pc, #260]	; (800cdcc <tcp_close_shutdown+0x1a8>)
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	e013      	b.n	800ccf2 <tcp_close_shutdown+0xce>
 800ccca:	4b40      	ldr	r3, [pc, #256]	; (800cdcc <tcp_close_shutdown+0x1a8>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	e00c      	b.n	800ccec <tcp_close_shutdown+0xc8>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d104      	bne.n	800cce6 <tcp_close_shutdown+0xc2>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	68da      	ldr	r2, [r3, #12]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	60da      	str	r2, [r3, #12]
 800cce4:	e005      	b.n	800ccf2 <tcp_close_shutdown+0xce>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	60fb      	str	r3, [r7, #12]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1ef      	bne.n	800ccd2 <tcp_close_shutdown+0xae>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	60da      	str	r2, [r3, #12]
 800ccf8:	4b35      	ldr	r3, [pc, #212]	; (800cdd0 <tcp_close_shutdown+0x1ac>)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ccfe:	4b35      	ldr	r3, [pc, #212]	; (800cdd4 <tcp_close_shutdown+0x1b0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d102      	bne.n	800cd0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cd08:	f004 f81c 	bl	8010d44 <tcp_trigger_input_pcb_close>
 800cd0c:	e002      	b.n	800cd14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fed6 	bl	800cac0 <tcp_free>
      }
      return ERR_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e04d      	b.n	800cdb4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7d1b      	ldrb	r3, [r3, #20]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d02d      	beq.n	800cd7c <tcp_close_shutdown+0x158>
 800cd20:	2b02      	cmp	r3, #2
 800cd22:	d036      	beq.n	800cd92 <tcp_close_shutdown+0x16e>
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d13f      	bne.n	800cda8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	8adb      	ldrh	r3, [r3, #22]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d021      	beq.n	800cd74 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd30:	4b29      	ldr	r3, [pc, #164]	; (800cdd8 <tcp_close_shutdown+0x1b4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d105      	bne.n	800cd46 <tcp_close_shutdown+0x122>
 800cd3a:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <tcp_close_shutdown+0x1b4>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68db      	ldr	r3, [r3, #12]
 800cd40:	4a25      	ldr	r2, [pc, #148]	; (800cdd8 <tcp_close_shutdown+0x1b4>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	e013      	b.n	800cd6e <tcp_close_shutdown+0x14a>
 800cd46:	4b24      	ldr	r3, [pc, #144]	; (800cdd8 <tcp_close_shutdown+0x1b4>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	60bb      	str	r3, [r7, #8]
 800cd4c:	e00c      	b.n	800cd68 <tcp_close_shutdown+0x144>
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d104      	bne.n	800cd62 <tcp_close_shutdown+0x13e>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68da      	ldr	r2, [r3, #12]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	60da      	str	r2, [r3, #12]
 800cd60:	e005      	b.n	800cd6e <tcp_close_shutdown+0x14a>
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	60bb      	str	r3, [r7, #8]
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1ef      	bne.n	800cd4e <tcp_close_shutdown+0x12a>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7ff fea3 	bl	800cac0 <tcp_free>
      break;
 800cd7a:	e01a      	b.n	800cdb2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff ff17 	bl	800cbb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cd82:	6879      	ldr	r1, [r7, #4]
 800cd84:	4815      	ldr	r0, [pc, #84]	; (800cddc <tcp_close_shutdown+0x1b8>)
 800cd86:	f001 fb6f 	bl	800e468 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff feb4 	bl	800caf8 <tcp_free_listen>
      break;
 800cd90:	e00f      	b.n	800cdb2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	480d      	ldr	r0, [pc, #52]	; (800cdcc <tcp_close_shutdown+0x1a8>)
 800cd96:	f001 fb67 	bl	800e468 <tcp_pcb_remove>
 800cd9a:	4b0d      	ldr	r3, [pc, #52]	; (800cdd0 <tcp_close_shutdown+0x1ac>)
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f7ff fe8d 	bl	800cac0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cda6:	e004      	b.n	800cdb2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f819 	bl	800cde0 <tcp_close_shutdown_fin>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	e000      	b.n	800cdb4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bdb0      	pop	{r4, r5, r7, pc}
 800cdbc:	0801d5e4 	.word	0x0801d5e4
 800cdc0:	0801d6b8 	.word	0x0801d6b8
 800cdc4:	0801d628 	.word	0x0801d628
 800cdc8:	0801d6d8 	.word	0x0801d6d8
 800cdcc:	20008fb0 	.word	0x20008fb0
 800cdd0:	20008fac 	.word	0x20008fac
 800cdd4:	20008fc4 	.word	0x20008fc4
 800cdd8:	20008fbc 	.word	0x20008fbc
 800cddc:	20008fb8 	.word	0x20008fb8

0800cde0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d106      	bne.n	800cdfc <tcp_close_shutdown_fin+0x1c>
 800cdee:	4b2c      	ldr	r3, [pc, #176]	; (800cea0 <tcp_close_shutdown_fin+0xc0>)
 800cdf0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cdf4:	492b      	ldr	r1, [pc, #172]	; (800cea4 <tcp_close_shutdown_fin+0xc4>)
 800cdf6:	482c      	ldr	r0, [pc, #176]	; (800cea8 <tcp_close_shutdown_fin+0xc8>)
 800cdf8:	f00b fe0a 	bl	8018a10 <iprintf>

  switch (pcb->state) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7d1b      	ldrb	r3, [r3, #20]
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d010      	beq.n	800ce26 <tcp_close_shutdown_fin+0x46>
 800ce04:	2b07      	cmp	r3, #7
 800ce06:	d01b      	beq.n	800ce40 <tcp_close_shutdown_fin+0x60>
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	d126      	bne.n	800ce5a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f004 fe05 	bl	8011a1c <tcp_send_fin>
 800ce12:	4603      	mov	r3, r0
 800ce14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d11f      	bne.n	800ce5e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2205      	movs	r2, #5
 800ce22:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce24:	e01b      	b.n	800ce5e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f004 fdf8 	bl	8011a1c <tcp_send_fin>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d114      	bne.n	800ce62 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2205      	movs	r2, #5
 800ce3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce3e:	e010      	b.n	800ce62 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f004 fdeb 	bl	8011a1c <tcp_send_fin>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d109      	bne.n	800ce66 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2209      	movs	r2, #9
 800ce56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce58:	e005      	b.n	800ce66 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e01c      	b.n	800ce98 <tcp_close_shutdown_fin+0xb8>
      break;
 800ce5e:	bf00      	nop
 800ce60:	e002      	b.n	800ce68 <tcp_close_shutdown_fin+0x88>
      break;
 800ce62:	bf00      	nop
 800ce64:	e000      	b.n	800ce68 <tcp_close_shutdown_fin+0x88>
      break;
 800ce66:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ce68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d103      	bne.n	800ce78 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f004 ff11 	bl	8011c98 <tcp_output>
 800ce76:	e00d      	b.n	800ce94 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800ce78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce80:	d108      	bne.n	800ce94 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	8b5b      	ldrh	r3, [r3, #26]
 800ce86:	f043 0308 	orr.w	r3, r3, #8
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	e001      	b.n	800ce98 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ce94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	0801d5e4 	.word	0x0801d5e4
 800cea4:	0801d694 	.word	0x0801d694
 800cea8:	0801d628 	.word	0x0801d628

0800ceac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d109      	bne.n	800cece <tcp_close+0x22>
 800ceba:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <tcp_close+0x4c>)
 800cebc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cec0:	490e      	ldr	r1, [pc, #56]	; (800cefc <tcp_close+0x50>)
 800cec2:	480f      	ldr	r0, [pc, #60]	; (800cf00 <tcp_close+0x54>)
 800cec4:	f00b fda4 	bl	8018a10 <iprintf>
 800cec8:	f06f 030f 	mvn.w	r3, #15
 800cecc:	e00f      	b.n	800ceee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7d1b      	ldrb	r3, [r3, #20]
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d006      	beq.n	800cee4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	8b5b      	ldrh	r3, [r3, #26]
 800ceda:	f043 0310 	orr.w	r3, r3, #16
 800cede:	b29a      	uxth	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cee4:	2101      	movs	r1, #1
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff fe9c 	bl	800cc24 <tcp_close_shutdown>
 800ceec:	4603      	mov	r3, r0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	0801d5e4 	.word	0x0801d5e4
 800cefc:	0801d6f4 	.word	0x0801d6f4
 800cf00:	0801d628 	.word	0x0801d628

0800cf04 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d109      	bne.n	800cf2a <tcp_shutdown+0x26>
 800cf16:	4b25      	ldr	r3, [pc, #148]	; (800cfac <tcp_shutdown+0xa8>)
 800cf18:	f240 2207 	movw	r2, #519	; 0x207
 800cf1c:	4924      	ldr	r1, [pc, #144]	; (800cfb0 <tcp_shutdown+0xac>)
 800cf1e:	4825      	ldr	r0, [pc, #148]	; (800cfb4 <tcp_shutdown+0xb0>)
 800cf20:	f00b fd76 	bl	8018a10 <iprintf>
 800cf24:	f06f 030f 	mvn.w	r3, #15
 800cf28:	e03c      	b.n	800cfa4 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	7d1b      	ldrb	r3, [r3, #20]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d102      	bne.n	800cf38 <tcp_shutdown+0x34>
    return ERR_CONN;
 800cf32:	f06f 030a 	mvn.w	r3, #10
 800cf36:	e035      	b.n	800cfa4 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d01b      	beq.n	800cf76 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	8b5b      	ldrh	r3, [r3, #26]
 800cf42:	f043 0310 	orr.w	r3, r3, #16
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cf52:	2101      	movs	r1, #1
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f7ff fe65 	bl	800cc24 <tcp_close_shutdown>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	e022      	b.n	800cfa4 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d007      	beq.n	800cf76 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff fafc 	bl	800c568 <pbuf_free>
      pcb->refused_data = NULL;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d012      	beq.n	800cfa2 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	7d1b      	ldrb	r3, [r3, #20]
 800cf80:	2b03      	cmp	r3, #3
 800cf82:	db0b      	blt.n	800cf9c <tcp_shutdown+0x98>
 800cf84:	2b04      	cmp	r3, #4
 800cf86:	dd01      	ble.n	800cf8c <tcp_shutdown+0x88>
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	d107      	bne.n	800cf9c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	4619      	mov	r1, r3
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f7ff fe46 	bl	800cc24 <tcp_close_shutdown>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	e003      	b.n	800cfa4 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cf9c:	f06f 030a 	mvn.w	r3, #10
 800cfa0:	e000      	b.n	800cfa4 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	0801d5e4 	.word	0x0801d5e4
 800cfb0:	0801d70c 	.word	0x0801d70c
 800cfb4:	0801d628 	.word	0x0801d628

0800cfb8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b08e      	sub	sp, #56	; 0x38
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d107      	bne.n	800cfd8 <tcp_abandon+0x20>
 800cfc8:	4b52      	ldr	r3, [pc, #328]	; (800d114 <tcp_abandon+0x15c>)
 800cfca:	f240 223d 	movw	r2, #573	; 0x23d
 800cfce:	4952      	ldr	r1, [pc, #328]	; (800d118 <tcp_abandon+0x160>)
 800cfd0:	4852      	ldr	r0, [pc, #328]	; (800d11c <tcp_abandon+0x164>)
 800cfd2:	f00b fd1d 	bl	8018a10 <iprintf>
 800cfd6:	e099      	b.n	800d10c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	7d1b      	ldrb	r3, [r3, #20]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d106      	bne.n	800cfee <tcp_abandon+0x36>
 800cfe0:	4b4c      	ldr	r3, [pc, #304]	; (800d114 <tcp_abandon+0x15c>)
 800cfe2:	f240 2241 	movw	r2, #577	; 0x241
 800cfe6:	494e      	ldr	r1, [pc, #312]	; (800d120 <tcp_abandon+0x168>)
 800cfe8:	484c      	ldr	r0, [pc, #304]	; (800d11c <tcp_abandon+0x164>)
 800cfea:	f00b fd11 	bl	8018a10 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	7d1b      	ldrb	r3, [r3, #20]
 800cff2:	2b0a      	cmp	r3, #10
 800cff4:	d107      	bne.n	800d006 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	484a      	ldr	r0, [pc, #296]	; (800d124 <tcp_abandon+0x16c>)
 800cffa:	f001 fa35 	bl	800e468 <tcp_pcb_remove>
    tcp_free(pcb);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7ff fd5e 	bl	800cac0 <tcp_free>
 800d004:	e082      	b.n	800d10c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d006:	2300      	movs	r3, #0
 800d008:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d012:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d018:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d020:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	691b      	ldr	r3, [r3, #16]
 800d026:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	7d1b      	ldrb	r3, [r3, #20]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d126      	bne.n	800d07e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	8adb      	ldrh	r3, [r3, #22]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02e      	beq.n	800d096 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d038:	4b3b      	ldr	r3, [pc, #236]	; (800d128 <tcp_abandon+0x170>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d105      	bne.n	800d04e <tcp_abandon+0x96>
 800d042:	4b39      	ldr	r3, [pc, #228]	; (800d128 <tcp_abandon+0x170>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	4a37      	ldr	r2, [pc, #220]	; (800d128 <tcp_abandon+0x170>)
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	e013      	b.n	800d076 <tcp_abandon+0xbe>
 800d04e:	4b36      	ldr	r3, [pc, #216]	; (800d128 <tcp_abandon+0x170>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	61fb      	str	r3, [r7, #28]
 800d054:	e00c      	b.n	800d070 <tcp_abandon+0xb8>
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d104      	bne.n	800d06a <tcp_abandon+0xb2>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68da      	ldr	r2, [r3, #12]
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	60da      	str	r2, [r3, #12]
 800d068:	e005      	b.n	800d076 <tcp_abandon+0xbe>
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	61fb      	str	r3, [r7, #28]
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1ef      	bne.n	800d056 <tcp_abandon+0x9e>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	60da      	str	r2, [r3, #12]
 800d07c:	e00b      	b.n	800d096 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	8adb      	ldrh	r3, [r3, #22]
 800d086:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d088:	6879      	ldr	r1, [r7, #4]
 800d08a:	4828      	ldr	r0, [pc, #160]	; (800d12c <tcp_abandon+0x174>)
 800d08c:	f001 f9ec 	bl	800e468 <tcp_pcb_remove>
 800d090:	4b27      	ldr	r3, [pc, #156]	; (800d130 <tcp_abandon+0x178>)
 800d092:	2201      	movs	r2, #1
 800d094:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d004      	beq.n	800d0a8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 fec2 	bl	800de2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 feb9 	bl	800de2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d004      	beq.n	800d0cc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f000 feb0 	bl	800de2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d00e      	beq.n	800d0f0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d0d2:	6879      	ldr	r1, [r7, #4]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	8b12      	ldrh	r2, [r2, #24]
 800d0dc:	9202      	str	r2, [sp, #8]
 800d0de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d0e0:	9201      	str	r2, [sp, #4]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	697a      	ldr	r2, [r7, #20]
 800d0e8:	69b9      	ldr	r1, [r7, #24]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f005 fb9a 	bl	8012824 <tcp_rst>
    }
    last_state = pcb->state;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7d1b      	ldrb	r3, [r3, #20]
 800d0f4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fce2 	bl	800cac0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d004      	beq.n	800d10c <tcp_abandon+0x154>
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f06f 010c 	mvn.w	r1, #12
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	4798      	blx	r3
  }
}
 800d10c:	3728      	adds	r7, #40	; 0x28
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	0801d5e4 	.word	0x0801d5e4
 800d118:	0801d728 	.word	0x0801d728
 800d11c:	0801d628 	.word	0x0801d628
 800d120:	0801d744 	.word	0x0801d744
 800d124:	20008fc0 	.word	0x20008fc0
 800d128:	20008fbc 	.word	0x20008fbc
 800d12c:	20008fb0 	.word	0x20008fb0
 800d130:	20008fac 	.word	0x20008fac

0800d134 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d13c:	2101      	movs	r1, #1
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7ff ff3a 	bl	800cfb8 <tcp_abandon>
}
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4613      	mov	r3, r2
 800d158:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d15a:	2304      	movs	r3, #4
 800d15c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d164:	4b3e      	ldr	r3, [pc, #248]	; (800d260 <tcp_bind+0x114>)
 800d166:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d109      	bne.n	800d182 <tcp_bind+0x36>
 800d16e:	4b3d      	ldr	r3, [pc, #244]	; (800d264 <tcp_bind+0x118>)
 800d170:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d174:	493c      	ldr	r1, [pc, #240]	; (800d268 <tcp_bind+0x11c>)
 800d176:	483d      	ldr	r0, [pc, #244]	; (800d26c <tcp_bind+0x120>)
 800d178:	f00b fc4a 	bl	8018a10 <iprintf>
 800d17c:	f06f 030f 	mvn.w	r3, #15
 800d180:	e06a      	b.n	800d258 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	7d1b      	ldrb	r3, [r3, #20]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <tcp_bind+0x52>
 800d18a:	4b36      	ldr	r3, [pc, #216]	; (800d264 <tcp_bind+0x118>)
 800d18c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d190:	4937      	ldr	r1, [pc, #220]	; (800d270 <tcp_bind+0x124>)
 800d192:	4836      	ldr	r0, [pc, #216]	; (800d26c <tcp_bind+0x120>)
 800d194:	f00b fc3c 	bl	8018a10 <iprintf>
 800d198:	f06f 0305 	mvn.w	r3, #5
 800d19c:	e05c      	b.n	800d258 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d19e:	88fb      	ldrh	r3, [r7, #6]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d109      	bne.n	800d1b8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d1a4:	f000 f9de 	bl	800d564 <tcp_new_port>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d1ac:	88fb      	ldrh	r3, [r7, #6]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d135      	bne.n	800d21e <tcp_bind+0xd2>
      return ERR_BUF;
 800d1b2:	f06f 0301 	mvn.w	r3, #1
 800d1b6:	e04f      	b.n	800d258 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61fb      	str	r3, [r7, #28]
 800d1bc:	e02b      	b.n	800d216 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d1be:	4a2d      	ldr	r2, [pc, #180]	; (800d274 <tcp_bind+0x128>)
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	61bb      	str	r3, [r7, #24]
 800d1ca:	e01e      	b.n	800d20a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	8adb      	ldrh	r3, [r3, #22]
 800d1d0:	88fa      	ldrh	r2, [r7, #6]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d116      	bne.n	800d204 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d1d6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d010      	beq.n	800d1fe <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d00c      	beq.n	800d1fe <tcp_bind+0xb2>
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d009      	beq.n	800d1fe <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d005      	beq.n	800d1fe <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d102      	bne.n	800d204 <tcp_bind+0xb8>
              return ERR_USE;
 800d1fe:	f06f 0307 	mvn.w	r3, #7
 800d202:	e029      	b.n	800d258 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	61bb      	str	r3, [r7, #24]
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1dd      	bne.n	800d1cc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	3301      	adds	r3, #1
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	69fa      	ldr	r2, [r7, #28]
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	dbcf      	blt.n	800d1be <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00c      	beq.n	800d23e <tcp_bind+0xf2>
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d008      	beq.n	800d23e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <tcp_bind+0xec>
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	e000      	b.n	800d23a <tcp_bind+0xee>
 800d238:	2300      	movs	r3, #0
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	88fa      	ldrh	r2, [r7, #6]
 800d242:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d244:	4b0c      	ldr	r3, [pc, #48]	; (800d278 <tcp_bind+0x12c>)
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	60da      	str	r2, [r3, #12]
 800d24c:	4a0a      	ldr	r2, [pc, #40]	; (800d278 <tcp_bind+0x12c>)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6013      	str	r3, [r2, #0]
 800d252:	f005 fca9 	bl	8012ba8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3720      	adds	r7, #32
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	0801f85c 	.word	0x0801f85c
 800d264:	0801d5e4 	.word	0x0801d5e4
 800d268:	0801d778 	.word	0x0801d778
 800d26c:	0801d628 	.word	0x0801d628
 800d270:	0801d790 	.word	0x0801d790
 800d274:	0801f834 	.word	0x0801f834
 800d278:	20008fbc 	.word	0x20008fbc

0800d27c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	4613      	mov	r3, r2
 800d288:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <tcp_accept_null+0x22>
 800d290:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <tcp_accept_null+0x34>)
 800d292:	f240 320f 	movw	r2, #783	; 0x30f
 800d296:	4907      	ldr	r1, [pc, #28]	; (800d2b4 <tcp_accept_null+0x38>)
 800d298:	4807      	ldr	r0, [pc, #28]	; (800d2b8 <tcp_accept_null+0x3c>)
 800d29a:	f00b fbb9 	bl	8018a10 <iprintf>

  tcp_abort(pcb);
 800d29e:	68b8      	ldr	r0, [r7, #8]
 800d2a0:	f7ff ff48 	bl	800d134 <tcp_abort>

  return ERR_ABRT;
 800d2a4:	f06f 030c 	mvn.w	r3, #12
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	0801d5e4 	.word	0x0801d5e4
 800d2b4:	0801d7b8 	.word	0x0801d7b8
 800d2b8:	0801d628 	.word	0x0801d628

0800d2bc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b088      	sub	sp, #32
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d109      	bne.n	800d2e8 <tcp_listen_with_backlog_and_err+0x2c>
 800d2d4:	4b47      	ldr	r3, [pc, #284]	; (800d3f4 <tcp_listen_with_backlog_and_err+0x138>)
 800d2d6:	f240 3259 	movw	r2, #857	; 0x359
 800d2da:	4947      	ldr	r1, [pc, #284]	; (800d3f8 <tcp_listen_with_backlog_and_err+0x13c>)
 800d2dc:	4847      	ldr	r0, [pc, #284]	; (800d3fc <tcp_listen_with_backlog_and_err+0x140>)
 800d2de:	f00b fb97 	bl	8018a10 <iprintf>
 800d2e2:	23f0      	movs	r3, #240	; 0xf0
 800d2e4:	76fb      	strb	r3, [r7, #27]
 800d2e6:	e079      	b.n	800d3dc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	7d1b      	ldrb	r3, [r3, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d009      	beq.n	800d304 <tcp_listen_with_backlog_and_err+0x48>
 800d2f0:	4b40      	ldr	r3, [pc, #256]	; (800d3f4 <tcp_listen_with_backlog_and_err+0x138>)
 800d2f2:	f240 325a 	movw	r2, #858	; 0x35a
 800d2f6:	4942      	ldr	r1, [pc, #264]	; (800d400 <tcp_listen_with_backlog_and_err+0x144>)
 800d2f8:	4840      	ldr	r0, [pc, #256]	; (800d3fc <tcp_listen_with_backlog_and_err+0x140>)
 800d2fa:	f00b fb89 	bl	8018a10 <iprintf>
 800d2fe:	23f1      	movs	r3, #241	; 0xf1
 800d300:	76fb      	strb	r3, [r7, #27]
 800d302:	e06b      	b.n	800d3dc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	7d1b      	ldrb	r3, [r3, #20]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d104      	bne.n	800d316 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d310:	23f7      	movs	r3, #247	; 0xf7
 800d312:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d314:	e062      	b.n	800d3dc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d316:	2002      	movs	r0, #2
 800d318:	f7fe faac 	bl	800b874 <memp_malloc>
 800d31c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d102      	bne.n	800d32a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d324:	23ff      	movs	r3, #255	; 0xff
 800d326:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d328:	e058      	b.n	800d3dc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	691a      	ldr	r2, [r3, #16]
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	8ada      	ldrh	r2, [r3, #22]
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	2201      	movs	r2, #1
 800d33e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	7d5a      	ldrb	r2, [r3, #21]
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	7a5a      	ldrb	r2, [r3, #9]
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	2200      	movs	r2, #0
 800d354:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	7ada      	ldrb	r2, [r3, #11]
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	7a9a      	ldrb	r2, [r3, #10]
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	8adb      	ldrh	r3, [r3, #22]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d021      	beq.n	800d3ba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d376:	4b23      	ldr	r3, [pc, #140]	; (800d404 <tcp_listen_with_backlog_and_err+0x148>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d105      	bne.n	800d38c <tcp_listen_with_backlog_and_err+0xd0>
 800d380:	4b20      	ldr	r3, [pc, #128]	; (800d404 <tcp_listen_with_backlog_and_err+0x148>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	4a1f      	ldr	r2, [pc, #124]	; (800d404 <tcp_listen_with_backlog_and_err+0x148>)
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	e013      	b.n	800d3b4 <tcp_listen_with_backlog_and_err+0xf8>
 800d38c:	4b1d      	ldr	r3, [pc, #116]	; (800d404 <tcp_listen_with_backlog_and_err+0x148>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	617b      	str	r3, [r7, #20]
 800d392:	e00c      	b.n	800d3ae <tcp_listen_with_backlog_and_err+0xf2>
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d104      	bne.n	800d3a8 <tcp_listen_with_backlog_and_err+0xec>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	60da      	str	r2, [r3, #12]
 800d3a6:	e005      	b.n	800d3b4 <tcp_listen_with_backlog_and_err+0xf8>
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1ef      	bne.n	800d394 <tcp_listen_with_backlog_and_err+0xd8>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f7ff fb80 	bl	800cac0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	4a11      	ldr	r2, [pc, #68]	; (800d408 <tcp_listen_with_backlog_and_err+0x14c>)
 800d3c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d3c6:	4b11      	ldr	r3, [pc, #68]	; (800d40c <tcp_listen_with_backlog_and_err+0x150>)
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	60da      	str	r2, [r3, #12]
 800d3ce:	4a0f      	ldr	r2, [pc, #60]	; (800d40c <tcp_listen_with_backlog_and_err+0x150>)
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	6013      	str	r3, [r2, #0]
 800d3d4:	f005 fbe8 	bl	8012ba8 <tcp_timer_needed>
  res = ERR_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d002      	beq.n	800d3e8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	7efa      	ldrb	r2, [r7, #27]
 800d3e6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3720      	adds	r7, #32
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	0801d5e4 	.word	0x0801d5e4
 800d3f8:	0801d7d8 	.word	0x0801d7d8
 800d3fc:	0801d628 	.word	0x0801d628
 800d400:	0801d808 	.word	0x0801d808
 800d404:	20008fbc 	.word	0x20008fbc
 800d408:	0800d27d 	.word	0x0800d27d
 800d40c:	20008fb8 	.word	0x20008fb8

0800d410 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d106      	bne.n	800d42c <tcp_update_rcv_ann_wnd+0x1c>
 800d41e:	4b25      	ldr	r3, [pc, #148]	; (800d4b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800d420:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d424:	4924      	ldr	r1, [pc, #144]	; (800d4b8 <tcp_update_rcv_ann_wnd+0xa8>)
 800d426:	4825      	ldr	r0, [pc, #148]	; (800d4bc <tcp_update_rcv_ann_wnd+0xac>)
 800d428:	f00b faf2 	bl	8018a10 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d434:	4413      	add	r3, r2
 800d436:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d440:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d444:	bf28      	it	cs
 800d446:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d44a:	b292      	uxth	r2, r2
 800d44c:	4413      	add	r3, r2
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	db08      	blt.n	800d468 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	e020      	b.n	800d4aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	dd03      	ble.n	800d47e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d47c:	e014      	b.n	800d4a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d490:	d306      	bcc.n	800d4a0 <tcp_update_rcv_ann_wnd+0x90>
 800d492:	4b08      	ldr	r3, [pc, #32]	; (800d4b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800d494:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d498:	4909      	ldr	r1, [pc, #36]	; (800d4c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800d49a:	4808      	ldr	r0, [pc, #32]	; (800d4bc <tcp_update_rcv_ann_wnd+0xac>)
 800d49c:	f00b fab8 	bl	8018a10 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d4a8:	2300      	movs	r3, #0
  }
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0801d5e4 	.word	0x0801d5e4
 800d4b8:	0801d840 	.word	0x0801d840
 800d4bc:	0801d628 	.word	0x0801d628
 800d4c0:	0801d864 	.word	0x0801d864

0800d4c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d107      	bne.n	800d4e6 <tcp_recved+0x22>
 800d4d6:	4b1f      	ldr	r3, [pc, #124]	; (800d554 <tcp_recved+0x90>)
 800d4d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d4dc:	491e      	ldr	r1, [pc, #120]	; (800d558 <tcp_recved+0x94>)
 800d4de:	481f      	ldr	r0, [pc, #124]	; (800d55c <tcp_recved+0x98>)
 800d4e0:	f00b fa96 	bl	8018a10 <iprintf>
 800d4e4:	e032      	b.n	800d54c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	7d1b      	ldrb	r3, [r3, #20]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d106      	bne.n	800d4fc <tcp_recved+0x38>
 800d4ee:	4b19      	ldr	r3, [pc, #100]	; (800d554 <tcp_recved+0x90>)
 800d4f0:	f240 32d3 	movw	r2, #979	; 0x3d3
 800d4f4:	491a      	ldr	r1, [pc, #104]	; (800d560 <tcp_recved+0x9c>)
 800d4f6:	4819      	ldr	r0, [pc, #100]	; (800d55c <tcp_recved+0x98>)
 800d4f8:	f00b fa8a 	bl	8018a10 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d500:	887b      	ldrh	r3, [r7, #2]
 800d502:	4413      	add	r3, r2
 800d504:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d506:	89fb      	ldrh	r3, [r7, #14]
 800d508:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d50c:	d804      	bhi.n	800d518 <tcp_recved+0x54>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d512:	89fa      	ldrh	r2, [r7, #14]
 800d514:	429a      	cmp	r2, r3
 800d516:	d204      	bcs.n	800d522 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d51e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d520:	e002      	b.n	800d528 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	89fa      	ldrh	r2, [r7, #14]
 800d526:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7ff ff71 	bl	800d410 <tcp_update_rcv_ann_wnd>
 800d52e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d536:	d309      	bcc.n	800d54c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	8b5b      	ldrh	r3, [r3, #26]
 800d53c:	f043 0302 	orr.w	r3, r3, #2
 800d540:	b29a      	uxth	r2, r3
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f004 fba6 	bl	8011c98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	0801d5e4 	.word	0x0801d5e4
 800d558:	0801d880 	.word	0x0801d880
 800d55c:	0801d628 	.word	0x0801d628
 800d560:	0801d898 	.word	0x0801d898

0800d564 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d56e:	4b1e      	ldr	r3, [pc, #120]	; (800d5e8 <tcp_new_port+0x84>)
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	3301      	adds	r3, #1
 800d574:	b29a      	uxth	r2, r3
 800d576:	4b1c      	ldr	r3, [pc, #112]	; (800d5e8 <tcp_new_port+0x84>)
 800d578:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d57a:	4b1b      	ldr	r3, [pc, #108]	; (800d5e8 <tcp_new_port+0x84>)
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d582:	4293      	cmp	r3, r2
 800d584:	d103      	bne.n	800d58e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d586:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <tcp_new_port+0x84>)
 800d588:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d58c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d58e:	2300      	movs	r3, #0
 800d590:	71fb      	strb	r3, [r7, #7]
 800d592:	e01e      	b.n	800d5d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	4a15      	ldr	r2, [pc, #84]	; (800d5ec <tcp_new_port+0x88>)
 800d598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	e011      	b.n	800d5c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	8ada      	ldrh	r2, [r3, #22]
 800d5a6:	4b10      	ldr	r3, [pc, #64]	; (800d5e8 <tcp_new_port+0x84>)
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d108      	bne.n	800d5c0 <tcp_new_port+0x5c>
        n++;
 800d5ae:	88bb      	ldrh	r3, [r7, #4]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d5b4:	88bb      	ldrh	r3, [r7, #4]
 800d5b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d5ba:	d3d8      	bcc.n	800d56e <tcp_new_port+0xa>
          return 0;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e00d      	b.n	800d5dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1ea      	bne.n	800d5a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d5cc:	79fb      	ldrb	r3, [r7, #7]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	71fb      	strb	r3, [r7, #7]
 800d5d2:	79fb      	ldrb	r3, [r7, #7]
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d9dd      	bls.n	800d594 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d5d8:	4b03      	ldr	r3, [pc, #12]	; (800d5e8 <tcp_new_port+0x84>)
 800d5da:	881b      	ldrh	r3, [r3, #0]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr
 800d5e8:	2000000c 	.word	0x2000000c
 800d5ec:	0801f834 	.word	0x0801f834

0800d5f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d5f0:	b5b0      	push	{r4, r5, r7, lr}
 800d5f2:	b090      	sub	sp, #64	; 0x40
 800d5f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d5fc:	4b94      	ldr	r3, [pc, #592]	; (800d850 <tcp_slowtmr+0x260>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3301      	adds	r3, #1
 800d602:	4a93      	ldr	r2, [pc, #588]	; (800d850 <tcp_slowtmr+0x260>)
 800d604:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d606:	4b93      	ldr	r3, [pc, #588]	; (800d854 <tcp_slowtmr+0x264>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	3301      	adds	r3, #1
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	4b91      	ldr	r3, [pc, #580]	; (800d854 <tcp_slowtmr+0x264>)
 800d610:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d612:	2300      	movs	r3, #0
 800d614:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d616:	4b90      	ldr	r3, [pc, #576]	; (800d858 <tcp_slowtmr+0x268>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d61c:	e29d      	b.n	800db5a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d620:	7d1b      	ldrb	r3, [r3, #20]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <tcp_slowtmr+0x44>
 800d626:	4b8d      	ldr	r3, [pc, #564]	; (800d85c <tcp_slowtmr+0x26c>)
 800d628:	f240 42be 	movw	r2, #1214	; 0x4be
 800d62c:	498c      	ldr	r1, [pc, #560]	; (800d860 <tcp_slowtmr+0x270>)
 800d62e:	488d      	ldr	r0, [pc, #564]	; (800d864 <tcp_slowtmr+0x274>)
 800d630:	f00b f9ee 	bl	8018a10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d636:	7d1b      	ldrb	r3, [r3, #20]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d106      	bne.n	800d64a <tcp_slowtmr+0x5a>
 800d63c:	4b87      	ldr	r3, [pc, #540]	; (800d85c <tcp_slowtmr+0x26c>)
 800d63e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d642:	4989      	ldr	r1, [pc, #548]	; (800d868 <tcp_slowtmr+0x278>)
 800d644:	4887      	ldr	r0, [pc, #540]	; (800d864 <tcp_slowtmr+0x274>)
 800d646:	f00b f9e3 	bl	8018a10 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	7d1b      	ldrb	r3, [r3, #20]
 800d64e:	2b0a      	cmp	r3, #10
 800d650:	d106      	bne.n	800d660 <tcp_slowtmr+0x70>
 800d652:	4b82      	ldr	r3, [pc, #520]	; (800d85c <tcp_slowtmr+0x26c>)
 800d654:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d658:	4984      	ldr	r1, [pc, #528]	; (800d86c <tcp_slowtmr+0x27c>)
 800d65a:	4882      	ldr	r0, [pc, #520]	; (800d864 <tcp_slowtmr+0x274>)
 800d65c:	f00b f9d8 	bl	8018a10 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	7f9a      	ldrb	r2, [r3, #30]
 800d664:	4b7b      	ldr	r3, [pc, #492]	; (800d854 <tcp_slowtmr+0x264>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d105      	bne.n	800d678 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d676:	e270      	b.n	800db5a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d678:	4b76      	ldr	r3, [pc, #472]	; (800d854 <tcp_slowtmr+0x264>)
 800d67a:	781a      	ldrb	r2, [r3, #0]
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d680:	2300      	movs	r3, #0
 800d682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	7d1b      	ldrb	r3, [r3, #20]
 800d690:	2b02      	cmp	r3, #2
 800d692:	d10a      	bne.n	800d6aa <tcp_slowtmr+0xba>
 800d694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d69a:	2b05      	cmp	r3, #5
 800d69c:	d905      	bls.n	800d6aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d69e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6a8:	e11e      	b.n	800d8e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d6b0:	2b0b      	cmp	r3, #11
 800d6b2:	d905      	bls.n	800d6c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6be:	e113      	b.n	800d8e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d075      	beq.n	800d7b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d006      	beq.n	800d6e0 <tcp_slowtmr+0xf0>
 800d6d2:	4b62      	ldr	r3, [pc, #392]	; (800d85c <tcp_slowtmr+0x26c>)
 800d6d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d6d8:	4965      	ldr	r1, [pc, #404]	; (800d870 <tcp_slowtmr+0x280>)
 800d6da:	4862      	ldr	r0, [pc, #392]	; (800d864 <tcp_slowtmr+0x274>)
 800d6dc:	f00b f998 	bl	8018a10 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d106      	bne.n	800d6f6 <tcp_slowtmr+0x106>
 800d6e8:	4b5c      	ldr	r3, [pc, #368]	; (800d85c <tcp_slowtmr+0x26c>)
 800d6ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d6ee:	4961      	ldr	r1, [pc, #388]	; (800d874 <tcp_slowtmr+0x284>)
 800d6f0:	485c      	ldr	r0, [pc, #368]	; (800d864 <tcp_slowtmr+0x274>)
 800d6f2:	f00b f98d 	bl	8018a10 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6fc:	2b0b      	cmp	r3, #11
 800d6fe:	d905      	bls.n	800d70c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d704:	3301      	adds	r3, #1
 800d706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d70a:	e0ed      	b.n	800d8e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d712:	3b01      	subs	r3, #1
 800d714:	4a58      	ldr	r2, [pc, #352]	; (800d878 <tcp_slowtmr+0x288>)
 800d716:	5cd3      	ldrb	r3, [r2, r3]
 800d718:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d720:	7c7a      	ldrb	r2, [r7, #17]
 800d722:	429a      	cmp	r2, r3
 800d724:	d907      	bls.n	800d736 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d72c:	3301      	adds	r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d73c:	7c7a      	ldrb	r2, [r7, #17]
 800d73e:	429a      	cmp	r2, r3
 800d740:	f200 80d2 	bhi.w	800d8e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d744:	2301      	movs	r3, #1
 800d746:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d108      	bne.n	800d764 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d754:	f005 f95a 	bl	8012a0c <tcp_zero_window_probe>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d014      	beq.n	800d788 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d75e:	2300      	movs	r3, #0
 800d760:	623b      	str	r3, [r7, #32]
 800d762:	e011      	b.n	800d788 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d76a:	4619      	mov	r1, r3
 800d76c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d76e:	f004 f80d 	bl	801178c <tcp_split_unsent_seg>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d107      	bne.n	800d788 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d778:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d77a:	f004 fa8d 	bl	8011c98 <tcp_output>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 80ac 	beq.w	800d8e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	2200      	movs	r2, #0
 800d794:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d79e:	2b06      	cmp	r3, #6
 800d7a0:	f200 80a2 	bhi.w	800d8e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d7b4:	e098      	b.n	800d8e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	db0f      	blt.n	800d7e0 <tcp_slowtmr+0x1f0>
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d008      	beq.n	800d7e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7d4:	b29b      	uxth	r3, r3
 800d7d6:	3301      	adds	r3, #1
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	b21a      	sxth	r2, r3
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	db7b      	blt.n	800d8e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d7f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7f2:	f004 fd49 	bl	8012288 <tcp_rexmit_rto_prepare>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d007      	beq.n	800d80c <tcp_slowtmr+0x21c>
 800d7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d800:	2b00      	cmp	r3, #0
 800d802:	d171      	bne.n	800d8e8 <tcp_slowtmr+0x2f8>
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d06d      	beq.n	800d8e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	7d1b      	ldrb	r3, [r3, #20]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d03a      	beq.n	800d88a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d81a:	2b0c      	cmp	r3, #12
 800d81c:	bf28      	it	cs
 800d81e:	230c      	movcs	r3, #12
 800d820:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d828:	10db      	asrs	r3, r3, #3
 800d82a:	b21b      	sxth	r3, r3
 800d82c:	461a      	mov	r2, r3
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d834:	4413      	add	r3, r2
 800d836:	7efa      	ldrb	r2, [r7, #27]
 800d838:	4910      	ldr	r1, [pc, #64]	; (800d87c <tcp_slowtmr+0x28c>)
 800d83a:	5c8a      	ldrb	r2, [r1, r2]
 800d83c:	4093      	lsls	r3, r2
 800d83e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d846:	4293      	cmp	r3, r2
 800d848:	dc1a      	bgt.n	800d880 <tcp_slowtmr+0x290>
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	b21a      	sxth	r2, r3
 800d84e:	e019      	b.n	800d884 <tcp_slowtmr+0x294>
 800d850:	20008fb4 	.word	0x20008fb4
 800d854:	200054a2 	.word	0x200054a2
 800d858:	20008fb0 	.word	0x20008fb0
 800d85c:	0801d5e4 	.word	0x0801d5e4
 800d860:	0801d928 	.word	0x0801d928
 800d864:	0801d628 	.word	0x0801d628
 800d868:	0801d954 	.word	0x0801d954
 800d86c:	0801d980 	.word	0x0801d980
 800d870:	0801d9b0 	.word	0x0801d9b0
 800d874:	0801d9e4 	.word	0x0801d9e4
 800d878:	0801f82c 	.word	0x0801f82c
 800d87c:	0801f81c 	.word	0x0801f81c
 800d880:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88c:	2200      	movs	r2, #0
 800d88e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d898:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d89c:	4293      	cmp	r3, r2
 800d89e:	bf28      	it	cs
 800d8a0:	4613      	movcs	r3, r2
 800d8a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d8a4:	8a7b      	ldrh	r3, [r7, #18]
 800d8a6:	085b      	lsrs	r3, r3, #1
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d206      	bcs.n	800d8d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8e4:	f004 fd40 	bl	8012368 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	7d1b      	ldrb	r3, [r3, #20]
 800d8ec:	2b06      	cmp	r3, #6
 800d8ee:	d111      	bne.n	800d914 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	8b5b      	ldrh	r3, [r3, #26]
 800d8f4:	f003 0310 	and.w	r3, r3, #16
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00b      	beq.n	800d914 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8fc:	4b9c      	ldr	r3, [pc, #624]	; (800db70 <tcp_slowtmr+0x580>)
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	6a1b      	ldr	r3, [r3, #32]
 800d904:	1ad3      	subs	r3, r2, r3
 800d906:	2b28      	cmp	r3, #40	; 0x28
 800d908:	d904      	bls.n	800d914 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d90e:	3301      	adds	r3, #1
 800d910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	7a5b      	ldrb	r3, [r3, #9]
 800d918:	f003 0308 	and.w	r3, r3, #8
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d04a      	beq.n	800d9b6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d922:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d924:	2b04      	cmp	r3, #4
 800d926:	d003      	beq.n	800d930 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d92c:	2b07      	cmp	r3, #7
 800d92e:	d142      	bne.n	800d9b6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d930:	4b8f      	ldr	r3, [pc, #572]	; (800db70 <tcp_slowtmr+0x580>)
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	6a1b      	ldr	r3, [r3, #32]
 800d938:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d940:	4b8c      	ldr	r3, [pc, #560]	; (800db74 <tcp_slowtmr+0x584>)
 800d942:	440b      	add	r3, r1
 800d944:	498c      	ldr	r1, [pc, #560]	; (800db78 <tcp_slowtmr+0x588>)
 800d946:	fba1 1303 	umull	r1, r3, r1, r3
 800d94a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d90a      	bls.n	800d966 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d954:	3301      	adds	r3, #1
 800d956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d95a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d95e:	3301      	adds	r3, #1
 800d960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d964:	e027      	b.n	800d9b6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d966:	4b82      	ldr	r3, [pc, #520]	; (800db70 <tcp_slowtmr+0x580>)
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96c:	6a1b      	ldr	r3, [r3, #32]
 800d96e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d97c:	4618      	mov	r0, r3
 800d97e:	4b7f      	ldr	r3, [pc, #508]	; (800db7c <tcp_slowtmr+0x58c>)
 800d980:	fb03 f300 	mul.w	r3, r3, r0
 800d984:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d986:	497c      	ldr	r1, [pc, #496]	; (800db78 <tcp_slowtmr+0x588>)
 800d988:	fba1 1303 	umull	r1, r3, r1, r3
 800d98c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d98e:	429a      	cmp	r2, r3
 800d990:	d911      	bls.n	800d9b6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d994:	f004 fffa 	bl	801298c <tcp_keepalive>
 800d998:	4603      	mov	r3, r0
 800d99a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d99e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d107      	bne.n	800d9b6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d011      	beq.n	800d9e2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d9be:	4b6c      	ldr	r3, [pc, #432]	; (800db70 <tcp_slowtmr+0x580>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	1ad2      	subs	r2, r2, r3
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	005b      	lsls	r3, r3, #1
 800d9d4:	440b      	add	r3, r1
 800d9d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d302      	bcc.n	800d9e2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d9dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9de:	f000 fea7 	bl	800e730 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	7d1b      	ldrb	r3, [r3, #20]
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d10b      	bne.n	800da02 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9ea:	4b61      	ldr	r3, [pc, #388]	; (800db70 <tcp_slowtmr+0x580>)
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f0:	6a1b      	ldr	r3, [r3, #32]
 800d9f2:	1ad3      	subs	r3, r2, r3
 800d9f4:	2b28      	cmp	r3, #40	; 0x28
 800d9f6:	d904      	bls.n	800da02 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	7d1b      	ldrb	r3, [r3, #20]
 800da06:	2b09      	cmp	r3, #9
 800da08:	d10b      	bne.n	800da22 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800da0a:	4b59      	ldr	r3, [pc, #356]	; (800db70 <tcp_slowtmr+0x580>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	2bf0      	cmp	r3, #240	; 0xf0
 800da16:	d904      	bls.n	800da22 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800da18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da1c:	3301      	adds	r3, #1
 800da1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800da22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da26:	2b00      	cmp	r3, #0
 800da28:	d060      	beq.n	800daec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da30:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800da32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da34:	f000 fcc8 	bl	800e3c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d010      	beq.n	800da60 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da3e:	4b50      	ldr	r3, [pc, #320]	; (800db80 <tcp_slowtmr+0x590>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da44:	429a      	cmp	r2, r3
 800da46:	d106      	bne.n	800da56 <tcp_slowtmr+0x466>
 800da48:	4b4e      	ldr	r3, [pc, #312]	; (800db84 <tcp_slowtmr+0x594>)
 800da4a:	f240 526d 	movw	r2, #1389	; 0x56d
 800da4e:	494e      	ldr	r1, [pc, #312]	; (800db88 <tcp_slowtmr+0x598>)
 800da50:	484e      	ldr	r0, [pc, #312]	; (800db8c <tcp_slowtmr+0x59c>)
 800da52:	f00a ffdd 	bl	8018a10 <iprintf>
        prev->next = pcb->next;
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5c:	60da      	str	r2, [r3, #12]
 800da5e:	e00f      	b.n	800da80 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800da60:	4b47      	ldr	r3, [pc, #284]	; (800db80 <tcp_slowtmr+0x590>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da66:	429a      	cmp	r2, r3
 800da68:	d006      	beq.n	800da78 <tcp_slowtmr+0x488>
 800da6a:	4b46      	ldr	r3, [pc, #280]	; (800db84 <tcp_slowtmr+0x594>)
 800da6c:	f240 5271 	movw	r2, #1393	; 0x571
 800da70:	4947      	ldr	r1, [pc, #284]	; (800db90 <tcp_slowtmr+0x5a0>)
 800da72:	4846      	ldr	r0, [pc, #280]	; (800db8c <tcp_slowtmr+0x59c>)
 800da74:	f00a ffcc 	bl	8018a10 <iprintf>
        tcp_active_pcbs = pcb->next;
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	4a40      	ldr	r2, [pc, #256]	; (800db80 <tcp_slowtmr+0x590>)
 800da7e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800da80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da84:	2b00      	cmp	r3, #0
 800da86:	d013      	beq.n	800dab0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da90:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800da92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da94:	3304      	adds	r3, #4
 800da96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da98:	8ad2      	ldrh	r2, [r2, #22]
 800da9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da9c:	8b09      	ldrh	r1, [r1, #24]
 800da9e:	9102      	str	r1, [sp, #8]
 800daa0:	9201      	str	r2, [sp, #4]
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	462b      	mov	r3, r5
 800daa6:	4622      	mov	r2, r4
 800daa8:	4601      	mov	r1, r0
 800daaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daac:	f004 feba 	bl	8012824 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800dab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	7d1b      	ldrb	r3, [r3, #20]
 800daba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dac6:	6838      	ldr	r0, [r7, #0]
 800dac8:	f7fe fffa 	bl	800cac0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dacc:	4b31      	ldr	r3, [pc, #196]	; (800db94 <tcp_slowtmr+0x5a4>)
 800dace:	2200      	movs	r2, #0
 800dad0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d004      	beq.n	800dae2 <tcp_slowtmr+0x4f2>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f06f 010c 	mvn.w	r1, #12
 800dade:	68b8      	ldr	r0, [r7, #8]
 800dae0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dae2:	4b2c      	ldr	r3, [pc, #176]	; (800db94 <tcp_slowtmr+0x5a4>)
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d037      	beq.n	800db5a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800daea:	e592      	b.n	800d612 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800daec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800daf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	7f1b      	ldrb	r3, [r3, #28]
 800dafa:	3301      	adds	r3, #1
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db04:	7f1a      	ldrb	r2, [r3, #28]
 800db06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db08:	7f5b      	ldrb	r3, [r3, #29]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d325      	bcc.n	800db5a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db10:	2200      	movs	r2, #0
 800db12:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800db14:	4b1f      	ldr	r3, [pc, #124]	; (800db94 <tcp_slowtmr+0x5a4>)
 800db16:	2200      	movs	r2, #0
 800db18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800db1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00b      	beq.n	800db3c <tcp_slowtmr+0x54c>
 800db24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db2c:	6912      	ldr	r2, [r2, #16]
 800db2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db30:	4610      	mov	r0, r2
 800db32:	4798      	blx	r3
 800db34:	4603      	mov	r3, r0
 800db36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800db3a:	e002      	b.n	800db42 <tcp_slowtmr+0x552>
 800db3c:	2300      	movs	r3, #0
 800db3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800db42:	4b14      	ldr	r3, [pc, #80]	; (800db94 <tcp_slowtmr+0x5a4>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d000      	beq.n	800db4c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800db4a:	e562      	b.n	800d612 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800db4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800db50:	2b00      	cmp	r3, #0
 800db52:	d102      	bne.n	800db5a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800db54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db56:	f004 f89f 	bl	8011c98 <tcp_output>
  while (pcb != NULL) {
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f47f ad5e 	bne.w	800d61e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800db62:	2300      	movs	r3, #0
 800db64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800db66:	4b0c      	ldr	r3, [pc, #48]	; (800db98 <tcp_slowtmr+0x5a8>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800db6c:	e069      	b.n	800dc42 <tcp_slowtmr+0x652>
 800db6e:	bf00      	nop
 800db70:	20008fb4 	.word	0x20008fb4
 800db74:	000a4cb8 	.word	0x000a4cb8
 800db78:	10624dd3 	.word	0x10624dd3
 800db7c:	000124f8 	.word	0x000124f8
 800db80:	20008fb0 	.word	0x20008fb0
 800db84:	0801d5e4 	.word	0x0801d5e4
 800db88:	0801da1c 	.word	0x0801da1c
 800db8c:	0801d628 	.word	0x0801d628
 800db90:	0801da48 	.word	0x0801da48
 800db94:	20008fac 	.word	0x20008fac
 800db98:	20008fc0 	.word	0x20008fc0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	7d1b      	ldrb	r3, [r3, #20]
 800dba0:	2b0a      	cmp	r3, #10
 800dba2:	d006      	beq.n	800dbb2 <tcp_slowtmr+0x5c2>
 800dba4:	4b2a      	ldr	r3, [pc, #168]	; (800dc50 <tcp_slowtmr+0x660>)
 800dba6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800dbaa:	492a      	ldr	r1, [pc, #168]	; (800dc54 <tcp_slowtmr+0x664>)
 800dbac:	482a      	ldr	r0, [pc, #168]	; (800dc58 <tcp_slowtmr+0x668>)
 800dbae:	f00a ff2f 	bl	8018a10 <iprintf>
    pcb_remove = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dbb8:	4b28      	ldr	r3, [pc, #160]	; (800dc5c <tcp_slowtmr+0x66c>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbbe:	6a1b      	ldr	r3, [r3, #32]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	2bf0      	cmp	r3, #240	; 0xf0
 800dbc4:	d904      	bls.n	800dbd0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dbc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbca:	3301      	adds	r3, #1
 800dbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d02f      	beq.n	800dc38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dbd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbda:	f000 fbf5 	bl	800e3c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d010      	beq.n	800dc06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dbe4:	4b1e      	ldr	r3, [pc, #120]	; (800dc60 <tcp_slowtmr+0x670>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d106      	bne.n	800dbfc <tcp_slowtmr+0x60c>
 800dbee:	4b18      	ldr	r3, [pc, #96]	; (800dc50 <tcp_slowtmr+0x660>)
 800dbf0:	f240 52af 	movw	r2, #1455	; 0x5af
 800dbf4:	491b      	ldr	r1, [pc, #108]	; (800dc64 <tcp_slowtmr+0x674>)
 800dbf6:	4818      	ldr	r0, [pc, #96]	; (800dc58 <tcp_slowtmr+0x668>)
 800dbf8:	f00a ff0a 	bl	8018a10 <iprintf>
        prev->next = pcb->next;
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	68da      	ldr	r2, [r3, #12]
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	60da      	str	r2, [r3, #12]
 800dc04:	e00f      	b.n	800dc26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dc06:	4b16      	ldr	r3, [pc, #88]	; (800dc60 <tcp_slowtmr+0x670>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d006      	beq.n	800dc1e <tcp_slowtmr+0x62e>
 800dc10:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <tcp_slowtmr+0x660>)
 800dc12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dc16:	4914      	ldr	r1, [pc, #80]	; (800dc68 <tcp_slowtmr+0x678>)
 800dc18:	480f      	ldr	r0, [pc, #60]	; (800dc58 <tcp_slowtmr+0x668>)
 800dc1a:	f00a fef9 	bl	8018a10 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	4a0f      	ldr	r2, [pc, #60]	; (800dc60 <tcp_slowtmr+0x670>)
 800dc24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dc30:	69f8      	ldr	r0, [r7, #28]
 800dc32:	f7fe ff45 	bl	800cac0 <tcp_free>
 800dc36:	e004      	b.n	800dc42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1a9      	bne.n	800db9c <tcp_slowtmr+0x5ac>
    }
  }
}
 800dc48:	bf00      	nop
 800dc4a:	3730      	adds	r7, #48	; 0x30
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bdb0      	pop	{r4, r5, r7, pc}
 800dc50:	0801d5e4 	.word	0x0801d5e4
 800dc54:	0801da74 	.word	0x0801da74
 800dc58:	0801d628 	.word	0x0801d628
 800dc5c:	20008fb4 	.word	0x20008fb4
 800dc60:	20008fc0 	.word	0x20008fc0
 800dc64:	0801daa4 	.word	0x0801daa4
 800dc68:	0801dacc 	.word	0x0801dacc

0800dc6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dc72:	4b2d      	ldr	r3, [pc, #180]	; (800dd28 <tcp_fasttmr+0xbc>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	3301      	adds	r3, #1
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	4b2b      	ldr	r3, [pc, #172]	; (800dd28 <tcp_fasttmr+0xbc>)
 800dc7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dc7e:	4b2b      	ldr	r3, [pc, #172]	; (800dd2c <tcp_fasttmr+0xc0>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc84:	e048      	b.n	800dd18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	7f9a      	ldrb	r2, [r3, #30]
 800dc8a:	4b27      	ldr	r3, [pc, #156]	; (800dd28 <tcp_fasttmr+0xbc>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d03f      	beq.n	800dd12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dc92:	4b25      	ldr	r3, [pc, #148]	; (800dd28 <tcp_fasttmr+0xbc>)
 800dc94:	781a      	ldrb	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	8b5b      	ldrh	r3, [r3, #26]
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d010      	beq.n	800dcc8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	8b5b      	ldrh	r3, [r3, #26]
 800dcaa:	f043 0302 	orr.w	r3, r3, #2
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f003 ffef 	bl	8011c98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	8b5b      	ldrh	r3, [r3, #26]
 800dcbe:	f023 0303 	bic.w	r3, r3, #3
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8b5b      	ldrh	r3, [r3, #26]
 800dccc:	f003 0308 	and.w	r3, r3, #8
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d009      	beq.n	800dce8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	8b5b      	ldrh	r3, [r3, #26]
 800dcd8:	f023 0308 	bic.w	r3, r3, #8
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7ff f87c 	bl	800cde0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00a      	beq.n	800dd0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dcf6:	4b0e      	ldr	r3, [pc, #56]	; (800dd30 <tcp_fasttmr+0xc4>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 f819 	bl	800dd34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dd02:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <tcp_fasttmr+0xc4>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d000      	beq.n	800dd0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dd0a:	e7b8      	b.n	800dc7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	607b      	str	r3, [r7, #4]
 800dd10:	e002      	b.n	800dd18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1b3      	bne.n	800dc86 <tcp_fasttmr+0x1a>
    }
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	200054a2 	.word	0x200054a2
 800dd2c:	20008fb0 	.word	0x20008fb0
 800dd30:	20008fac 	.word	0x20008fac

0800dd34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b085      	sub	sp, #20
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d109      	bne.n	800dd56 <tcp_process_refused_data+0x22>
 800dd42:	4b37      	ldr	r3, [pc, #220]	; (800de20 <tcp_process_refused_data+0xec>)
 800dd44:	f240 6209 	movw	r2, #1545	; 0x609
 800dd48:	4936      	ldr	r1, [pc, #216]	; (800de24 <tcp_process_refused_data+0xf0>)
 800dd4a:	4837      	ldr	r0, [pc, #220]	; (800de28 <tcp_process_refused_data+0xf4>)
 800dd4c:	f00a fe60 	bl	8018a10 <iprintf>
 800dd50:	f06f 030f 	mvn.w	r3, #15
 800dd54:	e060      	b.n	800de18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd5a:	7b5b      	ldrb	r3, [r3, #13]
 800dd5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00b      	beq.n	800dd8c <tcp_process_refused_data+0x58>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6918      	ldr	r0, [r3, #16]
 800dd7e:	2300      	movs	r3, #0
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	6879      	ldr	r1, [r7, #4]
 800dd84:	47a0      	blx	r4
 800dd86:	4603      	mov	r3, r0
 800dd88:	73fb      	strb	r3, [r7, #15]
 800dd8a:	e007      	b.n	800dd9c <tcp_process_refused_data+0x68>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	2000      	movs	r0, #0
 800dd94:	f000 f8a2 	bl	800dedc <tcp_recv_null>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dd9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d12a      	bne.n	800ddfa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	f003 0320 	and.w	r3, r3, #32
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d033      	beq.n	800de16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddb6:	d005      	beq.n	800ddc4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00b      	beq.n	800dde6 <tcp_process_refused_data+0xb2>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6918      	ldr	r0, [r3, #16]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	2200      	movs	r2, #0
 800dddc:	6879      	ldr	r1, [r7, #4]
 800ddde:	47a0      	blx	r4
 800dde0:	4603      	mov	r3, r0
 800dde2:	73fb      	strb	r3, [r7, #15]
 800dde4:	e001      	b.n	800ddea <tcp_process_refused_data+0xb6>
 800dde6:	2300      	movs	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ddea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddee:	f113 0f0d 	cmn.w	r3, #13
 800ddf2:	d110      	bne.n	800de16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ddf4:	f06f 030c 	mvn.w	r3, #12
 800ddf8:	e00e      	b.n	800de18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ddfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddfe:	f113 0f0d 	cmn.w	r3, #13
 800de02:	d102      	bne.n	800de0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800de04:	f06f 030c 	mvn.w	r3, #12
 800de08:	e006      	b.n	800de18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800de10:	f06f 0304 	mvn.w	r3, #4
 800de14:	e000      	b.n	800de18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3714      	adds	r7, #20
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd90      	pop	{r4, r7, pc}
 800de20:	0801d5e4 	.word	0x0801d5e4
 800de24:	0801daf4 	.word	0x0801daf4
 800de28:	0801d628 	.word	0x0801d628

0800de2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de34:	e007      	b.n	800de46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f809 	bl	800de54 <tcp_seg_free>
    seg = next;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1f4      	bne.n	800de36 <tcp_segs_free+0xa>
  }
}
 800de4c:	bf00      	nop
 800de4e:	3710      	adds	r7, #16
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00c      	beq.n	800de7c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d004      	beq.n	800de74 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe fb7a 	bl	800c568 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800de74:	6879      	ldr	r1, [r7, #4]
 800de76:	2003      	movs	r0, #3
 800de78:	f7fd fd4e 	bl	800b918 <memp_free>
  }
}
 800de7c:	bf00      	nop
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <tcp_seg_copy+0x1c>
 800de92:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <tcp_seg_copy+0x4c>)
 800de94:	f240 6282 	movw	r2, #1666	; 0x682
 800de98:	490e      	ldr	r1, [pc, #56]	; (800ded4 <tcp_seg_copy+0x50>)
 800de9a:	480f      	ldr	r0, [pc, #60]	; (800ded8 <tcp_seg_copy+0x54>)
 800de9c:	f00a fdb8 	bl	8018a10 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dea0:	2003      	movs	r0, #3
 800dea2:	f7fd fce7 	bl	800b874 <memp_malloc>
 800dea6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <tcp_seg_copy+0x2e>
    return NULL;
 800deae:	2300      	movs	r3, #0
 800deb0:	e00a      	b.n	800dec8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800deb2:	2210      	movs	r2, #16
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f009 ff6a 	bl	8017d90 <memcpy>
  pbuf_ref(cseg->p);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7fe fbf7 	bl	800c6b4 <pbuf_ref>
  return cseg;
 800dec6:	68fb      	ldr	r3, [r7, #12]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	0801d5e4 	.word	0x0801d5e4
 800ded4:	0801db38 	.word	0x0801db38
 800ded8:	0801d628 	.word	0x0801d628

0800dedc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
 800dee8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d109      	bne.n	800df04 <tcp_recv_null+0x28>
 800def0:	4b12      	ldr	r3, [pc, #72]	; (800df3c <tcp_recv_null+0x60>)
 800def2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800def6:	4912      	ldr	r1, [pc, #72]	; (800df40 <tcp_recv_null+0x64>)
 800def8:	4812      	ldr	r0, [pc, #72]	; (800df44 <tcp_recv_null+0x68>)
 800defa:	f00a fd89 	bl	8018a10 <iprintf>
 800defe:	f06f 030f 	mvn.w	r3, #15
 800df02:	e016      	b.n	800df32 <tcp_recv_null+0x56>

  if (p != NULL) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	891b      	ldrh	r3, [r3, #8]
 800df0e:	4619      	mov	r1, r3
 800df10:	68b8      	ldr	r0, [r7, #8]
 800df12:	f7ff fad7 	bl	800d4c4 <tcp_recved>
    pbuf_free(p);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7fe fb26 	bl	800c568 <pbuf_free>
 800df1c:	e008      	b.n	800df30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800df1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d104      	bne.n	800df30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800df26:	68b8      	ldr	r0, [r7, #8]
 800df28:	f7fe ffc0 	bl	800ceac <tcp_close>
 800df2c:	4603      	mov	r3, r0
 800df2e:	e000      	b.n	800df32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800df30:	2300      	movs	r3, #0
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	0801d5e4 	.word	0x0801d5e4
 800df40:	0801db54 	.word	0x0801db54
 800df44:	0801d628 	.word	0x0801d628

0800df48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b086      	sub	sp, #24
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df56:	2b00      	cmp	r3, #0
 800df58:	db01      	blt.n	800df5e <tcp_kill_prio+0x16>
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	e000      	b.n	800df60 <tcp_kill_prio+0x18>
 800df5e:	237f      	movs	r3, #127	; 0x7f
 800df60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800df62:	7afb      	ldrb	r3, [r7, #11]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d034      	beq.n	800dfd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800df68:	7afb      	ldrb	r3, [r7, #11]
 800df6a:	3b01      	subs	r3, #1
 800df6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df76:	4b19      	ldr	r3, [pc, #100]	; (800dfdc <tcp_kill_prio+0x94>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e01f      	b.n	800dfbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	7d5b      	ldrb	r3, [r3, #21]
 800df82:	7afa      	ldrb	r2, [r7, #11]
 800df84:	429a      	cmp	r2, r3
 800df86:	d80c      	bhi.n	800dfa2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800df8c:	7afa      	ldrb	r2, [r7, #11]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d112      	bne.n	800dfb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df92:	4b13      	ldr	r3, [pc, #76]	; (800dfe0 <tcp_kill_prio+0x98>)
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d80a      	bhi.n	800dfb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dfa2:	4b0f      	ldr	r3, [pc, #60]	; (800dfe0 <tcp_kill_prio+0x98>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	6a1b      	ldr	r3, [r3, #32]
 800dfaa:	1ad3      	subs	r3, r2, r3
 800dfac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	7d5b      	ldrb	r3, [r3, #21]
 800dfb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1dc      	bne.n	800df7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d004      	beq.n	800dfd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfca:	6938      	ldr	r0, [r7, #16]
 800dfcc:	f7ff f8b2 	bl	800d134 <tcp_abort>
 800dfd0:	e000      	b.n	800dfd4 <tcp_kill_prio+0x8c>
    return;
 800dfd2:	bf00      	nop
  }
}
 800dfd4:	3718      	adds	r7, #24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20008fb0 	.word	0x20008fb0
 800dfe0:	20008fb4 	.word	0x20008fb4

0800dfe4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	2b08      	cmp	r3, #8
 800dff2:	d009      	beq.n	800e008 <tcp_kill_state+0x24>
 800dff4:	79fb      	ldrb	r3, [r7, #7]
 800dff6:	2b09      	cmp	r3, #9
 800dff8:	d006      	beq.n	800e008 <tcp_kill_state+0x24>
 800dffa:	4b1a      	ldr	r3, [pc, #104]	; (800e064 <tcp_kill_state+0x80>)
 800dffc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e000:	4919      	ldr	r1, [pc, #100]	; (800e068 <tcp_kill_state+0x84>)
 800e002:	481a      	ldr	r0, [pc, #104]	; (800e06c <tcp_kill_state+0x88>)
 800e004:	f00a fd04 	bl	8018a10 <iprintf>

  inactivity = 0;
 800e008:	2300      	movs	r3, #0
 800e00a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e010:	4b17      	ldr	r3, [pc, #92]	; (800e070 <tcp_kill_state+0x8c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	617b      	str	r3, [r7, #20]
 800e016:	e017      	b.n	800e048 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
 800e01c:	79fa      	ldrb	r2, [r7, #7]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d10f      	bne.n	800e042 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e022:	4b14      	ldr	r3, [pc, #80]	; (800e074 <tcp_kill_state+0x90>)
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d807      	bhi.n	800e042 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e032:	4b10      	ldr	r3, [pc, #64]	; (800e074 <tcp_kill_state+0x90>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	6a1b      	ldr	r3, [r3, #32]
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	617b      	str	r3, [r7, #20]
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1e4      	bne.n	800e018 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d003      	beq.n	800e05c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e054:	2100      	movs	r1, #0
 800e056:	6938      	ldr	r0, [r7, #16]
 800e058:	f7fe ffae 	bl	800cfb8 <tcp_abandon>
  }
}
 800e05c:	bf00      	nop
 800e05e:	3718      	adds	r7, #24
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	0801d5e4 	.word	0x0801d5e4
 800e068:	0801db70 	.word	0x0801db70
 800e06c:	0801d628 	.word	0x0801d628
 800e070:	20008fb0 	.word	0x20008fb0
 800e074:	20008fb4 	.word	0x20008fb4

0800e078 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e082:	2300      	movs	r3, #0
 800e084:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e086:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <tcp_kill_timewait+0x58>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	60fb      	str	r3, [r7, #12]
 800e08c:	e012      	b.n	800e0b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e08e:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <tcp_kill_timewait+0x5c>)
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6a1b      	ldr	r3, [r3, #32]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d807      	bhi.n	800e0ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e09e:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <tcp_kill_timewait+0x5c>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6a1b      	ldr	r3, [r3, #32]
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	68db      	ldr	r3, [r3, #12]
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1e9      	bne.n	800e08e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0c0:	68b8      	ldr	r0, [r7, #8]
 800e0c2:	f7ff f837 	bl	800d134 <tcp_abort>
  }
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20008fc0 	.word	0x20008fc0
 800e0d4:	20008fb4 	.word	0x20008fb4

0800e0d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e0de:	4b10      	ldr	r3, [pc, #64]	; (800e120 <tcp_handle_closepend+0x48>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e0e4:	e014      	b.n	800e110 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	8b5b      	ldrh	r3, [r3, #26]
 800e0f0:	f003 0308 	and.w	r3, r3, #8
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	8b5b      	ldrh	r3, [r3, #26]
 800e0fc:	f023 0308 	bic.w	r3, r3, #8
 800e100:	b29a      	uxth	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7fe fe6a 	bl	800cde0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1e7      	bne.n	800e0e6 <tcp_handle_closepend+0xe>
  }
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20008fb0 	.word	0x20008fb0

0800e124 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e12e:	2001      	movs	r0, #1
 800e130:	f7fd fba0 	bl	800b874 <memp_malloc>
 800e134:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d126      	bne.n	800e18a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e13c:	f7ff ffcc 	bl	800e0d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e140:	f7ff ff9a 	bl	800e078 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e144:	2001      	movs	r0, #1
 800e146:	f7fd fb95 	bl	800b874 <memp_malloc>
 800e14a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d11b      	bne.n	800e18a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e152:	2009      	movs	r0, #9
 800e154:	f7ff ff46 	bl	800dfe4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e158:	2001      	movs	r0, #1
 800e15a:	f7fd fb8b 	bl	800b874 <memp_malloc>
 800e15e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d111      	bne.n	800e18a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e166:	2008      	movs	r0, #8
 800e168:	f7ff ff3c 	bl	800dfe4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e16c:	2001      	movs	r0, #1
 800e16e:	f7fd fb81 	bl	800b874 <memp_malloc>
 800e172:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d107      	bne.n	800e18a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e17a:	79fb      	ldrb	r3, [r7, #7]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fee3 	bl	800df48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e182:	2001      	movs	r0, #1
 800e184:	f7fd fb76 	bl	800b874 <memp_malloc>
 800e188:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d03f      	beq.n	800e210 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e190:	229c      	movs	r2, #156	; 0x9c
 800e192:	2100      	movs	r1, #0
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f009 fe1f 	bl	8017dd8 <memset>
    pcb->prio = prio;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	79fa      	ldrb	r2, [r7, #7]
 800e19e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e1b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	22ff      	movs	r2, #255	; 0xff
 800e1be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e1c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2206      	movs	r2, #6
 800e1cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2206      	movs	r2, #6
 800e1d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e1e6:	4b0d      	ldr	r3, [pc, #52]	; (800e21c <tcp_alloc+0xf8>)
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e1ee:	4b0c      	ldr	r3, [pc, #48]	; (800e220 <tcp_alloc+0xfc>)
 800e1f0:	781a      	ldrb	r2, [r3, #0]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a08      	ldr	r2, [pc, #32]	; (800e224 <tcp_alloc+0x100>)
 800e204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4a07      	ldr	r2, [pc, #28]	; (800e228 <tcp_alloc+0x104>)
 800e20c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e210:	68fb      	ldr	r3, [r7, #12]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	20008fb4 	.word	0x20008fb4
 800e220:	200054a2 	.word	0x200054a2
 800e224:	0800dedd 	.word	0x0800dedd
 800e228:	006ddd00 	.word	0x006ddd00

0800e22c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	4603      	mov	r3, r0
 800e234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e236:	2040      	movs	r0, #64	; 0x40
 800e238:	f7ff ff74 	bl	800e124 <tcp_alloc>
 800e23c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e23e:	68fb      	ldr	r3, [r7, #12]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d002      	beq.n	800e25e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	683a      	ldr	r2, [r7, #0]
 800e25c:	611a      	str	r2, [r3, #16]
  }
}
 800e25e:	bf00      	nop
 800e260:	370c      	adds	r7, #12
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
	...

0800e26c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00e      	beq.n	800e29a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	7d1b      	ldrb	r3, [r3, #20]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d106      	bne.n	800e292 <tcp_recv+0x26>
 800e284:	4b07      	ldr	r3, [pc, #28]	; (800e2a4 <tcp_recv+0x38>)
 800e286:	f240 72df 	movw	r2, #2015	; 0x7df
 800e28a:	4907      	ldr	r1, [pc, #28]	; (800e2a8 <tcp_recv+0x3c>)
 800e28c:	4807      	ldr	r0, [pc, #28]	; (800e2ac <tcp_recv+0x40>)
 800e28e:	f00a fbbf 	bl	8018a10 <iprintf>
    pcb->recv = recv;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e29a:	bf00      	nop
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	0801d5e4 	.word	0x0801d5e4
 800e2a8:	0801db80 	.word	0x0801db80
 800e2ac:	0801d628 	.word	0x0801d628

0800e2b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00e      	beq.n	800e2de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7d1b      	ldrb	r3, [r3, #20]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d106      	bne.n	800e2d6 <tcp_sent+0x26>
 800e2c8:	4b07      	ldr	r3, [pc, #28]	; (800e2e8 <tcp_sent+0x38>)
 800e2ca:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e2ce:	4907      	ldr	r1, [pc, #28]	; (800e2ec <tcp_sent+0x3c>)
 800e2d0:	4807      	ldr	r0, [pc, #28]	; (800e2f0 <tcp_sent+0x40>)
 800e2d2:	f00a fb9d 	bl	8018a10 <iprintf>
    pcb->sent = sent;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	683a      	ldr	r2, [r7, #0]
 800e2da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	0801d5e4 	.word	0x0801d5e4
 800e2ec:	0801dba8 	.word	0x0801dba8
 800e2f0:	0801d628 	.word	0x0801d628

0800e2f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00e      	beq.n	800e322 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	7d1b      	ldrb	r3, [r3, #20]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d106      	bne.n	800e31a <tcp_err+0x26>
 800e30c:	4b07      	ldr	r3, [pc, #28]	; (800e32c <tcp_err+0x38>)
 800e30e:	f640 020d 	movw	r2, #2061	; 0x80d
 800e312:	4907      	ldr	r1, [pc, #28]	; (800e330 <tcp_err+0x3c>)
 800e314:	4807      	ldr	r0, [pc, #28]	; (800e334 <tcp_err+0x40>)
 800e316:	f00a fb7b 	bl	8018a10 <iprintf>
    pcb->errf = err;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e322:	bf00      	nop
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	0801d5e4 	.word	0x0801d5e4
 800e330:	0801dbd0 	.word	0x0801dbd0
 800e334:	0801d628 	.word	0x0801d628

0800e338 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d008      	beq.n	800e35a <tcp_accept+0x22>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	7d1b      	ldrb	r3, [r3, #20]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d104      	bne.n	800e35a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	619a      	str	r2, [r3, #24]
  }
}
 800e35a:	bf00      	nop
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
	...

0800e368 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	4613      	mov	r3, r2
 800e374:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d107      	bne.n	800e38c <tcp_poll+0x24>
 800e37c:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <tcp_poll+0x50>)
 800e37e:	f640 023d 	movw	r2, #2109	; 0x83d
 800e382:	490e      	ldr	r1, [pc, #56]	; (800e3bc <tcp_poll+0x54>)
 800e384:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <tcp_poll+0x58>)
 800e386:	f00a fb43 	bl	8018a10 <iprintf>
 800e38a:	e011      	b.n	800e3b0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	7d1b      	ldrb	r3, [r3, #20]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d106      	bne.n	800e3a2 <tcp_poll+0x3a>
 800e394:	4b08      	ldr	r3, [pc, #32]	; (800e3b8 <tcp_poll+0x50>)
 800e396:	f640 023e 	movw	r2, #2110	; 0x83e
 800e39a:	490a      	ldr	r1, [pc, #40]	; (800e3c4 <tcp_poll+0x5c>)
 800e39c:	4808      	ldr	r0, [pc, #32]	; (800e3c0 <tcp_poll+0x58>)
 800e39e:	f00a fb37 	bl	8018a10 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	79fa      	ldrb	r2, [r7, #7]
 800e3ae:	775a      	strb	r2, [r3, #29]
}
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	0801d5e4 	.word	0x0801d5e4
 800e3bc:	0801dbf8 	.word	0x0801dbf8
 800e3c0:	0801d628 	.word	0x0801d628
 800e3c4:	0801dc10 	.word	0x0801dc10

0800e3c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d107      	bne.n	800e3e6 <tcp_pcb_purge+0x1e>
 800e3d6:	4b21      	ldr	r3, [pc, #132]	; (800e45c <tcp_pcb_purge+0x94>)
 800e3d8:	f640 0251 	movw	r2, #2129	; 0x851
 800e3dc:	4920      	ldr	r1, [pc, #128]	; (800e460 <tcp_pcb_purge+0x98>)
 800e3de:	4821      	ldr	r0, [pc, #132]	; (800e464 <tcp_pcb_purge+0x9c>)
 800e3e0:	f00a fb16 	bl	8018a10 <iprintf>
 800e3e4:	e037      	b.n	800e456 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d033      	beq.n	800e456 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e3f2:	2b0a      	cmp	r3, #10
 800e3f4:	d02f      	beq.n	800e456 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d02b      	beq.n	800e456 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e402:	2b00      	cmp	r3, #0
 800e404:	d007      	beq.n	800e416 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe f8ac 	bl	800c568 <pbuf_free>
      pcb->refused_data = NULL;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f986 	bl	800e730 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e42a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff fcfb 	bl	800de2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7ff fcf6 	bl	800de2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	66da      	str	r2, [r3, #108]	; 0x6c
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	0801d5e4 	.word	0x0801d5e4
 800e460:	0801dc30 	.word	0x0801dc30
 800e464:	0801d628 	.word	0x0801d628

0800e468 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d106      	bne.n	800e486 <tcp_pcb_remove+0x1e>
 800e478:	4b3e      	ldr	r3, [pc, #248]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e47a:	f640 0283 	movw	r2, #2179	; 0x883
 800e47e:	493e      	ldr	r1, [pc, #248]	; (800e578 <tcp_pcb_remove+0x110>)
 800e480:	483e      	ldr	r0, [pc, #248]	; (800e57c <tcp_pcb_remove+0x114>)
 800e482:	f00a fac5 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d106      	bne.n	800e49a <tcp_pcb_remove+0x32>
 800e48c:	4b39      	ldr	r3, [pc, #228]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e48e:	f640 0284 	movw	r2, #2180	; 0x884
 800e492:	493b      	ldr	r1, [pc, #236]	; (800e580 <tcp_pcb_remove+0x118>)
 800e494:	4839      	ldr	r0, [pc, #228]	; (800e57c <tcp_pcb_remove+0x114>)
 800e496:	f00a fabb 	bl	8018a10 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d105      	bne.n	800e4b0 <tcp_pcb_remove+0x48>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	68da      	ldr	r2, [r3, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	e013      	b.n	800e4d8 <tcp_pcb_remove+0x70>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	60fb      	str	r3, [r7, #12]
 800e4b6:	e00c      	b.n	800e4d2 <tcp_pcb_remove+0x6a>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d104      	bne.n	800e4cc <tcp_pcb_remove+0x64>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	68da      	ldr	r2, [r3, #12]
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	60da      	str	r2, [r3, #12]
 800e4ca:	e005      	b.n	800e4d8 <tcp_pcb_remove+0x70>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1ef      	bne.n	800e4b8 <tcp_pcb_remove+0x50>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e4de:	6838      	ldr	r0, [r7, #0]
 800e4e0:	f7ff ff72 	bl	800e3c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	7d1b      	ldrb	r3, [r3, #20]
 800e4e8:	2b0a      	cmp	r3, #10
 800e4ea:	d013      	beq.n	800e514 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d00f      	beq.n	800e514 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	8b5b      	ldrh	r3, [r3, #26]
 800e4f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d009      	beq.n	800e514 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	8b5b      	ldrh	r3, [r3, #26]
 800e504:	f043 0302 	orr.w	r3, r3, #2
 800e508:	b29a      	uxth	r2, r3
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e50e:	6838      	ldr	r0, [r7, #0]
 800e510:	f003 fbc2 	bl	8011c98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	7d1b      	ldrb	r3, [r3, #20]
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d020      	beq.n	800e55e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e520:	2b00      	cmp	r3, #0
 800e522:	d006      	beq.n	800e532 <tcp_pcb_remove+0xca>
 800e524:	4b13      	ldr	r3, [pc, #76]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e526:	f640 0293 	movw	r2, #2195	; 0x893
 800e52a:	4916      	ldr	r1, [pc, #88]	; (800e584 <tcp_pcb_remove+0x11c>)
 800e52c:	4813      	ldr	r0, [pc, #76]	; (800e57c <tcp_pcb_remove+0x114>)
 800e52e:	f00a fa6f 	bl	8018a10 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e536:	2b00      	cmp	r3, #0
 800e538:	d006      	beq.n	800e548 <tcp_pcb_remove+0xe0>
 800e53a:	4b0e      	ldr	r3, [pc, #56]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e53c:	f640 0294 	movw	r2, #2196	; 0x894
 800e540:	4911      	ldr	r1, [pc, #68]	; (800e588 <tcp_pcb_remove+0x120>)
 800e542:	480e      	ldr	r0, [pc, #56]	; (800e57c <tcp_pcb_remove+0x114>)
 800e544:	f00a fa64 	bl	8018a10 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d006      	beq.n	800e55e <tcp_pcb_remove+0xf6>
 800e550:	4b08      	ldr	r3, [pc, #32]	; (800e574 <tcp_pcb_remove+0x10c>)
 800e552:	f640 0296 	movw	r2, #2198	; 0x896
 800e556:	490d      	ldr	r1, [pc, #52]	; (800e58c <tcp_pcb_remove+0x124>)
 800e558:	4808      	ldr	r0, [pc, #32]	; (800e57c <tcp_pcb_remove+0x114>)
 800e55a:	f00a fa59 	bl	8018a10 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	2200      	movs	r2, #0
 800e562:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	2200      	movs	r2, #0
 800e568:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e56a:	bf00      	nop
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	0801d5e4 	.word	0x0801d5e4
 800e578:	0801dc4c 	.word	0x0801dc4c
 800e57c:	0801d628 	.word	0x0801d628
 800e580:	0801dc68 	.word	0x0801dc68
 800e584:	0801dc88 	.word	0x0801dc88
 800e588:	0801dca0 	.word	0x0801dca0
 800e58c:	0801dcbc 	.word	0x0801dcbc

0800e590 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d106      	bne.n	800e5ac <tcp_next_iss+0x1c>
 800e59e:	4b0a      	ldr	r3, [pc, #40]	; (800e5c8 <tcp_next_iss+0x38>)
 800e5a0:	f640 02af 	movw	r2, #2223	; 0x8af
 800e5a4:	4909      	ldr	r1, [pc, #36]	; (800e5cc <tcp_next_iss+0x3c>)
 800e5a6:	480a      	ldr	r0, [pc, #40]	; (800e5d0 <tcp_next_iss+0x40>)
 800e5a8:	f00a fa32 	bl	8018a10 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e5ac:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <tcp_next_iss+0x44>)
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	4b09      	ldr	r3, [pc, #36]	; (800e5d8 <tcp_next_iss+0x48>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	4a07      	ldr	r2, [pc, #28]	; (800e5d4 <tcp_next_iss+0x44>)
 800e5b8:	6013      	str	r3, [r2, #0]
  return iss;
 800e5ba:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <tcp_next_iss+0x44>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	0801d5e4 	.word	0x0801d5e4
 800e5cc:	0801dcd4 	.word	0x0801dcd4
 800e5d0:	0801d628 	.word	0x0801d628
 800e5d4:	20000010 	.word	0x20000010
 800e5d8:	20008fb4 	.word	0x20008fb4

0800e5dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d106      	bne.n	800e5fe <tcp_eff_send_mss_netif+0x22>
 800e5f0:	4b14      	ldr	r3, [pc, #80]	; (800e644 <tcp_eff_send_mss_netif+0x68>)
 800e5f2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e5f6:	4914      	ldr	r1, [pc, #80]	; (800e648 <tcp_eff_send_mss_netif+0x6c>)
 800e5f8:	4814      	ldr	r0, [pc, #80]	; (800e64c <tcp_eff_send_mss_netif+0x70>)
 800e5fa:	f00a fa09 	bl	8018a10 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d101      	bne.n	800e608 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e604:	89fb      	ldrh	r3, [r7, #14]
 800e606:	e019      	b.n	800e63c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	8c1b      	ldrh	r3, [r3, #32]
 800e60c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e60e:	8afb      	ldrh	r3, [r7, #22]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d012      	beq.n	800e63a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e614:	2328      	movs	r3, #40	; 0x28
 800e616:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e618:	8afa      	ldrh	r2, [r7, #22]
 800e61a:	8abb      	ldrh	r3, [r7, #20]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d904      	bls.n	800e62a <tcp_eff_send_mss_netif+0x4e>
 800e620:	8afa      	ldrh	r2, [r7, #22]
 800e622:	8abb      	ldrh	r3, [r7, #20]
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	b29b      	uxth	r3, r3
 800e628:	e000      	b.n	800e62c <tcp_eff_send_mss_netif+0x50>
 800e62a:	2300      	movs	r3, #0
 800e62c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e62e:	8a7a      	ldrh	r2, [r7, #18]
 800e630:	89fb      	ldrh	r3, [r7, #14]
 800e632:	4293      	cmp	r3, r2
 800e634:	bf28      	it	cs
 800e636:	4613      	movcs	r3, r2
 800e638:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e63a:	89fb      	ldrh	r3, [r7, #14]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	0801d5e4 	.word	0x0801d5e4
 800e648:	0801dcf0 	.word	0x0801dcf0
 800e64c:	0801d628 	.word	0x0801d628

0800e650 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d119      	bne.n	800e698 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e664:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e666:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e66a:	4910      	ldr	r1, [pc, #64]	; (800e6ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e66c:	4810      	ldr	r0, [pc, #64]	; (800e6b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e66e:	f00a f9cf 	bl	8018a10 <iprintf>

  while (pcb != NULL) {
 800e672:	e011      	b.n	800e698 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d108      	bne.n	800e692 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	68db      	ldr	r3, [r3, #12]
 800e684:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7fe fd54 	bl	800d134 <tcp_abort>
      pcb = next;
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	e002      	b.n	800e698 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1ea      	bne.n	800e674 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e69e:	bf00      	nop
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0801d5e4 	.word	0x0801d5e4
 800e6ac:	0801dd18 	.word	0x0801dd18
 800e6b0:	0801d628 	.word	0x0801d628

0800e6b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d02a      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d026      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e6cc:	4b15      	ldr	r3, [pc, #84]	; (800e724 <tcp_netif_ip_addr_changed+0x70>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7ff ffbc 	bl	800e650 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e6d8:	4b13      	ldr	r3, [pc, #76]	; (800e728 <tcp_netif_ip_addr_changed+0x74>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ffb6 	bl	800e650 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d017      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d013      	beq.n	800e71a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6f2:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <tcp_netif_ip_addr_changed+0x78>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	60fb      	str	r3, [r7, #12]
 800e6f8:	e00c      	b.n	800e714 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	429a      	cmp	r2, r3
 800e704:	d103      	bne.n	800e70e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d1ef      	bne.n	800e6fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	20008fb0 	.word	0x20008fb0
 800e728:	20008fbc 	.word	0x20008fbc
 800e72c:	20008fb8 	.word	0x20008fb8

0800e730 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d007      	beq.n	800e750 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fb71 	bl	800de2c <tcp_segs_free>
    pcb->ooseq = NULL;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2200      	movs	r2, #0
 800e74e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e758:	b590      	push	{r4, r7, lr}
 800e75a:	b08d      	sub	sp, #52	; 0x34
 800e75c:	af04      	add	r7, sp, #16
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d105      	bne.n	800e774 <tcp_input+0x1c>
 800e768:	4b9b      	ldr	r3, [pc, #620]	; (800e9d8 <tcp_input+0x280>)
 800e76a:	2283      	movs	r2, #131	; 0x83
 800e76c:	499b      	ldr	r1, [pc, #620]	; (800e9dc <tcp_input+0x284>)
 800e76e:	489c      	ldr	r0, [pc, #624]	; (800e9e0 <tcp_input+0x288>)
 800e770:	f00a f94e 	bl	8018a10 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	4a9a      	ldr	r2, [pc, #616]	; (800e9e4 <tcp_input+0x28c>)
 800e77a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	895b      	ldrh	r3, [r3, #10]
 800e780:	2b13      	cmp	r3, #19
 800e782:	f240 83c4 	bls.w	800ef0e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e786:	4b98      	ldr	r3, [pc, #608]	; (800e9e8 <tcp_input+0x290>)
 800e788:	695a      	ldr	r2, [r3, #20]
 800e78a:	4b97      	ldr	r3, [pc, #604]	; (800e9e8 <tcp_input+0x290>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f006 f9ef 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f040 83ba 	bne.w	800ef12 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e79e:	4b92      	ldr	r3, [pc, #584]	; (800e9e8 <tcp_input+0x290>)
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e7a6:	2be0      	cmp	r3, #224	; 0xe0
 800e7a8:	f000 83b3 	beq.w	800ef12 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e7ac:	4b8d      	ldr	r3, [pc, #564]	; (800e9e4 <tcp_input+0x28c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	899b      	ldrh	r3, [r3, #12]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fc fba7 	bl	800af08 <lwip_htons>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	0b1b      	lsrs	r3, r3, #12
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e7c6:	7cbb      	ldrb	r3, [r7, #18]
 800e7c8:	2b13      	cmp	r3, #19
 800e7ca:	f240 83a2 	bls.w	800ef12 <tcp_input+0x7ba>
 800e7ce:	7cbb      	ldrb	r3, [r7, #18]
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	891b      	ldrh	r3, [r3, #8]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	f200 839b 	bhi.w	800ef12 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e7dc:	7cbb      	ldrb	r3, [r7, #18]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	3b14      	subs	r3, #20
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	4b81      	ldr	r3, [pc, #516]	; (800e9ec <tcp_input+0x294>)
 800e7e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e7e8:	4b81      	ldr	r3, [pc, #516]	; (800e9f0 <tcp_input+0x298>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	895a      	ldrh	r2, [r3, #10]
 800e7f2:	7cbb      	ldrb	r3, [r7, #18]
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d309      	bcc.n	800e80e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e7fa:	4b7c      	ldr	r3, [pc, #496]	; (800e9ec <tcp_input+0x294>)
 800e7fc:	881a      	ldrh	r2, [r3, #0]
 800e7fe:	4b7d      	ldr	r3, [pc, #500]	; (800e9f4 <tcp_input+0x29c>)
 800e800:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e802:	7cbb      	ldrb	r3, [r7, #18]
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7fd fe28 	bl	800c45c <pbuf_remove_header>
 800e80c:	e04e      	b.n	800e8ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d105      	bne.n	800e822 <tcp_input+0xca>
 800e816:	4b70      	ldr	r3, [pc, #448]	; (800e9d8 <tcp_input+0x280>)
 800e818:	22c2      	movs	r2, #194	; 0xc2
 800e81a:	4977      	ldr	r1, [pc, #476]	; (800e9f8 <tcp_input+0x2a0>)
 800e81c:	4870      	ldr	r0, [pc, #448]	; (800e9e0 <tcp_input+0x288>)
 800e81e:	f00a f8f7 	bl	8018a10 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e822:	2114      	movs	r1, #20
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7fd fe19 	bl	800c45c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	895a      	ldrh	r2, [r3, #10]
 800e82e:	4b71      	ldr	r3, [pc, #452]	; (800e9f4 <tcp_input+0x29c>)
 800e830:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e832:	4b6e      	ldr	r3, [pc, #440]	; (800e9ec <tcp_input+0x294>)
 800e834:	881a      	ldrh	r2, [r3, #0]
 800e836:	4b6f      	ldr	r3, [pc, #444]	; (800e9f4 <tcp_input+0x29c>)
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e83e:	4b6d      	ldr	r3, [pc, #436]	; (800e9f4 <tcp_input+0x29c>)
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	4619      	mov	r1, r3
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7fd fe09 	bl	800c45c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	895b      	ldrh	r3, [r3, #10]
 800e850:	8a3a      	ldrh	r2, [r7, #16]
 800e852:	429a      	cmp	r2, r3
 800e854:	f200 835f 	bhi.w	800ef16 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	4a64      	ldr	r2, [pc, #400]	; (800e9f0 <tcp_input+0x298>)
 800e860:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	8a3a      	ldrh	r2, [r7, #16]
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fd fdf6 	bl	800c45c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	891a      	ldrh	r2, [r3, #8]
 800e874:	8a3b      	ldrh	r3, [r7, #16]
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	895b      	ldrh	r3, [r3, #10]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d005      	beq.n	800e892 <tcp_input+0x13a>
 800e886:	4b54      	ldr	r3, [pc, #336]	; (800e9d8 <tcp_input+0x280>)
 800e888:	22df      	movs	r2, #223	; 0xdf
 800e88a:	495c      	ldr	r1, [pc, #368]	; (800e9fc <tcp_input+0x2a4>)
 800e88c:	4854      	ldr	r0, [pc, #336]	; (800e9e0 <tcp_input+0x288>)
 800e88e:	f00a f8bf 	bl	8018a10 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	891a      	ldrh	r2, [r3, #8]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d005      	beq.n	800e8ac <tcp_input+0x154>
 800e8a0:	4b4d      	ldr	r3, [pc, #308]	; (800e9d8 <tcp_input+0x280>)
 800e8a2:	22e0      	movs	r2, #224	; 0xe0
 800e8a4:	4956      	ldr	r1, [pc, #344]	; (800ea00 <tcp_input+0x2a8>)
 800e8a6:	484e      	ldr	r0, [pc, #312]	; (800e9e0 <tcp_input+0x288>)
 800e8a8:	f00a f8b2 	bl	8018a10 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e8ac:	4b4d      	ldr	r3, [pc, #308]	; (800e9e4 <tcp_input+0x28c>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	4b4b      	ldr	r3, [pc, #300]	; (800e9e4 <tcp_input+0x28c>)
 800e8b6:	681c      	ldr	r4, [r3, #0]
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	f7fc fb25 	bl	800af08 <lwip_htons>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e8c2:	4b48      	ldr	r3, [pc, #288]	; (800e9e4 <tcp_input+0x28c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	885b      	ldrh	r3, [r3, #2]
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	4b46      	ldr	r3, [pc, #280]	; (800e9e4 <tcp_input+0x28c>)
 800e8cc:	681c      	ldr	r4, [r3, #0]
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	f7fc fb1a 	bl	800af08 <lwip_htons>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e8d8:	4b42      	ldr	r3, [pc, #264]	; (800e9e4 <tcp_input+0x28c>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	685a      	ldr	r2, [r3, #4]
 800e8de:	4b41      	ldr	r3, [pc, #260]	; (800e9e4 <tcp_input+0x28c>)
 800e8e0:	681c      	ldr	r4, [r3, #0]
 800e8e2:	4610      	mov	r0, r2
 800e8e4:	f7fc fb25 	bl	800af32 <lwip_htonl>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	6063      	str	r3, [r4, #4]
 800e8ec:	6863      	ldr	r3, [r4, #4]
 800e8ee:	4a45      	ldr	r2, [pc, #276]	; (800ea04 <tcp_input+0x2ac>)
 800e8f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e8f2:	4b3c      	ldr	r3, [pc, #240]	; (800e9e4 <tcp_input+0x28c>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	689a      	ldr	r2, [r3, #8]
 800e8f8:	4b3a      	ldr	r3, [pc, #232]	; (800e9e4 <tcp_input+0x28c>)
 800e8fa:	681c      	ldr	r4, [r3, #0]
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	f7fc fb18 	bl	800af32 <lwip_htonl>
 800e902:	4603      	mov	r3, r0
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	4a3f      	ldr	r2, [pc, #252]	; (800ea08 <tcp_input+0x2b0>)
 800e90a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e90c:	4b35      	ldr	r3, [pc, #212]	; (800e9e4 <tcp_input+0x28c>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	89db      	ldrh	r3, [r3, #14]
 800e912:	b29a      	uxth	r2, r3
 800e914:	4b33      	ldr	r3, [pc, #204]	; (800e9e4 <tcp_input+0x28c>)
 800e916:	681c      	ldr	r4, [r3, #0]
 800e918:	4610      	mov	r0, r2
 800e91a:	f7fc faf5 	bl	800af08 <lwip_htons>
 800e91e:	4603      	mov	r3, r0
 800e920:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e922:	4b30      	ldr	r3, [pc, #192]	; (800e9e4 <tcp_input+0x28c>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	899b      	ldrh	r3, [r3, #12]
 800e928:	b29b      	uxth	r3, r3
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7fc faec 	bl	800af08 <lwip_htons>
 800e930:	4603      	mov	r3, r0
 800e932:	b2db      	uxtb	r3, r3
 800e934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4b34      	ldr	r3, [pc, #208]	; (800ea0c <tcp_input+0x2b4>)
 800e93c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	891a      	ldrh	r2, [r3, #8]
 800e942:	4b33      	ldr	r3, [pc, #204]	; (800ea10 <tcp_input+0x2b8>)
 800e944:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e946:	4b31      	ldr	r3, [pc, #196]	; (800ea0c <tcp_input+0x2b4>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	f003 0303 	and.w	r3, r3, #3
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d00c      	beq.n	800e96c <tcp_input+0x214>
    tcplen++;
 800e952:	4b2f      	ldr	r3, [pc, #188]	; (800ea10 <tcp_input+0x2b8>)
 800e954:	881b      	ldrh	r3, [r3, #0]
 800e956:	3301      	adds	r3, #1
 800e958:	b29a      	uxth	r2, r3
 800e95a:	4b2d      	ldr	r3, [pc, #180]	; (800ea10 <tcp_input+0x2b8>)
 800e95c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	891a      	ldrh	r2, [r3, #8]
 800e962:	4b2b      	ldr	r3, [pc, #172]	; (800ea10 <tcp_input+0x2b8>)
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	429a      	cmp	r2, r3
 800e968:	f200 82d7 	bhi.w	800ef1a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e96c:	2300      	movs	r3, #0
 800e96e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e970:	4b28      	ldr	r3, [pc, #160]	; (800ea14 <tcp_input+0x2bc>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	61fb      	str	r3, [r7, #28]
 800e976:	e09d      	b.n	800eab4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d105      	bne.n	800e98c <tcp_input+0x234>
 800e980:	4b15      	ldr	r3, [pc, #84]	; (800e9d8 <tcp_input+0x280>)
 800e982:	22fb      	movs	r2, #251	; 0xfb
 800e984:	4924      	ldr	r1, [pc, #144]	; (800ea18 <tcp_input+0x2c0>)
 800e986:	4816      	ldr	r0, [pc, #88]	; (800e9e0 <tcp_input+0x288>)
 800e988:	f00a f842 	bl	8018a10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	7d1b      	ldrb	r3, [r3, #20]
 800e990:	2b0a      	cmp	r3, #10
 800e992:	d105      	bne.n	800e9a0 <tcp_input+0x248>
 800e994:	4b10      	ldr	r3, [pc, #64]	; (800e9d8 <tcp_input+0x280>)
 800e996:	22fc      	movs	r2, #252	; 0xfc
 800e998:	4920      	ldr	r1, [pc, #128]	; (800ea1c <tcp_input+0x2c4>)
 800e99a:	4811      	ldr	r0, [pc, #68]	; (800e9e0 <tcp_input+0x288>)
 800e99c:	f00a f838 	bl	8018a10 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	7d1b      	ldrb	r3, [r3, #20]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d105      	bne.n	800e9b4 <tcp_input+0x25c>
 800e9a8:	4b0b      	ldr	r3, [pc, #44]	; (800e9d8 <tcp_input+0x280>)
 800e9aa:	22fd      	movs	r2, #253	; 0xfd
 800e9ac:	491c      	ldr	r1, [pc, #112]	; (800ea20 <tcp_input+0x2c8>)
 800e9ae:	480c      	ldr	r0, [pc, #48]	; (800e9e0 <tcp_input+0x288>)
 800e9b0:	f00a f82e 	bl	8018a10 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	7a1b      	ldrb	r3, [r3, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d033      	beq.n	800ea24 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	7a1a      	ldrb	r2, [r3, #8]
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <tcp_input+0x290>)
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d029      	beq.n	800ea24 <tcp_input+0x2cc>
      prev = pcb;
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	61bb      	str	r3, [r7, #24]
      continue;
 800e9d4:	e06b      	b.n	800eaae <tcp_input+0x356>
 800e9d6:	bf00      	nop
 800e9d8:	0801dd4c 	.word	0x0801dd4c
 800e9dc:	0801dd80 	.word	0x0801dd80
 800e9e0:	0801dd98 	.word	0x0801dd98
 800e9e4:	200054b4 	.word	0x200054b4
 800e9e8:	2000589c 	.word	0x2000589c
 800e9ec:	200054b8 	.word	0x200054b8
 800e9f0:	200054bc 	.word	0x200054bc
 800e9f4:	200054ba 	.word	0x200054ba
 800e9f8:	0801ddc0 	.word	0x0801ddc0
 800e9fc:	0801ddd0 	.word	0x0801ddd0
 800ea00:	0801dddc 	.word	0x0801dddc
 800ea04:	200054c4 	.word	0x200054c4
 800ea08:	200054c8 	.word	0x200054c8
 800ea0c:	200054d0 	.word	0x200054d0
 800ea10:	200054ce 	.word	0x200054ce
 800ea14:	20008fb0 	.word	0x20008fb0
 800ea18:	0801ddfc 	.word	0x0801ddfc
 800ea1c:	0801de24 	.word	0x0801de24
 800ea20:	0801de50 	.word	0x0801de50
    }

    if (pcb->remote_port == tcphdr->src &&
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	8b1a      	ldrh	r2, [r3, #24]
 800ea28:	4b94      	ldr	r3, [pc, #592]	; (800ec7c <tcp_input+0x524>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d13a      	bne.n	800eaaa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	8ada      	ldrh	r2, [r3, #22]
 800ea38:	4b90      	ldr	r3, [pc, #576]	; (800ec7c <tcp_input+0x524>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	885b      	ldrh	r3, [r3, #2]
 800ea3e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d132      	bne.n	800eaaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	685a      	ldr	r2, [r3, #4]
 800ea48:	4b8d      	ldr	r3, [pc, #564]	; (800ec80 <tcp_input+0x528>)
 800ea4a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d12c      	bne.n	800eaaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	4b8a      	ldr	r3, [pc, #552]	; (800ec80 <tcp_input+0x528>)
 800ea56:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d126      	bne.n	800eaaa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	69fa      	ldr	r2, [r7, #28]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d106      	bne.n	800ea74 <tcp_input+0x31c>
 800ea66:	4b87      	ldr	r3, [pc, #540]	; (800ec84 <tcp_input+0x52c>)
 800ea68:	f240 120d 	movw	r2, #269	; 0x10d
 800ea6c:	4986      	ldr	r1, [pc, #536]	; (800ec88 <tcp_input+0x530>)
 800ea6e:	4887      	ldr	r0, [pc, #540]	; (800ec8c <tcp_input+0x534>)
 800ea70:	f009 ffce 	bl	8018a10 <iprintf>
      if (prev != NULL) {
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00a      	beq.n	800ea90 <tcp_input+0x338>
        prev->next = pcb->next;
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	68da      	ldr	r2, [r3, #12]
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ea82:	4b83      	ldr	r3, [pc, #524]	; (800ec90 <tcp_input+0x538>)
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	69fb      	ldr	r3, [r7, #28]
 800ea88:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ea8a:	4a81      	ldr	r2, [pc, #516]	; (800ec90 <tcp_input+0x538>)
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	69fa      	ldr	r2, [r7, #28]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d111      	bne.n	800eabe <tcp_input+0x366>
 800ea9a:	4b7a      	ldr	r3, [pc, #488]	; (800ec84 <tcp_input+0x52c>)
 800ea9c:	f240 1215 	movw	r2, #277	; 0x115
 800eaa0:	497c      	ldr	r1, [pc, #496]	; (800ec94 <tcp_input+0x53c>)
 800eaa2:	487a      	ldr	r0, [pc, #488]	; (800ec8c <tcp_input+0x534>)
 800eaa4:	f009 ffb4 	bl	8018a10 <iprintf>
      break;
 800eaa8:	e009      	b.n	800eabe <tcp_input+0x366>
    }
    prev = pcb;
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	61fb      	str	r3, [r7, #28]
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f47f af5e 	bne.w	800e978 <tcp_input+0x220>
 800eabc:	e000      	b.n	800eac0 <tcp_input+0x368>
      break;
 800eabe:	bf00      	nop
  }

  if (pcb == NULL) {
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f040 8095 	bne.w	800ebf2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eac8:	4b73      	ldr	r3, [pc, #460]	; (800ec98 <tcp_input+0x540>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	61fb      	str	r3, [r7, #28]
 800eace:	e03f      	b.n	800eb50 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	7d1b      	ldrb	r3, [r3, #20]
 800ead4:	2b0a      	cmp	r3, #10
 800ead6:	d006      	beq.n	800eae6 <tcp_input+0x38e>
 800ead8:	4b6a      	ldr	r3, [pc, #424]	; (800ec84 <tcp_input+0x52c>)
 800eada:	f240 121f 	movw	r2, #287	; 0x11f
 800eade:	496f      	ldr	r1, [pc, #444]	; (800ec9c <tcp_input+0x544>)
 800eae0:	486a      	ldr	r0, [pc, #424]	; (800ec8c <tcp_input+0x534>)
 800eae2:	f009 ff95 	bl	8018a10 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	7a1b      	ldrb	r3, [r3, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	7a1a      	ldrb	r2, [r3, #8]
 800eaf2:	4b63      	ldr	r3, [pc, #396]	; (800ec80 <tcp_input+0x528>)
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eafa:	3301      	adds	r3, #1
 800eafc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d122      	bne.n	800eb48 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	8b1a      	ldrh	r2, [r3, #24]
 800eb06:	4b5d      	ldr	r3, [pc, #372]	; (800ec7c <tcp_input+0x524>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	881b      	ldrh	r3, [r3, #0]
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d11b      	bne.n	800eb4a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	8ada      	ldrh	r2, [r3, #22]
 800eb16:	4b59      	ldr	r3, [pc, #356]	; (800ec7c <tcp_input+0x524>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	885b      	ldrh	r3, [r3, #2]
 800eb1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d113      	bne.n	800eb4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	4b56      	ldr	r3, [pc, #344]	; (800ec80 <tcp_input+0x528>)
 800eb28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d10d      	bne.n	800eb4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	4b53      	ldr	r3, [pc, #332]	; (800ec80 <tcp_input+0x528>)
 800eb34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d107      	bne.n	800eb4a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800eb3a:	69f8      	ldr	r0, [r7, #28]
 800eb3c:	f000 fb52 	bl	800f1e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fd fd11 	bl	800c568 <pbuf_free>
        return;
 800eb46:	e1ee      	b.n	800ef26 <tcp_input+0x7ce>
        continue;
 800eb48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	61fb      	str	r3, [r7, #28]
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1bc      	bne.n	800ead0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb5a:	4b51      	ldr	r3, [pc, #324]	; (800eca0 <tcp_input+0x548>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	e02a      	b.n	800ebb8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	7a1b      	ldrb	r3, [r3, #8]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00c      	beq.n	800eb84 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	7a1a      	ldrb	r2, [r3, #8]
 800eb6e:	4b44      	ldr	r3, [pc, #272]	; (800ec80 <tcp_input+0x528>)
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb76:	3301      	adds	r3, #1
 800eb78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d002      	beq.n	800eb84 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	61bb      	str	r3, [r7, #24]
        continue;
 800eb82:	e016      	b.n	800ebb2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	8ada      	ldrh	r2, [r3, #22]
 800eb88:	4b3c      	ldr	r3, [pc, #240]	; (800ec7c <tcp_input+0x524>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	885b      	ldrh	r3, [r3, #2]
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d10c      	bne.n	800ebae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	4b39      	ldr	r3, [pc, #228]	; (800ec80 <tcp_input+0x528>)
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d00f      	beq.n	800ebc0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00d      	beq.n	800ebc2 <tcp_input+0x46a>
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d009      	beq.n	800ebc2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1d1      	bne.n	800eb62 <tcp_input+0x40a>
 800ebbe:	e000      	b.n	800ebc2 <tcp_input+0x46a>
            break;
 800ebc0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d014      	beq.n	800ebf2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00a      	beq.n	800ebe4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	68da      	ldr	r2, [r3, #12]
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ebd6:	4b32      	ldr	r3, [pc, #200]	; (800eca0 <tcp_input+0x548>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ebde:	4a30      	ldr	r2, [pc, #192]	; (800eca0 <tcp_input+0x548>)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ebe4:	6978      	ldr	r0, [r7, #20]
 800ebe6:	f000 f9ff 	bl	800efe8 <tcp_listen_input>
      }
      pbuf_free(p);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7fd fcbc 	bl	800c568 <pbuf_free>
      return;
 800ebf0:	e199      	b.n	800ef26 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f000 8160 	beq.w	800eeba <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ebfa:	4b2a      	ldr	r3, [pc, #168]	; (800eca4 <tcp_input+0x54c>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	891a      	ldrh	r2, [r3, #8]
 800ec04:	4b27      	ldr	r3, [pc, #156]	; (800eca4 <tcp_input+0x54c>)
 800ec06:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ec08:	4a26      	ldr	r2, [pc, #152]	; (800eca4 <tcp_input+0x54c>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ec0e:	4b1b      	ldr	r3, [pc, #108]	; (800ec7c <tcp_input+0x524>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a24      	ldr	r2, [pc, #144]	; (800eca4 <tcp_input+0x54c>)
 800ec14:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ec16:	4b24      	ldr	r3, [pc, #144]	; (800eca8 <tcp_input+0x550>)
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ec1c:	4b23      	ldr	r3, [pc, #140]	; (800ecac <tcp_input+0x554>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ec22:	4b23      	ldr	r3, [pc, #140]	; (800ecb0 <tcp_input+0x558>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ec28:	4b22      	ldr	r3, [pc, #136]	; (800ecb4 <tcp_input+0x55c>)
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	f003 0308 	and.w	r3, r3, #8
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	7b5b      	ldrb	r3, [r3, #13]
 800ec38:	f043 0301 	orr.w	r3, r3, #1
 800ec3c:	b2da      	uxtb	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d038      	beq.n	800ecbc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ec4a:	69f8      	ldr	r0, [r7, #28]
 800ec4c:	f7ff f872 	bl	800dd34 <tcp_process_refused_data>
 800ec50:	4603      	mov	r3, r0
 800ec52:	f113 0f0d 	cmn.w	r3, #13
 800ec56:	d007      	beq.n	800ec68 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d02d      	beq.n	800ecbc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ec60:	4b15      	ldr	r3, [pc, #84]	; (800ecb8 <tcp_input+0x560>)
 800ec62:	881b      	ldrh	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d029      	beq.n	800ecbc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f040 8104 	bne.w	800ee7a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ec72:	69f8      	ldr	r0, [r7, #28]
 800ec74:	f003 fe28 	bl	80128c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ec78:	e0ff      	b.n	800ee7a <tcp_input+0x722>
 800ec7a:	bf00      	nop
 800ec7c:	200054b4 	.word	0x200054b4
 800ec80:	2000589c 	.word	0x2000589c
 800ec84:	0801dd4c 	.word	0x0801dd4c
 800ec88:	0801de78 	.word	0x0801de78
 800ec8c:	0801dd98 	.word	0x0801dd98
 800ec90:	20008fb0 	.word	0x20008fb0
 800ec94:	0801dea4 	.word	0x0801dea4
 800ec98:	20008fc0 	.word	0x20008fc0
 800ec9c:	0801ded0 	.word	0x0801ded0
 800eca0:	20008fb8 	.word	0x20008fb8
 800eca4:	200054a4 	.word	0x200054a4
 800eca8:	200054d4 	.word	0x200054d4
 800ecac:	200054d1 	.word	0x200054d1
 800ecb0:	200054cc 	.word	0x200054cc
 800ecb4:	200054d0 	.word	0x200054d0
 800ecb8:	200054ce 	.word	0x200054ce
      }
    }
    tcp_input_pcb = pcb;
 800ecbc:	4a9b      	ldr	r2, [pc, #620]	; (800ef2c <tcp_input+0x7d4>)
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ecc2:	69f8      	ldr	r0, [r7, #28]
 800ecc4:	f000 fb0a 	bl	800f2dc <tcp_process>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800eccc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecd0:	f113 0f0d 	cmn.w	r3, #13
 800ecd4:	f000 80d3 	beq.w	800ee7e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800ecd8:	4b95      	ldr	r3, [pc, #596]	; (800ef30 <tcp_input+0x7d8>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	f003 0308 	and.w	r3, r3, #8
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d015      	beq.n	800ed10 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d008      	beq.n	800ed00 <tcp_input+0x5a8>
 800ecee:	69fb      	ldr	r3, [r7, #28]
 800ecf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecf4:	69fa      	ldr	r2, [r7, #28]
 800ecf6:	6912      	ldr	r2, [r2, #16]
 800ecf8:	f06f 010d 	mvn.w	r1, #13
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ed00:	69f9      	ldr	r1, [r7, #28]
 800ed02:	488c      	ldr	r0, [pc, #560]	; (800ef34 <tcp_input+0x7dc>)
 800ed04:	f7ff fbb0 	bl	800e468 <tcp_pcb_remove>
        tcp_free(pcb);
 800ed08:	69f8      	ldr	r0, [r7, #28]
 800ed0a:	f7fd fed9 	bl	800cac0 <tcp_free>
 800ed0e:	e0c1      	b.n	800ee94 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ed14:	4b88      	ldr	r3, [pc, #544]	; (800ef38 <tcp_input+0x7e0>)
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d01d      	beq.n	800ed58 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ed1c:	4b86      	ldr	r3, [pc, #536]	; (800ef38 <tcp_input+0x7e0>)
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00a      	beq.n	800ed42 <tcp_input+0x5ea>
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	6910      	ldr	r0, [r2, #16]
 800ed36:	89fa      	ldrh	r2, [r7, #14]
 800ed38:	69f9      	ldr	r1, [r7, #28]
 800ed3a:	4798      	blx	r3
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	74fb      	strb	r3, [r7, #19]
 800ed40:	e001      	b.n	800ed46 <tcp_input+0x5ee>
 800ed42:	2300      	movs	r3, #0
 800ed44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ed46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed4a:	f113 0f0d 	cmn.w	r3, #13
 800ed4e:	f000 8098 	beq.w	800ee82 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ed52:	4b79      	ldr	r3, [pc, #484]	; (800ef38 <tcp_input+0x7e0>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ed58:	69f8      	ldr	r0, [r7, #28]
 800ed5a:	f000 f905 	bl	800ef68 <tcp_input_delayed_close>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f040 8090 	bne.w	800ee86 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ed66:	4b75      	ldr	r3, [pc, #468]	; (800ef3c <tcp_input+0x7e4>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d041      	beq.n	800edf2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d006      	beq.n	800ed84 <tcp_input+0x62c>
 800ed76:	4b72      	ldr	r3, [pc, #456]	; (800ef40 <tcp_input+0x7e8>)
 800ed78:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ed7c:	4971      	ldr	r1, [pc, #452]	; (800ef44 <tcp_input+0x7ec>)
 800ed7e:	4872      	ldr	r0, [pc, #456]	; (800ef48 <tcp_input+0x7f0>)
 800ed80:	f009 fe46 	bl	8018a10 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	8b5b      	ldrh	r3, [r3, #26]
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d008      	beq.n	800eda2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ed90:	4b6a      	ldr	r3, [pc, #424]	; (800ef3c <tcp_input+0x7e4>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7fd fbe7 	bl	800c568 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ed9a:	69f8      	ldr	r0, [r7, #28]
 800ed9c:	f7fe f9ca 	bl	800d134 <tcp_abort>
            goto aborted;
 800eda0:	e078      	b.n	800ee94 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00c      	beq.n	800edc6 <tcp_input+0x66e>
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	6918      	ldr	r0, [r3, #16]
 800edb6:	4b61      	ldr	r3, [pc, #388]	; (800ef3c <tcp_input+0x7e4>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	2300      	movs	r3, #0
 800edbc:	69f9      	ldr	r1, [r7, #28]
 800edbe:	47a0      	blx	r4
 800edc0:	4603      	mov	r3, r0
 800edc2:	74fb      	strb	r3, [r7, #19]
 800edc4:	e008      	b.n	800edd8 <tcp_input+0x680>
 800edc6:	4b5d      	ldr	r3, [pc, #372]	; (800ef3c <tcp_input+0x7e4>)
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	2300      	movs	r3, #0
 800edcc:	69f9      	ldr	r1, [r7, #28]
 800edce:	2000      	movs	r0, #0
 800edd0:	f7ff f884 	bl	800dedc <tcp_recv_null>
 800edd4:	4603      	mov	r3, r0
 800edd6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800edd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eddc:	f113 0f0d 	cmn.w	r3, #13
 800ede0:	d053      	beq.n	800ee8a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ede2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d003      	beq.n	800edf2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800edea:	4b54      	ldr	r3, [pc, #336]	; (800ef3c <tcp_input+0x7e4>)
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800edf2:	4b4f      	ldr	r3, [pc, #316]	; (800ef30 <tcp_input+0x7d8>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	f003 0320 	and.w	r3, r3, #32
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d030      	beq.n	800ee60 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d009      	beq.n	800ee1a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee0a:	7b5a      	ldrb	r2, [r3, #13]
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee10:	f042 0220 	orr.w	r2, r2, #32
 800ee14:	b2d2      	uxtb	r2, r2
 800ee16:	735a      	strb	r2, [r3, #13]
 800ee18:	e022      	b.n	800ee60 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ee22:	d005      	beq.n	800ee30 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee28:	3301      	adds	r3, #1
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00b      	beq.n	800ee52 <tcp_input+0x6fa>
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	6918      	ldr	r0, [r3, #16]
 800ee44:	2300      	movs	r3, #0
 800ee46:	2200      	movs	r2, #0
 800ee48:	69f9      	ldr	r1, [r7, #28]
 800ee4a:	47a0      	blx	r4
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	74fb      	strb	r3, [r7, #19]
 800ee50:	e001      	b.n	800ee56 <tcp_input+0x6fe>
 800ee52:	2300      	movs	r3, #0
 800ee54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ee56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee5a:	f113 0f0d 	cmn.w	r3, #13
 800ee5e:	d016      	beq.n	800ee8e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ee60:	4b32      	ldr	r3, [pc, #200]	; (800ef2c <tcp_input+0x7d4>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ee66:	69f8      	ldr	r0, [r7, #28]
 800ee68:	f000 f87e 	bl	800ef68 <tcp_input_delayed_close>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10f      	bne.n	800ee92 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ee72:	69f8      	ldr	r0, [r7, #28]
 800ee74:	f002 ff10 	bl	8011c98 <tcp_output>
 800ee78:	e00c      	b.n	800ee94 <tcp_input+0x73c>
        goto aborted;
 800ee7a:	bf00      	nop
 800ee7c:	e00a      	b.n	800ee94 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ee7e:	bf00      	nop
 800ee80:	e008      	b.n	800ee94 <tcp_input+0x73c>
              goto aborted;
 800ee82:	bf00      	nop
 800ee84:	e006      	b.n	800ee94 <tcp_input+0x73c>
          goto aborted;
 800ee86:	bf00      	nop
 800ee88:	e004      	b.n	800ee94 <tcp_input+0x73c>
            goto aborted;
 800ee8a:	bf00      	nop
 800ee8c:	e002      	b.n	800ee94 <tcp_input+0x73c>
              goto aborted;
 800ee8e:	bf00      	nop
 800ee90:	e000      	b.n	800ee94 <tcp_input+0x73c>
          goto aborted;
 800ee92:	bf00      	nop
    tcp_input_pcb = NULL;
 800ee94:	4b25      	ldr	r3, [pc, #148]	; (800ef2c <tcp_input+0x7d4>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ee9a:	4b28      	ldr	r3, [pc, #160]	; (800ef3c <tcp_input+0x7e4>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eea0:	4b2a      	ldr	r3, [pc, #168]	; (800ef4c <tcp_input+0x7f4>)
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d03d      	beq.n	800ef24 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800eea8:	4b28      	ldr	r3, [pc, #160]	; (800ef4c <tcp_input+0x7f4>)
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fd fb5b 	bl	800c568 <pbuf_free>
      inseg.p = NULL;
 800eeb2:	4b26      	ldr	r3, [pc, #152]	; (800ef4c <tcp_input+0x7f4>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eeb8:	e034      	b.n	800ef24 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eeba:	4b25      	ldr	r3, [pc, #148]	; (800ef50 <tcp_input+0x7f8>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	899b      	ldrh	r3, [r3, #12]
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fc f820 	bl	800af08 <lwip_htons>
 800eec8:	4603      	mov	r3, r0
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	f003 0304 	and.w	r3, r3, #4
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d118      	bne.n	800ef06 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eed4:	4b1f      	ldr	r3, [pc, #124]	; (800ef54 <tcp_input+0x7fc>)
 800eed6:	6819      	ldr	r1, [r3, #0]
 800eed8:	4b1f      	ldr	r3, [pc, #124]	; (800ef58 <tcp_input+0x800>)
 800eeda:	881b      	ldrh	r3, [r3, #0]
 800eedc:	461a      	mov	r2, r3
 800eede:	4b1f      	ldr	r3, [pc, #124]	; (800ef5c <tcp_input+0x804>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eee4:	4b1a      	ldr	r3, [pc, #104]	; (800ef50 <tcp_input+0x7f8>)
 800eee6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eee8:	885b      	ldrh	r3, [r3, #2]
 800eeea:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeec:	4a18      	ldr	r2, [pc, #96]	; (800ef50 <tcp_input+0x7f8>)
 800eeee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eef0:	8812      	ldrh	r2, [r2, #0]
 800eef2:	b292      	uxth	r2, r2
 800eef4:	9202      	str	r2, [sp, #8]
 800eef6:	9301      	str	r3, [sp, #4]
 800eef8:	4b19      	ldr	r3, [pc, #100]	; (800ef60 <tcp_input+0x808>)
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	4b19      	ldr	r3, [pc, #100]	; (800ef64 <tcp_input+0x80c>)
 800eefe:	4602      	mov	r2, r0
 800ef00:	2000      	movs	r0, #0
 800ef02:	f003 fc8f 	bl	8012824 <tcp_rst>
    pbuf_free(p);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7fd fb2e 	bl	800c568 <pbuf_free>
  return;
 800ef0c:	e00a      	b.n	800ef24 <tcp_input+0x7cc>
    goto dropped;
 800ef0e:	bf00      	nop
 800ef10:	e004      	b.n	800ef1c <tcp_input+0x7c4>
dropped:
 800ef12:	bf00      	nop
 800ef14:	e002      	b.n	800ef1c <tcp_input+0x7c4>
      goto dropped;
 800ef16:	bf00      	nop
 800ef18:	e000      	b.n	800ef1c <tcp_input+0x7c4>
      goto dropped;
 800ef1a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7fd fb23 	bl	800c568 <pbuf_free>
 800ef22:	e000      	b.n	800ef26 <tcp_input+0x7ce>
  return;
 800ef24:	bf00      	nop
}
 800ef26:	3724      	adds	r7, #36	; 0x24
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd90      	pop	{r4, r7, pc}
 800ef2c:	20008fc4 	.word	0x20008fc4
 800ef30:	200054d1 	.word	0x200054d1
 800ef34:	20008fb0 	.word	0x20008fb0
 800ef38:	200054cc 	.word	0x200054cc
 800ef3c:	200054d4 	.word	0x200054d4
 800ef40:	0801dd4c 	.word	0x0801dd4c
 800ef44:	0801df00 	.word	0x0801df00
 800ef48:	0801dd98 	.word	0x0801dd98
 800ef4c:	200054a4 	.word	0x200054a4
 800ef50:	200054b4 	.word	0x200054b4
 800ef54:	200054c8 	.word	0x200054c8
 800ef58:	200054ce 	.word	0x200054ce
 800ef5c:	200054c4 	.word	0x200054c4
 800ef60:	200058ac 	.word	0x200058ac
 800ef64:	200058b0 	.word	0x200058b0

0800ef68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <tcp_input_delayed_close+0x1c>
 800ef76:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <tcp_input_delayed_close+0x6c>)
 800ef78:	f240 225a 	movw	r2, #602	; 0x25a
 800ef7c:	4916      	ldr	r1, [pc, #88]	; (800efd8 <tcp_input_delayed_close+0x70>)
 800ef7e:	4817      	ldr	r0, [pc, #92]	; (800efdc <tcp_input_delayed_close+0x74>)
 800ef80:	f009 fd46 	bl	8018a10 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ef84:	4b16      	ldr	r3, [pc, #88]	; (800efe0 <tcp_input_delayed_close+0x78>)
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	f003 0310 	and.w	r3, r3, #16
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d01c      	beq.n	800efca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	8b5b      	ldrh	r3, [r3, #26]
 800ef94:	f003 0310 	and.w	r3, r3, #16
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10d      	bne.n	800efb8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d008      	beq.n	800efb8 <tcp_input_delayed_close+0x50>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	6912      	ldr	r2, [r2, #16]
 800efb0:	f06f 010e 	mvn.w	r1, #14
 800efb4:	4610      	mov	r0, r2
 800efb6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800efb8:	6879      	ldr	r1, [r7, #4]
 800efba:	480a      	ldr	r0, [pc, #40]	; (800efe4 <tcp_input_delayed_close+0x7c>)
 800efbc:	f7ff fa54 	bl	800e468 <tcp_pcb_remove>
    tcp_free(pcb);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7fd fd7d 	bl	800cac0 <tcp_free>
    return 1;
 800efc6:	2301      	movs	r3, #1
 800efc8:	e000      	b.n	800efcc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	0801dd4c 	.word	0x0801dd4c
 800efd8:	0801df1c 	.word	0x0801df1c
 800efdc:	0801dd98 	.word	0x0801dd98
 800efe0:	200054d1 	.word	0x200054d1
 800efe4:	20008fb0 	.word	0x20008fb0

0800efe8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800efe8:	b590      	push	{r4, r7, lr}
 800efea:	b08b      	sub	sp, #44	; 0x2c
 800efec:	af04      	add	r7, sp, #16
 800efee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eff0:	4b6f      	ldr	r3, [pc, #444]	; (800f1b0 <tcp_listen_input+0x1c8>)
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	f003 0304 	and.w	r3, r3, #4
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f040 80d3 	bne.w	800f1a4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d106      	bne.n	800f012 <tcp_listen_input+0x2a>
 800f004:	4b6b      	ldr	r3, [pc, #428]	; (800f1b4 <tcp_listen_input+0x1cc>)
 800f006:	f240 2281 	movw	r2, #641	; 0x281
 800f00a:	496b      	ldr	r1, [pc, #428]	; (800f1b8 <tcp_listen_input+0x1d0>)
 800f00c:	486b      	ldr	r0, [pc, #428]	; (800f1bc <tcp_listen_input+0x1d4>)
 800f00e:	f009 fcff 	bl	8018a10 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f012:	4b67      	ldr	r3, [pc, #412]	; (800f1b0 <tcp_listen_input+0x1c8>)
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	f003 0310 	and.w	r3, r3, #16
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d019      	beq.n	800f052 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f01e:	4b68      	ldr	r3, [pc, #416]	; (800f1c0 <tcp_listen_input+0x1d8>)
 800f020:	6819      	ldr	r1, [r3, #0]
 800f022:	4b68      	ldr	r3, [pc, #416]	; (800f1c4 <tcp_listen_input+0x1dc>)
 800f024:	881b      	ldrh	r3, [r3, #0]
 800f026:	461a      	mov	r2, r3
 800f028:	4b67      	ldr	r3, [pc, #412]	; (800f1c8 <tcp_listen_input+0x1e0>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f02e:	4b67      	ldr	r3, [pc, #412]	; (800f1cc <tcp_listen_input+0x1e4>)
 800f030:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f032:	885b      	ldrh	r3, [r3, #2]
 800f034:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f036:	4a65      	ldr	r2, [pc, #404]	; (800f1cc <tcp_listen_input+0x1e4>)
 800f038:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f03a:	8812      	ldrh	r2, [r2, #0]
 800f03c:	b292      	uxth	r2, r2
 800f03e:	9202      	str	r2, [sp, #8]
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	4b63      	ldr	r3, [pc, #396]	; (800f1d0 <tcp_listen_input+0x1e8>)
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	4b63      	ldr	r3, [pc, #396]	; (800f1d4 <tcp_listen_input+0x1ec>)
 800f048:	4602      	mov	r2, r0
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f003 fbea 	bl	8012824 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f050:	e0aa      	b.n	800f1a8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800f052:	4b57      	ldr	r3, [pc, #348]	; (800f1b0 <tcp_listen_input+0x1c8>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	f003 0302 	and.w	r3, r3, #2
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 80a4 	beq.w	800f1a8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	7d5b      	ldrb	r3, [r3, #21]
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff f85d 	bl	800e124 <tcp_alloc>
 800f06a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d111      	bne.n	800f096 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00a      	beq.n	800f090 <tcp_listen_input+0xa8>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	6910      	ldr	r0, [r2, #16]
 800f082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f086:	2100      	movs	r1, #0
 800f088:	4798      	blx	r3
 800f08a:	4603      	mov	r3, r0
 800f08c:	73bb      	strb	r3, [r7, #14]
      return;
 800f08e:	e08c      	b.n	800f1aa <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f090:	23f0      	movs	r3, #240	; 0xf0
 800f092:	73bb      	strb	r3, [r7, #14]
      return;
 800f094:	e089      	b.n	800f1aa <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f096:	4b50      	ldr	r3, [pc, #320]	; (800f1d8 <tcp_listen_input+0x1f0>)
 800f098:	695a      	ldr	r2, [r3, #20]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f09e:	4b4e      	ldr	r3, [pc, #312]	; (800f1d8 <tcp_listen_input+0x1f0>)
 800f0a0:	691a      	ldr	r2, [r3, #16]
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8ada      	ldrh	r2, [r3, #22]
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f0ae:	4b47      	ldr	r3, [pc, #284]	; (800f1cc <tcp_listen_input+0x1e4>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	881b      	ldrh	r3, [r3, #0]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2203      	movs	r2, #3
 800f0be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f0c0:	4b41      	ldr	r3, [pc, #260]	; (800f1c8 <tcp_listen_input+0x1e0>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	1c5a      	adds	r2, r3, #1
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f0d2:	6978      	ldr	r0, [r7, #20]
 800f0d4:	f7ff fa5c 	bl	800e590 <tcp_next_iss>
 800f0d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f0f2:	4b35      	ldr	r3, [pc, #212]	; (800f1c8 <tcp_listen_input+0x1e0>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	1e5a      	subs	r2, r3, #1
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	691a      	ldr	r2, [r3, #16]
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	7a5b      	ldrb	r3, [r3, #9]
 800f10e:	f003 030c 	and.w	r3, r3, #12
 800f112:	b2da      	uxtb	r2, r3
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	7a1a      	ldrb	r2, [r3, #8]
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f120:	4b2e      	ldr	r3, [pc, #184]	; (800f1dc <tcp_listen_input+0x1f4>)
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	60da      	str	r2, [r3, #12]
 800f128:	4a2c      	ldr	r2, [pc, #176]	; (800f1dc <tcp_listen_input+0x1f4>)
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	f003 fd3b 	bl	8012ba8 <tcp_timer_needed>
 800f132:	4b2b      	ldr	r3, [pc, #172]	; (800f1e0 <tcp_listen_input+0x1f8>)
 800f134:	2201      	movs	r2, #1
 800f136:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f138:	6978      	ldr	r0, [r7, #20]
 800f13a:	f001 fd8f 	bl	8010c5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f13e:	4b23      	ldr	r3, [pc, #140]	; (800f1cc <tcp_listen_input+0x1e4>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	89db      	ldrh	r3, [r3, #14]
 800f144:	b29a      	uxth	r2, r3
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	3304      	adds	r3, #4
 800f160:	4618      	mov	r0, r3
 800f162:	f005 fa73 	bl	801464c <ip4_route>
 800f166:	4601      	mov	r1, r0
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	3304      	adds	r3, #4
 800f16c:	461a      	mov	r2, r3
 800f16e:	4620      	mov	r0, r4
 800f170:	f7ff fa34 	bl	800e5dc <tcp_eff_send_mss_netif>
 800f174:	4603      	mov	r3, r0
 800f176:	461a      	mov	r2, r3
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f17c:	2112      	movs	r1, #18
 800f17e:	6978      	ldr	r0, [r7, #20]
 800f180:	f002 fc9c 	bl	8011abc <tcp_enqueue_flags>
 800f184:	4603      	mov	r3, r0
 800f186:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d004      	beq.n	800f19a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f190:	2100      	movs	r1, #0
 800f192:	6978      	ldr	r0, [r7, #20]
 800f194:	f7fd ff10 	bl	800cfb8 <tcp_abandon>
      return;
 800f198:	e007      	b.n	800f1aa <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800f19a:	6978      	ldr	r0, [r7, #20]
 800f19c:	f002 fd7c 	bl	8011c98 <tcp_output>
  return;
 800f1a0:	bf00      	nop
 800f1a2:	e001      	b.n	800f1a8 <tcp_listen_input+0x1c0>
    return;
 800f1a4:	bf00      	nop
 800f1a6:	e000      	b.n	800f1aa <tcp_listen_input+0x1c2>
  return;
 800f1a8:	bf00      	nop
}
 800f1aa:	371c      	adds	r7, #28
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd90      	pop	{r4, r7, pc}
 800f1b0:	200054d0 	.word	0x200054d0
 800f1b4:	0801dd4c 	.word	0x0801dd4c
 800f1b8:	0801df44 	.word	0x0801df44
 800f1bc:	0801dd98 	.word	0x0801dd98
 800f1c0:	200054c8 	.word	0x200054c8
 800f1c4:	200054ce 	.word	0x200054ce
 800f1c8:	200054c4 	.word	0x200054c4
 800f1cc:	200054b4 	.word	0x200054b4
 800f1d0:	200058ac 	.word	0x200058ac
 800f1d4:	200058b0 	.word	0x200058b0
 800f1d8:	2000589c 	.word	0x2000589c
 800f1dc:	20008fb0 	.word	0x20008fb0
 800f1e0:	20008fac 	.word	0x20008fac

0800f1e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af04      	add	r7, sp, #16
 800f1ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f1ec:	4b30      	ldr	r3, [pc, #192]	; (800f2b0 <tcp_timewait_input+0xcc>)
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	f003 0304 	and.w	r3, r3, #4
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d154      	bne.n	800f2a2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d106      	bne.n	800f20c <tcp_timewait_input+0x28>
 800f1fe:	4b2d      	ldr	r3, [pc, #180]	; (800f2b4 <tcp_timewait_input+0xd0>)
 800f200:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f204:	492c      	ldr	r1, [pc, #176]	; (800f2b8 <tcp_timewait_input+0xd4>)
 800f206:	482d      	ldr	r0, [pc, #180]	; (800f2bc <tcp_timewait_input+0xd8>)
 800f208:	f009 fc02 	bl	8018a10 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f20c:	4b28      	ldr	r3, [pc, #160]	; (800f2b0 <tcp_timewait_input+0xcc>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	f003 0302 	and.w	r3, r3, #2
 800f214:	2b00      	cmp	r3, #0
 800f216:	d02a      	beq.n	800f26e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f218:	4b29      	ldr	r3, [pc, #164]	; (800f2c0 <tcp_timewait_input+0xdc>)
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	db2d      	blt.n	800f282 <tcp_timewait_input+0x9e>
 800f226:	4b26      	ldr	r3, [pc, #152]	; (800f2c0 <tcp_timewait_input+0xdc>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f232:	440b      	add	r3, r1
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	dc23      	bgt.n	800f282 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f23a:	4b22      	ldr	r3, [pc, #136]	; (800f2c4 <tcp_timewait_input+0xe0>)
 800f23c:	6819      	ldr	r1, [r3, #0]
 800f23e:	4b22      	ldr	r3, [pc, #136]	; (800f2c8 <tcp_timewait_input+0xe4>)
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	4b1e      	ldr	r3, [pc, #120]	; (800f2c0 <tcp_timewait_input+0xdc>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f24a:	4b20      	ldr	r3, [pc, #128]	; (800f2cc <tcp_timewait_input+0xe8>)
 800f24c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f24e:	885b      	ldrh	r3, [r3, #2]
 800f250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f252:	4a1e      	ldr	r2, [pc, #120]	; (800f2cc <tcp_timewait_input+0xe8>)
 800f254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f256:	8812      	ldrh	r2, [r2, #0]
 800f258:	b292      	uxth	r2, r2
 800f25a:	9202      	str	r2, [sp, #8]
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	4b1c      	ldr	r3, [pc, #112]	; (800f2d0 <tcp_timewait_input+0xec>)
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	4b1c      	ldr	r3, [pc, #112]	; (800f2d4 <tcp_timewait_input+0xf0>)
 800f264:	4602      	mov	r2, r0
 800f266:	6878      	ldr	r0, [r7, #4]
 800f268:	f003 fadc 	bl	8012824 <tcp_rst>
      return;
 800f26c:	e01c      	b.n	800f2a8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800f26e:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <tcp_timewait_input+0xcc>)
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	f003 0301 	and.w	r3, r3, #1
 800f276:	2b00      	cmp	r3, #0
 800f278:	d003      	beq.n	800f282 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f27a:	4b17      	ldr	r3, [pc, #92]	; (800f2d8 <tcp_timewait_input+0xf4>)
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f282:	4b11      	ldr	r3, [pc, #68]	; (800f2c8 <tcp_timewait_input+0xe4>)
 800f284:	881b      	ldrh	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00d      	beq.n	800f2a6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	8b5b      	ldrh	r3, [r3, #26]
 800f28e:	f043 0302 	orr.w	r3, r3, #2
 800f292:	b29a      	uxth	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f002 fcfd 	bl	8011c98 <tcp_output>
  }
  return;
 800f29e:	bf00      	nop
 800f2a0:	e001      	b.n	800f2a6 <tcp_timewait_input+0xc2>
    return;
 800f2a2:	bf00      	nop
 800f2a4:	e000      	b.n	800f2a8 <tcp_timewait_input+0xc4>
  return;
 800f2a6:	bf00      	nop
}
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	200054d0 	.word	0x200054d0
 800f2b4:	0801dd4c 	.word	0x0801dd4c
 800f2b8:	0801df64 	.word	0x0801df64
 800f2bc:	0801dd98 	.word	0x0801dd98
 800f2c0:	200054c4 	.word	0x200054c4
 800f2c4:	200054c8 	.word	0x200054c8
 800f2c8:	200054ce 	.word	0x200054ce
 800f2cc:	200054b4 	.word	0x200054b4
 800f2d0:	200058ac 	.word	0x200058ac
 800f2d4:	200058b0 	.word	0x200058b0
 800f2d8:	20008fb4 	.word	0x20008fb4

0800f2dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f2dc:	b590      	push	{r4, r7, lr}
 800f2de:	b08d      	sub	sp, #52	; 0x34
 800f2e0:	af04      	add	r7, sp, #16
 800f2e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d106      	bne.n	800f300 <tcp_process+0x24>
 800f2f2:	4ba5      	ldr	r3, [pc, #660]	; (800f588 <tcp_process+0x2ac>)
 800f2f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f2f8:	49a4      	ldr	r1, [pc, #656]	; (800f58c <tcp_process+0x2b0>)
 800f2fa:	48a5      	ldr	r0, [pc, #660]	; (800f590 <tcp_process+0x2b4>)
 800f2fc:	f009 fb88 	bl	8018a10 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f300:	4ba4      	ldr	r3, [pc, #656]	; (800f594 <tcp_process+0x2b8>)
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	f003 0304 	and.w	r3, r3, #4
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d04e      	beq.n	800f3aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	7d1b      	ldrb	r3, [r3, #20]
 800f310:	2b02      	cmp	r3, #2
 800f312:	d108      	bne.n	800f326 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f318:	4b9f      	ldr	r3, [pc, #636]	; (800f598 <tcp_process+0x2bc>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d123      	bne.n	800f368 <tcp_process+0x8c>
        acceptable = 1;
 800f320:	2301      	movs	r3, #1
 800f322:	76fb      	strb	r3, [r7, #27]
 800f324:	e020      	b.n	800f368 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f32a:	4b9c      	ldr	r3, [pc, #624]	; (800f59c <tcp_process+0x2c0>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d102      	bne.n	800f338 <tcp_process+0x5c>
        acceptable = 1;
 800f332:	2301      	movs	r3, #1
 800f334:	76fb      	strb	r3, [r7, #27]
 800f336:	e017      	b.n	800f368 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f338:	4b98      	ldr	r3, [pc, #608]	; (800f59c <tcp_process+0x2c0>)
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	db10      	blt.n	800f368 <tcp_process+0x8c>
 800f346:	4b95      	ldr	r3, [pc, #596]	; (800f59c <tcp_process+0x2c0>)
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f352:	440b      	add	r3, r1
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	dc06      	bgt.n	800f368 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	8b5b      	ldrh	r3, [r3, #26]
 800f35e:	f043 0302 	orr.w	r3, r3, #2
 800f362:	b29a      	uxth	r2, r3
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f368:	7efb      	ldrb	r3, [r7, #27]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d01b      	beq.n	800f3a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	7d1b      	ldrb	r3, [r3, #20]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <tcp_process+0xa8>
 800f376:	4b84      	ldr	r3, [pc, #528]	; (800f588 <tcp_process+0x2ac>)
 800f378:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f37c:	4988      	ldr	r1, [pc, #544]	; (800f5a0 <tcp_process+0x2c4>)
 800f37e:	4884      	ldr	r0, [pc, #528]	; (800f590 <tcp_process+0x2b4>)
 800f380:	f009 fb46 	bl	8018a10 <iprintf>
      recv_flags |= TF_RESET;
 800f384:	4b87      	ldr	r3, [pc, #540]	; (800f5a4 <tcp_process+0x2c8>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	f043 0308 	orr.w	r3, r3, #8
 800f38c:	b2da      	uxtb	r2, r3
 800f38e:	4b85      	ldr	r3, [pc, #532]	; (800f5a4 <tcp_process+0x2c8>)
 800f390:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	8b5b      	ldrh	r3, [r3, #26]
 800f396:	f023 0301 	bic.w	r3, r3, #1
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f3a0:	f06f 030d 	mvn.w	r3, #13
 800f3a4:	e37a      	b.n	800fa9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	e378      	b.n	800fa9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f3aa:	4b7a      	ldr	r3, [pc, #488]	; (800f594 <tcp_process+0x2b8>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	f003 0302 	and.w	r3, r3, #2
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d010      	beq.n	800f3d8 <tcp_process+0xfc>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	7d1b      	ldrb	r3, [r3, #20]
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d00c      	beq.n	800f3d8 <tcp_process+0xfc>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	7d1b      	ldrb	r3, [r3, #20]
 800f3c2:	2b03      	cmp	r3, #3
 800f3c4:	d008      	beq.n	800f3d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ca:	f043 0302 	orr.w	r3, r3, #2
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e361      	b.n	800fa9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	8b5b      	ldrh	r3, [r3, #26]
 800f3dc:	f003 0310 	and.w	r3, r3, #16
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d103      	bne.n	800f3ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f3e4:	4b70      	ldr	r3, [pc, #448]	; (800f5a8 <tcp_process+0x2cc>)
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f001 fc2d 	bl	8010c5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	7d1b      	ldrb	r3, [r3, #20]
 800f406:	3b02      	subs	r3, #2
 800f408:	2b07      	cmp	r3, #7
 800f40a:	f200 8337 	bhi.w	800fa7c <tcp_process+0x7a0>
 800f40e:	a201      	add	r2, pc, #4	; (adr r2, 800f414 <tcp_process+0x138>)
 800f410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f414:	0800f435 	.word	0x0800f435
 800f418:	0800f665 	.word	0x0800f665
 800f41c:	0800f7dd 	.word	0x0800f7dd
 800f420:	0800f807 	.word	0x0800f807
 800f424:	0800f92b 	.word	0x0800f92b
 800f428:	0800f7dd 	.word	0x0800f7dd
 800f42c:	0800f9b7 	.word	0x0800f9b7
 800f430:	0800fa47 	.word	0x0800fa47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f434:	4b57      	ldr	r3, [pc, #348]	; (800f594 <tcp_process+0x2b8>)
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	f003 0310 	and.w	r3, r3, #16
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f000 80e4 	beq.w	800f60a <tcp_process+0x32e>
 800f442:	4b54      	ldr	r3, [pc, #336]	; (800f594 <tcp_process+0x2b8>)
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	f003 0302 	and.w	r3, r3, #2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f000 80dd 	beq.w	800f60a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	4b50      	ldr	r3, [pc, #320]	; (800f598 <tcp_process+0x2bc>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	f040 80d5 	bne.w	800f60a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f460:	4b4e      	ldr	r3, [pc, #312]	; (800f59c <tcp_process+0x2c0>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	1c5a      	adds	r2, r3, #1
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f472:	4b49      	ldr	r3, [pc, #292]	; (800f598 <tcp_process+0x2bc>)
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f47a:	4b4c      	ldr	r3, [pc, #304]	; (800f5ac <tcp_process+0x2d0>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	89db      	ldrh	r3, [r3, #14]
 800f480:	b29a      	uxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f494:	4b41      	ldr	r3, [pc, #260]	; (800f59c <tcp_process+0x2c0>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	1e5a      	subs	r2, r3, #1
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2204      	movs	r2, #4
 800f4a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f005 f8cd 	bl	801464c <ip4_route>
 800f4b2:	4601      	mov	r1, r0
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f7ff f88e 	bl	800e5dc <tcp_eff_send_mss_netif>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4cc:	009a      	lsls	r2, r3, #2
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4d2:	005b      	lsls	r3, r3, #1
 800f4d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f4d8:	428b      	cmp	r3, r1
 800f4da:	bf38      	it	cc
 800f4dc:	460b      	movcc	r3, r1
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d204      	bcs.n	800f4ec <tcp_process+0x210>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	e00d      	b.n	800f508 <tcp_process+0x22c>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4f0:	005b      	lsls	r3, r3, #1
 800f4f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d904      	bls.n	800f504 <tcp_process+0x228>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4fe:	005b      	lsls	r3, r3, #1
 800f500:	b29b      	uxth	r3, r3
 800f502:	e001      	b.n	800f508 <tcp_process+0x22c>
 800f504:	f241 131c 	movw	r3, #4380	; 0x111c
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f514:	2b00      	cmp	r3, #0
 800f516:	d106      	bne.n	800f526 <tcp_process+0x24a>
 800f518:	4b1b      	ldr	r3, [pc, #108]	; (800f588 <tcp_process+0x2ac>)
 800f51a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f51e:	4924      	ldr	r1, [pc, #144]	; (800f5b0 <tcp_process+0x2d4>)
 800f520:	481b      	ldr	r0, [pc, #108]	; (800f590 <tcp_process+0x2b4>)
 800f522:	f009 fa75 	bl	8018a10 <iprintf>
        --pcb->snd_queuelen;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f52c:	3b01      	subs	r3, #1
 800f52e:	b29a      	uxth	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f53a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d111      	bne.n	800f566 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f546:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d106      	bne.n	800f55c <tcp_process+0x280>
 800f54e:	4b0e      	ldr	r3, [pc, #56]	; (800f588 <tcp_process+0x2ac>)
 800f550:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f554:	4917      	ldr	r1, [pc, #92]	; (800f5b4 <tcp_process+0x2d8>)
 800f556:	480e      	ldr	r0, [pc, #56]	; (800f590 <tcp_process+0x2b4>)
 800f558:	f009 fa5a 	bl	8018a10 <iprintf>
          pcb->unsent = rseg->next;
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	66da      	str	r2, [r3, #108]	; 0x6c
 800f564:	e003      	b.n	800f56e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f56e:	69f8      	ldr	r0, [r7, #28]
 800f570:	f7fe fc70 	bl	800de54 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d11d      	bne.n	800f5b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f582:	861a      	strh	r2, [r3, #48]	; 0x30
 800f584:	e01f      	b.n	800f5c6 <tcp_process+0x2ea>
 800f586:	bf00      	nop
 800f588:	0801dd4c 	.word	0x0801dd4c
 800f58c:	0801df84 	.word	0x0801df84
 800f590:	0801dd98 	.word	0x0801dd98
 800f594:	200054d0 	.word	0x200054d0
 800f598:	200054c8 	.word	0x200054c8
 800f59c:	200054c4 	.word	0x200054c4
 800f5a0:	0801dfa0 	.word	0x0801dfa0
 800f5a4:	200054d1 	.word	0x200054d1
 800f5a8:	20008fb4 	.word	0x20008fb4
 800f5ac:	200054b4 	.word	0x200054b4
 800f5b0:	0801dfc0 	.word	0x0801dfc0
 800f5b4:	0801dfd8 	.word	0x0801dfd8
        } else {
          pcb->rtime = 0;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00a      	beq.n	800f5e6 <tcp_process+0x30a>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	6910      	ldr	r0, [r2, #16]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	6879      	ldr	r1, [r7, #4]
 800f5de:	4798      	blx	r3
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	76bb      	strb	r3, [r7, #26]
 800f5e4:	e001      	b.n	800f5ea <tcp_process+0x30e>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f5ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5ee:	f113 0f0d 	cmn.w	r3, #13
 800f5f2:	d102      	bne.n	800f5fa <tcp_process+0x31e>
          return ERR_ABRT;
 800f5f4:	f06f 030c 	mvn.w	r3, #12
 800f5f8:	e250      	b.n	800fa9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	8b5b      	ldrh	r3, [r3, #26]
 800f5fe:	f043 0302 	orr.w	r3, r3, #2
 800f602:	b29a      	uxth	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f608:	e23a      	b.n	800fa80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f60a:	4b9d      	ldr	r3, [pc, #628]	; (800f880 <tcp_process+0x5a4>)
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	f003 0310 	and.w	r3, r3, #16
 800f612:	2b00      	cmp	r3, #0
 800f614:	f000 8234 	beq.w	800fa80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f618:	4b9a      	ldr	r3, [pc, #616]	; (800f884 <tcp_process+0x5a8>)
 800f61a:	6819      	ldr	r1, [r3, #0]
 800f61c:	4b9a      	ldr	r3, [pc, #616]	; (800f888 <tcp_process+0x5ac>)
 800f61e:	881b      	ldrh	r3, [r3, #0]
 800f620:	461a      	mov	r2, r3
 800f622:	4b9a      	ldr	r3, [pc, #616]	; (800f88c <tcp_process+0x5b0>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f628:	4b99      	ldr	r3, [pc, #612]	; (800f890 <tcp_process+0x5b4>)
 800f62a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f62c:	885b      	ldrh	r3, [r3, #2]
 800f62e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f630:	4a97      	ldr	r2, [pc, #604]	; (800f890 <tcp_process+0x5b4>)
 800f632:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f634:	8812      	ldrh	r2, [r2, #0]
 800f636:	b292      	uxth	r2, r2
 800f638:	9202      	str	r2, [sp, #8]
 800f63a:	9301      	str	r3, [sp, #4]
 800f63c:	4b95      	ldr	r3, [pc, #596]	; (800f894 <tcp_process+0x5b8>)
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	4b95      	ldr	r3, [pc, #596]	; (800f898 <tcp_process+0x5bc>)
 800f642:	4602      	mov	r2, r0
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f003 f8ed 	bl	8012824 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f650:	2b05      	cmp	r3, #5
 800f652:	f200 8215 	bhi.w	800fa80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2200      	movs	r2, #0
 800f65a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f002 feab 	bl	80123b8 <tcp_rexmit_rto>
      break;
 800f662:	e20d      	b.n	800fa80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f664:	4b86      	ldr	r3, [pc, #536]	; (800f880 <tcp_process+0x5a4>)
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	f003 0310 	and.w	r3, r3, #16
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f000 80a1 	beq.w	800f7b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f672:	4b84      	ldr	r3, [pc, #528]	; (800f884 <tcp_process+0x5a8>)
 800f674:	681a      	ldr	r2, [r3, #0]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	3b01      	subs	r3, #1
 800f67e:	2b00      	cmp	r3, #0
 800f680:	db7e      	blt.n	800f780 <tcp_process+0x4a4>
 800f682:	4b80      	ldr	r3, [pc, #512]	; (800f884 <tcp_process+0x5a8>)
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	dc77      	bgt.n	800f780 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2204      	movs	r2, #4
 800f694:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d102      	bne.n	800f6a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f69e:	23fa      	movs	r3, #250	; 0xfa
 800f6a0:	76bb      	strb	r3, [r7, #26]
 800f6a2:	e01d      	b.n	800f6e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <tcp_process+0x3e0>
 800f6ae:	4b7b      	ldr	r3, [pc, #492]	; (800f89c <tcp_process+0x5c0>)
 800f6b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f6b4:	497a      	ldr	r1, [pc, #488]	; (800f8a0 <tcp_process+0x5c4>)
 800f6b6:	487b      	ldr	r0, [pc, #492]	; (800f8a4 <tcp_process+0x5c8>)
 800f6b8:	f009 f9aa 	bl	8018a10 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6c0:	699b      	ldr	r3, [r3, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <tcp_process+0x400>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6ca:	699b      	ldr	r3, [r3, #24]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6910      	ldr	r0, [r2, #16]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	6879      	ldr	r1, [r7, #4]
 800f6d4:	4798      	blx	r3
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	76bb      	strb	r3, [r7, #26]
 800f6da:	e001      	b.n	800f6e0 <tcp_process+0x404>
 800f6dc:	23f0      	movs	r3, #240	; 0xf0
 800f6de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f6e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00a      	beq.n	800f6fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f6e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f6ec:	f113 0f0d 	cmn.w	r3, #13
 800f6f0:	d002      	beq.n	800f6f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f6f2:	6878      	ldr	r0, [r7, #4]
 800f6f4:	f7fd fd1e 	bl	800d134 <tcp_abort>
            }
            return ERR_ABRT;
 800f6f8:	f06f 030c 	mvn.w	r3, #12
 800f6fc:	e1ce      	b.n	800fa9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fae0 	bl	800fcc4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f704:	4b68      	ldr	r3, [pc, #416]	; (800f8a8 <tcp_process+0x5cc>)
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d005      	beq.n	800f718 <tcp_process+0x43c>
            recv_acked--;
 800f70c:	4b66      	ldr	r3, [pc, #408]	; (800f8a8 <tcp_process+0x5cc>)
 800f70e:	881b      	ldrh	r3, [r3, #0]
 800f710:	3b01      	subs	r3, #1
 800f712:	b29a      	uxth	r2, r3
 800f714:	4b64      	ldr	r3, [pc, #400]	; (800f8a8 <tcp_process+0x5cc>)
 800f716:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f71c:	009a      	lsls	r2, r3, #2
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f722:	005b      	lsls	r3, r3, #1
 800f724:	f241 111c 	movw	r1, #4380	; 0x111c
 800f728:	428b      	cmp	r3, r1
 800f72a:	bf38      	it	cc
 800f72c:	460b      	movcc	r3, r1
 800f72e:	429a      	cmp	r2, r3
 800f730:	d204      	bcs.n	800f73c <tcp_process+0x460>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	b29b      	uxth	r3, r3
 800f73a:	e00d      	b.n	800f758 <tcp_process+0x47c>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f740:	005b      	lsls	r3, r3, #1
 800f742:	f241 121c 	movw	r2, #4380	; 0x111c
 800f746:	4293      	cmp	r3, r2
 800f748:	d904      	bls.n	800f754 <tcp_process+0x478>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	b29b      	uxth	r3, r3
 800f752:	e001      	b.n	800f758 <tcp_process+0x47c>
 800f754:	f241 131c 	movw	r3, #4380	; 0x111c
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f75e:	4b53      	ldr	r3, [pc, #332]	; (800f8ac <tcp_process+0x5d0>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	f003 0320 	and.w	r3, r3, #32
 800f766:	2b00      	cmp	r3, #0
 800f768:	d037      	beq.n	800f7da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8b5b      	ldrh	r3, [r3, #26]
 800f76e:	f043 0302 	orr.w	r3, r3, #2
 800f772:	b29a      	uxth	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2207      	movs	r2, #7
 800f77c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f77e:	e02c      	b.n	800f7da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f780:	4b40      	ldr	r3, [pc, #256]	; (800f884 <tcp_process+0x5a8>)
 800f782:	6819      	ldr	r1, [r3, #0]
 800f784:	4b40      	ldr	r3, [pc, #256]	; (800f888 <tcp_process+0x5ac>)
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	4b40      	ldr	r3, [pc, #256]	; (800f88c <tcp_process+0x5b0>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f790:	4b3f      	ldr	r3, [pc, #252]	; (800f890 <tcp_process+0x5b4>)
 800f792:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f794:	885b      	ldrh	r3, [r3, #2]
 800f796:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f798:	4a3d      	ldr	r2, [pc, #244]	; (800f890 <tcp_process+0x5b4>)
 800f79a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f79c:	8812      	ldrh	r2, [r2, #0]
 800f79e:	b292      	uxth	r2, r2
 800f7a0:	9202      	str	r2, [sp, #8]
 800f7a2:	9301      	str	r3, [sp, #4]
 800f7a4:	4b3b      	ldr	r3, [pc, #236]	; (800f894 <tcp_process+0x5b8>)
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	4b3b      	ldr	r3, [pc, #236]	; (800f898 <tcp_process+0x5bc>)
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f003 f839 	bl	8012824 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f7b2:	e167      	b.n	800fa84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f7b4:	4b32      	ldr	r3, [pc, #200]	; (800f880 <tcp_process+0x5a4>)
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	f003 0302 	and.w	r3, r3, #2
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 8161 	beq.w	800fa84 <tcp_process+0x7a8>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c6:	1e5a      	subs	r2, r3, #1
 800f7c8:	4b30      	ldr	r3, [pc, #192]	; (800f88c <tcp_process+0x5b0>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	f040 8159 	bne.w	800fa84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f002 fe12 	bl	80123fc <tcp_rexmit>
      break;
 800f7d8:	e154      	b.n	800fa84 <tcp_process+0x7a8>
 800f7da:	e153      	b.n	800fa84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fa71 	bl	800fcc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f7e2:	4b32      	ldr	r3, [pc, #200]	; (800f8ac <tcp_process+0x5d0>)
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	f003 0320 	and.w	r3, r3, #32
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f000 814c 	beq.w	800fa88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	8b5b      	ldrh	r3, [r3, #26]
 800f7f4:	f043 0302 	orr.w	r3, r3, #2
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2207      	movs	r2, #7
 800f802:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f804:	e140      	b.n	800fa88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fa5c 	bl	800fcc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f80c:	4b27      	ldr	r3, [pc, #156]	; (800f8ac <tcp_process+0x5d0>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	f003 0320 	and.w	r3, r3, #32
 800f814:	2b00      	cmp	r3, #0
 800f816:	d071      	beq.n	800f8fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f818:	4b19      	ldr	r3, [pc, #100]	; (800f880 <tcp_process+0x5a4>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f003 0310 	and.w	r3, r3, #16
 800f820:	2b00      	cmp	r3, #0
 800f822:	d060      	beq.n	800f8e6 <tcp_process+0x60a>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f828:	4b16      	ldr	r3, [pc, #88]	; (800f884 <tcp_process+0x5a8>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d15a      	bne.n	800f8e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f834:	2b00      	cmp	r3, #0
 800f836:	d156      	bne.n	800f8e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	8b5b      	ldrh	r3, [r3, #26]
 800f83c:	f043 0302 	orr.w	r3, r3, #2
 800f840:	b29a      	uxth	r2, r3
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7fe fdbe 	bl	800e3c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f84c:	4b18      	ldr	r3, [pc, #96]	; (800f8b0 <tcp_process+0x5d4>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	429a      	cmp	r2, r3
 800f854:	d105      	bne.n	800f862 <tcp_process+0x586>
 800f856:	4b16      	ldr	r3, [pc, #88]	; (800f8b0 <tcp_process+0x5d4>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	4a14      	ldr	r2, [pc, #80]	; (800f8b0 <tcp_process+0x5d4>)
 800f85e:	6013      	str	r3, [r2, #0]
 800f860:	e02e      	b.n	800f8c0 <tcp_process+0x5e4>
 800f862:	4b13      	ldr	r3, [pc, #76]	; (800f8b0 <tcp_process+0x5d4>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	617b      	str	r3, [r7, #20]
 800f868:	e027      	b.n	800f8ba <tcp_process+0x5de>
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	429a      	cmp	r2, r3
 800f872:	d11f      	bne.n	800f8b4 <tcp_process+0x5d8>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	68da      	ldr	r2, [r3, #12]
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	60da      	str	r2, [r3, #12]
 800f87c:	e020      	b.n	800f8c0 <tcp_process+0x5e4>
 800f87e:	bf00      	nop
 800f880:	200054d0 	.word	0x200054d0
 800f884:	200054c8 	.word	0x200054c8
 800f888:	200054ce 	.word	0x200054ce
 800f88c:	200054c4 	.word	0x200054c4
 800f890:	200054b4 	.word	0x200054b4
 800f894:	200058ac 	.word	0x200058ac
 800f898:	200058b0 	.word	0x200058b0
 800f89c:	0801dd4c 	.word	0x0801dd4c
 800f8a0:	0801dfec 	.word	0x0801dfec
 800f8a4:	0801dd98 	.word	0x0801dd98
 800f8a8:	200054cc 	.word	0x200054cc
 800f8ac:	200054d1 	.word	0x200054d1
 800f8b0:	20008fb0 	.word	0x20008fb0
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d1d4      	bne.n	800f86a <tcp_process+0x58e>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	60da      	str	r2, [r3, #12]
 800f8c6:	4b77      	ldr	r3, [pc, #476]	; (800faa4 <tcp_process+0x7c8>)
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	220a      	movs	r2, #10
 800f8d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f8d2:	4b75      	ldr	r3, [pc, #468]	; (800faa8 <tcp_process+0x7cc>)
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	60da      	str	r2, [r3, #12]
 800f8da:	4a73      	ldr	r2, [pc, #460]	; (800faa8 <tcp_process+0x7cc>)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6013      	str	r3, [r2, #0]
 800f8e0:	f003 f962 	bl	8012ba8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f8e4:	e0d2      	b.n	800fa8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	8b5b      	ldrh	r3, [r3, #26]
 800f8ea:	f043 0302 	orr.w	r3, r3, #2
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2208      	movs	r2, #8
 800f8f8:	751a      	strb	r2, [r3, #20]
      break;
 800f8fa:	e0c7      	b.n	800fa8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8fc:	4b6b      	ldr	r3, [pc, #428]	; (800faac <tcp_process+0x7d0>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 0310 	and.w	r3, r3, #16
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 80c1 	beq.w	800fa8c <tcp_process+0x7b0>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f90e:	4b68      	ldr	r3, [pc, #416]	; (800fab0 <tcp_process+0x7d4>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	429a      	cmp	r2, r3
 800f914:	f040 80ba 	bne.w	800fa8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f040 80b5 	bne.w	800fa8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2206      	movs	r2, #6
 800f926:	751a      	strb	r2, [r3, #20]
      break;
 800f928:	e0b0      	b.n	800fa8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f9ca 	bl	800fcc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f930:	4b60      	ldr	r3, [pc, #384]	; (800fab4 <tcp_process+0x7d8>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 0320 	and.w	r3, r3, #32
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f000 80a9 	beq.w	800fa90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8b5b      	ldrh	r3, [r3, #26]
 800f942:	f043 0302 	orr.w	r3, r3, #2
 800f946:	b29a      	uxth	r2, r3
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7fe fd3b 	bl	800e3c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f952:	4b59      	ldr	r3, [pc, #356]	; (800fab8 <tcp_process+0x7dc>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d105      	bne.n	800f968 <tcp_process+0x68c>
 800f95c:	4b56      	ldr	r3, [pc, #344]	; (800fab8 <tcp_process+0x7dc>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	68db      	ldr	r3, [r3, #12]
 800f962:	4a55      	ldr	r2, [pc, #340]	; (800fab8 <tcp_process+0x7dc>)
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	e013      	b.n	800f990 <tcp_process+0x6b4>
 800f968:	4b53      	ldr	r3, [pc, #332]	; (800fab8 <tcp_process+0x7dc>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	613b      	str	r3, [r7, #16]
 800f96e:	e00c      	b.n	800f98a <tcp_process+0x6ae>
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	429a      	cmp	r2, r3
 800f978:	d104      	bne.n	800f984 <tcp_process+0x6a8>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	68da      	ldr	r2, [r3, #12]
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	60da      	str	r2, [r3, #12]
 800f982:	e005      	b.n	800f990 <tcp_process+0x6b4>
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	613b      	str	r3, [r7, #16]
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1ef      	bne.n	800f970 <tcp_process+0x694>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	60da      	str	r2, [r3, #12]
 800f996:	4b43      	ldr	r3, [pc, #268]	; (800faa4 <tcp_process+0x7c8>)
 800f998:	2201      	movs	r2, #1
 800f99a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	220a      	movs	r2, #10
 800f9a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f9a2:	4b41      	ldr	r3, [pc, #260]	; (800faa8 <tcp_process+0x7cc>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	60da      	str	r2, [r3, #12]
 800f9aa:	4a3f      	ldr	r2, [pc, #252]	; (800faa8 <tcp_process+0x7cc>)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6013      	str	r3, [r2, #0]
 800f9b0:	f003 f8fa 	bl	8012ba8 <tcp_timer_needed>
      }
      break;
 800f9b4:	e06c      	b.n	800fa90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 f984 	bl	800fcc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f9bc:	4b3b      	ldr	r3, [pc, #236]	; (800faac <tcp_process+0x7d0>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	f003 0310 	and.w	r3, r3, #16
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d065      	beq.n	800fa94 <tcp_process+0x7b8>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9cc:	4b38      	ldr	r3, [pc, #224]	; (800fab0 <tcp_process+0x7d4>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d15f      	bne.n	800fa94 <tcp_process+0x7b8>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d15b      	bne.n	800fa94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7fe fcf3 	bl	800e3c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f9e2:	4b35      	ldr	r3, [pc, #212]	; (800fab8 <tcp_process+0x7dc>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d105      	bne.n	800f9f8 <tcp_process+0x71c>
 800f9ec:	4b32      	ldr	r3, [pc, #200]	; (800fab8 <tcp_process+0x7dc>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	4a31      	ldr	r2, [pc, #196]	; (800fab8 <tcp_process+0x7dc>)
 800f9f4:	6013      	str	r3, [r2, #0]
 800f9f6:	e013      	b.n	800fa20 <tcp_process+0x744>
 800f9f8:	4b2f      	ldr	r3, [pc, #188]	; (800fab8 <tcp_process+0x7dc>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	60fb      	str	r3, [r7, #12]
 800f9fe:	e00c      	b.n	800fa1a <tcp_process+0x73e>
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d104      	bne.n	800fa14 <tcp_process+0x738>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68da      	ldr	r2, [r3, #12]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	60da      	str	r2, [r3, #12]
 800fa12:	e005      	b.n	800fa20 <tcp_process+0x744>
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	60fb      	str	r3, [r7, #12]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d1ef      	bne.n	800fa00 <tcp_process+0x724>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	60da      	str	r2, [r3, #12]
 800fa26:	4b1f      	ldr	r3, [pc, #124]	; (800faa4 <tcp_process+0x7c8>)
 800fa28:	2201      	movs	r2, #1
 800fa2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	220a      	movs	r2, #10
 800fa30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fa32:	4b1d      	ldr	r3, [pc, #116]	; (800faa8 <tcp_process+0x7cc>)
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60da      	str	r2, [r3, #12]
 800fa3a:	4a1b      	ldr	r2, [pc, #108]	; (800faa8 <tcp_process+0x7cc>)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	f003 f8b2 	bl	8012ba8 <tcp_timer_needed>
      }
      break;
 800fa44:	e026      	b.n	800fa94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f93c 	bl	800fcc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fa4c:	4b17      	ldr	r3, [pc, #92]	; (800faac <tcp_process+0x7d0>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	f003 0310 	and.w	r3, r3, #16
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d01f      	beq.n	800fa98 <tcp_process+0x7bc>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa5c:	4b14      	ldr	r3, [pc, #80]	; (800fab0 <tcp_process+0x7d4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d119      	bne.n	800fa98 <tcp_process+0x7bc>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d115      	bne.n	800fa98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fa6c:	4b11      	ldr	r3, [pc, #68]	; (800fab4 <tcp_process+0x7d8>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f043 0310 	orr.w	r3, r3, #16
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	4b0f      	ldr	r3, [pc, #60]	; (800fab4 <tcp_process+0x7d8>)
 800fa78:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fa7a:	e00d      	b.n	800fa98 <tcp_process+0x7bc>
    default:
      break;
 800fa7c:	bf00      	nop
 800fa7e:	e00c      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa80:	bf00      	nop
 800fa82:	e00a      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa84:	bf00      	nop
 800fa86:	e008      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa88:	bf00      	nop
 800fa8a:	e006      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa8c:	bf00      	nop
 800fa8e:	e004      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa90:	bf00      	nop
 800fa92:	e002      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa94:	bf00      	nop
 800fa96:	e000      	b.n	800fa9a <tcp_process+0x7be>
      break;
 800fa98:	bf00      	nop
  }
  return ERR_OK;
 800fa9a:	2300      	movs	r3, #0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3724      	adds	r7, #36	; 0x24
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd90      	pop	{r4, r7, pc}
 800faa4:	20008fac 	.word	0x20008fac
 800faa8:	20008fc0 	.word	0x20008fc0
 800faac:	200054d0 	.word	0x200054d0
 800fab0:	200054c8 	.word	0x200054c8
 800fab4:	200054d1 	.word	0x200054d1
 800fab8:	20008fb0 	.word	0x20008fb0

0800fabc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fabc:	b590      	push	{r4, r7, lr}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d106      	bne.n	800fada <tcp_oos_insert_segment+0x1e>
 800facc:	4b3b      	ldr	r3, [pc, #236]	; (800fbbc <tcp_oos_insert_segment+0x100>)
 800face:	f240 421f 	movw	r2, #1055	; 0x41f
 800fad2:	493b      	ldr	r1, [pc, #236]	; (800fbc0 <tcp_oos_insert_segment+0x104>)
 800fad4:	483b      	ldr	r0, [pc, #236]	; (800fbc4 <tcp_oos_insert_segment+0x108>)
 800fad6:	f008 ff9b 	bl	8018a10 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fb fa10 	bl	800af08 <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	b2db      	uxtb	r3, r3
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d028      	beq.n	800fb46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800faf4:	6838      	ldr	r0, [r7, #0]
 800faf6:	f7fe f999 	bl	800de2c <tcp_segs_free>
    next = NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	603b      	str	r3, [r7, #0]
 800fafe:	e056      	b.n	800fbae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	899b      	ldrh	r3, [r3, #12]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fb f9fd 	bl	800af08 <lwip_htons>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	f003 0301 	and.w	r3, r3, #1
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00d      	beq.n	800fb36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	899b      	ldrh	r3, [r3, #12]
 800fb20:	b29c      	uxth	r4, r3
 800fb22:	2001      	movs	r0, #1
 800fb24:	f7fb f9f0 	bl	800af08 <lwip_htons>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	4322      	orrs	r2, r4
 800fb32:	b292      	uxth	r2, r2
 800fb34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f7fe f987 	bl	800de54 <tcp_seg_free>
    while (next &&
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00e      	beq.n	800fb6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	891b      	ldrh	r3, [r3, #8]
 800fb50:	461a      	mov	r2, r3
 800fb52:	4b1d      	ldr	r3, [pc, #116]	; (800fbc8 <tcp_oos_insert_segment+0x10c>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	441a      	add	r2, r3
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	8909      	ldrh	r1, [r1, #8]
 800fb62:	440b      	add	r3, r1
 800fb64:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	daca      	bge.n	800fb00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d01e      	beq.n	800fbae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	891b      	ldrh	r3, [r3, #8]
 800fb74:	461a      	mov	r2, r3
 800fb76:	4b14      	ldr	r3, [pc, #80]	; (800fbc8 <tcp_oos_insert_segment+0x10c>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	441a      	add	r2, r3
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dd12      	ble.n	800fbae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	4b0d      	ldr	r3, [pc, #52]	; (800fbc8 <tcp_oos_insert_segment+0x10c>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	685a      	ldr	r2, [r3, #4]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	891b      	ldrh	r3, [r3, #8]
 800fba6:	4619      	mov	r1, r3
 800fba8:	4610      	mov	r0, r2
 800fbaa:	f7fc fb57 	bl	800c25c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	601a      	str	r2, [r3, #0]
}
 800fbb4:	bf00      	nop
 800fbb6:	3714      	adds	r7, #20
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd90      	pop	{r4, r7, pc}
 800fbbc:	0801dd4c 	.word	0x0801dd4c
 800fbc0:	0801e00c 	.word	0x0801e00c
 800fbc4:	0801dd98 	.word	0x0801dd98
 800fbc8:	200054c4 	.word	0x200054c4

0800fbcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fbcc:	b5b0      	push	{r4, r5, r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fbda:	e03e      	b.n	800fc5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fc fd4a 	bl	800c684 <pbuf_clen>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbfa:	8a7a      	ldrh	r2, [r7, #18]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d906      	bls.n	800fc0e <tcp_free_acked_segments+0x42>
 800fc00:	4b2a      	ldr	r3, [pc, #168]	; (800fcac <tcp_free_acked_segments+0xe0>)
 800fc02:	f240 4257 	movw	r2, #1111	; 0x457
 800fc06:	492a      	ldr	r1, [pc, #168]	; (800fcb0 <tcp_free_acked_segments+0xe4>)
 800fc08:	482a      	ldr	r0, [pc, #168]	; (800fcb4 <tcp_free_acked_segments+0xe8>)
 800fc0a:	f008 ff01 	bl	8018a10 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fc14:	8a7b      	ldrh	r3, [r7, #18]
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	891a      	ldrh	r2, [r3, #8]
 800fc24:	4b24      	ldr	r3, [pc, #144]	; (800fcb8 <tcp_free_acked_segments+0xec>)
 800fc26:	881b      	ldrh	r3, [r3, #0]
 800fc28:	4413      	add	r3, r2
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	4b22      	ldr	r3, [pc, #136]	; (800fcb8 <tcp_free_acked_segments+0xec>)
 800fc2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fc30:	6978      	ldr	r0, [r7, #20]
 800fc32:	f7fe f90f 	bl	800de54 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00c      	beq.n	800fc5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d109      	bne.n	800fc5a <tcp_free_acked_segments+0x8e>
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d106      	bne.n	800fc5a <tcp_free_acked_segments+0x8e>
 800fc4c:	4b17      	ldr	r3, [pc, #92]	; (800fcac <tcp_free_acked_segments+0xe0>)
 800fc4e:	f240 4262 	movw	r2, #1122	; 0x462
 800fc52:	491a      	ldr	r1, [pc, #104]	; (800fcbc <tcp_free_acked_segments+0xf0>)
 800fc54:	4817      	ldr	r0, [pc, #92]	; (800fcb4 <tcp_free_acked_segments+0xe8>)
 800fc56:	f008 fedb 	bl	8018a10 <iprintf>
  while (seg_list != NULL &&
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d020      	beq.n	800fca2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fb f963 	bl	800af32 <lwip_htonl>
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	891b      	ldrh	r3, [r3, #8]
 800fc72:	461d      	mov	r5, r3
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	899b      	ldrh	r3, [r3, #12]
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7fb f943 	bl	800af08 <lwip_htons>
 800fc82:	4603      	mov	r3, r0
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	f003 0303 	and.w	r3, r3, #3
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d001      	beq.n	800fc92 <tcp_free_acked_segments+0xc6>
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e000      	b.n	800fc94 <tcp_free_acked_segments+0xc8>
 800fc92:	2300      	movs	r3, #0
 800fc94:	442b      	add	r3, r5
 800fc96:	18e2      	adds	r2, r4, r3
 800fc98:	4b09      	ldr	r3, [pc, #36]	; (800fcc0 <tcp_free_acked_segments+0xf4>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	dd9c      	ble.n	800fbdc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fca2:	68bb      	ldr	r3, [r7, #8]
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bdb0      	pop	{r4, r5, r7, pc}
 800fcac:	0801dd4c 	.word	0x0801dd4c
 800fcb0:	0801e034 	.word	0x0801e034
 800fcb4:	0801dd98 	.word	0x0801dd98
 800fcb8:	200054cc 	.word	0x200054cc
 800fcbc:	0801e05c 	.word	0x0801e05c
 800fcc0:	200054c8 	.word	0x200054c8

0800fcc4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fcc4:	b5b0      	push	{r4, r5, r7, lr}
 800fcc6:	b094      	sub	sp, #80	; 0x50
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <tcp_receive+0x20>
 800fcd6:	4ba6      	ldr	r3, [pc, #664]	; (800ff70 <tcp_receive+0x2ac>)
 800fcd8:	f240 427b 	movw	r2, #1147	; 0x47b
 800fcdc:	49a5      	ldr	r1, [pc, #660]	; (800ff74 <tcp_receive+0x2b0>)
 800fcde:	48a6      	ldr	r0, [pc, #664]	; (800ff78 <tcp_receive+0x2b4>)
 800fce0:	f008 fe96 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	7d1b      	ldrb	r3, [r3, #20]
 800fce8:	2b03      	cmp	r3, #3
 800fcea:	d806      	bhi.n	800fcfa <tcp_receive+0x36>
 800fcec:	4ba0      	ldr	r3, [pc, #640]	; (800ff70 <tcp_receive+0x2ac>)
 800fcee:	f240 427c 	movw	r2, #1148	; 0x47c
 800fcf2:	49a2      	ldr	r1, [pc, #648]	; (800ff7c <tcp_receive+0x2b8>)
 800fcf4:	48a0      	ldr	r0, [pc, #640]	; (800ff78 <tcp_receive+0x2b4>)
 800fcf6:	f008 fe8b 	bl	8018a10 <iprintf>

  if (flags & TCP_ACK) {
 800fcfa:	4ba1      	ldr	r3, [pc, #644]	; (800ff80 <tcp_receive+0x2bc>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	f003 0310 	and.w	r3, r3, #16
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f000 8263 	beq.w	80101ce <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd0e:	461a      	mov	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd14:	4413      	add	r3, r2
 800fd16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd1c:	4b99      	ldr	r3, [pc, #612]	; (800ff84 <tcp_receive+0x2c0>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	db1b      	blt.n	800fd5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd2a:	4b96      	ldr	r3, [pc, #600]	; (800ff84 <tcp_receive+0x2c0>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d106      	bne.n	800fd40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd36:	4b94      	ldr	r3, [pc, #592]	; (800ff88 <tcp_receive+0x2c4>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	db0e      	blt.n	800fd5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd44:	4b90      	ldr	r3, [pc, #576]	; (800ff88 <tcp_receive+0x2c4>)
 800fd46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d125      	bne.n	800fd98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fd4c:	4b8f      	ldr	r3, [pc, #572]	; (800ff8c <tcp_receive+0x2c8>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	89db      	ldrh	r3, [r3, #14]
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d91c      	bls.n	800fd98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fd5e:	4b8b      	ldr	r3, [pc, #556]	; (800ff8c <tcp_receive+0x2c8>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	89db      	ldrh	r3, [r3, #14]
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d205      	bcs.n	800fd88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fd88:	4b7e      	ldr	r3, [pc, #504]	; (800ff84 <tcp_receive+0x2c0>)
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fd90:	4b7d      	ldr	r3, [pc, #500]	; (800ff88 <tcp_receive+0x2c4>)
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fd98:	4b7b      	ldr	r3, [pc, #492]	; (800ff88 <tcp_receive+0x2c4>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dc58      	bgt.n	800fe58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fda6:	4b7a      	ldr	r3, [pc, #488]	; (800ff90 <tcp_receive+0x2cc>)
 800fda8:	881b      	ldrh	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d14b      	bne.n	800fe46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fdb8:	4413      	add	r3, r2
 800fdba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d142      	bne.n	800fe46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	db3d      	blt.n	800fe46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fdce:	4b6e      	ldr	r3, [pc, #440]	; (800ff88 <tcp_receive+0x2c4>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d137      	bne.n	800fe46 <tcp_receive+0x182>
              found_dupack = 1;
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fde0:	2bff      	cmp	r3, #255	; 0xff
 800fde2:	d007      	beq.n	800fdf4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdea:	3301      	adds	r3, #1
 800fdec:	b2da      	uxtb	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	d91b      	bls.n	800fe36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe08:	4413      	add	r3, r2
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d30a      	bcc.n	800fe2c <tcp_receive+0x168>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe20:	4413      	add	r3, r2
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fe2a:	e004      	b.n	800fe36 <tcp_receive+0x172>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	d902      	bls.n	800fe46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f002 fb47 	bl	80124d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fe46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	f040 8160 	bne.w	801010e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe56:	e15a      	b.n	801010e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe58:	4b4b      	ldr	r3, [pc, #300]	; (800ff88 <tcp_receive+0x2c4>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe60:	1ad3      	subs	r3, r2, r3
 800fe62:	3b01      	subs	r3, #1
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f2c0 814d 	blt.w	8010104 <tcp_receive+0x440>
 800fe6a:	4b47      	ldr	r3, [pc, #284]	; (800ff88 <tcp_receive+0x2c4>)
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f300 8145 	bgt.w	8010104 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	8b5b      	ldrh	r3, [r3, #26]
 800fe7e:	f003 0304 	and.w	r3, r3, #4
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d010      	beq.n	800fea8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	8b5b      	ldrh	r3, [r3, #26]
 800fe8a:	f023 0304 	bic.w	r3, r3, #4
 800fe8e:	b29a      	uxth	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800feb6:	10db      	asrs	r3, r3, #3
 800feb8:	b21b      	sxth	r3, r3
 800feba:	b29a      	uxth	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	4413      	add	r3, r2
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	b21a      	sxth	r2, r3
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fed0:	4b2d      	ldr	r3, [pc, #180]	; (800ff88 <tcp_receive+0x2c4>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feda:	b29b      	uxth	r3, r3
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fee8:	4b27      	ldr	r3, [pc, #156]	; (800ff88 <tcp_receive+0x2c4>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	7d1b      	ldrb	r3, [r3, #20]
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	f240 8096 	bls.w	8010026 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d244      	bcs.n	800ff94 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8b5b      	ldrh	r3, [r3, #26]
 800ff0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <tcp_receive+0x256>
 800ff16:	2301      	movs	r3, #1
 800ff18:	e000      	b.n	800ff1c <tcp_receive+0x258>
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ff20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff2a:	fb12 f303 	smulbb	r3, r2, r3
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff32:	4293      	cmp	r3, r2
 800ff34:	bf28      	it	cs
 800ff36:	4613      	movcs	r3, r2
 800ff38:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff42:	4413      	add	r3, r2
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d309      	bcc.n	800ff64 <tcp_receive+0x2a0>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff58:	4413      	add	r3, r2
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff62:	e060      	b.n	8010026 <tcp_receive+0x362>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff6e:	e05a      	b.n	8010026 <tcp_receive+0x362>
 800ff70:	0801dd4c 	.word	0x0801dd4c
 800ff74:	0801e07c 	.word	0x0801e07c
 800ff78:	0801dd98 	.word	0x0801dd98
 800ff7c:	0801e098 	.word	0x0801e098
 800ff80:	200054d0 	.word	0x200054d0
 800ff84:	200054c4 	.word	0x200054c4
 800ff88:	200054c8 	.word	0x200054c8
 800ff8c:	200054b4 	.word	0x200054b4
 800ff90:	200054ce 	.word	0x200054ce
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ff9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff9c:	4413      	add	r3, r2
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d309      	bcc.n	800ffbe <tcp_receive+0x2fa>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffb2:	4413      	add	r3, r2
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ffbc:	e004      	b.n	800ffc8 <tcp_receive+0x304>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d326      	bcc.n	8010026 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffe4:	1ad3      	subs	r3, r2, r3
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fff8:	4413      	add	r3, r2
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010002:	429a      	cmp	r2, r3
 8010004:	d30a      	bcc.n	801001c <tcp_receive+0x358>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010010:	4413      	add	r3, r2
 8010012:	b29a      	uxth	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801001a:	e004      	b.n	8010026 <tcp_receive+0x362>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801002e:	4a98      	ldr	r2, [pc, #608]	; (8010290 <tcp_receive+0x5cc>)
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7ff fdcb 	bl	800fbcc <tcp_free_acked_segments>
 8010036:	4602      	mov	r2, r0
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010044:	4a93      	ldr	r2, [pc, #588]	; (8010294 <tcp_receive+0x5d0>)
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff fdc0 	bl	800fbcc <tcp_free_acked_segments>
 801004c:	4602      	mov	r2, r0
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010056:	2b00      	cmp	r3, #0
 8010058:	d104      	bne.n	8010064 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010060:	861a      	strh	r2, [r3, #48]	; 0x30
 8010062:	e002      	b.n	801006a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010074:	2b00      	cmp	r3, #0
 8010076:	d103      	bne.n	8010080 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2200      	movs	r2, #0
 801007c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010086:	4b84      	ldr	r3, [pc, #528]	; (8010298 <tcp_receive+0x5d4>)
 8010088:	881b      	ldrh	r3, [r3, #0]
 801008a:	4413      	add	r3, r2
 801008c:	b29a      	uxth	r2, r3
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	8b5b      	ldrh	r3, [r3, #26]
 8010098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801009c:	2b00      	cmp	r3, #0
 801009e:	d035      	beq.n	801010c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d118      	bne.n	80100da <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00c      	beq.n	80100ca <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fa ff38 	bl	800af32 <lwip_htonl>
 80100c2:	4603      	mov	r3, r0
 80100c4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	dc20      	bgt.n	801010c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	8b5b      	ldrh	r3, [r3, #26]
 80100ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100d2:	b29a      	uxth	r2, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100d8:	e018      	b.n	801010c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fa ff23 	bl	800af32 <lwip_htonl>
 80100ec:	4603      	mov	r3, r0
 80100ee:	1ae3      	subs	r3, r4, r3
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	dc0b      	bgt.n	801010c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	8b5b      	ldrh	r3, [r3, #26]
 80100f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010102:	e003      	b.n	801010c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f002 fbdf 	bl	80128c8 <tcp_send_empty_ack>
 801010a:	e000      	b.n	801010e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801010c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010112:	2b00      	cmp	r3, #0
 8010114:	d05b      	beq.n	80101ce <tcp_receive+0x50a>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801011a:	4b60      	ldr	r3, [pc, #384]	; (801029c <tcp_receive+0x5d8>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	1ad3      	subs	r3, r2, r3
 8010120:	2b00      	cmp	r3, #0
 8010122:	da54      	bge.n	80101ce <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010124:	4b5e      	ldr	r3, [pc, #376]	; (80102a0 <tcp_receive+0x5dc>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	b29a      	uxth	r2, r3
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801012e:	b29b      	uxth	r3, r3
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	b29b      	uxth	r3, r3
 8010134:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010138:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010142:	10db      	asrs	r3, r3, #3
 8010144:	b21b      	sxth	r3, r3
 8010146:	b29b      	uxth	r3, r3
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	b29b      	uxth	r3, r3
 801014c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010156:	b29a      	uxth	r2, r3
 8010158:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801015c:	4413      	add	r3, r2
 801015e:	b29b      	uxth	r3, r3
 8010160:	b21a      	sxth	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010166:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801016a:	2b00      	cmp	r3, #0
 801016c:	da05      	bge.n	801017a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801016e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010172:	425b      	negs	r3, r3
 8010174:	b29b      	uxth	r3, r3
 8010176:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801017a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010184:	109b      	asrs	r3, r3, #2
 8010186:	b21b      	sxth	r3, r3
 8010188:	b29b      	uxth	r3, r3
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	b29b      	uxth	r3, r3
 801018e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010198:	b29a      	uxth	r2, r3
 801019a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801019e:	4413      	add	r3, r2
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	b21a      	sxth	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80101ae:	10db      	asrs	r3, r3, #3
 80101b0:	b21b      	sxth	r3, r3
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	4413      	add	r3, r2
 80101be:	b29b      	uxth	r3, r3
 80101c0:	b21a      	sxth	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80101ce:	4b35      	ldr	r3, [pc, #212]	; (80102a4 <tcp_receive+0x5e0>)
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f000 84e1 	beq.w	8010b9a <tcp_receive+0xed6>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	7d1b      	ldrb	r3, [r3, #20]
 80101dc:	2b06      	cmp	r3, #6
 80101de:	f200 84dc 	bhi.w	8010b9a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101e6:	4b30      	ldr	r3, [pc, #192]	; (80102a8 <tcp_receive+0x5e4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	3b01      	subs	r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f2c0 808e 	blt.w	8010310 <tcp_receive+0x64c>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101f8:	4b2a      	ldr	r3, [pc, #168]	; (80102a4 <tcp_receive+0x5e0>)
 80101fa:	881b      	ldrh	r3, [r3, #0]
 80101fc:	4619      	mov	r1, r3
 80101fe:	4b2a      	ldr	r3, [pc, #168]	; (80102a8 <tcp_receive+0x5e4>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	440b      	add	r3, r1
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	3301      	adds	r3, #1
 8010208:	2b00      	cmp	r3, #0
 801020a:	f300 8081 	bgt.w	8010310 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801020e:	4b27      	ldr	r3, [pc, #156]	; (80102ac <tcp_receive+0x5e8>)
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010218:	4b23      	ldr	r3, [pc, #140]	; (80102a8 <tcp_receive+0x5e4>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010220:	4b22      	ldr	r3, [pc, #136]	; (80102ac <tcp_receive+0x5e8>)
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d106      	bne.n	8010236 <tcp_receive+0x572>
 8010228:	4b21      	ldr	r3, [pc, #132]	; (80102b0 <tcp_receive+0x5ec>)
 801022a:	f240 5294 	movw	r2, #1428	; 0x594
 801022e:	4921      	ldr	r1, [pc, #132]	; (80102b4 <tcp_receive+0x5f0>)
 8010230:	4821      	ldr	r0, [pc, #132]	; (80102b8 <tcp_receive+0x5f4>)
 8010232:	f008 fbed 	bl	8018a10 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801023c:	4293      	cmp	r3, r2
 801023e:	d906      	bls.n	801024e <tcp_receive+0x58a>
 8010240:	4b1b      	ldr	r3, [pc, #108]	; (80102b0 <tcp_receive+0x5ec>)
 8010242:	f240 5295 	movw	r2, #1429	; 0x595
 8010246:	491d      	ldr	r1, [pc, #116]	; (80102bc <tcp_receive+0x5f8>)
 8010248:	481b      	ldr	r0, [pc, #108]	; (80102b8 <tcp_receive+0x5f4>)
 801024a:	f008 fbe1 	bl	8018a10 <iprintf>
      off = (u16_t)off32;
 801024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010250:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010254:	4b15      	ldr	r3, [pc, #84]	; (80102ac <tcp_receive+0x5e8>)
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	891b      	ldrh	r3, [r3, #8]
 801025a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801025e:	429a      	cmp	r2, r3
 8010260:	d906      	bls.n	8010270 <tcp_receive+0x5ac>
 8010262:	4b13      	ldr	r3, [pc, #76]	; (80102b0 <tcp_receive+0x5ec>)
 8010264:	f240 5297 	movw	r2, #1431	; 0x597
 8010268:	4915      	ldr	r1, [pc, #84]	; (80102c0 <tcp_receive+0x5fc>)
 801026a:	4813      	ldr	r0, [pc, #76]	; (80102b8 <tcp_receive+0x5f4>)
 801026c:	f008 fbd0 	bl	8018a10 <iprintf>
      inseg.len -= off;
 8010270:	4b0e      	ldr	r3, [pc, #56]	; (80102ac <tcp_receive+0x5e8>)
 8010272:	891a      	ldrh	r2, [r3, #8]
 8010274:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	b29a      	uxth	r2, r3
 801027c:	4b0b      	ldr	r3, [pc, #44]	; (80102ac <tcp_receive+0x5e8>)
 801027e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010280:	4b0a      	ldr	r3, [pc, #40]	; (80102ac <tcp_receive+0x5e8>)
 8010282:	685b      	ldr	r3, [r3, #4]
 8010284:	891a      	ldrh	r2, [r3, #8]
 8010286:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801028e:	e029      	b.n	80102e4 <tcp_receive+0x620>
 8010290:	0801e0b4 	.word	0x0801e0b4
 8010294:	0801e0bc 	.word	0x0801e0bc
 8010298:	200054cc 	.word	0x200054cc
 801029c:	200054c8 	.word	0x200054c8
 80102a0:	20008fb4 	.word	0x20008fb4
 80102a4:	200054ce 	.word	0x200054ce
 80102a8:	200054c4 	.word	0x200054c4
 80102ac:	200054a4 	.word	0x200054a4
 80102b0:	0801dd4c 	.word	0x0801dd4c
 80102b4:	0801e0c4 	.word	0x0801e0c4
 80102b8:	0801dd98 	.word	0x0801dd98
 80102bc:	0801e0d4 	.word	0x0801e0d4
 80102c0:	0801e0e4 	.word	0x0801e0e4
        off -= p->len;
 80102c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102c6:	895b      	ldrh	r3, [r3, #10]
 80102c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80102d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80102d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80102d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102da:	2200      	movs	r2, #0
 80102dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80102de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80102e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102e6:	895b      	ldrh	r3, [r3, #10]
 80102e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d8e9      	bhi.n	80102c4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80102f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102f4:	4619      	mov	r1, r3
 80102f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80102f8:	f7fc f8b0 	bl	800c45c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010300:	4a91      	ldr	r2, [pc, #580]	; (8010548 <tcp_receive+0x884>)
 8010302:	6013      	str	r3, [r2, #0]
 8010304:	4b91      	ldr	r3, [pc, #580]	; (801054c <tcp_receive+0x888>)
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	4a8f      	ldr	r2, [pc, #572]	; (8010548 <tcp_receive+0x884>)
 801030a:	6812      	ldr	r2, [r2, #0]
 801030c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801030e:	e00d      	b.n	801032c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010310:	4b8d      	ldr	r3, [pc, #564]	; (8010548 <tcp_receive+0x884>)
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	2b00      	cmp	r3, #0
 801031c:	da06      	bge.n	801032c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	8b5b      	ldrh	r3, [r3, #26]
 8010322:	f043 0302 	orr.w	r3, r3, #2
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801032c:	4b86      	ldr	r3, [pc, #536]	; (8010548 <tcp_receive+0x884>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010334:	1ad3      	subs	r3, r2, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	f2c0 842a 	blt.w	8010b90 <tcp_receive+0xecc>
 801033c:	4b82      	ldr	r3, [pc, #520]	; (8010548 <tcp_receive+0x884>)
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010344:	6879      	ldr	r1, [r7, #4]
 8010346:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010348:	440b      	add	r3, r1
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	3301      	adds	r3, #1
 801034e:	2b00      	cmp	r3, #0
 8010350:	f300 841e 	bgt.w	8010b90 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010358:	4b7b      	ldr	r3, [pc, #492]	; (8010548 <tcp_receive+0x884>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	429a      	cmp	r2, r3
 801035e:	f040 829a 	bne.w	8010896 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010362:	4b7a      	ldr	r3, [pc, #488]	; (801054c <tcp_receive+0x888>)
 8010364:	891c      	ldrh	r4, [r3, #8]
 8010366:	4b79      	ldr	r3, [pc, #484]	; (801054c <tcp_receive+0x888>)
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	899b      	ldrh	r3, [r3, #12]
 801036c:	b29b      	uxth	r3, r3
 801036e:	4618      	mov	r0, r3
 8010370:	f7fa fdca 	bl	800af08 <lwip_htons>
 8010374:	4603      	mov	r3, r0
 8010376:	b2db      	uxtb	r3, r3
 8010378:	f003 0303 	and.w	r3, r3, #3
 801037c:	2b00      	cmp	r3, #0
 801037e:	d001      	beq.n	8010384 <tcp_receive+0x6c0>
 8010380:	2301      	movs	r3, #1
 8010382:	e000      	b.n	8010386 <tcp_receive+0x6c2>
 8010384:	2300      	movs	r3, #0
 8010386:	4423      	add	r3, r4
 8010388:	b29a      	uxth	r2, r3
 801038a:	4b71      	ldr	r3, [pc, #452]	; (8010550 <tcp_receive+0x88c>)
 801038c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010392:	4b6f      	ldr	r3, [pc, #444]	; (8010550 <tcp_receive+0x88c>)
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	429a      	cmp	r2, r3
 8010398:	d275      	bcs.n	8010486 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801039a:	4b6c      	ldr	r3, [pc, #432]	; (801054c <tcp_receive+0x888>)
 801039c:	68db      	ldr	r3, [r3, #12]
 801039e:	899b      	ldrh	r3, [r3, #12]
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fa fdb0 	bl	800af08 <lwip_htons>
 80103a8:	4603      	mov	r3, r0
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d01f      	beq.n	80103f4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80103b4:	4b65      	ldr	r3, [pc, #404]	; (801054c <tcp_receive+0x888>)
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	899b      	ldrh	r3, [r3, #12]
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	b21b      	sxth	r3, r3
 80103be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80103c2:	b21c      	sxth	r4, r3
 80103c4:	4b61      	ldr	r3, [pc, #388]	; (801054c <tcp_receive+0x888>)
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	899b      	ldrh	r3, [r3, #12]
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fa fd9b 	bl	800af08 <lwip_htons>
 80103d2:	4603      	mov	r3, r0
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80103dc:	b29b      	uxth	r3, r3
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fa fd92 	bl	800af08 <lwip_htons>
 80103e4:	4603      	mov	r3, r0
 80103e6:	b21b      	sxth	r3, r3
 80103e8:	4323      	orrs	r3, r4
 80103ea:	b21a      	sxth	r2, r3
 80103ec:	4b57      	ldr	r3, [pc, #348]	; (801054c <tcp_receive+0x888>)
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	b292      	uxth	r2, r2
 80103f2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103f8:	4b54      	ldr	r3, [pc, #336]	; (801054c <tcp_receive+0x888>)
 80103fa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80103fc:	4b53      	ldr	r3, [pc, #332]	; (801054c <tcp_receive+0x888>)
 80103fe:	68db      	ldr	r3, [r3, #12]
 8010400:	899b      	ldrh	r3, [r3, #12]
 8010402:	b29b      	uxth	r3, r3
 8010404:	4618      	mov	r0, r3
 8010406:	f7fa fd7f 	bl	800af08 <lwip_htons>
 801040a:	4603      	mov	r3, r0
 801040c:	b2db      	uxtb	r3, r3
 801040e:	f003 0302 	and.w	r3, r3, #2
 8010412:	2b00      	cmp	r3, #0
 8010414:	d005      	beq.n	8010422 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010416:	4b4d      	ldr	r3, [pc, #308]	; (801054c <tcp_receive+0x888>)
 8010418:	891b      	ldrh	r3, [r3, #8]
 801041a:	3b01      	subs	r3, #1
 801041c:	b29a      	uxth	r2, r3
 801041e:	4b4b      	ldr	r3, [pc, #300]	; (801054c <tcp_receive+0x888>)
 8010420:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010422:	4b4a      	ldr	r3, [pc, #296]	; (801054c <tcp_receive+0x888>)
 8010424:	685a      	ldr	r2, [r3, #4]
 8010426:	4b49      	ldr	r3, [pc, #292]	; (801054c <tcp_receive+0x888>)
 8010428:	891b      	ldrh	r3, [r3, #8]
 801042a:	4619      	mov	r1, r3
 801042c:	4610      	mov	r0, r2
 801042e:	f7fb ff15 	bl	800c25c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010432:	4b46      	ldr	r3, [pc, #280]	; (801054c <tcp_receive+0x888>)
 8010434:	891c      	ldrh	r4, [r3, #8]
 8010436:	4b45      	ldr	r3, [pc, #276]	; (801054c <tcp_receive+0x888>)
 8010438:	68db      	ldr	r3, [r3, #12]
 801043a:	899b      	ldrh	r3, [r3, #12]
 801043c:	b29b      	uxth	r3, r3
 801043e:	4618      	mov	r0, r3
 8010440:	f7fa fd62 	bl	800af08 <lwip_htons>
 8010444:	4603      	mov	r3, r0
 8010446:	b2db      	uxtb	r3, r3
 8010448:	f003 0303 	and.w	r3, r3, #3
 801044c:	2b00      	cmp	r3, #0
 801044e:	d001      	beq.n	8010454 <tcp_receive+0x790>
 8010450:	2301      	movs	r3, #1
 8010452:	e000      	b.n	8010456 <tcp_receive+0x792>
 8010454:	2300      	movs	r3, #0
 8010456:	4423      	add	r3, r4
 8010458:	b29a      	uxth	r2, r3
 801045a:	4b3d      	ldr	r3, [pc, #244]	; (8010550 <tcp_receive+0x88c>)
 801045c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801045e:	4b3c      	ldr	r3, [pc, #240]	; (8010550 <tcp_receive+0x88c>)
 8010460:	881b      	ldrh	r3, [r3, #0]
 8010462:	461a      	mov	r2, r3
 8010464:	4b38      	ldr	r3, [pc, #224]	; (8010548 <tcp_receive+0x884>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	441a      	add	r2, r3
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801046e:	6879      	ldr	r1, [r7, #4]
 8010470:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010472:	440b      	add	r3, r1
 8010474:	429a      	cmp	r2, r3
 8010476:	d006      	beq.n	8010486 <tcp_receive+0x7c2>
 8010478:	4b36      	ldr	r3, [pc, #216]	; (8010554 <tcp_receive+0x890>)
 801047a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801047e:	4936      	ldr	r1, [pc, #216]	; (8010558 <tcp_receive+0x894>)
 8010480:	4836      	ldr	r0, [pc, #216]	; (801055c <tcp_receive+0x898>)
 8010482:	f008 fac5 	bl	8018a10 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801048a:	2b00      	cmp	r3, #0
 801048c:	f000 80e7 	beq.w	801065e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010490:	4b2e      	ldr	r3, [pc, #184]	; (801054c <tcp_receive+0x888>)
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	899b      	ldrh	r3, [r3, #12]
 8010496:	b29b      	uxth	r3, r3
 8010498:	4618      	mov	r0, r3
 801049a:	f7fa fd35 	bl	800af08 <lwip_htons>
 801049e:	4603      	mov	r3, r0
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	f003 0301 	and.w	r3, r3, #1
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d010      	beq.n	80104cc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80104aa:	e00a      	b.n	80104c2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80104bc:	68f8      	ldr	r0, [r7, #12]
 80104be:	f7fd fcc9 	bl	800de54 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1f0      	bne.n	80104ac <tcp_receive+0x7e8>
 80104ca:	e0c8      	b.n	801065e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80104d2:	e052      	b.n	801057a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80104d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	899b      	ldrh	r3, [r3, #12]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fa fd13 	bl	800af08 <lwip_htons>
 80104e2:	4603      	mov	r3, r0
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	f003 0301 	and.w	r3, r3, #1
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d03d      	beq.n	801056a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80104ee:	4b17      	ldr	r3, [pc, #92]	; (801054c <tcp_receive+0x888>)
 80104f0:	68db      	ldr	r3, [r3, #12]
 80104f2:	899b      	ldrh	r3, [r3, #12]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fa fd06 	bl	800af08 <lwip_htons>
 80104fc:	4603      	mov	r3, r0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010504:	2b00      	cmp	r3, #0
 8010506:	d130      	bne.n	801056a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010508:	4b10      	ldr	r3, [pc, #64]	; (801054c <tcp_receive+0x888>)
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	899b      	ldrh	r3, [r3, #12]
 801050e:	b29c      	uxth	r4, r3
 8010510:	2001      	movs	r0, #1
 8010512:	f7fa fcf9 	bl	800af08 <lwip_htons>
 8010516:	4603      	mov	r3, r0
 8010518:	461a      	mov	r2, r3
 801051a:	4b0c      	ldr	r3, [pc, #48]	; (801054c <tcp_receive+0x888>)
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	4322      	orrs	r2, r4
 8010520:	b292      	uxth	r2, r2
 8010522:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010524:	4b09      	ldr	r3, [pc, #36]	; (801054c <tcp_receive+0x888>)
 8010526:	891c      	ldrh	r4, [r3, #8]
 8010528:	4b08      	ldr	r3, [pc, #32]	; (801054c <tcp_receive+0x888>)
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	899b      	ldrh	r3, [r3, #12]
 801052e:	b29b      	uxth	r3, r3
 8010530:	4618      	mov	r0, r3
 8010532:	f7fa fce9 	bl	800af08 <lwip_htons>
 8010536:	4603      	mov	r3, r0
 8010538:	b2db      	uxtb	r3, r3
 801053a:	f003 0303 	and.w	r3, r3, #3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00e      	beq.n	8010560 <tcp_receive+0x89c>
 8010542:	2301      	movs	r3, #1
 8010544:	e00d      	b.n	8010562 <tcp_receive+0x89e>
 8010546:	bf00      	nop
 8010548:	200054c4 	.word	0x200054c4
 801054c:	200054a4 	.word	0x200054a4
 8010550:	200054ce 	.word	0x200054ce
 8010554:	0801dd4c 	.word	0x0801dd4c
 8010558:	0801e0f4 	.word	0x0801e0f4
 801055c:	0801dd98 	.word	0x0801dd98
 8010560:	2300      	movs	r3, #0
 8010562:	4423      	add	r3, r4
 8010564:	b29a      	uxth	r2, r3
 8010566:	4b98      	ldr	r3, [pc, #608]	; (80107c8 <tcp_receive+0xb04>)
 8010568:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801056a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801056e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010574:	6938      	ldr	r0, [r7, #16]
 8010576:	f7fd fc6d 	bl	800de54 <tcp_seg_free>
            while (next &&
 801057a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00e      	beq.n	801059e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010580:	4b91      	ldr	r3, [pc, #580]	; (80107c8 <tcp_receive+0xb04>)
 8010582:	881b      	ldrh	r3, [r3, #0]
 8010584:	461a      	mov	r2, r3
 8010586:	4b91      	ldr	r3, [pc, #580]	; (80107cc <tcp_receive+0xb08>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	441a      	add	r2, r3
 801058c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010594:	8909      	ldrh	r1, [r1, #8]
 8010596:	440b      	add	r3, r1
 8010598:	1ad3      	subs	r3, r2, r3
            while (next &&
 801059a:	2b00      	cmp	r3, #0
 801059c:	da9a      	bge.n	80104d4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801059e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d059      	beq.n	8010658 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80105a4:	4b88      	ldr	r3, [pc, #544]	; (80107c8 <tcp_receive+0xb04>)
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	461a      	mov	r2, r3
 80105aa:	4b88      	ldr	r3, [pc, #544]	; (80107cc <tcp_receive+0xb08>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	441a      	add	r2, r3
 80105b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	dd4d      	ble.n	8010658 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80105bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	4b81      	ldr	r3, [pc, #516]	; (80107cc <tcp_receive+0xb08>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	4b80      	ldr	r3, [pc, #512]	; (80107d0 <tcp_receive+0xb0c>)
 80105d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80105d2:	4b7f      	ldr	r3, [pc, #508]	; (80107d0 <tcp_receive+0xb0c>)
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	899b      	ldrh	r3, [r3, #12]
 80105d8:	b29b      	uxth	r3, r3
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fa fc94 	bl	800af08 <lwip_htons>
 80105e0:	4603      	mov	r3, r0
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	f003 0302 	and.w	r3, r3, #2
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d005      	beq.n	80105f8 <tcp_receive+0x934>
                inseg.len -= 1;
 80105ec:	4b78      	ldr	r3, [pc, #480]	; (80107d0 <tcp_receive+0xb0c>)
 80105ee:	891b      	ldrh	r3, [r3, #8]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	4b76      	ldr	r3, [pc, #472]	; (80107d0 <tcp_receive+0xb0c>)
 80105f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80105f8:	4b75      	ldr	r3, [pc, #468]	; (80107d0 <tcp_receive+0xb0c>)
 80105fa:	685a      	ldr	r2, [r3, #4]
 80105fc:	4b74      	ldr	r3, [pc, #464]	; (80107d0 <tcp_receive+0xb0c>)
 80105fe:	891b      	ldrh	r3, [r3, #8]
 8010600:	4619      	mov	r1, r3
 8010602:	4610      	mov	r0, r2
 8010604:	f7fb fe2a 	bl	800c25c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010608:	4b71      	ldr	r3, [pc, #452]	; (80107d0 <tcp_receive+0xb0c>)
 801060a:	891c      	ldrh	r4, [r3, #8]
 801060c:	4b70      	ldr	r3, [pc, #448]	; (80107d0 <tcp_receive+0xb0c>)
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	b29b      	uxth	r3, r3
 8010614:	4618      	mov	r0, r3
 8010616:	f7fa fc77 	bl	800af08 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	b2db      	uxtb	r3, r3
 801061e:	f003 0303 	and.w	r3, r3, #3
 8010622:	2b00      	cmp	r3, #0
 8010624:	d001      	beq.n	801062a <tcp_receive+0x966>
 8010626:	2301      	movs	r3, #1
 8010628:	e000      	b.n	801062c <tcp_receive+0x968>
 801062a:	2300      	movs	r3, #0
 801062c:	4423      	add	r3, r4
 801062e:	b29a      	uxth	r2, r3
 8010630:	4b65      	ldr	r3, [pc, #404]	; (80107c8 <tcp_receive+0xb04>)
 8010632:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010634:	4b64      	ldr	r3, [pc, #400]	; (80107c8 <tcp_receive+0xb04>)
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	4b64      	ldr	r3, [pc, #400]	; (80107cc <tcp_receive+0xb08>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	441a      	add	r2, r3
 8010640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	429a      	cmp	r2, r3
 8010648:	d006      	beq.n	8010658 <tcp_receive+0x994>
 801064a:	4b62      	ldr	r3, [pc, #392]	; (80107d4 <tcp_receive+0xb10>)
 801064c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8010650:	4961      	ldr	r1, [pc, #388]	; (80107d8 <tcp_receive+0xb14>)
 8010652:	4862      	ldr	r0, [pc, #392]	; (80107dc <tcp_receive+0xb18>)
 8010654:	f008 f9dc 	bl	8018a10 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801065c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801065e:	4b5a      	ldr	r3, [pc, #360]	; (80107c8 <tcp_receive+0xb04>)
 8010660:	881b      	ldrh	r3, [r3, #0]
 8010662:	461a      	mov	r2, r3
 8010664:	4b59      	ldr	r3, [pc, #356]	; (80107cc <tcp_receive+0xb08>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	441a      	add	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010672:	4b55      	ldr	r3, [pc, #340]	; (80107c8 <tcp_receive+0xb04>)
 8010674:	881b      	ldrh	r3, [r3, #0]
 8010676:	429a      	cmp	r2, r3
 8010678:	d206      	bcs.n	8010688 <tcp_receive+0x9c4>
 801067a:	4b56      	ldr	r3, [pc, #344]	; (80107d4 <tcp_receive+0xb10>)
 801067c:	f240 6207 	movw	r2, #1543	; 0x607
 8010680:	4957      	ldr	r1, [pc, #348]	; (80107e0 <tcp_receive+0xb1c>)
 8010682:	4856      	ldr	r0, [pc, #344]	; (80107dc <tcp_receive+0xb18>)
 8010684:	f008 f9c4 	bl	8018a10 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801068c:	4b4e      	ldr	r3, [pc, #312]	; (80107c8 <tcp_receive+0xb04>)
 801068e:	881b      	ldrh	r3, [r3, #0]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	b29a      	uxth	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7fc feb9 	bl	800d410 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801069e:	4b4c      	ldr	r3, [pc, #304]	; (80107d0 <tcp_receive+0xb0c>)
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	891b      	ldrh	r3, [r3, #8]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d006      	beq.n	80106b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80106a8:	4b49      	ldr	r3, [pc, #292]	; (80107d0 <tcp_receive+0xb0c>)
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	4a4d      	ldr	r2, [pc, #308]	; (80107e4 <tcp_receive+0xb20>)
 80106ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80106b0:	4b47      	ldr	r3, [pc, #284]	; (80107d0 <tcp_receive+0xb0c>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106b6:	4b46      	ldr	r3, [pc, #280]	; (80107d0 <tcp_receive+0xb0c>)
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	899b      	ldrh	r3, [r3, #12]
 80106bc:	b29b      	uxth	r3, r3
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fa fc22 	bl	800af08 <lwip_htons>
 80106c4:	4603      	mov	r3, r0
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	f003 0301 	and.w	r3, r3, #1
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 80b8 	beq.w	8010842 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80106d2:	4b45      	ldr	r3, [pc, #276]	; (80107e8 <tcp_receive+0xb24>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	f043 0320 	orr.w	r3, r3, #32
 80106da:	b2da      	uxtb	r2, r3
 80106dc:	4b42      	ldr	r3, [pc, #264]	; (80107e8 <tcp_receive+0xb24>)
 80106de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80106e0:	e0af      	b.n	8010842 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	4a36      	ldr	r2, [pc, #216]	; (80107cc <tcp_receive+0xb08>)
 80106f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	891b      	ldrh	r3, [r3, #8]
 80106f8:	461c      	mov	r4, r3
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	899b      	ldrh	r3, [r3, #12]
 8010700:	b29b      	uxth	r3, r3
 8010702:	4618      	mov	r0, r3
 8010704:	f7fa fc00 	bl	800af08 <lwip_htons>
 8010708:	4603      	mov	r3, r0
 801070a:	b2db      	uxtb	r3, r3
 801070c:	f003 0303 	and.w	r3, r3, #3
 8010710:	2b00      	cmp	r3, #0
 8010712:	d001      	beq.n	8010718 <tcp_receive+0xa54>
 8010714:	2301      	movs	r3, #1
 8010716:	e000      	b.n	801071a <tcp_receive+0xa56>
 8010718:	2300      	movs	r3, #0
 801071a:	191a      	adds	r2, r3, r4
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010720:	441a      	add	r2, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801072a:	461c      	mov	r4, r3
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	891b      	ldrh	r3, [r3, #8]
 8010730:	461d      	mov	r5, r3
 8010732:	68bb      	ldr	r3, [r7, #8]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	899b      	ldrh	r3, [r3, #12]
 8010738:	b29b      	uxth	r3, r3
 801073a:	4618      	mov	r0, r3
 801073c:	f7fa fbe4 	bl	800af08 <lwip_htons>
 8010740:	4603      	mov	r3, r0
 8010742:	b2db      	uxtb	r3, r3
 8010744:	f003 0303 	and.w	r3, r3, #3
 8010748:	2b00      	cmp	r3, #0
 801074a:	d001      	beq.n	8010750 <tcp_receive+0xa8c>
 801074c:	2301      	movs	r3, #1
 801074e:	e000      	b.n	8010752 <tcp_receive+0xa8e>
 8010750:	2300      	movs	r3, #0
 8010752:	442b      	add	r3, r5
 8010754:	429c      	cmp	r4, r3
 8010756:	d206      	bcs.n	8010766 <tcp_receive+0xaa2>
 8010758:	4b1e      	ldr	r3, [pc, #120]	; (80107d4 <tcp_receive+0xb10>)
 801075a:	f240 622c 	movw	r2, #1580	; 0x62c
 801075e:	4923      	ldr	r1, [pc, #140]	; (80107ec <tcp_receive+0xb28>)
 8010760:	481e      	ldr	r0, [pc, #120]	; (80107dc <tcp_receive+0xb18>)
 8010762:	f008 f955 	bl	8018a10 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	891b      	ldrh	r3, [r3, #8]
 801076a:	461c      	mov	r4, r3
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	b29b      	uxth	r3, r3
 8010774:	4618      	mov	r0, r3
 8010776:	f7fa fbc7 	bl	800af08 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	f003 0303 	and.w	r3, r3, #3
 8010782:	2b00      	cmp	r3, #0
 8010784:	d001      	beq.n	801078a <tcp_receive+0xac6>
 8010786:	2301      	movs	r3, #1
 8010788:	e000      	b.n	801078c <tcp_receive+0xac8>
 801078a:	2300      	movs	r3, #0
 801078c:	1919      	adds	r1, r3, r4
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010792:	b28b      	uxth	r3, r1
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	b29a      	uxth	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7fc fe37 	bl	800d410 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	891b      	ldrh	r3, [r3, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d028      	beq.n	80107fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80107ac:	4b0d      	ldr	r3, [pc, #52]	; (80107e4 <tcp_receive+0xb20>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d01d      	beq.n	80107f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80107b4:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <tcp_receive+0xb20>)
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	4619      	mov	r1, r3
 80107be:	4610      	mov	r0, r2
 80107c0:	f7fb ffa0 	bl	800c704 <pbuf_cat>
 80107c4:	e018      	b.n	80107f8 <tcp_receive+0xb34>
 80107c6:	bf00      	nop
 80107c8:	200054ce 	.word	0x200054ce
 80107cc:	200054c4 	.word	0x200054c4
 80107d0:	200054a4 	.word	0x200054a4
 80107d4:	0801dd4c 	.word	0x0801dd4c
 80107d8:	0801e12c 	.word	0x0801e12c
 80107dc:	0801dd98 	.word	0x0801dd98
 80107e0:	0801e168 	.word	0x0801e168
 80107e4:	200054d4 	.word	0x200054d4
 80107e8:	200054d1 	.word	0x200054d1
 80107ec:	0801e188 	.word	0x0801e188
            } else {
              recv_data = cseg->p;
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	4a70      	ldr	r2, [pc, #448]	; (80109b8 <tcp_receive+0xcf4>)
 80107f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	2200      	movs	r2, #0
 80107fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	899b      	ldrh	r3, [r3, #12]
 8010804:	b29b      	uxth	r3, r3
 8010806:	4618      	mov	r0, r3
 8010808:	f7fa fb7e 	bl	800af08 <lwip_htons>
 801080c:	4603      	mov	r3, r0
 801080e:	b2db      	uxtb	r3, r3
 8010810:	f003 0301 	and.w	r3, r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00d      	beq.n	8010834 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010818:	4b68      	ldr	r3, [pc, #416]	; (80109bc <tcp_receive+0xcf8>)
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	f043 0320 	orr.w	r3, r3, #32
 8010820:	b2da      	uxtb	r2, r3
 8010822:	4b66      	ldr	r3, [pc, #408]	; (80109bc <tcp_receive+0xcf8>)
 8010824:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	7d1b      	ldrb	r3, [r3, #20]
 801082a:	2b04      	cmp	r3, #4
 801082c:	d102      	bne.n	8010834 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2207      	movs	r2, #7
 8010832:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801083c:	68b8      	ldr	r0, [r7, #8]
 801083e:	f7fd fb09 	bl	800de54 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010846:	2b00      	cmp	r3, #0
 8010848:	d008      	beq.n	801085c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	685a      	ldr	r2, [r3, #4]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010856:	429a      	cmp	r2, r3
 8010858:	f43f af43 	beq.w	80106e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	8b5b      	ldrh	r3, [r3, #26]
 8010860:	f003 0301 	and.w	r3, r3, #1
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00e      	beq.n	8010886 <tcp_receive+0xbc2>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	8b5b      	ldrh	r3, [r3, #26]
 801086c:	f023 0301 	bic.w	r3, r3, #1
 8010870:	b29a      	uxth	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	835a      	strh	r2, [r3, #26]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	8b5b      	ldrh	r3, [r3, #26]
 801087a:	f043 0302 	orr.w	r3, r3, #2
 801087e:	b29a      	uxth	r2, r3
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010884:	e188      	b.n	8010b98 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8b5b      	ldrh	r3, [r3, #26]
 801088a:	f043 0301 	orr.w	r3, r3, #1
 801088e:	b29a      	uxth	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010894:	e180      	b.n	8010b98 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801089e:	4848      	ldr	r0, [pc, #288]	; (80109c0 <tcp_receive+0xcfc>)
 80108a0:	f7fd faf0 	bl	800de84 <tcp_seg_copy>
 80108a4:	4602      	mov	r2, r0
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	675a      	str	r2, [r3, #116]	; 0x74
 80108aa:	e16d      	b.n	8010b88 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80108ac:	2300      	movs	r3, #0
 80108ae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80108b6:	e157      	b.n	8010b68 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80108b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	4b41      	ldr	r3, [pc, #260]	; (80109c4 <tcp_receive+0xd00>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d11d      	bne.n	8010902 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80108c6:	4b3e      	ldr	r3, [pc, #248]	; (80109c0 <tcp_receive+0xcfc>)
 80108c8:	891a      	ldrh	r2, [r3, #8]
 80108ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108cc:	891b      	ldrh	r3, [r3, #8]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	f240 814f 	bls.w	8010b72 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80108d4:	483a      	ldr	r0, [pc, #232]	; (80109c0 <tcp_receive+0xcfc>)
 80108d6:	f7fd fad5 	bl	800de84 <tcp_seg_copy>
 80108da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f000 8149 	beq.w	8010b76 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80108e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d003      	beq.n	80108f2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80108ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	601a      	str	r2, [r3, #0]
 80108f0:	e002      	b.n	80108f8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80108f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108fa:	6978      	ldr	r0, [r7, #20]
 80108fc:	f7ff f8de 	bl	800fabc <tcp_oos_insert_segment>
                }
                break;
 8010900:	e139      	b.n	8010b76 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010904:	2b00      	cmp	r3, #0
 8010906:	d117      	bne.n	8010938 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010908:	4b2e      	ldr	r3, [pc, #184]	; (80109c4 <tcp_receive+0xd00>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	1ad3      	subs	r3, r2, r3
 8010914:	2b00      	cmp	r3, #0
 8010916:	da57      	bge.n	80109c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010918:	4829      	ldr	r0, [pc, #164]	; (80109c0 <tcp_receive+0xcfc>)
 801091a:	f7fd fab3 	bl	800de84 <tcp_seg_copy>
 801091e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010920:	69bb      	ldr	r3, [r7, #24]
 8010922:	2b00      	cmp	r3, #0
 8010924:	f000 8129 	beq.w	8010b7a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	69ba      	ldr	r2, [r7, #24]
 801092c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801092e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010930:	69b8      	ldr	r0, [r7, #24]
 8010932:	f7ff f8c3 	bl	800fabc <tcp_oos_insert_segment>
                  }
                  break;
 8010936:	e120      	b.n	8010b7a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010938:	4b22      	ldr	r3, [pc, #136]	; (80109c4 <tcp_receive+0xd00>)
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	3b01      	subs	r3, #1
 8010946:	2b00      	cmp	r3, #0
 8010948:	db3e      	blt.n	80109c8 <tcp_receive+0xd04>
 801094a:	4b1e      	ldr	r3, [pc, #120]	; (80109c4 <tcp_receive+0xd00>)
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	3301      	adds	r3, #1
 8010958:	2b00      	cmp	r3, #0
 801095a:	dc35      	bgt.n	80109c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801095c:	4818      	ldr	r0, [pc, #96]	; (80109c0 <tcp_receive+0xcfc>)
 801095e:	f7fd fa91 	bl	800de84 <tcp_seg_copy>
 8010962:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 8109 	beq.w	8010b7e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010974:	8912      	ldrh	r2, [r2, #8]
 8010976:	441a      	add	r2, r3
 8010978:	4b12      	ldr	r3, [pc, #72]	; (80109c4 <tcp_receive+0xd00>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	2b00      	cmp	r3, #0
 8010980:	dd12      	ble.n	80109a8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010982:	4b10      	ldr	r3, [pc, #64]	; (80109c4 <tcp_receive+0xd00>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	b29a      	uxth	r2, r3
 8010988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	b29b      	uxth	r3, r3
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	b29a      	uxth	r2, r3
 8010994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010996:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099a:	685a      	ldr	r2, [r3, #4]
 801099c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099e:	891b      	ldrh	r3, [r3, #8]
 80109a0:	4619      	mov	r1, r3
 80109a2:	4610      	mov	r0, r2
 80109a4:	f7fb fc5a 	bl	800c25c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80109a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109aa:	69fa      	ldr	r2, [r7, #28]
 80109ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80109ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109b0:	69f8      	ldr	r0, [r7, #28]
 80109b2:	f7ff f883 	bl	800fabc <tcp_oos_insert_segment>
                  }
                  break;
 80109b6:	e0e2      	b.n	8010b7e <tcp_receive+0xeba>
 80109b8:	200054d4 	.word	0x200054d4
 80109bc:	200054d1 	.word	0x200054d1
 80109c0:	200054a4 	.word	0x200054a4
 80109c4:	200054c4 	.word	0x200054c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80109c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80109cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	f040 80c6 	bne.w	8010b62 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80109d6:	4b80      	ldr	r3, [pc, #512]	; (8010bd8 <tcp_receive+0xf14>)
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	68db      	ldr	r3, [r3, #12]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f340 80bd 	ble.w	8010b62 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80109e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	899b      	ldrh	r3, [r3, #12]
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fa fa89 	bl	800af08 <lwip_htons>
 80109f6:	4603      	mov	r3, r0
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	f003 0301 	and.w	r3, r3, #1
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f040 80bf 	bne.w	8010b82 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010a04:	4875      	ldr	r0, [pc, #468]	; (8010bdc <tcp_receive+0xf18>)
 8010a06:	f7fd fa3d 	bl	800de84 <tcp_seg_copy>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 80b6 	beq.w	8010b86 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a22:	8912      	ldrh	r2, [r2, #8]
 8010a24:	441a      	add	r2, r3
 8010a26:	4b6c      	ldr	r3, [pc, #432]	; (8010bd8 <tcp_receive+0xf14>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	1ad3      	subs	r3, r2, r3
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dd12      	ble.n	8010a56 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010a30:	4b69      	ldr	r3, [pc, #420]	; (8010bd8 <tcp_receive+0xf14>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a38:	68db      	ldr	r3, [r3, #12]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	1ad3      	subs	r3, r2, r3
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	685a      	ldr	r2, [r3, #4]
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	891b      	ldrh	r3, [r3, #8]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4610      	mov	r0, r2
 8010a52:	f7fb fc03 	bl	800c25c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010a56:	4b62      	ldr	r3, [pc, #392]	; (8010be0 <tcp_receive+0xf1c>)
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	461a      	mov	r2, r3
 8010a5c:	4b5e      	ldr	r3, [pc, #376]	; (8010bd8 <tcp_receive+0xf14>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	441a      	add	r2, r3
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a66:	6879      	ldr	r1, [r7, #4]
 8010a68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a6a:	440b      	add	r3, r1
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f340 8089 	ble.w	8010b86 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68db      	ldr	r3, [r3, #12]
 8010a7a:	899b      	ldrh	r3, [r3, #12]
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fa fa42 	bl	800af08 <lwip_htons>
 8010a84:	4603      	mov	r3, r0
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d022      	beq.n	8010ad6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	899b      	ldrh	r3, [r3, #12]
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	b21b      	sxth	r3, r3
 8010a9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010aa0:	b21c      	sxth	r4, r3
 8010aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	899b      	ldrh	r3, [r3, #12]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fa fa2b 	bl	800af08 <lwip_htons>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fa fa22 	bl	800af08 <lwip_htons>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	b21b      	sxth	r3, r3
 8010ac8:	4323      	orrs	r3, r4
 8010aca:	b21a      	sxth	r2, r3
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	b292      	uxth	r2, r2
 8010ad4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b299      	uxth	r1, r3
 8010ae4:	4b3c      	ldr	r3, [pc, #240]	; (8010bd8 <tcp_receive+0xf14>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	1a8a      	subs	r2, r1, r2
 8010af0:	b292      	uxth	r2, r2
 8010af2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	685a      	ldr	r2, [r3, #4]
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	891b      	ldrh	r3, [r3, #8]
 8010b00:	4619      	mov	r1, r3
 8010b02:	4610      	mov	r0, r2
 8010b04:	f7fb fbaa 	bl	800c25c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	891c      	ldrh	r4, [r3, #8]
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	68db      	ldr	r3, [r3, #12]
 8010b14:	899b      	ldrh	r3, [r3, #12]
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fa f9f5 	bl	800af08 <lwip_htons>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	f003 0303 	and.w	r3, r3, #3
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d001      	beq.n	8010b2e <tcp_receive+0xe6a>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	e000      	b.n	8010b30 <tcp_receive+0xe6c>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	4423      	add	r3, r4
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	4b2a      	ldr	r3, [pc, #168]	; (8010be0 <tcp_receive+0xf1c>)
 8010b36:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b38:	4b29      	ldr	r3, [pc, #164]	; (8010be0 <tcp_receive+0xf1c>)
 8010b3a:	881b      	ldrh	r3, [r3, #0]
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	4b26      	ldr	r3, [pc, #152]	; (8010bd8 <tcp_receive+0xf14>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	441a      	add	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b48:	6879      	ldr	r1, [r7, #4]
 8010b4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b4c:	440b      	add	r3, r1
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d019      	beq.n	8010b86 <tcp_receive+0xec2>
 8010b52:	4b24      	ldr	r3, [pc, #144]	; (8010be4 <tcp_receive+0xf20>)
 8010b54:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010b58:	4923      	ldr	r1, [pc, #140]	; (8010be8 <tcp_receive+0xf24>)
 8010b5a:	4824      	ldr	r0, [pc, #144]	; (8010bec <tcp_receive+0xf28>)
 8010b5c:	f007 ff58 	bl	8018a10 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010b60:	e011      	b.n	8010b86 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f47f aea4 	bne.w	80108b8 <tcp_receive+0xbf4>
 8010b70:	e00a      	b.n	8010b88 <tcp_receive+0xec4>
                break;
 8010b72:	bf00      	nop
 8010b74:	e008      	b.n	8010b88 <tcp_receive+0xec4>
                break;
 8010b76:	bf00      	nop
 8010b78:	e006      	b.n	8010b88 <tcp_receive+0xec4>
                  break;
 8010b7a:	bf00      	nop
 8010b7c:	e004      	b.n	8010b88 <tcp_receive+0xec4>
                  break;
 8010b7e:	bf00      	nop
 8010b80:	e002      	b.n	8010b88 <tcp_receive+0xec4>
                  break;
 8010b82:	bf00      	nop
 8010b84:	e000      	b.n	8010b88 <tcp_receive+0xec4>
                break;
 8010b86:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f001 fe9d 	bl	80128c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010b8e:	e003      	b.n	8010b98 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 fe99 	bl	80128c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b96:	e01a      	b.n	8010bce <tcp_receive+0xf0a>
 8010b98:	e019      	b.n	8010bce <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010b9a:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <tcp_receive+0xf14>)
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba2:	1ad3      	subs	r3, r2, r3
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	db0a      	blt.n	8010bbe <tcp_receive+0xefa>
 8010ba8:	4b0b      	ldr	r3, [pc, #44]	; (8010bd8 <tcp_receive+0xf14>)
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb0:	6879      	ldr	r1, [r7, #4]
 8010bb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bb4:	440b      	add	r3, r1
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	3301      	adds	r3, #1
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dd07      	ble.n	8010bce <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8b5b      	ldrh	r3, [r3, #26]
 8010bc2:	f043 0302 	orr.w	r3, r3, #2
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010bcc:	e7ff      	b.n	8010bce <tcp_receive+0xf0a>
 8010bce:	bf00      	nop
 8010bd0:	3750      	adds	r7, #80	; 0x50
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	200054c4 	.word	0x200054c4
 8010bdc:	200054a4 	.word	0x200054a4
 8010be0:	200054ce 	.word	0x200054ce
 8010be4:	0801dd4c 	.word	0x0801dd4c
 8010be8:	0801e0f4 	.word	0x0801e0f4
 8010bec:	0801dd98 	.word	0x0801dd98

08010bf0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010bf6:	4b15      	ldr	r3, [pc, #84]	; (8010c4c <tcp_get_next_optbyte+0x5c>)
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	1c5a      	adds	r2, r3, #1
 8010bfc:	b291      	uxth	r1, r2
 8010bfe:	4a13      	ldr	r2, [pc, #76]	; (8010c4c <tcp_get_next_optbyte+0x5c>)
 8010c00:	8011      	strh	r1, [r2, #0]
 8010c02:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010c04:	4b12      	ldr	r3, [pc, #72]	; (8010c50 <tcp_get_next_optbyte+0x60>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d004      	beq.n	8010c16 <tcp_get_next_optbyte+0x26>
 8010c0c:	4b11      	ldr	r3, [pc, #68]	; (8010c54 <tcp_get_next_optbyte+0x64>)
 8010c0e:	881b      	ldrh	r3, [r3, #0]
 8010c10:	88fa      	ldrh	r2, [r7, #6]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d208      	bcs.n	8010c28 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010c16:	4b10      	ldr	r3, [pc, #64]	; (8010c58 <tcp_get_next_optbyte+0x68>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	3314      	adds	r3, #20
 8010c1c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010c1e:	88fb      	ldrh	r3, [r7, #6]
 8010c20:	683a      	ldr	r2, [r7, #0]
 8010c22:	4413      	add	r3, r2
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	e00b      	b.n	8010c40 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010c28:	88fb      	ldrh	r3, [r7, #6]
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	4b09      	ldr	r3, [pc, #36]	; (8010c54 <tcp_get_next_optbyte+0x64>)
 8010c2e:	881b      	ldrh	r3, [r3, #0]
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	1ad3      	subs	r3, r2, r3
 8010c34:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010c36:	4b06      	ldr	r3, [pc, #24]	; (8010c50 <tcp_get_next_optbyte+0x60>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	797b      	ldrb	r3, [r7, #5]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr
 8010c4c:	200054c0 	.word	0x200054c0
 8010c50:	200054bc 	.word	0x200054bc
 8010c54:	200054ba 	.word	0x200054ba
 8010c58:	200054b4 	.word	0x200054b4

08010c5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d106      	bne.n	8010c78 <tcp_parseopt+0x1c>
 8010c6a:	4b31      	ldr	r3, [pc, #196]	; (8010d30 <tcp_parseopt+0xd4>)
 8010c6c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010c70:	4930      	ldr	r1, [pc, #192]	; (8010d34 <tcp_parseopt+0xd8>)
 8010c72:	4831      	ldr	r0, [pc, #196]	; (8010d38 <tcp_parseopt+0xdc>)
 8010c74:	f007 fecc 	bl	8018a10 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010c78:	4b30      	ldr	r3, [pc, #192]	; (8010d3c <tcp_parseopt+0xe0>)
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d053      	beq.n	8010d28 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010c80:	4b2f      	ldr	r3, [pc, #188]	; (8010d40 <tcp_parseopt+0xe4>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	801a      	strh	r2, [r3, #0]
 8010c86:	e043      	b.n	8010d10 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010c88:	f7ff ffb2 	bl	8010bf0 <tcp_get_next_optbyte>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010c90:	7bfb      	ldrb	r3, [r7, #15]
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d03c      	beq.n	8010d10 <tcp_parseopt+0xb4>
 8010c96:	2b02      	cmp	r3, #2
 8010c98:	d002      	beq.n	8010ca0 <tcp_parseopt+0x44>
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d03f      	beq.n	8010d1e <tcp_parseopt+0xc2>
 8010c9e:	e026      	b.n	8010cee <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ca0:	f7ff ffa6 	bl	8010bf0 <tcp_get_next_optbyte>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b04      	cmp	r3, #4
 8010ca8:	d13b      	bne.n	8010d22 <tcp_parseopt+0xc6>
 8010caa:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <tcp_parseopt+0xe4>)
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	3302      	adds	r3, #2
 8010cb0:	4a22      	ldr	r2, [pc, #136]	; (8010d3c <tcp_parseopt+0xe0>)
 8010cb2:	8812      	ldrh	r2, [r2, #0]
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	dc34      	bgt.n	8010d22 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010cb8:	f7ff ff9a 	bl	8010bf0 <tcp_get_next_optbyte>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	021b      	lsls	r3, r3, #8
 8010cc2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010cc4:	f7ff ff94 	bl	8010bf0 <tcp_get_next_optbyte>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	89bb      	ldrh	r3, [r7, #12]
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010cd2:	89bb      	ldrh	r3, [r7, #12]
 8010cd4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010cd8:	d804      	bhi.n	8010ce4 <tcp_parseopt+0x88>
 8010cda:	89bb      	ldrh	r3, [r7, #12]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d001      	beq.n	8010ce4 <tcp_parseopt+0x88>
 8010ce0:	89ba      	ldrh	r2, [r7, #12]
 8010ce2:	e001      	b.n	8010ce8 <tcp_parseopt+0x8c>
 8010ce4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010cec:	e010      	b.n	8010d10 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010cee:	f7ff ff7f 	bl	8010bf0 <tcp_get_next_optbyte>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010cf6:	7afb      	ldrb	r3, [r7, #11]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d914      	bls.n	8010d26 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010cfc:	7afb      	ldrb	r3, [r7, #11]
 8010cfe:	b29a      	uxth	r2, r3
 8010d00:	4b0f      	ldr	r3, [pc, #60]	; (8010d40 <tcp_parseopt+0xe4>)
 8010d02:	881b      	ldrh	r3, [r3, #0]
 8010d04:	4413      	add	r3, r2
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	3b02      	subs	r3, #2
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	4b0c      	ldr	r3, [pc, #48]	; (8010d40 <tcp_parseopt+0xe4>)
 8010d0e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010d10:	4b0b      	ldr	r3, [pc, #44]	; (8010d40 <tcp_parseopt+0xe4>)
 8010d12:	881a      	ldrh	r2, [r3, #0]
 8010d14:	4b09      	ldr	r3, [pc, #36]	; (8010d3c <tcp_parseopt+0xe0>)
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d3b5      	bcc.n	8010c88 <tcp_parseopt+0x2c>
 8010d1c:	e004      	b.n	8010d28 <tcp_parseopt+0xcc>
          return;
 8010d1e:	bf00      	nop
 8010d20:	e002      	b.n	8010d28 <tcp_parseopt+0xcc>
            return;
 8010d22:	bf00      	nop
 8010d24:	e000      	b.n	8010d28 <tcp_parseopt+0xcc>
            return;
 8010d26:	bf00      	nop
      }
    }
  }
}
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	0801dd4c 	.word	0x0801dd4c
 8010d34:	0801e1b0 	.word	0x0801e1b0
 8010d38:	0801dd98 	.word	0x0801dd98
 8010d3c:	200054b8 	.word	0x200054b8
 8010d40:	200054c0 	.word	0x200054c0

08010d44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010d44:	b480      	push	{r7}
 8010d46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010d48:	4b05      	ldr	r3, [pc, #20]	; (8010d60 <tcp_trigger_input_pcb_close+0x1c>)
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	f043 0310 	orr.w	r3, r3, #16
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	4b03      	ldr	r3, [pc, #12]	; (8010d60 <tcp_trigger_input_pcb_close+0x1c>)
 8010d54:	701a      	strb	r2, [r3, #0]
}
 8010d56:	bf00      	nop
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	200054d1 	.word	0x200054d1

08010d64 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00a      	beq.n	8010d8c <tcp_route+0x28>
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	7a1b      	ldrb	r3, [r3, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d006      	beq.n	8010d8c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	7a1b      	ldrb	r3, [r3, #8]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fb f866 	bl	800be54 <netif_get_by_index>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	e003      	b.n	8010d94 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f003 fc5d 	bl	801464c <ip4_route>
 8010d92:	4603      	mov	r3, r0
  }
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010d9c:	b590      	push	{r4, r7, lr}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	60f8      	str	r0, [r7, #12]
 8010da4:	60b9      	str	r1, [r7, #8]
 8010da6:	603b      	str	r3, [r7, #0]
 8010da8:	4613      	mov	r3, r2
 8010daa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d105      	bne.n	8010dbe <tcp_create_segment+0x22>
 8010db2:	4b44      	ldr	r3, [pc, #272]	; (8010ec4 <tcp_create_segment+0x128>)
 8010db4:	22a3      	movs	r2, #163	; 0xa3
 8010db6:	4944      	ldr	r1, [pc, #272]	; (8010ec8 <tcp_create_segment+0x12c>)
 8010db8:	4844      	ldr	r0, [pc, #272]	; (8010ecc <tcp_create_segment+0x130>)
 8010dba:	f007 fe29 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d105      	bne.n	8010dd0 <tcp_create_segment+0x34>
 8010dc4:	4b3f      	ldr	r3, [pc, #252]	; (8010ec4 <tcp_create_segment+0x128>)
 8010dc6:	22a4      	movs	r2, #164	; 0xa4
 8010dc8:	4941      	ldr	r1, [pc, #260]	; (8010ed0 <tcp_create_segment+0x134>)
 8010dca:	4840      	ldr	r0, [pc, #256]	; (8010ecc <tcp_create_segment+0x130>)
 8010dcc:	f007 fe20 	bl	8018a10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010dd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	f003 0304 	and.w	r3, r3, #4
 8010ddc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010dde:	2003      	movs	r0, #3
 8010de0:	f7fa fd48 	bl	800b874 <memp_malloc>
 8010de4:	6138      	str	r0, [r7, #16]
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d104      	bne.n	8010df6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010dec:	68b8      	ldr	r0, [r7, #8]
 8010dee:	f7fb fbbb 	bl	800c568 <pbuf_free>
    return NULL;
 8010df2:	2300      	movs	r3, #0
 8010df4:	e061      	b.n	8010eba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010dfc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	2200      	movs	r2, #0
 8010e02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	68ba      	ldr	r2, [r7, #8]
 8010e08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	891a      	ldrh	r2, [r3, #8]
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
 8010e10:	b29b      	uxth	r3, r3
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d205      	bcs.n	8010e22 <tcp_create_segment+0x86>
 8010e16:	4b2b      	ldr	r3, [pc, #172]	; (8010ec4 <tcp_create_segment+0x128>)
 8010e18:	22b0      	movs	r2, #176	; 0xb0
 8010e1a:	492e      	ldr	r1, [pc, #184]	; (8010ed4 <tcp_create_segment+0x138>)
 8010e1c:	482b      	ldr	r0, [pc, #172]	; (8010ecc <tcp_create_segment+0x130>)
 8010e1e:	f007 fdf7 	bl	8018a10 <iprintf>
  seg->len = p->tot_len - optlen;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	891a      	ldrh	r2, [r3, #8]
 8010e26:	7dfb      	ldrb	r3, [r7, #23]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	1ad3      	subs	r3, r2, r3
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010e32:	2114      	movs	r1, #20
 8010e34:	68b8      	ldr	r0, [r7, #8]
 8010e36:	f7fb fb01 	bl	800c43c <pbuf_add_header>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d004      	beq.n	8010e4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010e40:	6938      	ldr	r0, [r7, #16]
 8010e42:	f7fd f807 	bl	800de54 <tcp_seg_free>
    return NULL;
 8010e46:	2300      	movs	r3, #0
 8010e48:	e037      	b.n	8010eba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010e4a:	693b      	ldr	r3, [r7, #16]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	685a      	ldr	r2, [r3, #4]
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	8ada      	ldrh	r2, [r3, #22]
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	68dc      	ldr	r4, [r3, #12]
 8010e5c:	4610      	mov	r0, r2
 8010e5e:	f7fa f853 	bl	800af08 <lwip_htons>
 8010e62:	4603      	mov	r3, r0
 8010e64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	8b1a      	ldrh	r2, [r3, #24]
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	68dc      	ldr	r4, [r3, #12]
 8010e6e:	4610      	mov	r0, r2
 8010e70:	f7fa f84a 	bl	800af08 <lwip_htons>
 8010e74:	4603      	mov	r3, r0
 8010e76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	68dc      	ldr	r4, [r3, #12]
 8010e7c:	6838      	ldr	r0, [r7, #0]
 8010e7e:	f7fa f858 	bl	800af32 <lwip_htonl>
 8010e82:	4603      	mov	r3, r0
 8010e84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010e86:	7dfb      	ldrb	r3, [r7, #23]
 8010e88:	089b      	lsrs	r3, r3, #2
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	3305      	adds	r3, #5
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	031b      	lsls	r3, r3, #12
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	79fb      	ldrb	r3, [r7, #7]
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	68dc      	ldr	r4, [r3, #12]
 8010ea2:	4610      	mov	r0, r2
 8010ea4:	f7fa f830 	bl	800af08 <lwip_htons>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	749a      	strb	r2, [r3, #18]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	74da      	strb	r2, [r3, #19]
  return seg;
 8010eb8:	693b      	ldr	r3, [r7, #16]
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	371c      	adds	r7, #28
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd90      	pop	{r4, r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	0801e1cc 	.word	0x0801e1cc
 8010ec8:	0801e200 	.word	0x0801e200
 8010ecc:	0801e220 	.word	0x0801e220
 8010ed0:	0801e248 	.word	0x0801e248
 8010ed4:	0801e26c 	.word	0x0801e26c

08010ed8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b086      	sub	sp, #24
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	607b      	str	r3, [r7, #4]
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	73fb      	strb	r3, [r7, #15]
 8010ee4:	460b      	mov	r3, r1
 8010ee6:	81bb      	strh	r3, [r7, #12]
 8010ee8:	4613      	mov	r3, r2
 8010eea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010eec:	89bb      	ldrh	r3, [r7, #12]
 8010eee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d105      	bne.n	8010f02 <tcp_pbuf_prealloc+0x2a>
 8010ef6:	4b30      	ldr	r3, [pc, #192]	; (8010fb8 <tcp_pbuf_prealloc+0xe0>)
 8010ef8:	22e8      	movs	r2, #232	; 0xe8
 8010efa:	4930      	ldr	r1, [pc, #192]	; (8010fbc <tcp_pbuf_prealloc+0xe4>)
 8010efc:	4830      	ldr	r0, [pc, #192]	; (8010fc0 <tcp_pbuf_prealloc+0xe8>)
 8010efe:	f007 fd87 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010f02:	6a3b      	ldr	r3, [r7, #32]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d105      	bne.n	8010f14 <tcp_pbuf_prealloc+0x3c>
 8010f08:	4b2b      	ldr	r3, [pc, #172]	; (8010fb8 <tcp_pbuf_prealloc+0xe0>)
 8010f0a:	22e9      	movs	r2, #233	; 0xe9
 8010f0c:	492d      	ldr	r1, [pc, #180]	; (8010fc4 <tcp_pbuf_prealloc+0xec>)
 8010f0e:	482c      	ldr	r0, [pc, #176]	; (8010fc0 <tcp_pbuf_prealloc+0xe8>)
 8010f10:	f007 fd7e 	bl	8018a10 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010f14:	89ba      	ldrh	r2, [r7, #12]
 8010f16:	897b      	ldrh	r3, [r7, #10]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d221      	bcs.n	8010f60 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010f20:	f003 0302 	and.w	r3, r3, #2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d111      	bne.n	8010f4c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010f28:	6a3b      	ldr	r3, [r7, #32]
 8010f2a:	8b5b      	ldrh	r3, [r3, #26]
 8010f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d115      	bne.n	8010f60 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d007      	beq.n	8010f4c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010f3c:	6a3b      	ldr	r3, [r7, #32]
 8010f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d103      	bne.n	8010f4c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010f44:	6a3b      	ldr	r3, [r7, #32]
 8010f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d009      	beq.n	8010f60 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010f4c:	89bb      	ldrh	r3, [r7, #12]
 8010f4e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010f52:	f023 0203 	bic.w	r2, r3, #3
 8010f56:	897b      	ldrh	r3, [r7, #10]
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	bf28      	it	cs
 8010f5c:	4613      	movcs	r3, r2
 8010f5e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010f60:	8af9      	ldrh	r1, [r7, #22]
 8010f62:	7bfb      	ldrb	r3, [r7, #15]
 8010f64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fb f81d 	bl	800bfa8 <pbuf_alloc>
 8010f6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d101      	bne.n	8010f7a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010f76:	2300      	movs	r3, #0
 8010f78:	e019      	b.n	8010fae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d006      	beq.n	8010f90 <tcp_pbuf_prealloc+0xb8>
 8010f82:	4b0d      	ldr	r3, [pc, #52]	; (8010fb8 <tcp_pbuf_prealloc+0xe0>)
 8010f84:	f240 120b 	movw	r2, #267	; 0x10b
 8010f88:	490f      	ldr	r1, [pc, #60]	; (8010fc8 <tcp_pbuf_prealloc+0xf0>)
 8010f8a:	480d      	ldr	r0, [pc, #52]	; (8010fc0 <tcp_pbuf_prealloc+0xe8>)
 8010f8c:	f007 fd40 	bl	8018a10 <iprintf>
  *oversize = p->len - length;
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	895a      	ldrh	r2, [r3, #10]
 8010f94:	89bb      	ldrh	r3, [r7, #12]
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	89ba      	ldrh	r2, [r7, #12]
 8010fa2:	811a      	strh	r2, [r3, #8]
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	891a      	ldrh	r2, [r3, #8]
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	815a      	strh	r2, [r3, #10]
  return p;
 8010fac:	693b      	ldr	r3, [r7, #16]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	0801e1cc 	.word	0x0801e1cc
 8010fbc:	0801e284 	.word	0x0801e284
 8010fc0:	0801e220 	.word	0x0801e220
 8010fc4:	0801e2a8 	.word	0x0801e2a8
 8010fc8:	0801e2c8 	.word	0x0801e2c8

08010fcc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d106      	bne.n	8010fec <tcp_write_checks+0x20>
 8010fde:	4b33      	ldr	r3, [pc, #204]	; (80110ac <tcp_write_checks+0xe0>)
 8010fe0:	f240 1233 	movw	r2, #307	; 0x133
 8010fe4:	4932      	ldr	r1, [pc, #200]	; (80110b0 <tcp_write_checks+0xe4>)
 8010fe6:	4833      	ldr	r0, [pc, #204]	; (80110b4 <tcp_write_checks+0xe8>)
 8010fe8:	f007 fd12 	bl	8018a10 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	7d1b      	ldrb	r3, [r3, #20]
 8010ff0:	2b04      	cmp	r3, #4
 8010ff2:	d00e      	beq.n	8011012 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010ff8:	2b07      	cmp	r3, #7
 8010ffa:	d00a      	beq.n	8011012 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011000:	2b02      	cmp	r3, #2
 8011002:	d006      	beq.n	8011012 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011008:	2b03      	cmp	r3, #3
 801100a:	d002      	beq.n	8011012 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801100c:	f06f 030a 	mvn.w	r3, #10
 8011010:	e048      	b.n	80110a4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011012:	887b      	ldrh	r3, [r7, #2]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d101      	bne.n	801101c <tcp_write_checks+0x50>
    return ERR_OK;
 8011018:	2300      	movs	r3, #0
 801101a:	e043      	b.n	80110a4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011022:	887a      	ldrh	r2, [r7, #2]
 8011024:	429a      	cmp	r2, r3
 8011026:	d909      	bls.n	801103c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	8b5b      	ldrh	r3, [r3, #26]
 801102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011030:	b29a      	uxth	r2, r3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801103a:	e033      	b.n	80110a4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011042:	2b08      	cmp	r3, #8
 8011044:	d909      	bls.n	801105a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8b5b      	ldrh	r3, [r3, #26]
 801104a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801104e:	b29a      	uxth	r2, r3
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011058:	e024      	b.n	80110a4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011060:	2b00      	cmp	r3, #0
 8011062:	d00f      	beq.n	8011084 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011068:	2b00      	cmp	r3, #0
 801106a:	d11a      	bne.n	80110a2 <tcp_write_checks+0xd6>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011070:	2b00      	cmp	r3, #0
 8011072:	d116      	bne.n	80110a2 <tcp_write_checks+0xd6>
 8011074:	4b0d      	ldr	r3, [pc, #52]	; (80110ac <tcp_write_checks+0xe0>)
 8011076:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801107a:	490f      	ldr	r1, [pc, #60]	; (80110b8 <tcp_write_checks+0xec>)
 801107c:	480d      	ldr	r0, [pc, #52]	; (80110b4 <tcp_write_checks+0xe8>)
 801107e:	f007 fcc7 	bl	8018a10 <iprintf>
 8011082:	e00e      	b.n	80110a2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011088:	2b00      	cmp	r3, #0
 801108a:	d103      	bne.n	8011094 <tcp_write_checks+0xc8>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011090:	2b00      	cmp	r3, #0
 8011092:	d006      	beq.n	80110a2 <tcp_write_checks+0xd6>
 8011094:	4b05      	ldr	r3, [pc, #20]	; (80110ac <tcp_write_checks+0xe0>)
 8011096:	f240 1259 	movw	r2, #345	; 0x159
 801109a:	4908      	ldr	r1, [pc, #32]	; (80110bc <tcp_write_checks+0xf0>)
 801109c:	4805      	ldr	r0, [pc, #20]	; (80110b4 <tcp_write_checks+0xe8>)
 801109e:	f007 fcb7 	bl	8018a10 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80110a2:	2300      	movs	r3, #0
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	0801e1cc 	.word	0x0801e1cc
 80110b0:	0801e2dc 	.word	0x0801e2dc
 80110b4:	0801e220 	.word	0x0801e220
 80110b8:	0801e2fc 	.word	0x0801e2fc
 80110bc:	0801e338 	.word	0x0801e338

080110c0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80110c0:	b590      	push	{r4, r7, lr}
 80110c2:	b09b      	sub	sp, #108	; 0x6c
 80110c4:	af04      	add	r7, sp, #16
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	4611      	mov	r1, r2
 80110cc:	461a      	mov	r2, r3
 80110ce:	460b      	mov	r3, r1
 80110d0:	80fb      	strh	r3, [r7, #6]
 80110d2:	4613      	mov	r3, r2
 80110d4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80110d6:	2300      	movs	r3, #0
 80110d8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80110da:	2300      	movs	r3, #0
 80110dc:	653b      	str	r3, [r7, #80]	; 0x50
 80110de:	2300      	movs	r3, #0
 80110e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110e2:	2300      	movs	r3, #0
 80110e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80110e6:	2300      	movs	r3, #0
 80110e8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80110ea:	2300      	movs	r3, #0
 80110ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <tcp_write+0x5c>
 8011108:	4ba5      	ldr	r3, [pc, #660]	; (80113a0 <tcp_write+0x2e0>)
 801110a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801110e:	49a5      	ldr	r1, [pc, #660]	; (80113a4 <tcp_write+0x2e4>)
 8011110:	48a5      	ldr	r0, [pc, #660]	; (80113a8 <tcp_write+0x2e8>)
 8011112:	f007 fc7d 	bl	8018a10 <iprintf>
 8011116:	f06f 030f 	mvn.w	r3, #15
 801111a:	e32c      	b.n	8011776 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011122:	085b      	lsrs	r3, r3, #1
 8011124:	b29a      	uxth	r2, r3
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801112a:	4293      	cmp	r3, r2
 801112c:	bf28      	it	cs
 801112e:	4613      	movcs	r3, r2
 8011130:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <tcp_write+0x7e>
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801113c:	e000      	b.n	8011140 <tcp_write+0x80>
 801113e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011140:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d109      	bne.n	801115c <tcp_write+0x9c>
 8011148:	4b95      	ldr	r3, [pc, #596]	; (80113a0 <tcp_write+0x2e0>)
 801114a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801114e:	4997      	ldr	r1, [pc, #604]	; (80113ac <tcp_write+0x2ec>)
 8011150:	4895      	ldr	r0, [pc, #596]	; (80113a8 <tcp_write+0x2e8>)
 8011152:	f007 fc5d 	bl	8018a10 <iprintf>
 8011156:	f06f 030f 	mvn.w	r3, #15
 801115a:	e30c      	b.n	8011776 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801115c:	88fb      	ldrh	r3, [r7, #6]
 801115e:	4619      	mov	r1, r3
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f7ff ff33 	bl	8010fcc <tcp_write_checks>
 8011166:	4603      	mov	r3, r0
 8011168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801116c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <tcp_write+0xba>
    return err;
 8011174:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011178:	e2fd      	b.n	8011776 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011180:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011184:	2300      	movs	r3, #0
 8011186:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 80f7 	beq.w	8011382 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011198:	653b      	str	r3, [r7, #80]	; 0x50
 801119a:	e002      	b.n	80111a2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801119c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80111a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d1f8      	bne.n	801119c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80111aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ac:	7a9b      	ldrb	r3, [r3, #10]
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	f003 0304 	and.w	r3, r3, #4
 80111b6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80111b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111bc:	891b      	ldrh	r3, [r3, #8]
 80111be:	4619      	mov	r1, r3
 80111c0:	8c3b      	ldrh	r3, [r7, #32]
 80111c2:	440b      	add	r3, r1
 80111c4:	429a      	cmp	r2, r3
 80111c6:	da06      	bge.n	80111d6 <tcp_write+0x116>
 80111c8:	4b75      	ldr	r3, [pc, #468]	; (80113a0 <tcp_write+0x2e0>)
 80111ca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80111ce:	4978      	ldr	r1, [pc, #480]	; (80113b0 <tcp_write+0x2f0>)
 80111d0:	4875      	ldr	r0, [pc, #468]	; (80113a8 <tcp_write+0x2e8>)
 80111d2:	f007 fc1d 	bl	8018a10 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80111d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111d8:	891a      	ldrh	r2, [r3, #8]
 80111da:	8c3b      	ldrh	r3, [r7, #32]
 80111dc:	4413      	add	r3, r2
 80111de:	b29b      	uxth	r3, r3
 80111e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80111ec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80111ee:	8a7b      	ldrh	r3, [r7, #18]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d027      	beq.n	8011244 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80111f4:	8a7b      	ldrh	r3, [r7, #18]
 80111f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d206      	bcs.n	801120a <tcp_write+0x14a>
 80111fc:	4b68      	ldr	r3, [pc, #416]	; (80113a0 <tcp_write+0x2e0>)
 80111fe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011202:	496c      	ldr	r1, [pc, #432]	; (80113b4 <tcp_write+0x2f4>)
 8011204:	4868      	ldr	r0, [pc, #416]	; (80113a8 <tcp_write+0x2e8>)
 8011206:	f007 fc03 	bl	8018a10 <iprintf>
      seg = last_unsent;
 801120a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801120c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801120e:	8a7b      	ldrh	r3, [r7, #18]
 8011210:	88fa      	ldrh	r2, [r7, #6]
 8011212:	429a      	cmp	r2, r3
 8011214:	d901      	bls.n	801121a <tcp_write+0x15a>
 8011216:	8a7b      	ldrh	r3, [r7, #18]
 8011218:	e000      	b.n	801121c <tcp_write+0x15c>
 801121a:	88fb      	ldrh	r3, [r7, #6]
 801121c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801121e:	4293      	cmp	r3, r2
 8011220:	bfa8      	it	ge
 8011222:	4613      	movge	r3, r2
 8011224:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011226:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801122a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801122c:	4413      	add	r3, r2
 801122e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011232:	8a7a      	ldrh	r2, [r7, #18]
 8011234:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	b29b      	uxth	r3, r3
 801123a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801123c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801123e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011244:	8a7b      	ldrh	r3, [r7, #18]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00b      	beq.n	8011262 <tcp_write+0x1a2>
 801124a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801124e:	88fb      	ldrh	r3, [r7, #6]
 8011250:	429a      	cmp	r2, r3
 8011252:	d006      	beq.n	8011262 <tcp_write+0x1a2>
 8011254:	4b52      	ldr	r3, [pc, #328]	; (80113a0 <tcp_write+0x2e0>)
 8011256:	f44f 7200 	mov.w	r2, #512	; 0x200
 801125a:	4957      	ldr	r1, [pc, #348]	; (80113b8 <tcp_write+0x2f8>)
 801125c:	4852      	ldr	r0, [pc, #328]	; (80113a8 <tcp_write+0x2e8>)
 801125e:	f007 fbd7 	bl	8018a10 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011262:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011266:	88fb      	ldrh	r3, [r7, #6]
 8011268:	429a      	cmp	r2, r3
 801126a:	f080 8168 	bcs.w	801153e <tcp_write+0x47e>
 801126e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 8164 	beq.w	801153e <tcp_write+0x47e>
 8011276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011278:	891b      	ldrh	r3, [r3, #8]
 801127a:	2b00      	cmp	r3, #0
 801127c:	f000 815f 	beq.w	801153e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011280:	88fa      	ldrh	r2, [r7, #6]
 8011282:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011286:	1ad2      	subs	r2, r2, r3
 8011288:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801128a:	4293      	cmp	r3, r2
 801128c:	bfa8      	it	ge
 801128e:	4613      	movge	r3, r2
 8011290:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011294:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011296:	797b      	ldrb	r3, [r7, #5]
 8011298:	f003 0301 	and.w	r3, r3, #1
 801129c:	2b00      	cmp	r3, #0
 801129e:	d027      	beq.n	80112f0 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80112a0:	f107 0012 	add.w	r0, r7, #18
 80112a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112a6:	8bf9      	ldrh	r1, [r7, #30]
 80112a8:	2301      	movs	r3, #1
 80112aa:	9302      	str	r3, [sp, #8]
 80112ac:	797b      	ldrb	r3, [r7, #5]
 80112ae:	9301      	str	r3, [sp, #4]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	9300      	str	r3, [sp, #0]
 80112b4:	4603      	mov	r3, r0
 80112b6:	2000      	movs	r0, #0
 80112b8:	f7ff fe0e 	bl	8010ed8 <tcp_pbuf_prealloc>
 80112bc:	6578      	str	r0, [r7, #84]	; 0x54
 80112be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 8226 	beq.w	8011712 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80112c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112c8:	6858      	ldr	r0, [r3, #4]
 80112ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	4413      	add	r3, r2
 80112d2:	8bfa      	ldrh	r2, [r7, #30]
 80112d4:	4619      	mov	r1, r3
 80112d6:	f006 fd5b 	bl	8017d90 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80112da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80112dc:	f7fb f9d2 	bl	800c684 <pbuf_clen>
 80112e0:	4603      	mov	r3, r0
 80112e2:	461a      	mov	r2, r3
 80112e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80112e8:	4413      	add	r3, r2
 80112ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80112ee:	e041      	b.n	8011374 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80112f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	637b      	str	r3, [r7, #52]	; 0x34
 80112f6:	e002      	b.n	80112fe <tcp_write+0x23e>
 80112f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	637b      	str	r3, [r7, #52]	; 0x34
 80112fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1f8      	bne.n	80112f8 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011308:	7b1b      	ldrb	r3, [r3, #12]
 801130a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d115      	bne.n	801133e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011318:	8952      	ldrh	r2, [r2, #10]
 801131a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	429a      	cmp	r2, r3
 8011320:	d10d      	bne.n	801133e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011322:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011326:	2b00      	cmp	r3, #0
 8011328:	d006      	beq.n	8011338 <tcp_write+0x278>
 801132a:	4b1d      	ldr	r3, [pc, #116]	; (80113a0 <tcp_write+0x2e0>)
 801132c:	f240 2231 	movw	r2, #561	; 0x231
 8011330:	4922      	ldr	r1, [pc, #136]	; (80113bc <tcp_write+0x2fc>)
 8011332:	481d      	ldr	r0, [pc, #116]	; (80113a8 <tcp_write+0x2e8>)
 8011334:	f007 fb6c 	bl	8018a10 <iprintf>
          extendlen = seglen;
 8011338:	8bfb      	ldrh	r3, [r7, #30]
 801133a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801133c:	e01a      	b.n	8011374 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801133e:	8bfb      	ldrh	r3, [r7, #30]
 8011340:	2201      	movs	r2, #1
 8011342:	4619      	mov	r1, r3
 8011344:	2000      	movs	r0, #0
 8011346:	f7fa fe2f 	bl	800bfa8 <pbuf_alloc>
 801134a:	6578      	str	r0, [r7, #84]	; 0x54
 801134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 81e1 	beq.w	8011716 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	441a      	add	r2, r3
 801135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801135e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011360:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011362:	f7fb f98f 	bl	800c684 <pbuf_clen>
 8011366:	4603      	mov	r3, r0
 8011368:	461a      	mov	r2, r3
 801136a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801136e:	4413      	add	r3, r2
 8011370:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011374:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011378:	8bfb      	ldrh	r3, [r7, #30]
 801137a:	4413      	add	r3, r2
 801137c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011380:	e0dd      	b.n	801153e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 80d8 	beq.w	801153e <tcp_write+0x47e>
 801138e:	4b04      	ldr	r3, [pc, #16]	; (80113a0 <tcp_write+0x2e0>)
 8011390:	f240 224b 	movw	r2, #587	; 0x24b
 8011394:	490a      	ldr	r1, [pc, #40]	; (80113c0 <tcp_write+0x300>)
 8011396:	4804      	ldr	r0, [pc, #16]	; (80113a8 <tcp_write+0x2e8>)
 8011398:	f007 fb3a 	bl	8018a10 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801139c:	e0cf      	b.n	801153e <tcp_write+0x47e>
 801139e:	bf00      	nop
 80113a0:	0801e1cc 	.word	0x0801e1cc
 80113a4:	0801e36c 	.word	0x0801e36c
 80113a8:	0801e220 	.word	0x0801e220
 80113ac:	0801e384 	.word	0x0801e384
 80113b0:	0801e3b8 	.word	0x0801e3b8
 80113b4:	0801e3d0 	.word	0x0801e3d0
 80113b8:	0801e3f0 	.word	0x0801e3f0
 80113bc:	0801e410 	.word	0x0801e410
 80113c0:	0801e43c 	.word	0x0801e43c
    struct pbuf *p;
    u16_t left = len - pos;
 80113c4:	88fa      	ldrh	r2, [r7, #6]
 80113c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80113ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80113d6:	1ad3      	subs	r3, r2, r3
 80113d8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80113da:	8b7a      	ldrh	r2, [r7, #26]
 80113dc:	8bbb      	ldrh	r3, [r7, #28]
 80113de:	4293      	cmp	r3, r2
 80113e0:	bf28      	it	cs
 80113e2:	4613      	movcs	r3, r2
 80113e4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80113e6:	797b      	ldrb	r3, [r7, #5]
 80113e8:	f003 0301 	and.w	r3, r3, #1
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d036      	beq.n	801145e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80113f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80113f4:	b29a      	uxth	r2, r3
 80113f6:	8b3b      	ldrh	r3, [r7, #24]
 80113f8:	4413      	add	r3, r2
 80113fa:	b299      	uxth	r1, r3
 80113fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113fe:	2b00      	cmp	r3, #0
 8011400:	bf0c      	ite	eq
 8011402:	2301      	moveq	r3, #1
 8011404:	2300      	movne	r3, #0
 8011406:	b2db      	uxtb	r3, r3
 8011408:	f107 0012 	add.w	r0, r7, #18
 801140c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801140e:	9302      	str	r3, [sp, #8]
 8011410:	797b      	ldrb	r3, [r7, #5]
 8011412:	9301      	str	r3, [sp, #4]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	4603      	mov	r3, r0
 801141a:	2036      	movs	r0, #54	; 0x36
 801141c:	f7ff fd5c 	bl	8010ed8 <tcp_pbuf_prealloc>
 8011420:	6338      	str	r0, [r7, #48]	; 0x30
 8011422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011424:	2b00      	cmp	r3, #0
 8011426:	f000 8178 	beq.w	801171a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142c:	895b      	ldrh	r3, [r3, #10]
 801142e:	8b3a      	ldrh	r2, [r7, #24]
 8011430:	429a      	cmp	r2, r3
 8011432:	d906      	bls.n	8011442 <tcp_write+0x382>
 8011434:	4b8c      	ldr	r3, [pc, #560]	; (8011668 <tcp_write+0x5a8>)
 8011436:	f240 2267 	movw	r2, #615	; 0x267
 801143a:	498c      	ldr	r1, [pc, #560]	; (801166c <tcp_write+0x5ac>)
 801143c:	488c      	ldr	r0, [pc, #560]	; (8011670 <tcp_write+0x5b0>)
 801143e:	f007 fae7 	bl	8018a10 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	685a      	ldr	r2, [r3, #4]
 8011446:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801144a:	18d0      	adds	r0, r2, r3
 801144c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011450:	68ba      	ldr	r2, [r7, #8]
 8011452:	4413      	add	r3, r2
 8011454:	8b3a      	ldrh	r2, [r7, #24]
 8011456:	4619      	mov	r1, r3
 8011458:	f006 fc9a 	bl	8017d90 <memcpy>
 801145c:	e02f      	b.n	80114be <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801145e:	8a7b      	ldrh	r3, [r7, #18]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d006      	beq.n	8011472 <tcp_write+0x3b2>
 8011464:	4b80      	ldr	r3, [pc, #512]	; (8011668 <tcp_write+0x5a8>)
 8011466:	f240 2271 	movw	r2, #625	; 0x271
 801146a:	4982      	ldr	r1, [pc, #520]	; (8011674 <tcp_write+0x5b4>)
 801146c:	4880      	ldr	r0, [pc, #512]	; (8011670 <tcp_write+0x5b0>)
 801146e:	f007 facf 	bl	8018a10 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011472:	8b3b      	ldrh	r3, [r7, #24]
 8011474:	2201      	movs	r2, #1
 8011476:	4619      	mov	r1, r3
 8011478:	2036      	movs	r0, #54	; 0x36
 801147a:	f7fa fd95 	bl	800bfa8 <pbuf_alloc>
 801147e:	6178      	str	r0, [r7, #20]
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	2b00      	cmp	r3, #0
 8011484:	f000 814b 	beq.w	801171e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011488:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	441a      	add	r2, r3
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011498:	b29b      	uxth	r3, r3
 801149a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801149e:	4619      	mov	r1, r3
 80114a0:	2036      	movs	r0, #54	; 0x36
 80114a2:	f7fa fd81 	bl	800bfa8 <pbuf_alloc>
 80114a6:	6338      	str	r0, [r7, #48]	; 0x30
 80114a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d103      	bne.n	80114b6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80114ae:	6978      	ldr	r0, [r7, #20]
 80114b0:	f7fb f85a 	bl	800c568 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80114b4:	e136      	b.n	8011724 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80114b6:	6979      	ldr	r1, [r7, #20]
 80114b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114ba:	f7fb f923 	bl	800c704 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80114be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114c0:	f7fb f8e0 	bl	800c684 <pbuf_clen>
 80114c4:	4603      	mov	r3, r0
 80114c6:	461a      	mov	r2, r3
 80114c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114cc:	4413      	add	r3, r2
 80114ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80114d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80114d6:	2b09      	cmp	r3, #9
 80114d8:	d903      	bls.n	80114e2 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80114da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114dc:	f7fb f844 	bl	800c568 <pbuf_free>
      goto memerr;
 80114e0:	e120      	b.n	8011724 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114ea:	441a      	add	r2, r3
 80114ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114f0:	9300      	str	r3, [sp, #0]
 80114f2:	4613      	mov	r3, r2
 80114f4:	2200      	movs	r2, #0
 80114f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80114f8:	68f8      	ldr	r0, [r7, #12]
 80114fa:	f7ff fc4f 	bl	8010d9c <tcp_create_segment>
 80114fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011502:	2b00      	cmp	r3, #0
 8011504:	f000 810d 	beq.w	8011722 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150a:	2b00      	cmp	r3, #0
 801150c:	d102      	bne.n	8011514 <tcp_write+0x454>
      queue = seg;
 801150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011510:	647b      	str	r3, [r7, #68]	; 0x44
 8011512:	e00c      	b.n	801152e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_write+0x468>
 801151a:	4b53      	ldr	r3, [pc, #332]	; (8011668 <tcp_write+0x5a8>)
 801151c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011520:	4955      	ldr	r1, [pc, #340]	; (8011678 <tcp_write+0x5b8>)
 8011522:	4853      	ldr	r0, [pc, #332]	; (8011670 <tcp_write+0x5b0>)
 8011524:	f007 fa74 	bl	8018a10 <iprintf>
      prev_seg->next = seg;
 8011528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801152a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801152c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801152e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011530:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011532:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011536:	8b3b      	ldrh	r3, [r7, #24]
 8011538:	4413      	add	r3, r2
 801153a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801153e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011542:	88fb      	ldrh	r3, [r7, #6]
 8011544:	429a      	cmp	r2, r3
 8011546:	f4ff af3d 	bcc.w	80113c4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801154a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801154c:	2b00      	cmp	r3, #0
 801154e:	d02c      	beq.n	80115aa <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011556:	e01e      	b.n	8011596 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8011558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155a:	891a      	ldrh	r2, [r3, #8]
 801155c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801155e:	4413      	add	r3, r2
 8011560:	b29a      	uxth	r2, r3
 8011562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011564:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d110      	bne.n	8011590 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011574:	8952      	ldrh	r2, [r2, #10]
 8011576:	4413      	add	r3, r2
 8011578:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801157a:	68b9      	ldr	r1, [r7, #8]
 801157c:	4618      	mov	r0, r3
 801157e:	f006 fc07 	bl	8017d90 <memcpy>
        p->len += oversize_used;
 8011582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011584:	895a      	ldrh	r2, [r3, #10]
 8011586:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011588:	4413      	add	r3, r2
 801158a:	b29a      	uxth	r2, r3
 801158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d1dd      	bne.n	8011558 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801159c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801159e:	891a      	ldrh	r2, [r3, #8]
 80115a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80115a2:	4413      	add	r3, r2
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115a8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80115aa:	8a7a      	ldrh	r2, [r7, #18]
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80115b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d018      	beq.n	80115ea <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80115b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <tcp_write+0x50c>
 80115be:	4b2a      	ldr	r3, [pc, #168]	; (8011668 <tcp_write+0x5a8>)
 80115c0:	f240 22e1 	movw	r2, #737	; 0x2e1
 80115c4:	492d      	ldr	r1, [pc, #180]	; (801167c <tcp_write+0x5bc>)
 80115c6:	482a      	ldr	r0, [pc, #168]	; (8011670 <tcp_write+0x5b0>)
 80115c8:	f007 fa22 	bl	8018a10 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80115cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fb f896 	bl	800c704 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80115d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115da:	891a      	ldrh	r2, [r3, #8]
 80115dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115de:	891b      	ldrh	r3, [r3, #8]
 80115e0:	4413      	add	r3, r2
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e6:	811a      	strh	r2, [r3, #8]
 80115e8:	e037      	b.n	801165a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80115ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d034      	beq.n	801165a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80115f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d003      	beq.n	80115fe <tcp_write+0x53e>
 80115f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <tcp_write+0x54c>
 80115fe:	4b1a      	ldr	r3, [pc, #104]	; (8011668 <tcp_write+0x5a8>)
 8011600:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011604:	491e      	ldr	r1, [pc, #120]	; (8011680 <tcp_write+0x5c0>)
 8011606:	481a      	ldr	r0, [pc, #104]	; (8011670 <tcp_write+0x5b0>)
 8011608:	f007 fa02 	bl	8018a10 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801160c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	62bb      	str	r3, [r7, #40]	; 0x28
 8011612:	e009      	b.n	8011628 <tcp_write+0x568>
      p->tot_len += extendlen;
 8011614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011616:	891a      	ldrh	r2, [r3, #8]
 8011618:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801161a:	4413      	add	r3, r2
 801161c:	b29a      	uxth	r2, r3
 801161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011620:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	62bb      	str	r3, [r7, #40]	; 0x28
 8011628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d1f1      	bne.n	8011614 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011632:	891a      	ldrh	r2, [r3, #8]
 8011634:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011636:	4413      	add	r3, r2
 8011638:	b29a      	uxth	r2, r3
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011640:	895a      	ldrh	r2, [r3, #10]
 8011642:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011644:	4413      	add	r3, r2
 8011646:	b29a      	uxth	r2, r3
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801164c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801164e:	891a      	ldrh	r2, [r3, #8]
 8011650:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011652:	4413      	add	r3, r2
 8011654:	b29a      	uxth	r2, r3
 8011656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011658:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801165a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801165c:	2b00      	cmp	r3, #0
 801165e:	d111      	bne.n	8011684 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011664:	66da      	str	r2, [r3, #108]	; 0x6c
 8011666:	e010      	b.n	801168a <tcp_write+0x5ca>
 8011668:	0801e1cc 	.word	0x0801e1cc
 801166c:	0801e46c 	.word	0x0801e46c
 8011670:	0801e220 	.word	0x0801e220
 8011674:	0801e4ac 	.word	0x0801e4ac
 8011678:	0801e4bc 	.word	0x0801e4bc
 801167c:	0801e4d0 	.word	0x0801e4d0
 8011680:	0801e508 	.word	0x0801e508
  } else {
    last_unsent->next = queue;
 8011684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011688:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801168e:	88fb      	ldrh	r3, [r7, #6]
 8011690:	441a      	add	r2, r3
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801169c:	88fb      	ldrh	r3, [r7, #6]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80116ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00e      	beq.n	80116da <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d10a      	bne.n	80116da <tcp_write+0x61a>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d106      	bne.n	80116da <tcp_write+0x61a>
 80116cc:	4b2c      	ldr	r3, [pc, #176]	; (8011780 <tcp_write+0x6c0>)
 80116ce:	f240 3213 	movw	r2, #787	; 0x313
 80116d2:	492c      	ldr	r1, [pc, #176]	; (8011784 <tcp_write+0x6c4>)
 80116d4:	482c      	ldr	r0, [pc, #176]	; (8011788 <tcp_write+0x6c8>)
 80116d6:	f007 f99b 	bl	8018a10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80116da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d016      	beq.n	801170e <tcp_write+0x64e>
 80116e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d012      	beq.n	801170e <tcp_write+0x64e>
 80116e8:	797b      	ldrb	r3, [r7, #5]
 80116ea:	f003 0302 	and.w	r3, r3, #2
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d10d      	bne.n	801170e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80116f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	899b      	ldrh	r3, [r3, #12]
 80116f8:	b29c      	uxth	r4, r3
 80116fa:	2008      	movs	r0, #8
 80116fc:	f7f9 fc04 	bl	800af08 <lwip_htons>
 8011700:	4603      	mov	r3, r0
 8011702:	461a      	mov	r2, r3
 8011704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	4322      	orrs	r2, r4
 801170a:	b292      	uxth	r2, r2
 801170c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801170e:	2300      	movs	r3, #0
 8011710:	e031      	b.n	8011776 <tcp_write+0x6b6>
          goto memerr;
 8011712:	bf00      	nop
 8011714:	e006      	b.n	8011724 <tcp_write+0x664>
            goto memerr;
 8011716:	bf00      	nop
 8011718:	e004      	b.n	8011724 <tcp_write+0x664>
        goto memerr;
 801171a:	bf00      	nop
 801171c:	e002      	b.n	8011724 <tcp_write+0x664>
        goto memerr;
 801171e:	bf00      	nop
 8011720:	e000      	b.n	8011724 <tcp_write+0x664>
      goto memerr;
 8011722:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	8b5b      	ldrh	r3, [r3, #26]
 8011728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801172c:	b29a      	uxth	r2, r3
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011734:	2b00      	cmp	r3, #0
 8011736:	d002      	beq.n	801173e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011738:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801173a:	f7fa ff15 	bl	800c568 <pbuf_free>
  }
  if (queue != NULL) {
 801173e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011740:	2b00      	cmp	r3, #0
 8011742:	d002      	beq.n	801174a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8011744:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011746:	f7fc fb71 	bl	800de2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00e      	beq.n	8011772 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011758:	2b00      	cmp	r3, #0
 801175a:	d10a      	bne.n	8011772 <tcp_write+0x6b2>
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011760:	2b00      	cmp	r3, #0
 8011762:	d106      	bne.n	8011772 <tcp_write+0x6b2>
 8011764:	4b06      	ldr	r3, [pc, #24]	; (8011780 <tcp_write+0x6c0>)
 8011766:	f44f 724a 	mov.w	r2, #808	; 0x328
 801176a:	4906      	ldr	r1, [pc, #24]	; (8011784 <tcp_write+0x6c4>)
 801176c:	4806      	ldr	r0, [pc, #24]	; (8011788 <tcp_write+0x6c8>)
 801176e:	f007 f94f 	bl	8018a10 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011776:	4618      	mov	r0, r3
 8011778:	375c      	adds	r7, #92	; 0x5c
 801177a:	46bd      	mov	sp, r7
 801177c:	bd90      	pop	{r4, r7, pc}
 801177e:	bf00      	nop
 8011780:	0801e1cc 	.word	0x0801e1cc
 8011784:	0801e540 	.word	0x0801e540
 8011788:	0801e220 	.word	0x0801e220

0801178c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801178c:	b590      	push	{r4, r7, lr}
 801178e:	b08b      	sub	sp, #44	; 0x2c
 8011790:	af02      	add	r7, sp, #8
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011798:	2300      	movs	r3, #0
 801179a:	61fb      	str	r3, [r7, #28]
 801179c:	2300      	movs	r3, #0
 801179e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80117a0:	2300      	movs	r3, #0
 80117a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcp_split_unsent_seg+0x2c>
 80117aa:	4b95      	ldr	r3, [pc, #596]	; (8011a00 <tcp_split_unsent_seg+0x274>)
 80117ac:	f240 324b 	movw	r2, #843	; 0x34b
 80117b0:	4994      	ldr	r1, [pc, #592]	; (8011a04 <tcp_split_unsent_seg+0x278>)
 80117b2:	4895      	ldr	r0, [pc, #596]	; (8011a08 <tcp_split_unsent_seg+0x27c>)
 80117b4:	f007 f92c 	bl	8018a10 <iprintf>

  useg = pcb->unsent;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d102      	bne.n	80117ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80117c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117c8:	e116      	b.n	80119f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80117ca:	887b      	ldrh	r3, [r7, #2]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d109      	bne.n	80117e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80117d0:	4b8b      	ldr	r3, [pc, #556]	; (8011a00 <tcp_split_unsent_seg+0x274>)
 80117d2:	f240 3253 	movw	r2, #851	; 0x353
 80117d6:	498d      	ldr	r1, [pc, #564]	; (8011a0c <tcp_split_unsent_seg+0x280>)
 80117d8:	488b      	ldr	r0, [pc, #556]	; (8011a08 <tcp_split_unsent_seg+0x27c>)
 80117da:	f007 f919 	bl	8018a10 <iprintf>
    return ERR_VAL;
 80117de:	f06f 0305 	mvn.w	r3, #5
 80117e2:	e109      	b.n	80119f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	891b      	ldrh	r3, [r3, #8]
 80117e8:	887a      	ldrh	r2, [r7, #2]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d301      	bcc.n	80117f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80117ee:	2300      	movs	r3, #0
 80117f0:	e102      	b.n	80119f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117f6:	887a      	ldrh	r2, [r7, #2]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d906      	bls.n	801180a <tcp_split_unsent_seg+0x7e>
 80117fc:	4b80      	ldr	r3, [pc, #512]	; (8011a00 <tcp_split_unsent_seg+0x274>)
 80117fe:	f240 325b 	movw	r2, #859	; 0x35b
 8011802:	4983      	ldr	r1, [pc, #524]	; (8011a10 <tcp_split_unsent_seg+0x284>)
 8011804:	4880      	ldr	r0, [pc, #512]	; (8011a08 <tcp_split_unsent_seg+0x27c>)
 8011806:	f007 f903 	bl	8018a10 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	891b      	ldrh	r3, [r3, #8]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d106      	bne.n	8011820 <tcp_split_unsent_seg+0x94>
 8011812:	4b7b      	ldr	r3, [pc, #492]	; (8011a00 <tcp_split_unsent_seg+0x274>)
 8011814:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011818:	497e      	ldr	r1, [pc, #504]	; (8011a14 <tcp_split_unsent_seg+0x288>)
 801181a:	487b      	ldr	r0, [pc, #492]	; (8011a08 <tcp_split_unsent_seg+0x27c>)
 801181c:	f007 f8f8 	bl	8018a10 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	7a9b      	ldrb	r3, [r3, #10]
 8011824:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011826:	7bfb      	ldrb	r3, [r7, #15]
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	b2db      	uxtb	r3, r3
 801182c:	f003 0304 	and.w	r3, r3, #4
 8011830:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	891a      	ldrh	r2, [r3, #8]
 8011836:	887b      	ldrh	r3, [r7, #2]
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801183c:	7bbb      	ldrb	r3, [r7, #14]
 801183e:	b29a      	uxth	r2, r3
 8011840:	89bb      	ldrh	r3, [r7, #12]
 8011842:	4413      	add	r3, r2
 8011844:	b29b      	uxth	r3, r3
 8011846:	f44f 7220 	mov.w	r2, #640	; 0x280
 801184a:	4619      	mov	r1, r3
 801184c:	2036      	movs	r0, #54	; 0x36
 801184e:	f7fa fbab 	bl	800bfa8 <pbuf_alloc>
 8011852:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	2b00      	cmp	r3, #0
 8011858:	f000 80b7 	beq.w	80119ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	891a      	ldrh	r2, [r3, #8]
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	891b      	ldrh	r3, [r3, #8]
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	b29a      	uxth	r2, r3
 801186a:	887b      	ldrh	r3, [r7, #2]
 801186c:	4413      	add	r3, r2
 801186e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	6858      	ldr	r0, [r3, #4]
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	685a      	ldr	r2, [r3, #4]
 8011878:	7bbb      	ldrb	r3, [r7, #14]
 801187a:	18d1      	adds	r1, r2, r3
 801187c:	897b      	ldrh	r3, [r7, #10]
 801187e:	89ba      	ldrh	r2, [r7, #12]
 8011880:	f7fb f868 	bl	800c954 <pbuf_copy_partial>
 8011884:	4603      	mov	r3, r0
 8011886:	461a      	mov	r2, r3
 8011888:	89bb      	ldrh	r3, [r7, #12]
 801188a:	4293      	cmp	r3, r2
 801188c:	f040 809f 	bne.w	80119ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	68db      	ldr	r3, [r3, #12]
 8011894:	899b      	ldrh	r3, [r3, #12]
 8011896:	b29b      	uxth	r3, r3
 8011898:	4618      	mov	r0, r3
 801189a:	f7f9 fb35 	bl	800af08 <lwip_htons>
 801189e:	4603      	mov	r3, r0
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80118a8:	2300      	movs	r3, #0
 80118aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80118ac:	7efb      	ldrb	r3, [r7, #27]
 80118ae:	f003 0308 	and.w	r3, r3, #8
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d007      	beq.n	80118c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80118b6:	7efb      	ldrb	r3, [r7, #27]
 80118b8:	f023 0308 	bic.w	r3, r3, #8
 80118bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80118be:	7ebb      	ldrb	r3, [r7, #26]
 80118c0:	f043 0308 	orr.w	r3, r3, #8
 80118c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80118c6:	7efb      	ldrb	r3, [r7, #27]
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d007      	beq.n	80118e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80118d0:	7efb      	ldrb	r3, [r7, #27]
 80118d2:	f023 0301 	bic.w	r3, r3, #1
 80118d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80118d8:	7ebb      	ldrb	r3, [r7, #26]
 80118da:	f043 0301 	orr.w	r3, r3, #1
 80118de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7f9 fb23 	bl	800af32 <lwip_htonl>
 80118ec:	4602      	mov	r2, r0
 80118ee:	887b      	ldrh	r3, [r7, #2]
 80118f0:	18d1      	adds	r1, r2, r3
 80118f2:	7eba      	ldrb	r2, [r7, #26]
 80118f4:	7bfb      	ldrb	r3, [r7, #15]
 80118f6:	9300      	str	r3, [sp, #0]
 80118f8:	460b      	mov	r3, r1
 80118fa:	6939      	ldr	r1, [r7, #16]
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7ff fa4d 	bl	8010d9c <tcp_create_segment>
 8011902:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d063      	beq.n	80119d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	4618      	mov	r0, r3
 8011910:	f7fa feb8 	bl	800c684 <pbuf_clen>
 8011914:	4603      	mov	r3, r0
 8011916:	461a      	mov	r2, r3
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801191e:	1a9b      	subs	r3, r3, r2
 8011920:	b29a      	uxth	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	6858      	ldr	r0, [r3, #4]
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	891a      	ldrh	r2, [r3, #8]
 8011932:	89bb      	ldrh	r3, [r7, #12]
 8011934:	1ad3      	subs	r3, r2, r3
 8011936:	b29b      	uxth	r3, r3
 8011938:	4619      	mov	r1, r3
 801193a:	f7fa fc8f 	bl	800c25c <pbuf_realloc>
  useg->len -= remainder;
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	891a      	ldrh	r2, [r3, #8]
 8011942:	89bb      	ldrh	r3, [r7, #12]
 8011944:	1ad3      	subs	r3, r2, r3
 8011946:	b29a      	uxth	r2, r3
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	899b      	ldrh	r3, [r3, #12]
 8011952:	b29c      	uxth	r4, r3
 8011954:	7efb      	ldrb	r3, [r7, #27]
 8011956:	b29b      	uxth	r3, r3
 8011958:	4618      	mov	r0, r3
 801195a:	f7f9 fad5 	bl	800af08 <lwip_htons>
 801195e:	4603      	mov	r3, r0
 8011960:	461a      	mov	r2, r3
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	68db      	ldr	r3, [r3, #12]
 8011966:	4322      	orrs	r2, r4
 8011968:	b292      	uxth	r2, r2
 801196a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	4618      	mov	r0, r3
 8011972:	f7fa fe87 	bl	800c684 <pbuf_clen>
 8011976:	4603      	mov	r3, r0
 8011978:	461a      	mov	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011980:	4413      	add	r3, r2
 8011982:	b29a      	uxth	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	4618      	mov	r0, r3
 8011990:	f7fa fe78 	bl	800c684 <pbuf_clen>
 8011994:	4603      	mov	r3, r0
 8011996:	461a      	mov	r2, r3
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801199e:	4413      	add	r3, r2
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	69fa      	ldr	r2, [r7, #28]
 80119b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d103      	bne.n	80119c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2200      	movs	r2, #0
 80119c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	e016      	b.n	80119f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80119ca:	bf00      	nop
 80119cc:	e002      	b.n	80119d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119ce:	bf00      	nop
 80119d0:	e000      	b.n	80119d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d006      	beq.n	80119e8 <tcp_split_unsent_seg+0x25c>
 80119da:	4b09      	ldr	r3, [pc, #36]	; (8011a00 <tcp_split_unsent_seg+0x274>)
 80119dc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80119e0:	490d      	ldr	r1, [pc, #52]	; (8011a18 <tcp_split_unsent_seg+0x28c>)
 80119e2:	4809      	ldr	r0, [pc, #36]	; (8011a08 <tcp_split_unsent_seg+0x27c>)
 80119e4:	f007 f814 	bl	8018a10 <iprintf>
  if (p != NULL) {
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d002      	beq.n	80119f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80119ee:	6938      	ldr	r0, [r7, #16]
 80119f0:	f7fa fdba 	bl	800c568 <pbuf_free>
  }

  return ERR_MEM;
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3724      	adds	r7, #36	; 0x24
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd90      	pop	{r4, r7, pc}
 8011a00:	0801e1cc 	.word	0x0801e1cc
 8011a04:	0801e560 	.word	0x0801e560
 8011a08:	0801e220 	.word	0x0801e220
 8011a0c:	0801e584 	.word	0x0801e584
 8011a10:	0801e5a8 	.word	0x0801e5a8
 8011a14:	0801e5b8 	.word	0x0801e5b8
 8011a18:	0801e5c8 	.word	0x0801e5c8

08011a1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011a1c:	b590      	push	{r4, r7, lr}
 8011a1e:	b085      	sub	sp, #20
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d106      	bne.n	8011a38 <tcp_send_fin+0x1c>
 8011a2a:	4b21      	ldr	r3, [pc, #132]	; (8011ab0 <tcp_send_fin+0x94>)
 8011a2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011a30:	4920      	ldr	r1, [pc, #128]	; (8011ab4 <tcp_send_fin+0x98>)
 8011a32:	4821      	ldr	r0, [pc, #132]	; (8011ab8 <tcp_send_fin+0x9c>)
 8011a34:	f006 ffec 	bl	8018a10 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d02e      	beq.n	8011a9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a44:	60fb      	str	r3, [r7, #12]
 8011a46:	e002      	b.n	8011a4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d1f8      	bne.n	8011a48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	899b      	ldrh	r3, [r3, #12]
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7f9 fa52 	bl	800af08 <lwip_htons>
 8011a64:	4603      	mov	r3, r0
 8011a66:	b2db      	uxtb	r3, r3
 8011a68:	f003 0307 	and.w	r3, r3, #7
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d116      	bne.n	8011a9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	899b      	ldrh	r3, [r3, #12]
 8011a76:	b29c      	uxth	r4, r3
 8011a78:	2001      	movs	r0, #1
 8011a7a:	f7f9 fa45 	bl	800af08 <lwip_htons>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	461a      	mov	r2, r3
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	4322      	orrs	r2, r4
 8011a88:	b292      	uxth	r2, r2
 8011a8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	8b5b      	ldrh	r3, [r3, #26]
 8011a90:	f043 0320 	orr.w	r3, r3, #32
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e004      	b.n	8011aa8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011a9e:	2101      	movs	r1, #1
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f000 f80b 	bl	8011abc <tcp_enqueue_flags>
 8011aa6:	4603      	mov	r3, r0
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3714      	adds	r7, #20
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd90      	pop	{r4, r7, pc}
 8011ab0:	0801e1cc 	.word	0x0801e1cc
 8011ab4:	0801e5d4 	.word	0x0801e5d4
 8011ab8:	0801e220 	.word	0x0801e220

08011abc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b08a      	sub	sp, #40	; 0x28
 8011ac0:	af02      	add	r7, sp, #8
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011acc:	2300      	movs	r3, #0
 8011ace:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ad0:	78fb      	ldrb	r3, [r7, #3]
 8011ad2:	f003 0303 	and.w	r3, r3, #3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d106      	bne.n	8011ae8 <tcp_enqueue_flags+0x2c>
 8011ada:	4b67      	ldr	r3, [pc, #412]	; (8011c78 <tcp_enqueue_flags+0x1bc>)
 8011adc:	f240 4212 	movw	r2, #1042	; 0x412
 8011ae0:	4966      	ldr	r1, [pc, #408]	; (8011c7c <tcp_enqueue_flags+0x1c0>)
 8011ae2:	4867      	ldr	r0, [pc, #412]	; (8011c80 <tcp_enqueue_flags+0x1c4>)
 8011ae4:	f006 ff94 	bl	8018a10 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d106      	bne.n	8011afc <tcp_enqueue_flags+0x40>
 8011aee:	4b62      	ldr	r3, [pc, #392]	; (8011c78 <tcp_enqueue_flags+0x1bc>)
 8011af0:	f240 4213 	movw	r2, #1043	; 0x413
 8011af4:	4963      	ldr	r1, [pc, #396]	; (8011c84 <tcp_enqueue_flags+0x1c8>)
 8011af6:	4862      	ldr	r0, [pc, #392]	; (8011c80 <tcp_enqueue_flags+0x1c4>)
 8011af8:	f006 ff8a 	bl	8018a10 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011afc:	78fb      	ldrb	r3, [r7, #3]
 8011afe:	f003 0302 	and.w	r3, r3, #2
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d001      	beq.n	8011b0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011b06:	2301      	movs	r3, #1
 8011b08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b0a:	7ffb      	ldrb	r3, [r7, #31]
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	f003 0304 	and.w	r3, r3, #4
 8011b14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011b16:	7dfb      	ldrb	r3, [r7, #23]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b1e:	4619      	mov	r1, r3
 8011b20:	2036      	movs	r0, #54	; 0x36
 8011b22:	f7fa fa41 	bl	800bfa8 <pbuf_alloc>
 8011b26:	6138      	str	r0, [r7, #16]
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d109      	bne.n	8011b42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	8b5b      	ldrh	r3, [r3, #26]
 8011b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b40:	e095      	b.n	8011c6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	895a      	ldrh	r2, [r3, #10]
 8011b46:	7dfb      	ldrb	r3, [r7, #23]
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d206      	bcs.n	8011b5c <tcp_enqueue_flags+0xa0>
 8011b4e:	4b4a      	ldr	r3, [pc, #296]	; (8011c78 <tcp_enqueue_flags+0x1bc>)
 8011b50:	f240 423a 	movw	r2, #1082	; 0x43a
 8011b54:	494c      	ldr	r1, [pc, #304]	; (8011c88 <tcp_enqueue_flags+0x1cc>)
 8011b56:	484a      	ldr	r0, [pc, #296]	; (8011c80 <tcp_enqueue_flags+0x1c4>)
 8011b58:	f006 ff5a 	bl	8018a10 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011b60:	78fa      	ldrb	r2, [r7, #3]
 8011b62:	7ffb      	ldrb	r3, [r7, #31]
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	460b      	mov	r3, r1
 8011b68:	6939      	ldr	r1, [r7, #16]
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f7ff f916 	bl	8010d9c <tcp_create_segment>
 8011b70:	60f8      	str	r0, [r7, #12]
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d109      	bne.n	8011b8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	8b5b      	ldrh	r3, [r3, #26]
 8011b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b8a:	e070      	b.n	8011c6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	f003 0303 	and.w	r3, r3, #3
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <tcp_enqueue_flags+0xea>
 8011b98:	4b37      	ldr	r3, [pc, #220]	; (8011c78 <tcp_enqueue_flags+0x1bc>)
 8011b9a:	f240 4242 	movw	r2, #1090	; 0x442
 8011b9e:	493b      	ldr	r1, [pc, #236]	; (8011c8c <tcp_enqueue_flags+0x1d0>)
 8011ba0:	4837      	ldr	r0, [pc, #220]	; (8011c80 <tcp_enqueue_flags+0x1c4>)
 8011ba2:	f006 ff35 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	891b      	ldrh	r3, [r3, #8]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d006      	beq.n	8011bbc <tcp_enqueue_flags+0x100>
 8011bae:	4b32      	ldr	r3, [pc, #200]	; (8011c78 <tcp_enqueue_flags+0x1bc>)
 8011bb0:	f240 4243 	movw	r2, #1091	; 0x443
 8011bb4:	4936      	ldr	r1, [pc, #216]	; (8011c90 <tcp_enqueue_flags+0x1d4>)
 8011bb6:	4832      	ldr	r0, [pc, #200]	; (8011c80 <tcp_enqueue_flags+0x1c4>)
 8011bb8:	f006 ff2a 	bl	8018a10 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d103      	bne.n	8011bcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	66da      	str	r2, [r3, #108]	; 0x6c
 8011bca:	e00d      	b.n	8011be8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd0:	61bb      	str	r3, [r7, #24]
 8011bd2:	e002      	b.n	8011bda <tcp_enqueue_flags+0x11e>
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	61bb      	str	r3, [r7, #24]
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1f8      	bne.n	8011bd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011be2:	69bb      	ldr	r3, [r7, #24]
 8011be4:	68fa      	ldr	r2, [r7, #12]
 8011be6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011bf0:	78fb      	ldrb	r3, [r7, #3]
 8011bf2:	f003 0302 	and.w	r3, r3, #2
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d104      	bne.n	8011c04 <tcp_enqueue_flags+0x148>
 8011bfa:	78fb      	ldrb	r3, [r7, #3]
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d004      	beq.n	8011c0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c08:	1c5a      	adds	r2, r3, #1
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011c0e:	78fb      	ldrb	r3, [r7, #3]
 8011c10:	f003 0301 	and.w	r3, r3, #1
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d006      	beq.n	8011c26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	8b5b      	ldrh	r3, [r3, #26]
 8011c1c:	f043 0320 	orr.w	r3, r3, #32
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fa fd2a 	bl	800c684 <pbuf_clen>
 8011c30:	4603      	mov	r3, r0
 8011c32:	461a      	mov	r2, r3
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c3a:	4413      	add	r3, r2
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00e      	beq.n	8011c6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d10a      	bne.n	8011c6c <tcp_enqueue_flags+0x1b0>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d106      	bne.n	8011c6c <tcp_enqueue_flags+0x1b0>
 8011c5e:	4b06      	ldr	r3, [pc, #24]	; (8011c78 <tcp_enqueue_flags+0x1bc>)
 8011c60:	f240 4266 	movw	r2, #1126	; 0x466
 8011c64:	490b      	ldr	r1, [pc, #44]	; (8011c94 <tcp_enqueue_flags+0x1d8>)
 8011c66:	4806      	ldr	r0, [pc, #24]	; (8011c80 <tcp_enqueue_flags+0x1c4>)
 8011c68:	f006 fed2 	bl	8018a10 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011c6c:	2300      	movs	r3, #0
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3720      	adds	r7, #32
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	0801e1cc 	.word	0x0801e1cc
 8011c7c:	0801e5f0 	.word	0x0801e5f0
 8011c80:	0801e220 	.word	0x0801e220
 8011c84:	0801e648 	.word	0x0801e648
 8011c88:	0801e668 	.word	0x0801e668
 8011c8c:	0801e6a4 	.word	0x0801e6a4
 8011c90:	0801e6bc 	.word	0x0801e6bc
 8011c94:	0801e6e8 	.word	0x0801e6e8

08011c98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011c98:	b5b0      	push	{r4, r5, r7, lr}
 8011c9a:	b08a      	sub	sp, #40	; 0x28
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d106      	bne.n	8011cb4 <tcp_output+0x1c>
 8011ca6:	4ba0      	ldr	r3, [pc, #640]	; (8011f28 <tcp_output+0x290>)
 8011ca8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011cac:	499f      	ldr	r1, [pc, #636]	; (8011f2c <tcp_output+0x294>)
 8011cae:	48a0      	ldr	r0, [pc, #640]	; (8011f30 <tcp_output+0x298>)
 8011cb0:	f006 feae 	bl	8018a10 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	7d1b      	ldrb	r3, [r3, #20]
 8011cb8:	2b01      	cmp	r3, #1
 8011cba:	d106      	bne.n	8011cca <tcp_output+0x32>
 8011cbc:	4b9a      	ldr	r3, [pc, #616]	; (8011f28 <tcp_output+0x290>)
 8011cbe:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8011cc2:	499c      	ldr	r1, [pc, #624]	; (8011f34 <tcp_output+0x29c>)
 8011cc4:	489a      	ldr	r0, [pc, #616]	; (8011f30 <tcp_output+0x298>)
 8011cc6:	f006 fea3 	bl	8018a10 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011cca:	4b9b      	ldr	r3, [pc, #620]	; (8011f38 <tcp_output+0x2a0>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d101      	bne.n	8011cd8 <tcp_output+0x40>
    return ERR_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	e1d2      	b.n	801207e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d203      	bcs.n	8011cf0 <tcp_output+0x58>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cee:	e002      	b.n	8011cf6 <tcp_output+0x5e>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cf6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cfc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10b      	bne.n	8011d1c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	8b5b      	ldrh	r3, [r3, #26]
 8011d08:	f003 0302 	and.w	r3, r3, #2
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f000 81a9 	beq.w	8012064 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f000 fdd8 	bl	80128c8 <tcp_send_empty_ack>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	e1b0      	b.n	801207e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011d1c:	6879      	ldr	r1, [r7, #4]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	3304      	adds	r3, #4
 8011d22:	461a      	mov	r2, r3
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f7ff f81d 	bl	8010d64 <tcp_route>
 8011d2a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011d2c:	697b      	ldr	r3, [r7, #20]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d102      	bne.n	8011d38 <tcp_output+0xa0>
    return ERR_RTE;
 8011d32:	f06f 0303 	mvn.w	r3, #3
 8011d36:	e1a2      	b.n	801207e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d003      	beq.n	8011d46 <tcp_output+0xae>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d111      	bne.n	8011d6a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d002      	beq.n	8011d52 <tcp_output+0xba>
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	3304      	adds	r3, #4
 8011d50:	e000      	b.n	8011d54 <tcp_output+0xbc>
 8011d52:	2300      	movs	r3, #0
 8011d54:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d102      	bne.n	8011d62 <tcp_output+0xca>
      return ERR_RTE;
 8011d5c:	f06f 0303 	mvn.w	r3, #3
 8011d60:	e18d      	b.n	801207e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	681a      	ldr	r2, [r3, #0]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7f9 f8de 	bl	800af32 <lwip_htonl>
 8011d76:	4602      	mov	r2, r0
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d7c:	1ad3      	subs	r3, r2, r3
 8011d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d80:	8912      	ldrh	r2, [r2, #8]
 8011d82:	4413      	add	r3, r2
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d227      	bcs.n	8011dda <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d90:	461a      	mov	r2, r3
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d114      	bne.n	8011dc2 <tcp_output+0x12a>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d110      	bne.n	8011dc2 <tcp_output+0x12a>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d10b      	bne.n	8011dc2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2201      	movs	r2, #1
 8011db6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	8b5b      	ldrh	r3, [r3, #26]
 8011dc6:	f003 0302 	and.w	r3, r3, #2
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	f000 814c 	beq.w	8012068 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 fd79 	bl	80128c8 <tcp_send_empty_ack>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	e151      	b.n	801207e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011de8:	6a3b      	ldr	r3, [r7, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	f000 811b 	beq.w	8012026 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8011df0:	e002      	b.n	8011df8 <tcp_output+0x160>
 8011df2:	6a3b      	ldr	r3, [r7, #32]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	623b      	str	r3, [r7, #32]
 8011df8:	6a3b      	ldr	r3, [r7, #32]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d1f8      	bne.n	8011df2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011e00:	e111      	b.n	8012026 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	899b      	ldrh	r3, [r3, #12]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7f9 f87c 	bl	800af08 <lwip_htons>
 8011e10:	4603      	mov	r3, r0
 8011e12:	b2db      	uxtb	r3, r3
 8011e14:	f003 0304 	and.w	r3, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d006      	beq.n	8011e2a <tcp_output+0x192>
 8011e1c:	4b42      	ldr	r3, [pc, #264]	; (8011f28 <tcp_output+0x290>)
 8011e1e:	f240 5237 	movw	r2, #1335	; 0x537
 8011e22:	4946      	ldr	r1, [pc, #280]	; (8011f3c <tcp_output+0x2a4>)
 8011e24:	4842      	ldr	r0, [pc, #264]	; (8011f30 <tcp_output+0x298>)
 8011e26:	f006 fdf3 	bl	8018a10 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d01f      	beq.n	8011e72 <tcp_output+0x1da>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	8b5b      	ldrh	r3, [r3, #26]
 8011e36:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d119      	bne.n	8011e72 <tcp_output+0x1da>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00b      	beq.n	8011e5e <tcp_output+0x1c6>
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d110      	bne.n	8011e72 <tcp_output+0x1da>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e54:	891a      	ldrh	r2, [r3, #8]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d209      	bcs.n	8011e72 <tcp_output+0x1da>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d004      	beq.n	8011e72 <tcp_output+0x1da>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e6e:	2b08      	cmp	r3, #8
 8011e70:	d901      	bls.n	8011e76 <tcp_output+0x1de>
 8011e72:	2301      	movs	r3, #1
 8011e74:	e000      	b.n	8011e78 <tcp_output+0x1e0>
 8011e76:	2300      	movs	r3, #0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d106      	bne.n	8011e8a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	8b5b      	ldrh	r3, [r3, #26]
 8011e80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	f000 80e3 	beq.w	8012050 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	7d1b      	ldrb	r3, [r3, #20]
 8011e8e:	2b02      	cmp	r3, #2
 8011e90:	d00d      	beq.n	8011eae <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	899b      	ldrh	r3, [r3, #12]
 8011e98:	b29c      	uxth	r4, r3
 8011e9a:	2010      	movs	r0, #16
 8011e9c:	f7f9 f834 	bl	800af08 <lwip_htons>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	4322      	orrs	r2, r4
 8011eaa:	b292      	uxth	r2, r2
 8011eac:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011eae:	697a      	ldr	r2, [r7, #20]
 8011eb0:	6879      	ldr	r1, [r7, #4]
 8011eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eb4:	f000 f908 	bl	80120c8 <tcp_output_segment>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d009      	beq.n	8011ed8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	8b5b      	ldrh	r3, [r3, #26]
 8011ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	835a      	strh	r2, [r3, #26]
      return err;
 8011ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed6:	e0d2      	b.n	801207e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	7d1b      	ldrb	r3, [r3, #20]
 8011ee4:	2b02      	cmp	r3, #2
 8011ee6:	d006      	beq.n	8011ef6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	8b5b      	ldrh	r3, [r3, #26]
 8011eec:	f023 0303 	bic.w	r3, r3, #3
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef8:	68db      	ldr	r3, [r3, #12]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7f9 f818 	bl	800af32 <lwip_htonl>
 8011f02:	4604      	mov	r4, r0
 8011f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f06:	891b      	ldrh	r3, [r3, #8]
 8011f08:	461d      	mov	r5, r3
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	899b      	ldrh	r3, [r3, #12]
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7f8 fff8 	bl	800af08 <lwip_htons>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	f003 0303 	and.w	r3, r3, #3
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d00d      	beq.n	8011f40 <tcp_output+0x2a8>
 8011f24:	2301      	movs	r3, #1
 8011f26:	e00c      	b.n	8011f42 <tcp_output+0x2aa>
 8011f28:	0801e1cc 	.word	0x0801e1cc
 8011f2c:	0801e710 	.word	0x0801e710
 8011f30:	0801e220 	.word	0x0801e220
 8011f34:	0801e728 	.word	0x0801e728
 8011f38:	20008fc4 	.word	0x20008fc4
 8011f3c:	0801e750 	.word	0x0801e750
 8011f40:	2300      	movs	r3, #0
 8011f42:	442b      	add	r3, r5
 8011f44:	4423      	add	r3, r4
 8011f46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	1ad3      	subs	r3, r2, r3
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	da02      	bge.n	8011f5a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	68ba      	ldr	r2, [r7, #8]
 8011f58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	891b      	ldrh	r3, [r3, #8]
 8011f5e:	461c      	mov	r4, r3
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	899b      	ldrh	r3, [r3, #12]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7f8 ffcd 	bl	800af08 <lwip_htons>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	f003 0303 	and.w	r3, r3, #3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d001      	beq.n	8011f7e <tcp_output+0x2e6>
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	e000      	b.n	8011f80 <tcp_output+0x2e8>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4423      	add	r3, r4
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d049      	beq.n	801201a <tcp_output+0x382>
      seg->next = NULL;
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	2200      	movs	r2, #0
 8011f8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d105      	bne.n	8011fa0 <tcp_output+0x308>
        pcb->unacked = seg;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f98:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9c:	623b      	str	r3, [r7, #32]
 8011f9e:	e03f      	b.n	8012020 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f7f8 ffc3 	bl	800af32 <lwip_htonl>
 8011fac:	4604      	mov	r4, r0
 8011fae:	6a3b      	ldr	r3, [r7, #32]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7f8 ffbc 	bl	800af32 <lwip_htonl>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	1ae3      	subs	r3, r4, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	da24      	bge.n	801200c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3370      	adds	r3, #112	; 0x70
 8011fc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fc8:	e002      	b.n	8011fd0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d011      	beq.n	8011ffc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7f8 ffa6 	bl	800af32 <lwip_htonl>
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7f8 ff9f 	bl	800af32 <lwip_htonl>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	dbe6      	blt.n	8011fca <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012002:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012008:	601a      	str	r2, [r3, #0]
 801200a:	e009      	b.n	8012020 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801200c:	6a3b      	ldr	r3, [r7, #32]
 801200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012010:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	623b      	str	r3, [r7, #32]
 8012018:	e002      	b.n	8012020 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801201a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801201c:	f7fb ff1a 	bl	800de54 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012024:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	2b00      	cmp	r3, #0
 801202a:	d012      	beq.n	8012052 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	685b      	ldr	r3, [r3, #4]
 8012032:	4618      	mov	r0, r3
 8012034:	f7f8 ff7d 	bl	800af32 <lwip_htonl>
 8012038:	4602      	mov	r2, r0
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012042:	8912      	ldrh	r2, [r2, #8]
 8012044:	4413      	add	r3, r2
  while (seg != NULL &&
 8012046:	69ba      	ldr	r2, [r7, #24]
 8012048:	429a      	cmp	r2, r3
 801204a:	f4bf aeda 	bcs.w	8011e02 <tcp_output+0x16a>
 801204e:	e000      	b.n	8012052 <tcp_output+0x3ba>
      break;
 8012050:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012056:	2b00      	cmp	r3, #0
 8012058:	d108      	bne.n	801206c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012062:	e004      	b.n	801206e <tcp_output+0x3d6>
    goto output_done;
 8012064:	bf00      	nop
 8012066:	e002      	b.n	801206e <tcp_output+0x3d6>
    goto output_done;
 8012068:	bf00      	nop
 801206a:	e000      	b.n	801206e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801206c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	8b5b      	ldrh	r3, [r3, #26]
 8012072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012076:	b29a      	uxth	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3728      	adds	r7, #40	; 0x28
 8012082:	46bd      	mov	sp, r7
 8012084:	bdb0      	pop	{r4, r5, r7, pc}
 8012086:	bf00      	nop

08012088 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <tcp_output_segment_busy+0x1c>
 8012096:	4b09      	ldr	r3, [pc, #36]	; (80120bc <tcp_output_segment_busy+0x34>)
 8012098:	f240 529a 	movw	r2, #1434	; 0x59a
 801209c:	4908      	ldr	r1, [pc, #32]	; (80120c0 <tcp_output_segment_busy+0x38>)
 801209e:	4809      	ldr	r0, [pc, #36]	; (80120c4 <tcp_output_segment_busy+0x3c>)
 80120a0:	f006 fcb6 	bl	8018a10 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	7b9b      	ldrb	r3, [r3, #14]
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d001      	beq.n	80120b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80120ae:	2301      	movs	r3, #1
 80120b0:	e000      	b.n	80120b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80120b2:	2300      	movs	r3, #0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3708      	adds	r7, #8
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	0801e1cc 	.word	0x0801e1cc
 80120c0:	0801e768 	.word	0x0801e768
 80120c4:	0801e220 	.word	0x0801e220

080120c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80120c8:	b5b0      	push	{r4, r5, r7, lr}
 80120ca:	b08c      	sub	sp, #48	; 0x30
 80120cc:	af04      	add	r7, sp, #16
 80120ce:	60f8      	str	r0, [r7, #12]
 80120d0:	60b9      	str	r1, [r7, #8]
 80120d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d106      	bne.n	80120e8 <tcp_output_segment+0x20>
 80120da:	4b64      	ldr	r3, [pc, #400]	; (801226c <tcp_output_segment+0x1a4>)
 80120dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80120e0:	4963      	ldr	r1, [pc, #396]	; (8012270 <tcp_output_segment+0x1a8>)
 80120e2:	4864      	ldr	r0, [pc, #400]	; (8012274 <tcp_output_segment+0x1ac>)
 80120e4:	f006 fc94 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d106      	bne.n	80120fc <tcp_output_segment+0x34>
 80120ee:	4b5f      	ldr	r3, [pc, #380]	; (801226c <tcp_output_segment+0x1a4>)
 80120f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80120f4:	4960      	ldr	r1, [pc, #384]	; (8012278 <tcp_output_segment+0x1b0>)
 80120f6:	485f      	ldr	r0, [pc, #380]	; (8012274 <tcp_output_segment+0x1ac>)
 80120f8:	f006 fc8a 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d106      	bne.n	8012110 <tcp_output_segment+0x48>
 8012102:	4b5a      	ldr	r3, [pc, #360]	; (801226c <tcp_output_segment+0x1a4>)
 8012104:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012108:	495c      	ldr	r1, [pc, #368]	; (801227c <tcp_output_segment+0x1b4>)
 801210a:	485a      	ldr	r0, [pc, #360]	; (8012274 <tcp_output_segment+0x1ac>)
 801210c:	f006 fc80 	bl	8018a10 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7ff ffb9 	bl	8012088 <tcp_output_segment_busy>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d001      	beq.n	8012120 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801211c:	2300      	movs	r3, #0
 801211e:	e0a0      	b.n	8012262 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	68dc      	ldr	r4, [r3, #12]
 8012128:	4610      	mov	r0, r2
 801212a:	f7f8 ff02 	bl	800af32 <lwip_htonl>
 801212e:	4603      	mov	r3, r0
 8012130:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	68dc      	ldr	r4, [r3, #12]
 801213a:	4610      	mov	r0, r2
 801213c:	f7f8 fee4 	bl	800af08 <lwip_htons>
 8012140:	4603      	mov	r3, r0
 8012142:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801214c:	441a      	add	r2, r3
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	68db      	ldr	r3, [r3, #12]
 8012156:	3314      	adds	r3, #20
 8012158:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	7a9b      	ldrb	r3, [r3, #10]
 801215e:	f003 0301 	and.w	r3, r3, #1
 8012162:	2b00      	cmp	r3, #0
 8012164:	d015      	beq.n	8012192 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	3304      	adds	r3, #4
 801216a:	461a      	mov	r2, r3
 801216c:	6879      	ldr	r1, [r7, #4]
 801216e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012172:	f7fc fa33 	bl	800e5dc <tcp_eff_send_mss_netif>
 8012176:	4603      	mov	r3, r0
 8012178:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801217a:	8b7b      	ldrh	r3, [r7, #26]
 801217c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012180:	4618      	mov	r0, r3
 8012182:	f7f8 fed6 	bl	800af32 <lwip_htonl>
 8012186:	4602      	mov	r2, r0
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	3304      	adds	r3, #4
 8012190:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012198:	2b00      	cmp	r3, #0
 801219a:	da02      	bge.n	80121a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	2200      	movs	r2, #0
 80121a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10c      	bne.n	80121c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80121aa:	4b35      	ldr	r3, [pc, #212]	; (8012280 <tcp_output_segment+0x1b8>)
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7f8 feba 	bl	800af32 <lwip_htonl>
 80121be:	4602      	mov	r2, r0
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	68db      	ldr	r3, [r3, #12]
 80121c8:	461a      	mov	r2, r3
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	685b      	ldr	r3, [r3, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	685b      	ldr	r3, [r3, #4]
 80121d8:	8959      	ldrh	r1, [r3, #10]
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	8b3a      	ldrh	r2, [r7, #24]
 80121e0:	1a8a      	subs	r2, r1, r2
 80121e2:	b292      	uxth	r2, r2
 80121e4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	8919      	ldrh	r1, [r3, #8]
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	8b3a      	ldrh	r2, [r7, #24]
 80121f2:	1a8a      	subs	r2, r1, r2
 80121f4:	b292      	uxth	r2, r2
 80121f6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	68fa      	ldr	r2, [r7, #12]
 80121fe:	68d2      	ldr	r2, [r2, #12]
 8012200:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	68db      	ldr	r3, [r3, #12]
 8012206:	2200      	movs	r2, #0
 8012208:	741a      	strb	r2, [r3, #16]
 801220a:	2200      	movs	r2, #0
 801220c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	f103 0214 	add.w	r2, r3, #20
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	7a9b      	ldrb	r3, [r3, #10]
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	f003 0304 	and.w	r3, r3, #4
 8012220:	4413      	add	r3, r2
 8012222:	69fa      	ldr	r2, [r7, #28]
 8012224:	429a      	cmp	r2, r3
 8012226:	d006      	beq.n	8012236 <tcp_output_segment+0x16e>
 8012228:	4b10      	ldr	r3, [pc, #64]	; (801226c <tcp_output_segment+0x1a4>)
 801222a:	f240 621c 	movw	r2, #1564	; 0x61c
 801222e:	4915      	ldr	r1, [pc, #84]	; (8012284 <tcp_output_segment+0x1bc>)
 8012230:	4810      	ldr	r0, [pc, #64]	; (8012274 <tcp_output_segment+0x1ac>)
 8012232:	f006 fbed 	bl	8018a10 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	6858      	ldr	r0, [r3, #4]
 801223a:	68b9      	ldr	r1, [r7, #8]
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	1d1c      	adds	r4, r3, #4
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	7add      	ldrb	r5, [r3, #11]
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	7a9b      	ldrb	r3, [r3, #10]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	9202      	str	r2, [sp, #8]
 801224c:	2206      	movs	r2, #6
 801224e:	9201      	str	r2, [sp, #4]
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	462b      	mov	r3, r5
 8012254:	4622      	mov	r2, r4
 8012256:	f002 fbb5 	bl	80149c4 <ip4_output_if>
 801225a:	4603      	mov	r3, r0
 801225c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801225e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3720      	adds	r7, #32
 8012266:	46bd      	mov	sp, r7
 8012268:	bdb0      	pop	{r4, r5, r7, pc}
 801226a:	bf00      	nop
 801226c:	0801e1cc 	.word	0x0801e1cc
 8012270:	0801e790 	.word	0x0801e790
 8012274:	0801e220 	.word	0x0801e220
 8012278:	0801e7b0 	.word	0x0801e7b0
 801227c:	0801e7d0 	.word	0x0801e7d0
 8012280:	20008fb4 	.word	0x20008fb4
 8012284:	0801e7f4 	.word	0x0801e7f4

08012288 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012288:	b5b0      	push	{r4, r5, r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d106      	bne.n	80122a4 <tcp_rexmit_rto_prepare+0x1c>
 8012296:	4b31      	ldr	r3, [pc, #196]	; (801235c <tcp_rexmit_rto_prepare+0xd4>)
 8012298:	f240 6263 	movw	r2, #1635	; 0x663
 801229c:	4930      	ldr	r1, [pc, #192]	; (8012360 <tcp_rexmit_rto_prepare+0xd8>)
 801229e:	4831      	ldr	r0, [pc, #196]	; (8012364 <tcp_rexmit_rto_prepare+0xdc>)
 80122a0:	f006 fbb6 	bl	8018a10 <iprintf>

  if (pcb->unacked == NULL) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d102      	bne.n	80122b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80122ac:	f06f 0305 	mvn.w	r3, #5
 80122b0:	e050      	b.n	8012354 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b6:	60fb      	str	r3, [r7, #12]
 80122b8:	e00b      	b.n	80122d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f7ff fee4 	bl	8012088 <tcp_output_segment_busy>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80122c6:	f06f 0305 	mvn.w	r3, #5
 80122ca:	e043      	b.n	8012354 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	60fb      	str	r3, [r7, #12]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d1ef      	bne.n	80122ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	f7ff fed4 	bl	8012088 <tcp_output_segment_busy>
 80122e0:	4603      	mov	r3, r0
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d002      	beq.n	80122ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80122e6:	f06f 0305 	mvn.w	r3, #5
 80122ea:	e033      	b.n	8012354 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	8b5b      	ldrh	r3, [r3, #26]
 8012306:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801230a:	b29a      	uxth	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	4618      	mov	r0, r3
 8012318:	f7f8 fe0b 	bl	800af32 <lwip_htonl>
 801231c:	4604      	mov	r4, r0
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	891b      	ldrh	r3, [r3, #8]
 8012322:	461d      	mov	r5, r3
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	899b      	ldrh	r3, [r3, #12]
 801232a:	b29b      	uxth	r3, r3
 801232c:	4618      	mov	r0, r3
 801232e:	f7f8 fdeb 	bl	800af08 <lwip_htons>
 8012332:	4603      	mov	r3, r0
 8012334:	b2db      	uxtb	r3, r3
 8012336:	f003 0303 	and.w	r3, r3, #3
 801233a:	2b00      	cmp	r3, #0
 801233c:	d001      	beq.n	8012342 <tcp_rexmit_rto_prepare+0xba>
 801233e:	2301      	movs	r3, #1
 8012340:	e000      	b.n	8012344 <tcp_rexmit_rto_prepare+0xbc>
 8012342:	2300      	movs	r3, #0
 8012344:	442b      	add	r3, r5
 8012346:	18e2      	adds	r2, r4, r3
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3710      	adds	r7, #16
 8012358:	46bd      	mov	sp, r7
 801235a:	bdb0      	pop	{r4, r5, r7, pc}
 801235c:	0801e1cc 	.word	0x0801e1cc
 8012360:	0801e808 	.word	0x0801e808
 8012364:	0801e220 	.word	0x0801e220

08012368 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d106      	bne.n	8012384 <tcp_rexmit_rto_commit+0x1c>
 8012376:	4b0d      	ldr	r3, [pc, #52]	; (80123ac <tcp_rexmit_rto_commit+0x44>)
 8012378:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801237c:	490c      	ldr	r1, [pc, #48]	; (80123b0 <tcp_rexmit_rto_commit+0x48>)
 801237e:	480d      	ldr	r0, [pc, #52]	; (80123b4 <tcp_rexmit_rto_commit+0x4c>)
 8012380:	f006 fb46 	bl	8018a10 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801238a:	2bff      	cmp	r3, #255	; 0xff
 801238c:	d007      	beq.n	801239e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012394:	3301      	adds	r3, #1
 8012396:	b2da      	uxtb	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7ff fc7a 	bl	8011c98 <tcp_output>
}
 80123a4:	bf00      	nop
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	0801e1cc 	.word	0x0801e1cc
 80123b0:	0801e82c 	.word	0x0801e82c
 80123b4:	0801e220 	.word	0x0801e220

080123b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <tcp_rexmit_rto+0x1c>
 80123c6:	4b0a      	ldr	r3, [pc, #40]	; (80123f0 <tcp_rexmit_rto+0x38>)
 80123c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80123cc:	4909      	ldr	r1, [pc, #36]	; (80123f4 <tcp_rexmit_rto+0x3c>)
 80123ce:	480a      	ldr	r0, [pc, #40]	; (80123f8 <tcp_rexmit_rto+0x40>)
 80123d0:	f006 fb1e 	bl	8018a10 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff ff57 	bl	8012288 <tcp_rexmit_rto_prepare>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d102      	bne.n	80123e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff ffc1 	bl	8012368 <tcp_rexmit_rto_commit>
  }
}
 80123e6:	bf00      	nop
 80123e8:	3708      	adds	r7, #8
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}
 80123ee:	bf00      	nop
 80123f0:	0801e1cc 	.word	0x0801e1cc
 80123f4:	0801e850 	.word	0x0801e850
 80123f8:	0801e220 	.word	0x0801e220

080123fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80123fc:	b590      	push	{r4, r7, lr}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d106      	bne.n	8012418 <tcp_rexmit+0x1c>
 801240a:	4b2f      	ldr	r3, [pc, #188]	; (80124c8 <tcp_rexmit+0xcc>)
 801240c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012410:	492e      	ldr	r1, [pc, #184]	; (80124cc <tcp_rexmit+0xd0>)
 8012412:	482f      	ldr	r0, [pc, #188]	; (80124d0 <tcp_rexmit+0xd4>)
 8012414:	f006 fafc 	bl	8018a10 <iprintf>

  if (pcb->unacked == NULL) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241c:	2b00      	cmp	r3, #0
 801241e:	d102      	bne.n	8012426 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012420:	f06f 0305 	mvn.w	r3, #5
 8012424:	e04c      	b.n	80124c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801242a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801242c:	68b8      	ldr	r0, [r7, #8]
 801242e:	f7ff fe2b 	bl	8012088 <tcp_output_segment_busy>
 8012432:	4603      	mov	r3, r0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012438:	f06f 0305 	mvn.w	r3, #5
 801243c:	e040      	b.n	80124c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	336c      	adds	r3, #108	; 0x6c
 801244a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801244c:	e002      	b.n	8012454 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d011      	beq.n	8012480 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	4618      	mov	r0, r3
 8012466:	f7f8 fd64 	bl	800af32 <lwip_htonl>
 801246a:	4604      	mov	r4, r0
 801246c:	68bb      	ldr	r3, [r7, #8]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	4618      	mov	r0, r3
 8012474:	f7f8 fd5d 	bl	800af32 <lwip_htonl>
 8012478:	4603      	mov	r3, r0
 801247a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801247c:	2b00      	cmp	r3, #0
 801247e:	dbe6      	blt.n	801244e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d103      	bne.n	801249e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2200      	movs	r2, #0
 801249a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124a4:	2bff      	cmp	r3, #255	; 0xff
 80124a6:	d007      	beq.n	80124b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80124ae:	3301      	adds	r3, #1
 80124b0:	b2da      	uxtb	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2200      	movs	r2, #0
 80124bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3714      	adds	r7, #20
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd90      	pop	{r4, r7, pc}
 80124c8:	0801e1cc 	.word	0x0801e1cc
 80124cc:	0801e86c 	.word	0x0801e86c
 80124d0:	0801e220 	.word	0x0801e220

080124d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d106      	bne.n	80124f0 <tcp_rexmit_fast+0x1c>
 80124e2:	4b2f      	ldr	r3, [pc, #188]	; (80125a0 <tcp_rexmit_fast+0xcc>)
 80124e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80124e8:	492e      	ldr	r1, [pc, #184]	; (80125a4 <tcp_rexmit_fast+0xd0>)
 80124ea:	482f      	ldr	r0, [pc, #188]	; (80125a8 <tcp_rexmit_fast+0xd4>)
 80124ec:	f006 fa90 	bl	8018a10 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d04f      	beq.n	8012598 <tcp_rexmit_fast+0xc4>
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	8b5b      	ldrh	r3, [r3, #26]
 80124fc:	f003 0304 	and.w	r3, r3, #4
 8012500:	2b00      	cmp	r3, #0
 8012502:	d149      	bne.n	8012598 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7ff ff79 	bl	80123fc <tcp_rexmit>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d143      	bne.n	8012598 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801251c:	429a      	cmp	r2, r3
 801251e:	d208      	bcs.n	8012532 <tcp_rexmit_fast+0x5e>
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012526:	2b00      	cmp	r3, #0
 8012528:	da00      	bge.n	801252c <tcp_rexmit_fast+0x58>
 801252a:	3301      	adds	r3, #1
 801252c:	105b      	asrs	r3, r3, #1
 801252e:	b29b      	uxth	r3, r3
 8012530:	e007      	b.n	8012542 <tcp_rexmit_fast+0x6e>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012538:	2b00      	cmp	r3, #0
 801253a:	da00      	bge.n	801253e <tcp_rexmit_fast+0x6a>
 801253c:	3301      	adds	r3, #1
 801253e:	105b      	asrs	r3, r3, #1
 8012540:	b29b      	uxth	r3, r3
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801254e:	461a      	mov	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	429a      	cmp	r2, r3
 8012558:	d206      	bcs.n	8012568 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	b29a      	uxth	r2, r3
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012572:	4619      	mov	r1, r3
 8012574:	0049      	lsls	r1, r1, #1
 8012576:	440b      	add	r3, r1
 8012578:	b29b      	uxth	r3, r3
 801257a:	4413      	add	r3, r2
 801257c:	b29a      	uxth	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	8b5b      	ldrh	r3, [r3, #26]
 8012588:	f043 0304 	orr.w	r3, r3, #4
 801258c:	b29a      	uxth	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2200      	movs	r2, #0
 8012596:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012598:	bf00      	nop
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	0801e1cc 	.word	0x0801e1cc
 80125a4:	0801e884 	.word	0x0801e884
 80125a8:	0801e220 	.word	0x0801e220

080125ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b086      	sub	sp, #24
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	607b      	str	r3, [r7, #4]
 80125b6:	460b      	mov	r3, r1
 80125b8:	817b      	strh	r3, [r7, #10]
 80125ba:	4613      	mov	r3, r2
 80125bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80125be:	897a      	ldrh	r2, [r7, #10]
 80125c0:	893b      	ldrh	r3, [r7, #8]
 80125c2:	4413      	add	r3, r2
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	3314      	adds	r3, #20
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125ce:	4619      	mov	r1, r3
 80125d0:	2022      	movs	r0, #34	; 0x22
 80125d2:	f7f9 fce9 	bl	800bfa8 <pbuf_alloc>
 80125d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d04e      	beq.n	801267c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	895b      	ldrh	r3, [r3, #10]
 80125e2:	461a      	mov	r2, r3
 80125e4:	897b      	ldrh	r3, [r7, #10]
 80125e6:	3314      	adds	r3, #20
 80125e8:	429a      	cmp	r2, r3
 80125ea:	da06      	bge.n	80125fa <tcp_output_alloc_header_common+0x4e>
 80125ec:	4b26      	ldr	r3, [pc, #152]	; (8012688 <tcp_output_alloc_header_common+0xdc>)
 80125ee:	f240 7224 	movw	r2, #1828	; 0x724
 80125f2:	4926      	ldr	r1, [pc, #152]	; (801268c <tcp_output_alloc_header_common+0xe0>)
 80125f4:	4826      	ldr	r0, [pc, #152]	; (8012690 <tcp_output_alloc_header_common+0xe4>)
 80125f6:	f006 fa0b 	bl	8018a10 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012600:	8c3b      	ldrh	r3, [r7, #32]
 8012602:	4618      	mov	r0, r3
 8012604:	f7f8 fc80 	bl	800af08 <lwip_htons>
 8012608:	4603      	mov	r3, r0
 801260a:	461a      	mov	r2, r3
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012612:	4618      	mov	r0, r3
 8012614:	f7f8 fc78 	bl	800af08 <lwip_htons>
 8012618:	4603      	mov	r3, r0
 801261a:	461a      	mov	r2, r3
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7f8 fc83 	bl	800af32 <lwip_htonl>
 801262c:	4602      	mov	r2, r0
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012632:	897b      	ldrh	r3, [r7, #10]
 8012634:	089b      	lsrs	r3, r3, #2
 8012636:	b29b      	uxth	r3, r3
 8012638:	3305      	adds	r3, #5
 801263a:	b29b      	uxth	r3, r3
 801263c:	031b      	lsls	r3, r3, #12
 801263e:	b29a      	uxth	r2, r3
 8012640:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012644:	b29b      	uxth	r3, r3
 8012646:	4313      	orrs	r3, r2
 8012648:	b29b      	uxth	r3, r3
 801264a:	4618      	mov	r0, r3
 801264c:	f7f8 fc5c 	bl	800af08 <lwip_htons>
 8012650:	4603      	mov	r3, r0
 8012652:	461a      	mov	r2, r3
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012658:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801265a:	4618      	mov	r0, r3
 801265c:	f7f8 fc54 	bl	800af08 <lwip_htons>
 8012660:	4603      	mov	r3, r0
 8012662:	461a      	mov	r2, r3
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	2200      	movs	r2, #0
 801266c:	741a      	strb	r2, [r3, #16]
 801266e:	2200      	movs	r2, #0
 8012670:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	2200      	movs	r2, #0
 8012676:	749a      	strb	r2, [r3, #18]
 8012678:	2200      	movs	r2, #0
 801267a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801267c:	697b      	ldr	r3, [r7, #20]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3718      	adds	r7, #24
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	0801e1cc 	.word	0x0801e1cc
 801268c:	0801e8a4 	.word	0x0801e8a4
 8012690:	0801e220 	.word	0x0801e220

08012694 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012694:	b5b0      	push	{r4, r5, r7, lr}
 8012696:	b08a      	sub	sp, #40	; 0x28
 8012698:	af04      	add	r7, sp, #16
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	607b      	str	r3, [r7, #4]
 801269e:	460b      	mov	r3, r1
 80126a0:	817b      	strh	r3, [r7, #10]
 80126a2:	4613      	mov	r3, r2
 80126a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d106      	bne.n	80126ba <tcp_output_alloc_header+0x26>
 80126ac:	4b15      	ldr	r3, [pc, #84]	; (8012704 <tcp_output_alloc_header+0x70>)
 80126ae:	f240 7242 	movw	r2, #1858	; 0x742
 80126b2:	4915      	ldr	r1, [pc, #84]	; (8012708 <tcp_output_alloc_header+0x74>)
 80126b4:	4815      	ldr	r0, [pc, #84]	; (801270c <tcp_output_alloc_header+0x78>)
 80126b6:	f006 f9ab 	bl	8018a10 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	8adb      	ldrh	r3, [r3, #22]
 80126c2:	68fa      	ldr	r2, [r7, #12]
 80126c4:	8b12      	ldrh	r2, [r2, #24]
 80126c6:	68f9      	ldr	r1, [r7, #12]
 80126c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80126ca:	893d      	ldrh	r5, [r7, #8]
 80126cc:	897c      	ldrh	r4, [r7, #10]
 80126ce:	9103      	str	r1, [sp, #12]
 80126d0:	2110      	movs	r1, #16
 80126d2:	9102      	str	r1, [sp, #8]
 80126d4:	9201      	str	r2, [sp, #4]
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	462a      	mov	r2, r5
 80126dc:	4621      	mov	r1, r4
 80126de:	f7ff ff65 	bl	80125ac <tcp_output_alloc_header_common>
 80126e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d006      	beq.n	80126f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ee:	68fa      	ldr	r2, [r7, #12]
 80126f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80126f2:	441a      	add	r2, r3
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80126f8:	697b      	ldr	r3, [r7, #20]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3718      	adds	r7, #24
 80126fe:	46bd      	mov	sp, r7
 8012700:	bdb0      	pop	{r4, r5, r7, pc}
 8012702:	bf00      	nop
 8012704:	0801e1cc 	.word	0x0801e1cc
 8012708:	0801e8d4 	.word	0x0801e8d4
 801270c:	0801e220 	.word	0x0801e220

08012710 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b088      	sub	sp, #32
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	4611      	mov	r1, r2
 801271c:	461a      	mov	r2, r3
 801271e:	460b      	mov	r3, r1
 8012720:	71fb      	strb	r3, [r7, #7]
 8012722:	4613      	mov	r3, r2
 8012724:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012726:	2300      	movs	r3, #0
 8012728:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d106      	bne.n	801273e <tcp_output_fill_options+0x2e>
 8012730:	4b13      	ldr	r3, [pc, #76]	; (8012780 <tcp_output_fill_options+0x70>)
 8012732:	f240 7256 	movw	r2, #1878	; 0x756
 8012736:	4913      	ldr	r1, [pc, #76]	; (8012784 <tcp_output_fill_options+0x74>)
 8012738:	4813      	ldr	r0, [pc, #76]	; (8012788 <tcp_output_fill_options+0x78>)
 801273a:	f006 f969 	bl	8018a10 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	3314      	adds	r3, #20
 8012748:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	f103 0214 	add.w	r2, r3, #20
 8012750:	8bfb      	ldrh	r3, [r7, #30]
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	4619      	mov	r1, r3
 8012756:	79fb      	ldrb	r3, [r7, #7]
 8012758:	009b      	lsls	r3, r3, #2
 801275a:	f003 0304 	and.w	r3, r3, #4
 801275e:	440b      	add	r3, r1
 8012760:	4413      	add	r3, r2
 8012762:	697a      	ldr	r2, [r7, #20]
 8012764:	429a      	cmp	r2, r3
 8012766:	d006      	beq.n	8012776 <tcp_output_fill_options+0x66>
 8012768:	4b05      	ldr	r3, [pc, #20]	; (8012780 <tcp_output_fill_options+0x70>)
 801276a:	f240 7275 	movw	r2, #1909	; 0x775
 801276e:	4907      	ldr	r1, [pc, #28]	; (801278c <tcp_output_fill_options+0x7c>)
 8012770:	4805      	ldr	r0, [pc, #20]	; (8012788 <tcp_output_fill_options+0x78>)
 8012772:	f006 f94d 	bl	8018a10 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012776:	bf00      	nop
 8012778:	3720      	adds	r7, #32
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	0801e1cc 	.word	0x0801e1cc
 8012784:	0801e8fc 	.word	0x0801e8fc
 8012788:	0801e220 	.word	0x0801e220
 801278c:	0801e7f4 	.word	0x0801e7f4

08012790 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b08a      	sub	sp, #40	; 0x28
 8012794:	af04      	add	r7, sp, #16
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d106      	bne.n	80127b2 <tcp_output_control_segment+0x22>
 80127a4:	4b1c      	ldr	r3, [pc, #112]	; (8012818 <tcp_output_control_segment+0x88>)
 80127a6:	f240 7287 	movw	r2, #1927	; 0x787
 80127aa:	491c      	ldr	r1, [pc, #112]	; (801281c <tcp_output_control_segment+0x8c>)
 80127ac:	481c      	ldr	r0, [pc, #112]	; (8012820 <tcp_output_control_segment+0x90>)
 80127ae:	f006 f92f 	bl	8018a10 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80127b2:	683a      	ldr	r2, [r7, #0]
 80127b4:	6879      	ldr	r1, [r7, #4]
 80127b6:	68f8      	ldr	r0, [r7, #12]
 80127b8:	f7fe fad4 	bl	8010d64 <tcp_route>
 80127bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d102      	bne.n	80127ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80127c4:	23fc      	movs	r3, #252	; 0xfc
 80127c6:	75fb      	strb	r3, [r7, #23]
 80127c8:	e01c      	b.n	8012804 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d006      	beq.n	80127de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	7adb      	ldrb	r3, [r3, #11]
 80127d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	7a9b      	ldrb	r3, [r3, #10]
 80127da:	757b      	strb	r3, [r7, #21]
 80127dc:	e003      	b.n	80127e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80127de:	23ff      	movs	r3, #255	; 0xff
 80127e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80127e2:	2300      	movs	r3, #0
 80127e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80127e6:	7dba      	ldrb	r2, [r7, #22]
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	9302      	str	r3, [sp, #8]
 80127ec:	2306      	movs	r3, #6
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	7d7b      	ldrb	r3, [r7, #21]
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	4613      	mov	r3, r2
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	6879      	ldr	r1, [r7, #4]
 80127fa:	68b8      	ldr	r0, [r7, #8]
 80127fc:	f002 f8e2 	bl	80149c4 <ip4_output_if>
 8012800:	4603      	mov	r3, r0
 8012802:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012804:	68b8      	ldr	r0, [r7, #8]
 8012806:	f7f9 feaf 	bl	800c568 <pbuf_free>
  return err;
 801280a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3718      	adds	r7, #24
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	0801e1cc 	.word	0x0801e1cc
 801281c:	0801e924 	.word	0x0801e924
 8012820:	0801e220 	.word	0x0801e220

08012824 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012824:	b590      	push	{r4, r7, lr}
 8012826:	b08b      	sub	sp, #44	; 0x2c
 8012828:	af04      	add	r7, sp, #16
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
 8012830:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d106      	bne.n	8012846 <tcp_rst+0x22>
 8012838:	4b1f      	ldr	r3, [pc, #124]	; (80128b8 <tcp_rst+0x94>)
 801283a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801283e:	491f      	ldr	r1, [pc, #124]	; (80128bc <tcp_rst+0x98>)
 8012840:	481f      	ldr	r0, [pc, #124]	; (80128c0 <tcp_rst+0x9c>)
 8012842:	f006 f8e5 	bl	8018a10 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012848:	2b00      	cmp	r3, #0
 801284a:	d106      	bne.n	801285a <tcp_rst+0x36>
 801284c:	4b1a      	ldr	r3, [pc, #104]	; (80128b8 <tcp_rst+0x94>)
 801284e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012852:	491c      	ldr	r1, [pc, #112]	; (80128c4 <tcp_rst+0xa0>)
 8012854:	481a      	ldr	r0, [pc, #104]	; (80128c0 <tcp_rst+0x9c>)
 8012856:	f006 f8db 	bl	8018a10 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801285a:	2300      	movs	r3, #0
 801285c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801285e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012862:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012864:	7dfb      	ldrb	r3, [r7, #23]
 8012866:	b29c      	uxth	r4, r3
 8012868:	68b8      	ldr	r0, [r7, #8]
 801286a:	f7f8 fb62 	bl	800af32 <lwip_htonl>
 801286e:	4602      	mov	r2, r0
 8012870:	8abb      	ldrh	r3, [r7, #20]
 8012872:	9303      	str	r3, [sp, #12]
 8012874:	2314      	movs	r3, #20
 8012876:	9302      	str	r3, [sp, #8]
 8012878:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801287a:	9301      	str	r3, [sp, #4]
 801287c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801287e:	9300      	str	r3, [sp, #0]
 8012880:	4613      	mov	r3, r2
 8012882:	2200      	movs	r2, #0
 8012884:	4621      	mov	r1, r4
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff fe90 	bl	80125ac <tcp_output_alloc_header_common>
 801288c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00c      	beq.n	80128ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012894:	7dfb      	ldrb	r3, [r7, #23]
 8012896:	2200      	movs	r2, #0
 8012898:	6939      	ldr	r1, [r7, #16]
 801289a:	68f8      	ldr	r0, [r7, #12]
 801289c:	f7ff ff38 	bl	8012710 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80128a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a2:	683a      	ldr	r2, [r7, #0]
 80128a4:	6939      	ldr	r1, [r7, #16]
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f7ff ff72 	bl	8012790 <tcp_output_control_segment>
 80128ac:	e000      	b.n	80128b0 <tcp_rst+0x8c>
    return;
 80128ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80128b0:	371c      	adds	r7, #28
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd90      	pop	{r4, r7, pc}
 80128b6:	bf00      	nop
 80128b8:	0801e1cc 	.word	0x0801e1cc
 80128bc:	0801e950 	.word	0x0801e950
 80128c0:	0801e220 	.word	0x0801e220
 80128c4:	0801e96c 	.word	0x0801e96c

080128c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80128c8:	b590      	push	{r4, r7, lr}
 80128ca:	b087      	sub	sp, #28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80128d0:	2300      	movs	r3, #0
 80128d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80128d4:	2300      	movs	r3, #0
 80128d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d106      	bne.n	80128ec <tcp_send_empty_ack+0x24>
 80128de:	4b28      	ldr	r3, [pc, #160]	; (8012980 <tcp_send_empty_ack+0xb8>)
 80128e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80128e4:	4927      	ldr	r1, [pc, #156]	; (8012984 <tcp_send_empty_ack+0xbc>)
 80128e6:	4828      	ldr	r0, [pc, #160]	; (8012988 <tcp_send_empty_ack+0xc0>)
 80128e8:	f006 f892 	bl	8018a10 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	f003 0304 	and.w	r3, r3, #4
 80128f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80128f8:	7d7b      	ldrb	r3, [r7, #21]
 80128fa:	b29c      	uxth	r4, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012900:	4618      	mov	r0, r3
 8012902:	f7f8 fb16 	bl	800af32 <lwip_htonl>
 8012906:	4603      	mov	r3, r0
 8012908:	2200      	movs	r2, #0
 801290a:	4621      	mov	r1, r4
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff fec1 	bl	8012694 <tcp_output_alloc_header>
 8012912:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d109      	bne.n	801292e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	8b5b      	ldrh	r3, [r3, #26]
 801291e:	f043 0303 	orr.w	r3, r3, #3
 8012922:	b29a      	uxth	r2, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012928:	f06f 0301 	mvn.w	r3, #1
 801292c:	e023      	b.n	8012976 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801292e:	7dbb      	ldrb	r3, [r7, #22]
 8012930:	7dfa      	ldrb	r2, [r7, #23]
 8012932:	6939      	ldr	r1, [r7, #16]
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f7ff feeb 	bl	8012710 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	3304      	adds	r3, #4
 8012940:	6939      	ldr	r1, [r7, #16]
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f7ff ff24 	bl	8012790 <tcp_output_control_segment>
 8012948:	4603      	mov	r3, r0
 801294a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801294c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d007      	beq.n	8012964 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	8b5b      	ldrh	r3, [r3, #26]
 8012958:	f043 0303 	orr.w	r3, r3, #3
 801295c:	b29a      	uxth	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	835a      	strh	r2, [r3, #26]
 8012962:	e006      	b.n	8012972 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	8b5b      	ldrh	r3, [r3, #26]
 8012968:	f023 0303 	bic.w	r3, r3, #3
 801296c:	b29a      	uxth	r2, r3
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012976:	4618      	mov	r0, r3
 8012978:	371c      	adds	r7, #28
 801297a:	46bd      	mov	sp, r7
 801297c:	bd90      	pop	{r4, r7, pc}
 801297e:	bf00      	nop
 8012980:	0801e1cc 	.word	0x0801e1cc
 8012984:	0801e988 	.word	0x0801e988
 8012988:	0801e220 	.word	0x0801e220

0801298c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801298c:	b590      	push	{r4, r7, lr}
 801298e:	b087      	sub	sp, #28
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012994:	2300      	movs	r3, #0
 8012996:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d106      	bne.n	80129ac <tcp_keepalive+0x20>
 801299e:	4b18      	ldr	r3, [pc, #96]	; (8012a00 <tcp_keepalive+0x74>)
 80129a0:	f640 0224 	movw	r2, #2084	; 0x824
 80129a4:	4917      	ldr	r1, [pc, #92]	; (8012a04 <tcp_keepalive+0x78>)
 80129a6:	4818      	ldr	r0, [pc, #96]	; (8012a08 <tcp_keepalive+0x7c>)
 80129a8:	f006 f832 	bl	8018a10 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80129ac:	7dfb      	ldrb	r3, [r7, #23]
 80129ae:	b29c      	uxth	r4, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129b4:	3b01      	subs	r3, #1
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7f8 fabb 	bl	800af32 <lwip_htonl>
 80129bc:	4603      	mov	r3, r0
 80129be:	2200      	movs	r2, #0
 80129c0:	4621      	mov	r1, r4
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ff fe66 	bl	8012694 <tcp_output_alloc_header>
 80129c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80129d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129d4:	e010      	b.n	80129f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80129d6:	7dfb      	ldrb	r3, [r7, #23]
 80129d8:	2200      	movs	r2, #0
 80129da:	6939      	ldr	r1, [r7, #16]
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7ff fe97 	bl	8012710 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	3304      	adds	r3, #4
 80129e8:	6939      	ldr	r1, [r7, #16]
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f7ff fed0 	bl	8012790 <tcp_output_control_segment>
 80129f0:	4603      	mov	r3, r0
 80129f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80129f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	371c      	adds	r7, #28
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd90      	pop	{r4, r7, pc}
 8012a00:	0801e1cc 	.word	0x0801e1cc
 8012a04:	0801e9a8 	.word	0x0801e9a8
 8012a08:	0801e220 	.word	0x0801e220

08012a0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012a0c:	b590      	push	{r4, r7, lr}
 8012a0e:	b08b      	sub	sp, #44	; 0x2c
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a14:	2300      	movs	r3, #0
 8012a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d106      	bne.n	8012a2e <tcp_zero_window_probe+0x22>
 8012a20:	4b4c      	ldr	r3, [pc, #304]	; (8012b54 <tcp_zero_window_probe+0x148>)
 8012a22:	f640 024f 	movw	r2, #2127	; 0x84f
 8012a26:	494c      	ldr	r1, [pc, #304]	; (8012b58 <tcp_zero_window_probe+0x14c>)
 8012a28:	484c      	ldr	r0, [pc, #304]	; (8012b5c <tcp_zero_window_probe+0x150>)
 8012a2a:	f005 fff1 	bl	8018a10 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012a34:	6a3b      	ldr	r3, [r7, #32]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d101      	bne.n	8012a3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	e086      	b.n	8012b4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012a44:	2bff      	cmp	r3, #255	; 0xff
 8012a46:	d007      	beq.n	8012a58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012a58:	6a3b      	ldr	r3, [r7, #32]
 8012a5a:	68db      	ldr	r3, [r3, #12]
 8012a5c:	899b      	ldrh	r3, [r3, #12]
 8012a5e:	b29b      	uxth	r3, r3
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7f8 fa51 	bl	800af08 <lwip_htons>
 8012a66:	4603      	mov	r3, r0
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	f003 0301 	and.w	r3, r3, #1
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d005      	beq.n	8012a7e <tcp_zero_window_probe+0x72>
 8012a72:	6a3b      	ldr	r3, [r7, #32]
 8012a74:	891b      	ldrh	r3, [r3, #8]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d101      	bne.n	8012a7e <tcp_zero_window_probe+0x72>
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e000      	b.n	8012a80 <tcp_zero_window_probe+0x74>
 8012a7e:	2300      	movs	r3, #0
 8012a80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012a82:	7ffb      	ldrb	r3, [r7, #31]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	bf0c      	ite	eq
 8012a88:	2301      	moveq	r3, #1
 8012a8a:	2300      	movne	r3, #0
 8012a8c:	b2db      	uxtb	r3, r3
 8012a8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a94:	b299      	uxth	r1, r3
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	8bba      	ldrh	r2, [r7, #28]
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7ff fdf8 	bl	8012694 <tcp_output_alloc_header>
 8012aa4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012aa6:	69bb      	ldr	r3, [r7, #24]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d102      	bne.n	8012ab2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ab0:	e04c      	b.n	8012b4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012ab8:	7ffb      	ldrb	r3, [r7, #31]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d011      	beq.n	8012ae2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	899b      	ldrh	r3, [r3, #12]
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	b21b      	sxth	r3, r3
 8012ac6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012aca:	b21c      	sxth	r4, r3
 8012acc:	2011      	movs	r0, #17
 8012ace:	f7f8 fa1b 	bl	800af08 <lwip_htons>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	b21b      	sxth	r3, r3
 8012ad6:	4323      	orrs	r3, r4
 8012ad8:	b21b      	sxth	r3, r3
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	819a      	strh	r2, [r3, #12]
 8012ae0:	e010      	b.n	8012b04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	3314      	adds	r3, #20
 8012ae8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012aea:	6a3b      	ldr	r3, [r7, #32]
 8012aec:	6858      	ldr	r0, [r3, #4]
 8012aee:	6a3b      	ldr	r3, [r7, #32]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	891a      	ldrh	r2, [r3, #8]
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	891b      	ldrh	r3, [r3, #8]
 8012af8:	1ad3      	subs	r3, r2, r3
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	2201      	movs	r2, #1
 8012afe:	6939      	ldr	r1, [r7, #16]
 8012b00:	f7f9 ff28 	bl	800c954 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012b04:	6a3b      	ldr	r3, [r7, #32]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7f8 fa11 	bl	800af32 <lwip_htonl>
 8012b10:	4603      	mov	r3, r0
 8012b12:	3301      	adds	r3, #1
 8012b14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	1ad3      	subs	r3, r2, r3
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	da02      	bge.n	8012b28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	69b9      	ldr	r1, [r7, #24]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff fded 	bl	8012710 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b36:	687a      	ldr	r2, [r7, #4]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	3304      	adds	r3, #4
 8012b3c:	69b9      	ldr	r1, [r7, #24]
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7ff fe26 	bl	8012790 <tcp_output_control_segment>
 8012b44:	4603      	mov	r3, r0
 8012b46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012b48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	372c      	adds	r7, #44	; 0x2c
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd90      	pop	{r4, r7, pc}
 8012b54:	0801e1cc 	.word	0x0801e1cc
 8012b58:	0801e9c4 	.word	0x0801e9c4
 8012b5c:	0801e220 	.word	0x0801e220

08012b60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012b68:	f7f9 ffe2 	bl	800cb30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012b6c:	4b0a      	ldr	r3, [pc, #40]	; (8012b98 <tcpip_tcp_timer+0x38>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d103      	bne.n	8012b7c <tcpip_tcp_timer+0x1c>
 8012b74:	4b09      	ldr	r3, [pc, #36]	; (8012b9c <tcpip_tcp_timer+0x3c>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d005      	beq.n	8012b88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	4908      	ldr	r1, [pc, #32]	; (8012ba0 <tcpip_tcp_timer+0x40>)
 8012b80:	20fa      	movs	r0, #250	; 0xfa
 8012b82:	f000 f8f1 	bl	8012d68 <sys_timeout>
 8012b86:	e002      	b.n	8012b8e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012b88:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <tcpip_tcp_timer+0x44>)
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	601a      	str	r2, [r3, #0]
  }
}
 8012b8e:	bf00      	nop
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	20008fb0 	.word	0x20008fb0
 8012b9c:	20008fc0 	.word	0x20008fc0
 8012ba0:	08012b61 	.word	0x08012b61
 8012ba4:	200054e0 	.word	0x200054e0

08012ba8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012bac:	4b0a      	ldr	r3, [pc, #40]	; (8012bd8 <tcp_timer_needed+0x30>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10f      	bne.n	8012bd4 <tcp_timer_needed+0x2c>
 8012bb4:	4b09      	ldr	r3, [pc, #36]	; (8012bdc <tcp_timer_needed+0x34>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d103      	bne.n	8012bc4 <tcp_timer_needed+0x1c>
 8012bbc:	4b08      	ldr	r3, [pc, #32]	; (8012be0 <tcp_timer_needed+0x38>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d007      	beq.n	8012bd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012bc4:	4b04      	ldr	r3, [pc, #16]	; (8012bd8 <tcp_timer_needed+0x30>)
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012bca:	2200      	movs	r2, #0
 8012bcc:	4905      	ldr	r1, [pc, #20]	; (8012be4 <tcp_timer_needed+0x3c>)
 8012bce:	20fa      	movs	r0, #250	; 0xfa
 8012bd0:	f000 f8ca 	bl	8012d68 <sys_timeout>
  }
}
 8012bd4:	bf00      	nop
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	200054e0 	.word	0x200054e0
 8012bdc:	20008fb0 	.word	0x20008fb0
 8012be0:	20008fc0 	.word	0x20008fc0
 8012be4:	08012b61 	.word	0x08012b61

08012be8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012bf4:	200a      	movs	r0, #10
 8012bf6:	f7f8 fe3d 	bl	800b874 <memp_malloc>
 8012bfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d109      	bne.n	8012c16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d151      	bne.n	8012cac <sys_timeout_abs+0xc4>
 8012c08:	4b2a      	ldr	r3, [pc, #168]	; (8012cb4 <sys_timeout_abs+0xcc>)
 8012c0a:	22be      	movs	r2, #190	; 0xbe
 8012c0c:	492a      	ldr	r1, [pc, #168]	; (8012cb8 <sys_timeout_abs+0xd0>)
 8012c0e:	482b      	ldr	r0, [pc, #172]	; (8012cbc <sys_timeout_abs+0xd4>)
 8012c10:	f005 fefe 	bl	8018a10 <iprintf>
    return;
 8012c14:	e04a      	b.n	8012cac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	68ba      	ldr	r2, [r7, #8]
 8012c20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012c28:	693b      	ldr	r3, [r7, #16]
 8012c2a:	68fa      	ldr	r2, [r7, #12]
 8012c2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012c2e:	4b24      	ldr	r3, [pc, #144]	; (8012cc0 <sys_timeout_abs+0xd8>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d103      	bne.n	8012c3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012c36:	4a22      	ldr	r2, [pc, #136]	; (8012cc0 <sys_timeout_abs+0xd8>)
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	6013      	str	r3, [r2, #0]
    return;
 8012c3c:	e037      	b.n	8012cae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	685a      	ldr	r2, [r3, #4]
 8012c42:	4b1f      	ldr	r3, [pc, #124]	; (8012cc0 <sys_timeout_abs+0xd8>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	0fdb      	lsrs	r3, r3, #31
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d007      	beq.n	8012c66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012c56:	4b1a      	ldr	r3, [pc, #104]	; (8012cc0 <sys_timeout_abs+0xd8>)
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012c5e:	4a18      	ldr	r2, [pc, #96]	; (8012cc0 <sys_timeout_abs+0xd8>)
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	6013      	str	r3, [r2, #0]
 8012c64:	e023      	b.n	8012cae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c66:	4b16      	ldr	r3, [pc, #88]	; (8012cc0 <sys_timeout_abs+0xd8>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	617b      	str	r3, [r7, #20]
 8012c6c:	e01a      	b.n	8012ca4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d00b      	beq.n	8012c8e <sys_timeout_abs+0xa6>
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	685a      	ldr	r2, [r3, #4]
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	0fdb      	lsrs	r3, r3, #31
 8012c84:	f003 0301 	and.w	r3, r3, #1
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d007      	beq.n	8012c9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	693a      	ldr	r2, [r7, #16]
 8012c9a:	601a      	str	r2, [r3, #0]
        break;
 8012c9c:	e007      	b.n	8012cae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	617b      	str	r3, [r7, #20]
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1e1      	bne.n	8012c6e <sys_timeout_abs+0x86>
 8012caa:	e000      	b.n	8012cae <sys_timeout_abs+0xc6>
    return;
 8012cac:	bf00      	nop
      }
    }
  }
}
 8012cae:	3718      	adds	r7, #24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	0801e9e8 	.word	0x0801e9e8
 8012cb8:	0801ea1c 	.word	0x0801ea1c
 8012cbc:	0801ea5c 	.word	0x0801ea5c
 8012cc0:	200054d8 	.word	0x200054d8

08012cc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b086      	sub	sp, #24
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	4798      	blx	r3

  now = sys_now();
 8012cd6:	f003 fbcb 	bl	8016470 <sys_now>
 8012cda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	4b0f      	ldr	r3, [pc, #60]	; (8012d20 <lwip_cyclic_timer+0x5c>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012ce8:	68fa      	ldr	r2, [r7, #12]
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	1ad3      	subs	r3, r2, r3
 8012cee:	0fdb      	lsrs	r3, r3, #31
 8012cf0:	f003 0301 	and.w	r3, r3, #1
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d009      	beq.n	8012d0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	4413      	add	r3, r2
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	4907      	ldr	r1, [pc, #28]	; (8012d24 <lwip_cyclic_timer+0x60>)
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff ff6e 	bl	8012be8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012d0c:	e004      	b.n	8012d18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	4904      	ldr	r1, [pc, #16]	; (8012d24 <lwip_cyclic_timer+0x60>)
 8012d12:	68f8      	ldr	r0, [r7, #12]
 8012d14:	f7ff ff68 	bl	8012be8 <sys_timeout_abs>
}
 8012d18:	bf00      	nop
 8012d1a:	3718      	adds	r7, #24
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	200054dc 	.word	0x200054dc
 8012d24:	08012cc5 	.word	0x08012cc5

08012d28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d2e:	2301      	movs	r3, #1
 8012d30:	607b      	str	r3, [r7, #4]
 8012d32:	e00e      	b.n	8012d52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012d34:	4a0a      	ldr	r2, [pc, #40]	; (8012d60 <sys_timeouts_init+0x38>)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	4a07      	ldr	r2, [pc, #28]	; (8012d60 <sys_timeouts_init+0x38>)
 8012d42:	4413      	add	r3, r2
 8012d44:	461a      	mov	r2, r3
 8012d46:	4907      	ldr	r1, [pc, #28]	; (8012d64 <sys_timeouts_init+0x3c>)
 8012d48:	f000 f80e 	bl	8012d68 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	607b      	str	r3, [r7, #4]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2b02      	cmp	r3, #2
 8012d56:	d9ed      	bls.n	8012d34 <sys_timeouts_init+0xc>
  }
}
 8012d58:	bf00      	nop
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	0801f844 	.word	0x0801f844
 8012d64:	08012cc5 	.word	0x08012cc5

08012d68 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b086      	sub	sp, #24
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d7a:	d306      	bcc.n	8012d8a <sys_timeout+0x22>
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <sys_timeout+0x40>)
 8012d7e:	f240 1229 	movw	r2, #297	; 0x129
 8012d82:	490a      	ldr	r1, [pc, #40]	; (8012dac <sys_timeout+0x44>)
 8012d84:	480a      	ldr	r0, [pc, #40]	; (8012db0 <sys_timeout+0x48>)
 8012d86:	f005 fe43 	bl	8018a10 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012d8a:	f003 fb71 	bl	8016470 <sys_now>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	4413      	add	r3, r2
 8012d94:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	68b9      	ldr	r1, [r7, #8]
 8012d9a:	6978      	ldr	r0, [r7, #20]
 8012d9c:	f7ff ff24 	bl	8012be8 <sys_timeout_abs>
#endif
}
 8012da0:	bf00      	nop
 8012da2:	3718      	adds	r7, #24
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	0801e9e8 	.word	0x0801e9e8
 8012dac:	0801ea84 	.word	0x0801ea84
 8012db0:	0801ea5c 	.word	0x0801ea5c

08012db4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012dba:	f003 fb59 	bl	8016470 <sys_now>
 8012dbe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012dc0:	4b17      	ldr	r3, [pc, #92]	; (8012e20 <sys_check_timeouts+0x6c>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d022      	beq.n	8012e12 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	1ad3      	subs	r3, r2, r3
 8012dd4:	0fdb      	lsrs	r3, r3, #31
 8012dd6:	f003 0301 	and.w	r3, r3, #1
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d11a      	bne.n	8012e16 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012de0:	68bb      	ldr	r3, [r7, #8]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	4a0e      	ldr	r2, [pc, #56]	; (8012e20 <sys_check_timeouts+0x6c>)
 8012de6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	4a0a      	ldr	r2, [pc, #40]	; (8012e24 <sys_check_timeouts+0x70>)
 8012dfa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012dfc:	68b9      	ldr	r1, [r7, #8]
 8012dfe:	200a      	movs	r0, #10
 8012e00:	f7f8 fd8a 	bl	800b918 <memp_free>
    if (handler != NULL) {
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d0da      	beq.n	8012dc0 <sys_check_timeouts+0xc>
      handler(arg);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6838      	ldr	r0, [r7, #0]
 8012e0e:	4798      	blx	r3
  do {
 8012e10:	e7d6      	b.n	8012dc0 <sys_check_timeouts+0xc>
      return;
 8012e12:	bf00      	nop
 8012e14:	e000      	b.n	8012e18 <sys_check_timeouts+0x64>
      return;
 8012e16:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	200054d8 	.word	0x200054d8
 8012e24:	200054dc 	.word	0x200054dc

08012e28 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012e2e:	4b16      	ldr	r3, [pc, #88]	; (8012e88 <sys_timeouts_sleeptime+0x60>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d102      	bne.n	8012e3c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e3a:	e020      	b.n	8012e7e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012e3c:	f003 fb18 	bl	8016470 <sys_now>
 8012e40:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012e42:	4b11      	ldr	r3, [pc, #68]	; (8012e88 <sys_timeouts_sleeptime+0x60>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	685a      	ldr	r2, [r3, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	0fdb      	lsrs	r3, r3, #31
 8012e4e:	f003 0301 	and.w	r3, r3, #1
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d001      	beq.n	8012e5c <sys_timeouts_sleeptime+0x34>
    return 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	e010      	b.n	8012e7e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012e5c:	4b0a      	ldr	r3, [pc, #40]	; (8012e88 <sys_timeouts_sleeptime+0x60>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	685a      	ldr	r2, [r3, #4]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	1ad3      	subs	r3, r2, r3
 8012e66:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	da06      	bge.n	8012e7c <sys_timeouts_sleeptime+0x54>
 8012e6e:	4b07      	ldr	r3, [pc, #28]	; (8012e8c <sys_timeouts_sleeptime+0x64>)
 8012e70:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012e74:	4906      	ldr	r1, [pc, #24]	; (8012e90 <sys_timeouts_sleeptime+0x68>)
 8012e76:	4807      	ldr	r0, [pc, #28]	; (8012e94 <sys_timeouts_sleeptime+0x6c>)
 8012e78:	f005 fdca 	bl	8018a10 <iprintf>
    return ret;
 8012e7c:	683b      	ldr	r3, [r7, #0]
  }
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3708      	adds	r7, #8
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	200054d8 	.word	0x200054d8
 8012e8c:	0801e9e8 	.word	0x0801e9e8
 8012e90:	0801eabc 	.word	0x0801eabc
 8012e94:	0801ea5c 	.word	0x0801ea5c

08012e98 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012e9c:	f005 fdd0 	bl	8018a40 <rand>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	4b01      	ldr	r3, [pc, #4]	; (8012eb8 <udp_init+0x20>)
 8012eb2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012eb4:	bf00      	nop
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	20000014 	.word	0x20000014

08012ebc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012ebc:	b480      	push	{r7}
 8012ebe:	b083      	sub	sp, #12
 8012ec0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012ec6:	4b17      	ldr	r3, [pc, #92]	; (8012f24 <udp_new_port+0x68>)
 8012ec8:	881b      	ldrh	r3, [r3, #0]
 8012eca:	1c5a      	adds	r2, r3, #1
 8012ecc:	b291      	uxth	r1, r2
 8012ece:	4a15      	ldr	r2, [pc, #84]	; (8012f24 <udp_new_port+0x68>)
 8012ed0:	8011      	strh	r1, [r2, #0]
 8012ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d103      	bne.n	8012ee2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012eda:	4b12      	ldr	r3, [pc, #72]	; (8012f24 <udp_new_port+0x68>)
 8012edc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012ee0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ee2:	4b11      	ldr	r3, [pc, #68]	; (8012f28 <udp_new_port+0x6c>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	e011      	b.n	8012f0e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	8a5a      	ldrh	r2, [r3, #18]
 8012eee:	4b0d      	ldr	r3, [pc, #52]	; (8012f24 <udp_new_port+0x68>)
 8012ef0:	881b      	ldrh	r3, [r3, #0]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d108      	bne.n	8012f08 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012ef6:	88fb      	ldrh	r3, [r7, #6]
 8012ef8:	3301      	adds	r3, #1
 8012efa:	80fb      	strh	r3, [r7, #6]
 8012efc:	88fb      	ldrh	r3, [r7, #6]
 8012efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f02:	d3e0      	bcc.n	8012ec6 <udp_new_port+0xa>
        return 0;
 8012f04:	2300      	movs	r3, #0
 8012f06:	e007      	b.n	8012f18 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	603b      	str	r3, [r7, #0]
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d1ea      	bne.n	8012eea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012f14:	4b03      	ldr	r3, [pc, #12]	; (8012f24 <udp_new_port+0x68>)
 8012f16:	881b      	ldrh	r3, [r3, #0]
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	370c      	adds	r7, #12
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr
 8012f24:	20000014 	.word	0x20000014
 8012f28:	20008fc8 	.word	0x20008fc8

08012f2c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b084      	sub	sp, #16
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	4613      	mov	r3, r2
 8012f38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d105      	bne.n	8012f4c <udp_input_local_match+0x20>
 8012f40:	4b27      	ldr	r3, [pc, #156]	; (8012fe0 <udp_input_local_match+0xb4>)
 8012f42:	2287      	movs	r2, #135	; 0x87
 8012f44:	4927      	ldr	r1, [pc, #156]	; (8012fe4 <udp_input_local_match+0xb8>)
 8012f46:	4828      	ldr	r0, [pc, #160]	; (8012fe8 <udp_input_local_match+0xbc>)
 8012f48:	f005 fd62 	bl	8018a10 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d105      	bne.n	8012f5e <udp_input_local_match+0x32>
 8012f52:	4b23      	ldr	r3, [pc, #140]	; (8012fe0 <udp_input_local_match+0xb4>)
 8012f54:	2288      	movs	r2, #136	; 0x88
 8012f56:	4925      	ldr	r1, [pc, #148]	; (8012fec <udp_input_local_match+0xc0>)
 8012f58:	4823      	ldr	r0, [pc, #140]	; (8012fe8 <udp_input_local_match+0xbc>)
 8012f5a:	f005 fd59 	bl	8018a10 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	7a1b      	ldrb	r3, [r3, #8]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00b      	beq.n	8012f7e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	7a1a      	ldrb	r2, [r3, #8]
 8012f6a:	4b21      	ldr	r3, [pc, #132]	; (8012ff0 <udp_input_local_match+0xc4>)
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012f72:	3301      	adds	r3, #1
 8012f74:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d001      	beq.n	8012f7e <udp_input_local_match+0x52>
    return 0;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	e02b      	b.n	8012fd6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d018      	beq.n	8012fb6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d013      	beq.n	8012fb2 <udp_input_local_match+0x86>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00f      	beq.n	8012fb2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012f92:	4b17      	ldr	r3, [pc, #92]	; (8012ff0 <udp_input_local_match+0xc4>)
 8012f94:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f9a:	d00a      	beq.n	8012fb2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681a      	ldr	r2, [r3, #0]
 8012fa0:	4b13      	ldr	r3, [pc, #76]	; (8012ff0 <udp_input_local_match+0xc4>)
 8012fa2:	695b      	ldr	r3, [r3, #20]
 8012fa4:	405a      	eors	r2, r3
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	3308      	adds	r3, #8
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d110      	bne.n	8012fd4 <udp_input_local_match+0xa8>
          return 1;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	e00f      	b.n	8012fd6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d009      	beq.n	8012fd0 <udp_input_local_match+0xa4>
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d005      	beq.n	8012fd0 <udp_input_local_match+0xa4>
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681a      	ldr	r2, [r3, #0]
 8012fc8:	4b09      	ldr	r3, [pc, #36]	; (8012ff0 <udp_input_local_match+0xc4>)
 8012fca:	695b      	ldr	r3, [r3, #20]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d101      	bne.n	8012fd4 <udp_input_local_match+0xa8>
        return 1;
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	e000      	b.n	8012fd6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012fd4:	2300      	movs	r3, #0
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3710      	adds	r7, #16
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	0801ead0 	.word	0x0801ead0
 8012fe4:	0801eb00 	.word	0x0801eb00
 8012fe8:	0801eb24 	.word	0x0801eb24
 8012fec:	0801eb4c 	.word	0x0801eb4c
 8012ff0:	2000589c 	.word	0x2000589c

08012ff4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012ff4:	b590      	push	{r4, r7, lr}
 8012ff6:	b08d      	sub	sp, #52	; 0x34
 8012ff8:	af02      	add	r7, sp, #8
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012ffe:	2300      	movs	r3, #0
 8013000:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d105      	bne.n	8013014 <udp_input+0x20>
 8013008:	4b7c      	ldr	r3, [pc, #496]	; (80131fc <udp_input+0x208>)
 801300a:	22cf      	movs	r2, #207	; 0xcf
 801300c:	497c      	ldr	r1, [pc, #496]	; (8013200 <udp_input+0x20c>)
 801300e:	487d      	ldr	r0, [pc, #500]	; (8013204 <udp_input+0x210>)
 8013010:	f005 fcfe 	bl	8018a10 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d105      	bne.n	8013026 <udp_input+0x32>
 801301a:	4b78      	ldr	r3, [pc, #480]	; (80131fc <udp_input+0x208>)
 801301c:	22d0      	movs	r2, #208	; 0xd0
 801301e:	497a      	ldr	r1, [pc, #488]	; (8013208 <udp_input+0x214>)
 8013020:	4878      	ldr	r0, [pc, #480]	; (8013204 <udp_input+0x210>)
 8013022:	f005 fcf5 	bl	8018a10 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	895b      	ldrh	r3, [r3, #10]
 801302a:	2b07      	cmp	r3, #7
 801302c:	d803      	bhi.n	8013036 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7f9 fa9a 	bl	800c568 <pbuf_free>
    goto end;
 8013034:	e0de      	b.n	80131f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801303c:	4b73      	ldr	r3, [pc, #460]	; (801320c <udp_input+0x218>)
 801303e:	695a      	ldr	r2, [r3, #20]
 8013040:	4b72      	ldr	r3, [pc, #456]	; (801320c <udp_input+0x218>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4619      	mov	r1, r3
 8013046:	4610      	mov	r0, r2
 8013048:	f001 fd94 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801304c:	4603      	mov	r3, r0
 801304e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	b29b      	uxth	r3, r3
 8013056:	4618      	mov	r0, r3
 8013058:	f7f7 ff56 	bl	800af08 <lwip_htons>
 801305c:	4603      	mov	r3, r0
 801305e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	885b      	ldrh	r3, [r3, #2]
 8013064:	b29b      	uxth	r3, r3
 8013066:	4618      	mov	r0, r3
 8013068:	f7f7 ff4e 	bl	800af08 <lwip_htons>
 801306c:	4603      	mov	r3, r0
 801306e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013070:	2300      	movs	r3, #0
 8013072:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013074:	2300      	movs	r3, #0
 8013076:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013078:	2300      	movs	r3, #0
 801307a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801307c:	4b64      	ldr	r3, [pc, #400]	; (8013210 <udp_input+0x21c>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	627b      	str	r3, [r7, #36]	; 0x24
 8013082:	e054      	b.n	801312e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013086:	8a5b      	ldrh	r3, [r3, #18]
 8013088:	89fa      	ldrh	r2, [r7, #14]
 801308a:	429a      	cmp	r2, r3
 801308c:	d14a      	bne.n	8013124 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801308e:	7cfb      	ldrb	r3, [r7, #19]
 8013090:	461a      	mov	r2, r3
 8013092:	6839      	ldr	r1, [r7, #0]
 8013094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013096:	f7ff ff49 	bl	8012f2c <udp_input_local_match>
 801309a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801309c:	2b00      	cmp	r3, #0
 801309e:	d041      	beq.n	8013124 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	7c1b      	ldrb	r3, [r3, #16]
 80130a4:	f003 0304 	and.w	r3, r3, #4
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d11d      	bne.n	80130e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d102      	bne.n	80130b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80130b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b4:	61fb      	str	r3, [r7, #28]
 80130b6:	e017      	b.n	80130e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80130b8:	7cfb      	ldrb	r3, [r7, #19]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d014      	beq.n	80130e8 <udp_input+0xf4>
 80130be:	4b53      	ldr	r3, [pc, #332]	; (801320c <udp_input+0x218>)
 80130c0:	695b      	ldr	r3, [r3, #20]
 80130c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130c6:	d10f      	bne.n	80130e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	3304      	adds	r3, #4
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d008      	beq.n	80130e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	3304      	adds	r3, #4
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d101      	bne.n	80130e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80130e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	8a9b      	ldrh	r3, [r3, #20]
 80130ec:	8a3a      	ldrh	r2, [r7, #16]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d118      	bne.n	8013124 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d005      	beq.n	8013106 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	685a      	ldr	r2, [r3, #4]
 80130fe:	4b43      	ldr	r3, [pc, #268]	; (801320c <udp_input+0x218>)
 8013100:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013102:	429a      	cmp	r2, r3
 8013104:	d10e      	bne.n	8013124 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013106:	6a3b      	ldr	r3, [r7, #32]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d014      	beq.n	8013136 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310e:	68da      	ldr	r2, [r3, #12]
 8013110:	6a3b      	ldr	r3, [r7, #32]
 8013112:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013114:	4b3e      	ldr	r3, [pc, #248]	; (8013210 <udp_input+0x21c>)
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801311c:	4a3c      	ldr	r2, [pc, #240]	; (8013210 <udp_input+0x21c>)
 801311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013120:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013122:	e008      	b.n	8013136 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	627b      	str	r3, [r7, #36]	; 0x24
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	2b00      	cmp	r3, #0
 8013132:	d1a7      	bne.n	8013084 <udp_input+0x90>
 8013134:	e000      	b.n	8013138 <udp_input+0x144>
        break;
 8013136:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313a:	2b00      	cmp	r3, #0
 801313c:	d101      	bne.n	8013142 <udp_input+0x14e>
    pcb = uncon_pcb;
 801313e:	69fb      	ldr	r3, [r7, #28]
 8013140:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	2b00      	cmp	r3, #0
 8013146:	d002      	beq.n	801314e <udp_input+0x15a>
    for_us = 1;
 8013148:	2301      	movs	r3, #1
 801314a:	76fb      	strb	r3, [r7, #27]
 801314c:	e00a      	b.n	8013164 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	3304      	adds	r3, #4
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	4b2d      	ldr	r3, [pc, #180]	; (801320c <udp_input+0x218>)
 8013156:	695b      	ldr	r3, [r3, #20]
 8013158:	429a      	cmp	r2, r3
 801315a:	bf0c      	ite	eq
 801315c:	2301      	moveq	r3, #1
 801315e:	2300      	movne	r3, #0
 8013160:	b2db      	uxtb	r3, r3
 8013162:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013164:	7efb      	ldrb	r3, [r7, #27]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d041      	beq.n	80131ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801316a:	2108      	movs	r1, #8
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7f9 f975 	bl	800c45c <pbuf_remove_header>
 8013172:	4603      	mov	r3, r0
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00a      	beq.n	801318e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013178:	4b20      	ldr	r3, [pc, #128]	; (80131fc <udp_input+0x208>)
 801317a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801317e:	4925      	ldr	r1, [pc, #148]	; (8013214 <udp_input+0x220>)
 8013180:	4820      	ldr	r0, [pc, #128]	; (8013204 <udp_input+0x210>)
 8013182:	f005 fc45 	bl	8018a10 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7f9 f9ee 	bl	800c568 <pbuf_free>
      goto end;
 801318c:	e032      	b.n	80131f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013190:	2b00      	cmp	r3, #0
 8013192:	d012      	beq.n	80131ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013196:	699b      	ldr	r3, [r3, #24]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00a      	beq.n	80131b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319e:	699c      	ldr	r4, [r3, #24]
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	69d8      	ldr	r0, [r3, #28]
 80131a4:	8a3b      	ldrh	r3, [r7, #16]
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	4b1b      	ldr	r3, [pc, #108]	; (8013218 <udp_input+0x224>)
 80131aa:	687a      	ldr	r2, [r7, #4]
 80131ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80131b0:	e021      	b.n	80131f6 <udp_input+0x202>
        pbuf_free(p);
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7f9 f9d8 	bl	800c568 <pbuf_free>
        goto end;
 80131b8:	e01c      	b.n	80131f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80131ba:	7cfb      	ldrb	r3, [r7, #19]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d112      	bne.n	80131e6 <udp_input+0x1f2>
 80131c0:	4b12      	ldr	r3, [pc, #72]	; (801320c <udp_input+0x218>)
 80131c2:	695b      	ldr	r3, [r3, #20]
 80131c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131c8:	2be0      	cmp	r3, #224	; 0xe0
 80131ca:	d00c      	beq.n	80131e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80131cc:	4b0f      	ldr	r3, [pc, #60]	; (801320c <udp_input+0x218>)
 80131ce:	899b      	ldrh	r3, [r3, #12]
 80131d0:	3308      	adds	r3, #8
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	b21b      	sxth	r3, r3
 80131d6:	4619      	mov	r1, r3
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7f9 f9b2 	bl	800c542 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80131de:	2103      	movs	r1, #3
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f001 f9a9 	bl	8014538 <icmp_dest_unreach>
      pbuf_free(p);
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f7f9 f9be 	bl	800c568 <pbuf_free>
  return;
 80131ec:	e003      	b.n	80131f6 <udp_input+0x202>
    pbuf_free(p);
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f7f9 f9ba 	bl	800c568 <pbuf_free>
  return;
 80131f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80131f6:	372c      	adds	r7, #44	; 0x2c
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd90      	pop	{r4, r7, pc}
 80131fc:	0801ead0 	.word	0x0801ead0
 8013200:	0801eb74 	.word	0x0801eb74
 8013204:	0801eb24 	.word	0x0801eb24
 8013208:	0801eb8c 	.word	0x0801eb8c
 801320c:	2000589c 	.word	0x2000589c
 8013210:	20008fc8 	.word	0x20008fc8
 8013214:	0801eba8 	.word	0x0801eba8
 8013218:	200058ac 	.word	0x200058ac

0801321c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b086      	sub	sp, #24
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	4613      	mov	r3, r2
 8013228:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013230:	4b39      	ldr	r3, [pc, #228]	; (8013318 <udp_bind+0xfc>)
 8013232:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d109      	bne.n	801324e <udp_bind+0x32>
 801323a:	4b38      	ldr	r3, [pc, #224]	; (801331c <udp_bind+0x100>)
 801323c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013240:	4937      	ldr	r1, [pc, #220]	; (8013320 <udp_bind+0x104>)
 8013242:	4838      	ldr	r0, [pc, #224]	; (8013324 <udp_bind+0x108>)
 8013244:	f005 fbe4 	bl	8018a10 <iprintf>
 8013248:	f06f 030f 	mvn.w	r3, #15
 801324c:	e060      	b.n	8013310 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801324e:	2300      	movs	r3, #0
 8013250:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013252:	4b35      	ldr	r3, [pc, #212]	; (8013328 <udp_bind+0x10c>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	617b      	str	r3, [r7, #20]
 8013258:	e009      	b.n	801326e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801325a:	68fa      	ldr	r2, [r7, #12]
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	429a      	cmp	r2, r3
 8013260:	d102      	bne.n	8013268 <udp_bind+0x4c>
      rebind = 1;
 8013262:	2301      	movs	r3, #1
 8013264:	74fb      	strb	r3, [r7, #19]
      break;
 8013266:	e005      	b.n	8013274 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	617b      	str	r3, [r7, #20]
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1f2      	bne.n	801325a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013274:	88fb      	ldrh	r3, [r7, #6]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d109      	bne.n	801328e <udp_bind+0x72>
    port = udp_new_port();
 801327a:	f7ff fe1f 	bl	8012ebc <udp_new_port>
 801327e:	4603      	mov	r3, r0
 8013280:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013282:	88fb      	ldrh	r3, [r7, #6]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d12c      	bne.n	80132e2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013288:	f06f 0307 	mvn.w	r3, #7
 801328c:	e040      	b.n	8013310 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801328e:	4b26      	ldr	r3, [pc, #152]	; (8013328 <udp_bind+0x10c>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	617b      	str	r3, [r7, #20]
 8013294:	e022      	b.n	80132dc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	429a      	cmp	r2, r3
 801329c:	d01b      	beq.n	80132d6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	8a5b      	ldrh	r3, [r3, #18]
 80132a2:	88fa      	ldrh	r2, [r7, #6]
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d116      	bne.n	80132d6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d00d      	beq.n	80132d0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d00a      	beq.n	80132d0 <udp_bind+0xb4>
 80132ba:	68bb      	ldr	r3, [r7, #8]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d006      	beq.n	80132d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132c2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d003      	beq.n	80132d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d102      	bne.n	80132d6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80132d0:	f06f 0307 	mvn.w	r3, #7
 80132d4:	e01c      	b.n	8013310 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	617b      	str	r3, [r7, #20]
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d1d9      	bne.n	8013296 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d002      	beq.n	80132ee <udp_bind+0xd2>
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	e000      	b.n	80132f0 <udp_bind+0xd4>
 80132ee:	2300      	movs	r3, #0
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	88fa      	ldrh	r2, [r7, #6]
 80132f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80132fa:	7cfb      	ldrb	r3, [r7, #19]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d106      	bne.n	801330e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013300:	4b09      	ldr	r3, [pc, #36]	; (8013328 <udp_bind+0x10c>)
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013308:	4a07      	ldr	r2, [pc, #28]	; (8013328 <udp_bind+0x10c>)
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801330e:	2300      	movs	r3, #0
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	0801f85c 	.word	0x0801f85c
 801331c:	0801ead0 	.word	0x0801ead0
 8013320:	0801ed98 	.word	0x0801ed98
 8013324:	0801eb24 	.word	0x0801eb24
 8013328:	20008fc8 	.word	0x20008fc8

0801332c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d107      	bne.n	801334e <udp_recv+0x22>
 801333e:	4b08      	ldr	r3, [pc, #32]	; (8013360 <udp_recv+0x34>)
 8013340:	f240 428a 	movw	r2, #1162	; 0x48a
 8013344:	4907      	ldr	r1, [pc, #28]	; (8013364 <udp_recv+0x38>)
 8013346:	4808      	ldr	r0, [pc, #32]	; (8013368 <udp_recv+0x3c>)
 8013348:	f005 fb62 	bl	8018a10 <iprintf>
 801334c:	e005      	b.n	801335a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	68ba      	ldr	r2, [r7, #8]
 8013352:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	61da      	str	r2, [r3, #28]
}
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	0801ead0 	.word	0x0801ead0
 8013364:	0801ee04 	.word	0x0801ee04
 8013368:	0801eb24 	.word	0x0801eb24

0801336c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d107      	bne.n	801338a <udp_remove+0x1e>
 801337a:	4b19      	ldr	r3, [pc, #100]	; (80133e0 <udp_remove+0x74>)
 801337c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013380:	4918      	ldr	r1, [pc, #96]	; (80133e4 <udp_remove+0x78>)
 8013382:	4819      	ldr	r0, [pc, #100]	; (80133e8 <udp_remove+0x7c>)
 8013384:	f005 fb44 	bl	8018a10 <iprintf>
 8013388:	e026      	b.n	80133d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801338a:	4b18      	ldr	r3, [pc, #96]	; (80133ec <udp_remove+0x80>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	429a      	cmp	r2, r3
 8013392:	d105      	bne.n	80133a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013394:	4b15      	ldr	r3, [pc, #84]	; (80133ec <udp_remove+0x80>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	4a14      	ldr	r2, [pc, #80]	; (80133ec <udp_remove+0x80>)
 801339c:	6013      	str	r3, [r2, #0]
 801339e:	e017      	b.n	80133d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133a0:	4b12      	ldr	r3, [pc, #72]	; (80133ec <udp_remove+0x80>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	60fb      	str	r3, [r7, #12]
 80133a6:	e010      	b.n	80133ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d009      	beq.n	80133c4 <udp_remove+0x58>
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d104      	bne.n	80133c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	68da      	ldr	r2, [r3, #12]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	60da      	str	r2, [r3, #12]
        break;
 80133c2:	e005      	b.n	80133d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	60fb      	str	r3, [r7, #12]
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d1eb      	bne.n	80133a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80133d0:	6879      	ldr	r1, [r7, #4]
 80133d2:	2000      	movs	r0, #0
 80133d4:	f7f8 faa0 	bl	800b918 <memp_free>
}
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	0801ead0 	.word	0x0801ead0
 80133e4:	0801ee1c 	.word	0x0801ee1c
 80133e8:	0801eb24 	.word	0x0801eb24
 80133ec:	20008fc8 	.word	0x20008fc8

080133f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80133f6:	2000      	movs	r0, #0
 80133f8:	f7f8 fa3c 	bl	800b874 <memp_malloc>
 80133fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013404:	2220      	movs	r2, #32
 8013406:	2100      	movs	r1, #0
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f004 fce5 	bl	8017dd8 <memset>
    pcb->ttl = UDP_TTL;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	22ff      	movs	r2, #255	; 0xff
 8013412:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013414:	687b      	ldr	r3, [r7, #4]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3708      	adds	r7, #8
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801341e:	b580      	push	{r7, lr}
 8013420:	b084      	sub	sp, #16
 8013422:	af00      	add	r7, sp, #0
 8013424:	4603      	mov	r3, r0
 8013426:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013428:	f7ff ffe2 	bl	80133f0 <udp_new>
 801342c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801342e:	68fb      	ldr	r3, [r7, #12]
}
 8013430:	4618      	mov	r0, r3
 8013432:	3710      	adds	r7, #16
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d01e      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d01a      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d017      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d013      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801345e:	4b0d      	ldr	r3, [pc, #52]	; (8013494 <udp_netif_ip_addr_changed+0x5c>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	60fb      	str	r3, [r7, #12]
 8013464:	e00c      	b.n	8013480 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	429a      	cmp	r2, r3
 8013470:	d103      	bne.n	801347a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68db      	ldr	r3, [r3, #12]
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d1ef      	bne.n	8013466 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013486:	bf00      	nop
 8013488:	3714      	adds	r7, #20
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	20008fc8 	.word	0x20008fc8

08013498 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80134a0:	4915      	ldr	r1, [pc, #84]	; (80134f8 <etharp_free_entry+0x60>)
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	4613      	mov	r3, r2
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	4413      	add	r3, r2
 80134aa:	00db      	lsls	r3, r3, #3
 80134ac:	440b      	add	r3, r1
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d013      	beq.n	80134dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80134b4:	4910      	ldr	r1, [pc, #64]	; (80134f8 <etharp_free_entry+0x60>)
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	4613      	mov	r3, r2
 80134ba:	005b      	lsls	r3, r3, #1
 80134bc:	4413      	add	r3, r2
 80134be:	00db      	lsls	r3, r3, #3
 80134c0:	440b      	add	r3, r1
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f9 f84f 	bl	800c568 <pbuf_free>
    arp_table[i].q = NULL;
 80134ca:	490b      	ldr	r1, [pc, #44]	; (80134f8 <etharp_free_entry+0x60>)
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	4613      	mov	r3, r2
 80134d0:	005b      	lsls	r3, r3, #1
 80134d2:	4413      	add	r3, r2
 80134d4:	00db      	lsls	r3, r3, #3
 80134d6:	440b      	add	r3, r1
 80134d8:	2200      	movs	r2, #0
 80134da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80134dc:	4906      	ldr	r1, [pc, #24]	; (80134f8 <etharp_free_entry+0x60>)
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	4613      	mov	r3, r2
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	4413      	add	r3, r2
 80134e6:	00db      	lsls	r3, r3, #3
 80134e8:	440b      	add	r3, r1
 80134ea:	3314      	adds	r3, #20
 80134ec:	2200      	movs	r2, #0
 80134ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80134f0:	bf00      	nop
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	200054e4 	.word	0x200054e4

080134fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013502:	2300      	movs	r3, #0
 8013504:	607b      	str	r3, [r7, #4]
 8013506:	e096      	b.n	8013636 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013508:	494f      	ldr	r1, [pc, #316]	; (8013648 <etharp_tmr+0x14c>)
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	4613      	mov	r3, r2
 801350e:	005b      	lsls	r3, r3, #1
 8013510:	4413      	add	r3, r2
 8013512:	00db      	lsls	r3, r3, #3
 8013514:	440b      	add	r3, r1
 8013516:	3314      	adds	r3, #20
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801351c:	78fb      	ldrb	r3, [r7, #3]
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 8086 	beq.w	8013630 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013524:	4948      	ldr	r1, [pc, #288]	; (8013648 <etharp_tmr+0x14c>)
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	440b      	add	r3, r1
 8013532:	3312      	adds	r3, #18
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	3301      	adds	r3, #1
 8013538:	b298      	uxth	r0, r3
 801353a:	4943      	ldr	r1, [pc, #268]	; (8013648 <etharp_tmr+0x14c>)
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	4613      	mov	r3, r2
 8013540:	005b      	lsls	r3, r3, #1
 8013542:	4413      	add	r3, r2
 8013544:	00db      	lsls	r3, r3, #3
 8013546:	440b      	add	r3, r1
 8013548:	3312      	adds	r3, #18
 801354a:	4602      	mov	r2, r0
 801354c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801354e:	493e      	ldr	r1, [pc, #248]	; (8013648 <etharp_tmr+0x14c>)
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	4613      	mov	r3, r2
 8013554:	005b      	lsls	r3, r3, #1
 8013556:	4413      	add	r3, r2
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	440b      	add	r3, r1
 801355c:	3312      	adds	r3, #18
 801355e:	881b      	ldrh	r3, [r3, #0]
 8013560:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013564:	d215      	bcs.n	8013592 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013566:	4938      	ldr	r1, [pc, #224]	; (8013648 <etharp_tmr+0x14c>)
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	4613      	mov	r3, r2
 801356c:	005b      	lsls	r3, r3, #1
 801356e:	4413      	add	r3, r2
 8013570:	00db      	lsls	r3, r3, #3
 8013572:	440b      	add	r3, r1
 8013574:	3314      	adds	r3, #20
 8013576:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013578:	2b01      	cmp	r3, #1
 801357a:	d10e      	bne.n	801359a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801357c:	4932      	ldr	r1, [pc, #200]	; (8013648 <etharp_tmr+0x14c>)
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	4613      	mov	r3, r2
 8013582:	005b      	lsls	r3, r3, #1
 8013584:	4413      	add	r3, r2
 8013586:	00db      	lsls	r3, r3, #3
 8013588:	440b      	add	r3, r1
 801358a:	3312      	adds	r3, #18
 801358c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801358e:	2b04      	cmp	r3, #4
 8013590:	d903      	bls.n	801359a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff ff80 	bl	8013498 <etharp_free_entry>
 8013598:	e04a      	b.n	8013630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801359a:	492b      	ldr	r1, [pc, #172]	; (8013648 <etharp_tmr+0x14c>)
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	4613      	mov	r3, r2
 80135a0:	005b      	lsls	r3, r3, #1
 80135a2:	4413      	add	r3, r2
 80135a4:	00db      	lsls	r3, r3, #3
 80135a6:	440b      	add	r3, r1
 80135a8:	3314      	adds	r3, #20
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	2b03      	cmp	r3, #3
 80135ae:	d10a      	bne.n	80135c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80135b0:	4925      	ldr	r1, [pc, #148]	; (8013648 <etharp_tmr+0x14c>)
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	4613      	mov	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	00db      	lsls	r3, r3, #3
 80135bc:	440b      	add	r3, r1
 80135be:	3314      	adds	r3, #20
 80135c0:	2204      	movs	r2, #4
 80135c2:	701a      	strb	r2, [r3, #0]
 80135c4:	e034      	b.n	8013630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80135c6:	4920      	ldr	r1, [pc, #128]	; (8013648 <etharp_tmr+0x14c>)
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	4413      	add	r3, r2
 80135d0:	00db      	lsls	r3, r3, #3
 80135d2:	440b      	add	r3, r1
 80135d4:	3314      	adds	r3, #20
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	2b04      	cmp	r3, #4
 80135da:	d10a      	bne.n	80135f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80135dc:	491a      	ldr	r1, [pc, #104]	; (8013648 <etharp_tmr+0x14c>)
 80135de:	687a      	ldr	r2, [r7, #4]
 80135e0:	4613      	mov	r3, r2
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	4413      	add	r3, r2
 80135e6:	00db      	lsls	r3, r3, #3
 80135e8:	440b      	add	r3, r1
 80135ea:	3314      	adds	r3, #20
 80135ec:	2202      	movs	r2, #2
 80135ee:	701a      	strb	r2, [r3, #0]
 80135f0:	e01e      	b.n	8013630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135f2:	4915      	ldr	r1, [pc, #84]	; (8013648 <etharp_tmr+0x14c>)
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	4613      	mov	r3, r2
 80135f8:	005b      	lsls	r3, r3, #1
 80135fa:	4413      	add	r3, r2
 80135fc:	00db      	lsls	r3, r3, #3
 80135fe:	440b      	add	r3, r1
 8013600:	3314      	adds	r3, #20
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	2b01      	cmp	r3, #1
 8013606:	d113      	bne.n	8013630 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013608:	490f      	ldr	r1, [pc, #60]	; (8013648 <etharp_tmr+0x14c>)
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	4613      	mov	r3, r2
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	4413      	add	r3, r2
 8013612:	00db      	lsls	r3, r3, #3
 8013614:	440b      	add	r3, r1
 8013616:	3308      	adds	r3, #8
 8013618:	6818      	ldr	r0, [r3, #0]
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	4613      	mov	r3, r2
 801361e:	005b      	lsls	r3, r3, #1
 8013620:	4413      	add	r3, r2
 8013622:	00db      	lsls	r3, r3, #3
 8013624:	4a08      	ldr	r2, [pc, #32]	; (8013648 <etharp_tmr+0x14c>)
 8013626:	4413      	add	r3, r2
 8013628:	3304      	adds	r3, #4
 801362a:	4619      	mov	r1, r3
 801362c:	f000 fe6e 	bl	801430c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	3301      	adds	r3, #1
 8013634:	607b      	str	r3, [r7, #4]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2b09      	cmp	r3, #9
 801363a:	f77f af65 	ble.w	8013508 <etharp_tmr+0xc>
      }
    }
  }
}
 801363e:	bf00      	nop
 8013640:	3708      	adds	r7, #8
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	200054e4 	.word	0x200054e4

0801364c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b08a      	sub	sp, #40	; 0x28
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	460b      	mov	r3, r1
 8013656:	607a      	str	r2, [r7, #4]
 8013658:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801365a:	230a      	movs	r3, #10
 801365c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801365e:	230a      	movs	r3, #10
 8013660:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013662:	230a      	movs	r3, #10
 8013664:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801366a:	230a      	movs	r3, #10
 801366c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	83bb      	strh	r3, [r7, #28]
 8013672:	2300      	movs	r3, #0
 8013674:	837b      	strh	r3, [r7, #26]
 8013676:	2300      	movs	r3, #0
 8013678:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801367a:	2300      	movs	r3, #0
 801367c:	843b      	strh	r3, [r7, #32]
 801367e:	e0ae      	b.n	80137de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013684:	49a6      	ldr	r1, [pc, #664]	; (8013920 <etharp_find_entry+0x2d4>)
 8013686:	4613      	mov	r3, r2
 8013688:	005b      	lsls	r3, r3, #1
 801368a:	4413      	add	r3, r2
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	440b      	add	r3, r1
 8013690:	3314      	adds	r3, #20
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801369a:	2b0a      	cmp	r3, #10
 801369c:	d105      	bne.n	80136aa <etharp_find_entry+0x5e>
 801369e:	7dfb      	ldrb	r3, [r7, #23]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d102      	bne.n	80136aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80136a4:	8c3b      	ldrh	r3, [r7, #32]
 80136a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80136a8:	e095      	b.n	80137d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80136aa:	7dfb      	ldrb	r3, [r7, #23]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 8092 	beq.w	80137d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80136b2:	7dfb      	ldrb	r3, [r7, #23]
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d009      	beq.n	80136cc <etharp_find_entry+0x80>
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d806      	bhi.n	80136cc <etharp_find_entry+0x80>
 80136be:	4b99      	ldr	r3, [pc, #612]	; (8013924 <etharp_find_entry+0x2d8>)
 80136c0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80136c4:	4998      	ldr	r1, [pc, #608]	; (8013928 <etharp_find_entry+0x2dc>)
 80136c6:	4899      	ldr	r0, [pc, #612]	; (801392c <etharp_find_entry+0x2e0>)
 80136c8:	f005 f9a2 	bl	8018a10 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d020      	beq.n	8013714 <etharp_find_entry+0xc8>
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	6819      	ldr	r1, [r3, #0]
 80136d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136da:	4891      	ldr	r0, [pc, #580]	; (8013920 <etharp_find_entry+0x2d4>)
 80136dc:	4613      	mov	r3, r2
 80136de:	005b      	lsls	r3, r3, #1
 80136e0:	4413      	add	r3, r2
 80136e2:	00db      	lsls	r3, r3, #3
 80136e4:	4403      	add	r3, r0
 80136e6:	3304      	adds	r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	4299      	cmp	r1, r3
 80136ec:	d112      	bne.n	8013714 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00c      	beq.n	801370e <etharp_find_entry+0xc2>
 80136f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136f8:	4989      	ldr	r1, [pc, #548]	; (8013920 <etharp_find_entry+0x2d4>)
 80136fa:	4613      	mov	r3, r2
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	4413      	add	r3, r2
 8013700:	00db      	lsls	r3, r3, #3
 8013702:	440b      	add	r3, r1
 8013704:	3308      	adds	r3, #8
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	429a      	cmp	r2, r3
 801370c:	d102      	bne.n	8013714 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801370e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013712:	e100      	b.n	8013916 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013714:	7dfb      	ldrb	r3, [r7, #23]
 8013716:	2b01      	cmp	r3, #1
 8013718:	d140      	bne.n	801379c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801371a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801371e:	4980      	ldr	r1, [pc, #512]	; (8013920 <etharp_find_entry+0x2d4>)
 8013720:	4613      	mov	r3, r2
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	00db      	lsls	r3, r3, #3
 8013728:	440b      	add	r3, r1
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d01a      	beq.n	8013766 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013734:	497a      	ldr	r1, [pc, #488]	; (8013920 <etharp_find_entry+0x2d4>)
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	440b      	add	r3, r1
 8013740:	3312      	adds	r3, #18
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	8bba      	ldrh	r2, [r7, #28]
 8013746:	429a      	cmp	r2, r3
 8013748:	d845      	bhi.n	80137d6 <etharp_find_entry+0x18a>
            old_queue = i;
 801374a:	8c3b      	ldrh	r3, [r7, #32]
 801374c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801374e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013752:	4973      	ldr	r1, [pc, #460]	; (8013920 <etharp_find_entry+0x2d4>)
 8013754:	4613      	mov	r3, r2
 8013756:	005b      	lsls	r3, r3, #1
 8013758:	4413      	add	r3, r2
 801375a:	00db      	lsls	r3, r3, #3
 801375c:	440b      	add	r3, r1
 801375e:	3312      	adds	r3, #18
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	83bb      	strh	r3, [r7, #28]
 8013764:	e037      	b.n	80137d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801376a:	496d      	ldr	r1, [pc, #436]	; (8013920 <etharp_find_entry+0x2d4>)
 801376c:	4613      	mov	r3, r2
 801376e:	005b      	lsls	r3, r3, #1
 8013770:	4413      	add	r3, r2
 8013772:	00db      	lsls	r3, r3, #3
 8013774:	440b      	add	r3, r1
 8013776:	3312      	adds	r3, #18
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	8b7a      	ldrh	r2, [r7, #26]
 801377c:	429a      	cmp	r2, r3
 801377e:	d82a      	bhi.n	80137d6 <etharp_find_entry+0x18a>
            old_pending = i;
 8013780:	8c3b      	ldrh	r3, [r7, #32]
 8013782:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013788:	4965      	ldr	r1, [pc, #404]	; (8013920 <etharp_find_entry+0x2d4>)
 801378a:	4613      	mov	r3, r2
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	4413      	add	r3, r2
 8013790:	00db      	lsls	r3, r3, #3
 8013792:	440b      	add	r3, r1
 8013794:	3312      	adds	r3, #18
 8013796:	881b      	ldrh	r3, [r3, #0]
 8013798:	837b      	strh	r3, [r7, #26]
 801379a:	e01c      	b.n	80137d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801379c:	7dfb      	ldrb	r3, [r7, #23]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d919      	bls.n	80137d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80137a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137a6:	495e      	ldr	r1, [pc, #376]	; (8013920 <etharp_find_entry+0x2d4>)
 80137a8:	4613      	mov	r3, r2
 80137aa:	005b      	lsls	r3, r3, #1
 80137ac:	4413      	add	r3, r2
 80137ae:	00db      	lsls	r3, r3, #3
 80137b0:	440b      	add	r3, r1
 80137b2:	3312      	adds	r3, #18
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	8b3a      	ldrh	r2, [r7, #24]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d80c      	bhi.n	80137d6 <etharp_find_entry+0x18a>
            old_stable = i;
 80137bc:	8c3b      	ldrh	r3, [r7, #32]
 80137be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80137c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137c4:	4956      	ldr	r1, [pc, #344]	; (8013920 <etharp_find_entry+0x2d4>)
 80137c6:	4613      	mov	r3, r2
 80137c8:	005b      	lsls	r3, r3, #1
 80137ca:	4413      	add	r3, r2
 80137cc:	00db      	lsls	r3, r3, #3
 80137ce:	440b      	add	r3, r1
 80137d0:	3312      	adds	r3, #18
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137d6:	8c3b      	ldrh	r3, [r7, #32]
 80137d8:	3301      	adds	r3, #1
 80137da:	b29b      	uxth	r3, r3
 80137dc:	843b      	strh	r3, [r7, #32]
 80137de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137e2:	2b09      	cmp	r3, #9
 80137e4:	f77f af4c 	ble.w	8013680 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80137e8:	7afb      	ldrb	r3, [r7, #11]
 80137ea:	f003 0302 	and.w	r3, r3, #2
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d108      	bne.n	8013804 <etharp_find_entry+0x1b8>
 80137f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137f6:	2b0a      	cmp	r3, #10
 80137f8:	d107      	bne.n	801380a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80137fa:	7afb      	ldrb	r3, [r7, #11]
 80137fc:	f003 0301 	and.w	r3, r3, #1
 8013800:	2b00      	cmp	r3, #0
 8013802:	d102      	bne.n	801380a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013808:	e085      	b.n	8013916 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801380a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801380e:	2b09      	cmp	r3, #9
 8013810:	dc02      	bgt.n	8013818 <etharp_find_entry+0x1cc>
    i = empty;
 8013812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013814:	843b      	strh	r3, [r7, #32]
 8013816:	e039      	b.n	801388c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013818:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801381c:	2b09      	cmp	r3, #9
 801381e:	dc14      	bgt.n	801384a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013822:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013828:	493d      	ldr	r1, [pc, #244]	; (8013920 <etharp_find_entry+0x2d4>)
 801382a:	4613      	mov	r3, r2
 801382c:	005b      	lsls	r3, r3, #1
 801382e:	4413      	add	r3, r2
 8013830:	00db      	lsls	r3, r3, #3
 8013832:	440b      	add	r3, r1
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d018      	beq.n	801386c <etharp_find_entry+0x220>
 801383a:	4b3a      	ldr	r3, [pc, #232]	; (8013924 <etharp_find_entry+0x2d8>)
 801383c:	f240 126d 	movw	r2, #365	; 0x16d
 8013840:	493b      	ldr	r1, [pc, #236]	; (8013930 <etharp_find_entry+0x2e4>)
 8013842:	483a      	ldr	r0, [pc, #232]	; (801392c <etharp_find_entry+0x2e0>)
 8013844:	f005 f8e4 	bl	8018a10 <iprintf>
 8013848:	e010      	b.n	801386c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801384a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801384e:	2b09      	cmp	r3, #9
 8013850:	dc02      	bgt.n	8013858 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013854:	843b      	strh	r3, [r7, #32]
 8013856:	e009      	b.n	801386c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013858:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801385c:	2b09      	cmp	r3, #9
 801385e:	dc02      	bgt.n	8013866 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013860:	8bfb      	ldrh	r3, [r7, #30]
 8013862:	843b      	strh	r3, [r7, #32]
 8013864:	e002      	b.n	801386c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801386a:	e054      	b.n	8013916 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801386c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013870:	2b09      	cmp	r3, #9
 8013872:	dd06      	ble.n	8013882 <etharp_find_entry+0x236>
 8013874:	4b2b      	ldr	r3, [pc, #172]	; (8013924 <etharp_find_entry+0x2d8>)
 8013876:	f240 127f 	movw	r2, #383	; 0x17f
 801387a:	492e      	ldr	r1, [pc, #184]	; (8013934 <etharp_find_entry+0x2e8>)
 801387c:	482b      	ldr	r0, [pc, #172]	; (801392c <etharp_find_entry+0x2e0>)
 801387e:	f005 f8c7 	bl	8018a10 <iprintf>
    etharp_free_entry(i);
 8013882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013886:	4618      	mov	r0, r3
 8013888:	f7ff fe06 	bl	8013498 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801388c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013890:	2b09      	cmp	r3, #9
 8013892:	dd06      	ble.n	80138a2 <etharp_find_entry+0x256>
 8013894:	4b23      	ldr	r3, [pc, #140]	; (8013924 <etharp_find_entry+0x2d8>)
 8013896:	f240 1283 	movw	r2, #387	; 0x183
 801389a:	4926      	ldr	r1, [pc, #152]	; (8013934 <etharp_find_entry+0x2e8>)
 801389c:	4823      	ldr	r0, [pc, #140]	; (801392c <etharp_find_entry+0x2e0>)
 801389e:	f005 f8b7 	bl	8018a10 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80138a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138a6:	491e      	ldr	r1, [pc, #120]	; (8013920 <etharp_find_entry+0x2d4>)
 80138a8:	4613      	mov	r3, r2
 80138aa:	005b      	lsls	r3, r3, #1
 80138ac:	4413      	add	r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	440b      	add	r3, r1
 80138b2:	3314      	adds	r3, #20
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d006      	beq.n	80138c8 <etharp_find_entry+0x27c>
 80138ba:	4b1a      	ldr	r3, [pc, #104]	; (8013924 <etharp_find_entry+0x2d8>)
 80138bc:	f240 1285 	movw	r2, #389	; 0x185
 80138c0:	491d      	ldr	r1, [pc, #116]	; (8013938 <etharp_find_entry+0x2ec>)
 80138c2:	481a      	ldr	r0, [pc, #104]	; (801392c <etharp_find_entry+0x2e0>)
 80138c4:	f005 f8a4 	bl	8018a10 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00b      	beq.n	80138e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80138ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	6819      	ldr	r1, [r3, #0]
 80138d6:	4812      	ldr	r0, [pc, #72]	; (8013920 <etharp_find_entry+0x2d4>)
 80138d8:	4613      	mov	r3, r2
 80138da:	005b      	lsls	r3, r3, #1
 80138dc:	4413      	add	r3, r2
 80138de:	00db      	lsls	r3, r3, #3
 80138e0:	4403      	add	r3, r0
 80138e2:	3304      	adds	r3, #4
 80138e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80138e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ea:	490d      	ldr	r1, [pc, #52]	; (8013920 <etharp_find_entry+0x2d4>)
 80138ec:	4613      	mov	r3, r2
 80138ee:	005b      	lsls	r3, r3, #1
 80138f0:	4413      	add	r3, r2
 80138f2:	00db      	lsls	r3, r3, #3
 80138f4:	440b      	add	r3, r1
 80138f6:	3312      	adds	r3, #18
 80138f8:	2200      	movs	r2, #0
 80138fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80138fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013900:	4907      	ldr	r1, [pc, #28]	; (8013920 <etharp_find_entry+0x2d4>)
 8013902:	4613      	mov	r3, r2
 8013904:	005b      	lsls	r3, r3, #1
 8013906:	4413      	add	r3, r2
 8013908:	00db      	lsls	r3, r3, #3
 801390a:	440b      	add	r3, r1
 801390c:	3308      	adds	r3, #8
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3728      	adds	r7, #40	; 0x28
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	200054e4 	.word	0x200054e4
 8013924:	0801ee34 	.word	0x0801ee34
 8013928:	0801ee6c 	.word	0x0801ee6c
 801392c:	0801eeac 	.word	0x0801eeac
 8013930:	0801eed4 	.word	0x0801eed4
 8013934:	0801eeec 	.word	0x0801eeec
 8013938:	0801ef00 	.word	0x0801ef00

0801393c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b088      	sub	sp, #32
 8013940:	af02      	add	r7, sp, #8
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
 8013948:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013950:	2b06      	cmp	r3, #6
 8013952:	d006      	beq.n	8013962 <etharp_update_arp_entry+0x26>
 8013954:	4b48      	ldr	r3, [pc, #288]	; (8013a78 <etharp_update_arp_entry+0x13c>)
 8013956:	f240 12a9 	movw	r2, #425	; 0x1a9
 801395a:	4948      	ldr	r1, [pc, #288]	; (8013a7c <etharp_update_arp_entry+0x140>)
 801395c:	4848      	ldr	r0, [pc, #288]	; (8013a80 <etharp_update_arp_entry+0x144>)
 801395e:	f005 f857 	bl	8018a10 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d012      	beq.n	801398e <etharp_update_arp_entry+0x52>
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00e      	beq.n	801398e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	68f9      	ldr	r1, [r7, #12]
 8013976:	4618      	mov	r0, r3
 8013978:	f001 f8fc 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801397c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801397e:	2b00      	cmp	r3, #0
 8013980:	d105      	bne.n	801398e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801398a:	2be0      	cmp	r3, #224	; 0xe0
 801398c:	d102      	bne.n	8013994 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801398e:	f06f 030f 	mvn.w	r3, #15
 8013992:	e06c      	b.n	8013a6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013994:	78fb      	ldrb	r3, [r7, #3]
 8013996:	68fa      	ldr	r2, [r7, #12]
 8013998:	4619      	mov	r1, r3
 801399a:	68b8      	ldr	r0, [r7, #8]
 801399c:	f7ff fe56 	bl	801364c <etharp_find_entry>
 80139a0:	4603      	mov	r3, r0
 80139a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80139a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	da02      	bge.n	80139b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80139ac:	8afb      	ldrh	r3, [r7, #22]
 80139ae:	b25b      	sxtb	r3, r3
 80139b0:	e05d      	b.n	8013a6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80139b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139b6:	4933      	ldr	r1, [pc, #204]	; (8013a84 <etharp_update_arp_entry+0x148>)
 80139b8:	4613      	mov	r3, r2
 80139ba:	005b      	lsls	r3, r3, #1
 80139bc:	4413      	add	r3, r2
 80139be:	00db      	lsls	r3, r3, #3
 80139c0:	440b      	add	r3, r1
 80139c2:	3314      	adds	r3, #20
 80139c4:	2202      	movs	r2, #2
 80139c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80139c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139cc:	492d      	ldr	r1, [pc, #180]	; (8013a84 <etharp_update_arp_entry+0x148>)
 80139ce:	4613      	mov	r3, r2
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	4413      	add	r3, r2
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	440b      	add	r3, r1
 80139d8:	3308      	adds	r3, #8
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80139de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139e2:	4613      	mov	r3, r2
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	4413      	add	r3, r2
 80139e8:	00db      	lsls	r3, r3, #3
 80139ea:	3308      	adds	r3, #8
 80139ec:	4a25      	ldr	r2, [pc, #148]	; (8013a84 <etharp_update_arp_entry+0x148>)
 80139ee:	4413      	add	r3, r2
 80139f0:	3304      	adds	r3, #4
 80139f2:	2206      	movs	r2, #6
 80139f4:	6879      	ldr	r1, [r7, #4]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f004 f9ca 	bl	8017d90 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80139fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a00:	4920      	ldr	r1, [pc, #128]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a02:	4613      	mov	r3, r2
 8013a04:	005b      	lsls	r3, r3, #1
 8013a06:	4413      	add	r3, r2
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	440b      	add	r3, r1
 8013a0c:	3312      	adds	r3, #18
 8013a0e:	2200      	movs	r2, #0
 8013a10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013a12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a16:	491b      	ldr	r1, [pc, #108]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a18:	4613      	mov	r3, r2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	4413      	add	r3, r2
 8013a1e:	00db      	lsls	r3, r3, #3
 8013a20:	440b      	add	r3, r1
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d021      	beq.n	8013a6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a2c:	4915      	ldr	r1, [pc, #84]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a2e:	4613      	mov	r3, r2
 8013a30:	005b      	lsls	r3, r3, #1
 8013a32:	4413      	add	r3, r2
 8013a34:	00db      	lsls	r3, r3, #3
 8013a36:	440b      	add	r3, r1
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013a3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a40:	4910      	ldr	r1, [pc, #64]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a42:	4613      	mov	r3, r2
 8013a44:	005b      	lsls	r3, r3, #1
 8013a46:	4413      	add	r3, r2
 8013a48:	00db      	lsls	r3, r3, #3
 8013a4a:	440b      	add	r3, r1
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8013a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6939      	ldr	r1, [r7, #16]
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f001 ff8b 	bl	801597c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013a66:	6938      	ldr	r0, [r7, #16]
 8013a68:	f7f8 fd7e 	bl	800c568 <pbuf_free>
  }
  return ERR_OK;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3718      	adds	r7, #24
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	0801ee34 	.word	0x0801ee34
 8013a7c:	0801ef2c 	.word	0x0801ef2c
 8013a80:	0801eeac 	.word	0x0801eeac
 8013a84:	200054e4 	.word	0x200054e4

08013a88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a90:	2300      	movs	r3, #0
 8013a92:	60fb      	str	r3, [r7, #12]
 8013a94:	e01e      	b.n	8013ad4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013a96:	4913      	ldr	r1, [pc, #76]	; (8013ae4 <etharp_cleanup_netif+0x5c>)
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	005b      	lsls	r3, r3, #1
 8013a9e:	4413      	add	r3, r2
 8013aa0:	00db      	lsls	r3, r3, #3
 8013aa2:	440b      	add	r3, r1
 8013aa4:	3314      	adds	r3, #20
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013aaa:	7afb      	ldrb	r3, [r7, #11]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00e      	beq.n	8013ace <etharp_cleanup_netif+0x46>
 8013ab0:	490c      	ldr	r1, [pc, #48]	; (8013ae4 <etharp_cleanup_netif+0x5c>)
 8013ab2:	68fa      	ldr	r2, [r7, #12]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	005b      	lsls	r3, r3, #1
 8013ab8:	4413      	add	r3, r2
 8013aba:	00db      	lsls	r3, r3, #3
 8013abc:	440b      	add	r3, r1
 8013abe:	3308      	adds	r3, #8
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d102      	bne.n	8013ace <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013ac8:	68f8      	ldr	r0, [r7, #12]
 8013aca:	f7ff fce5 	bl	8013498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	60fb      	str	r3, [r7, #12]
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2b09      	cmp	r3, #9
 8013ad8:	dddd      	ble.n	8013a96 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013ada:	bf00      	nop
 8013adc:	3710      	adds	r7, #16
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	200054e4 	.word	0x200054e4

08013ae8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013ae8:	b5b0      	push	{r4, r5, r7, lr}
 8013aea:	b08a      	sub	sp, #40	; 0x28
 8013aec:	af04      	add	r7, sp, #16
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d107      	bne.n	8013b08 <etharp_input+0x20>
 8013af8:	4b3d      	ldr	r3, [pc, #244]	; (8013bf0 <etharp_input+0x108>)
 8013afa:	f240 228a 	movw	r2, #650	; 0x28a
 8013afe:	493d      	ldr	r1, [pc, #244]	; (8013bf4 <etharp_input+0x10c>)
 8013b00:	483d      	ldr	r0, [pc, #244]	; (8013bf8 <etharp_input+0x110>)
 8013b02:	f004 ff85 	bl	8018a10 <iprintf>
 8013b06:	e06f      	b.n	8013be8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b18:	d10c      	bne.n	8013b34 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b1e:	2b06      	cmp	r3, #6
 8013b20:	d108      	bne.n	8013b34 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b26:	2b04      	cmp	r3, #4
 8013b28:	d104      	bne.n	8013b34 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	885b      	ldrh	r3, [r3, #2]
 8013b2e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b30:	2b08      	cmp	r3, #8
 8013b32:	d003      	beq.n	8013b3c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7f8 fd17 	bl	800c568 <pbuf_free>
    return;
 8013b3a:	e055      	b.n	8013be8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	330e      	adds	r3, #14
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	3318      	adds	r3, #24
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d102      	bne.n	8013b5c <etharp_input+0x74>
    for_us = 0;
 8013b56:	2300      	movs	r3, #0
 8013b58:	75fb      	strb	r3, [r7, #23]
 8013b5a:	e009      	b.n	8013b70 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013b5c:	68ba      	ldr	r2, [r7, #8]
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	3304      	adds	r3, #4
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	bf0c      	ite	eq
 8013b68:	2301      	moveq	r3, #1
 8013b6a:	2300      	movne	r3, #0
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	f103 0208 	add.w	r2, r3, #8
 8013b76:	7dfb      	ldrb	r3, [r7, #23]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <etharp_input+0x98>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e000      	b.n	8013b82 <etharp_input+0x9a>
 8013b80:	2302      	movs	r3, #2
 8013b82:	f107 010c 	add.w	r1, r7, #12
 8013b86:	6838      	ldr	r0, [r7, #0]
 8013b88:	f7ff fed8 	bl	801393c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	88db      	ldrh	r3, [r3, #6]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b96:	d003      	beq.n	8013ba0 <etharp_input+0xb8>
 8013b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b9c:	d01e      	beq.n	8013bdc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013b9e:	e020      	b.n	8013be2 <etharp_input+0xfa>
      if (for_us) {
 8013ba0:	7dfb      	ldrb	r3, [r7, #23]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d01c      	beq.n	8013be0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	f103 0022 	add.w	r0, r3, #34	; 0x22
 8013bac:	693b      	ldr	r3, [r7, #16]
 8013bae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	f103 0522 	add.w	r5, r3, #34	; 0x22
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013bbc:	693a      	ldr	r2, [r7, #16]
 8013bbe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013bc0:	2102      	movs	r1, #2
 8013bc2:	9103      	str	r1, [sp, #12]
 8013bc4:	f107 010c 	add.w	r1, r7, #12
 8013bc8:	9102      	str	r1, [sp, #8]
 8013bca:	9201      	str	r2, [sp, #4]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	462b      	mov	r3, r5
 8013bd0:	4622      	mov	r2, r4
 8013bd2:	4601      	mov	r1, r0
 8013bd4:	6838      	ldr	r0, [r7, #0]
 8013bd6:	f000 faeb 	bl	80141b0 <etharp_raw>
      break;
 8013bda:	e001      	b.n	8013be0 <etharp_input+0xf8>
      break;
 8013bdc:	bf00      	nop
 8013bde:	e000      	b.n	8013be2 <etharp_input+0xfa>
      break;
 8013be0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f7f8 fcc0 	bl	800c568 <pbuf_free>
}
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bdb0      	pop	{r4, r5, r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	0801ee34 	.word	0x0801ee34
 8013bf4:	0801ef84 	.word	0x0801ef84
 8013bf8:	0801eeac 	.word	0x0801eeac

08013bfc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b086      	sub	sp, #24
 8013c00:	af02      	add	r7, sp, #8
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	4613      	mov	r3, r2
 8013c08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013c0a:	79fa      	ldrb	r2, [r7, #7]
 8013c0c:	4944      	ldr	r1, [pc, #272]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c0e:	4613      	mov	r3, r2
 8013c10:	005b      	lsls	r3, r3, #1
 8013c12:	4413      	add	r3, r2
 8013c14:	00db      	lsls	r3, r3, #3
 8013c16:	440b      	add	r3, r1
 8013c18:	3314      	adds	r3, #20
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d806      	bhi.n	8013c2e <etharp_output_to_arp_index+0x32>
 8013c20:	4b40      	ldr	r3, [pc, #256]	; (8013d24 <etharp_output_to_arp_index+0x128>)
 8013c22:	f240 22ef 	movw	r2, #751	; 0x2ef
 8013c26:	4940      	ldr	r1, [pc, #256]	; (8013d28 <etharp_output_to_arp_index+0x12c>)
 8013c28:	4840      	ldr	r0, [pc, #256]	; (8013d2c <etharp_output_to_arp_index+0x130>)
 8013c2a:	f004 fef1 	bl	8018a10 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013c2e:	79fa      	ldrb	r2, [r7, #7]
 8013c30:	493b      	ldr	r1, [pc, #236]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c32:	4613      	mov	r3, r2
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	4413      	add	r3, r2
 8013c38:	00db      	lsls	r3, r3, #3
 8013c3a:	440b      	add	r3, r1
 8013c3c:	3314      	adds	r3, #20
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	2b02      	cmp	r3, #2
 8013c42:	d153      	bne.n	8013cec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013c44:	79fa      	ldrb	r2, [r7, #7]
 8013c46:	4936      	ldr	r1, [pc, #216]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c48:	4613      	mov	r3, r2
 8013c4a:	005b      	lsls	r3, r3, #1
 8013c4c:	4413      	add	r3, r2
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	440b      	add	r3, r1
 8013c52:	3312      	adds	r3, #18
 8013c54:	881b      	ldrh	r3, [r3, #0]
 8013c56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013c5a:	d919      	bls.n	8013c90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013c5c:	79fa      	ldrb	r2, [r7, #7]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	005b      	lsls	r3, r3, #1
 8013c62:	4413      	add	r3, r2
 8013c64:	00db      	lsls	r3, r3, #3
 8013c66:	4a2e      	ldr	r2, [pc, #184]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c68:	4413      	add	r3, r2
 8013c6a:	3304      	adds	r3, #4
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	68f8      	ldr	r0, [r7, #12]
 8013c70:	f000 fb4c 	bl	801430c <etharp_request>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d138      	bne.n	8013cec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013c7a:	79fa      	ldrb	r2, [r7, #7]
 8013c7c:	4928      	ldr	r1, [pc, #160]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c7e:	4613      	mov	r3, r2
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	4413      	add	r3, r2
 8013c84:	00db      	lsls	r3, r3, #3
 8013c86:	440b      	add	r3, r1
 8013c88:	3314      	adds	r3, #20
 8013c8a:	2203      	movs	r2, #3
 8013c8c:	701a      	strb	r2, [r3, #0]
 8013c8e:	e02d      	b.n	8013cec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013c90:	79fa      	ldrb	r2, [r7, #7]
 8013c92:	4923      	ldr	r1, [pc, #140]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c94:	4613      	mov	r3, r2
 8013c96:	005b      	lsls	r3, r3, #1
 8013c98:	4413      	add	r3, r2
 8013c9a:	00db      	lsls	r3, r3, #3
 8013c9c:	440b      	add	r3, r1
 8013c9e:	3312      	adds	r3, #18
 8013ca0:	881b      	ldrh	r3, [r3, #0]
 8013ca2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013ca6:	d321      	bcc.n	8013cec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013ca8:	79fa      	ldrb	r2, [r7, #7]
 8013caa:	4613      	mov	r3, r2
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4413      	add	r3, r2
 8013cb0:	00db      	lsls	r3, r3, #3
 8013cb2:	4a1b      	ldr	r2, [pc, #108]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013cb4:	4413      	add	r3, r2
 8013cb6:	1d19      	adds	r1, r3, #4
 8013cb8:	79fa      	ldrb	r2, [r7, #7]
 8013cba:	4613      	mov	r3, r2
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	4413      	add	r3, r2
 8013cc0:	00db      	lsls	r3, r3, #3
 8013cc2:	3308      	adds	r3, #8
 8013cc4:	4a16      	ldr	r2, [pc, #88]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013cc6:	4413      	add	r3, r2
 8013cc8:	3304      	adds	r3, #4
 8013cca:	461a      	mov	r2, r3
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f000 fafb 	bl	80142c8 <etharp_request_dst>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d109      	bne.n	8013cec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013cd8:	79fa      	ldrb	r2, [r7, #7]
 8013cda:	4911      	ldr	r1, [pc, #68]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	3314      	adds	r3, #20
 8013ce8:	2203      	movs	r2, #3
 8013cea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8013cf2:	79fa      	ldrb	r2, [r7, #7]
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	005b      	lsls	r3, r3, #1
 8013cf8:	4413      	add	r3, r2
 8013cfa:	00db      	lsls	r3, r3, #3
 8013cfc:	3308      	adds	r3, #8
 8013cfe:	4a08      	ldr	r2, [pc, #32]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013d00:	4413      	add	r3, r2
 8013d02:	1d1a      	adds	r2, r3, #4
 8013d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d08:	9300      	str	r3, [sp, #0]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	460a      	mov	r2, r1
 8013d0e:	68b9      	ldr	r1, [r7, #8]
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f001 fe33 	bl	801597c <ethernet_output>
 8013d16:	4603      	mov	r3, r0
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3710      	adds	r7, #16
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	200054e4 	.word	0x200054e4
 8013d24:	0801ee34 	.word	0x0801ee34
 8013d28:	0801efa4 	.word	0x0801efa4
 8013d2c:	0801eeac 	.word	0x0801eeac

08013d30 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b08a      	sub	sp, #40	; 0x28
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	60b9      	str	r1, [r7, #8]
 8013d3a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <etharp_output+0x24>
 8013d46:	4b73      	ldr	r3, [pc, #460]	; (8013f14 <etharp_output+0x1e4>)
 8013d48:	f240 321e 	movw	r2, #798	; 0x31e
 8013d4c:	4972      	ldr	r1, [pc, #456]	; (8013f18 <etharp_output+0x1e8>)
 8013d4e:	4873      	ldr	r0, [pc, #460]	; (8013f1c <etharp_output+0x1ec>)
 8013d50:	f004 fe5e 	bl	8018a10 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d106      	bne.n	8013d68 <etharp_output+0x38>
 8013d5a:	4b6e      	ldr	r3, [pc, #440]	; (8013f14 <etharp_output+0x1e4>)
 8013d5c:	f240 321f 	movw	r2, #799	; 0x31f
 8013d60:	496f      	ldr	r1, [pc, #444]	; (8013f20 <etharp_output+0x1f0>)
 8013d62:	486e      	ldr	r0, [pc, #440]	; (8013f1c <etharp_output+0x1ec>)
 8013d64:	f004 fe54 	bl	8018a10 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d106      	bne.n	8013d7c <etharp_output+0x4c>
 8013d6e:	4b69      	ldr	r3, [pc, #420]	; (8013f14 <etharp_output+0x1e4>)
 8013d70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013d74:	496b      	ldr	r1, [pc, #428]	; (8013f24 <etharp_output+0x1f4>)
 8013d76:	4869      	ldr	r0, [pc, #420]	; (8013f1c <etharp_output+0x1ec>)
 8013d78:	f004 fe4a 	bl	8018a10 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68f9      	ldr	r1, [r7, #12]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f000 fef6 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d002      	beq.n	8013d94 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013d8e:	4b66      	ldr	r3, [pc, #408]	; (8013f28 <etharp_output+0x1f8>)
 8013d90:	61fb      	str	r3, [r7, #28]
 8013d92:	e0af      	b.n	8013ef4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d9c:	2be0      	cmp	r3, #224	; 0xe0
 8013d9e:	d118      	bne.n	8013dd2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013da0:	2301      	movs	r3, #1
 8013da2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013da4:	2300      	movs	r3, #0
 8013da6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013da8:	235e      	movs	r3, #94	; 0x5e
 8013daa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3301      	adds	r3, #1
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	3302      	adds	r3, #2
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3303      	adds	r3, #3
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013dca:	f107 0310 	add.w	r3, r7, #16
 8013dce:	61fb      	str	r3, [r7, #28]
 8013dd0:	e090      	b.n	8013ef4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	3304      	adds	r3, #4
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	405a      	eors	r2, r3
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	3308      	adds	r3, #8
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4013      	ands	r3, r2
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d012      	beq.n	8013e10 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013df0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d00b      	beq.n	8013e10 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	330c      	adds	r3, #12
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d003      	beq.n	8013e0a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	330c      	adds	r3, #12
 8013e06:	61bb      	str	r3, [r7, #24]
 8013e08:	e002      	b.n	8013e10 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013e0a:	f06f 0303 	mvn.w	r3, #3
 8013e0e:	e07d      	b.n	8013f0c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e10:	4b46      	ldr	r3, [pc, #280]	; (8013f2c <etharp_output+0x1fc>)
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	4619      	mov	r1, r3
 8013e16:	4a46      	ldr	r2, [pc, #280]	; (8013f30 <etharp_output+0x200>)
 8013e18:	460b      	mov	r3, r1
 8013e1a:	005b      	lsls	r3, r3, #1
 8013e1c:	440b      	add	r3, r1
 8013e1e:	00db      	lsls	r3, r3, #3
 8013e20:	4413      	add	r3, r2
 8013e22:	3314      	adds	r3, #20
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d925      	bls.n	8013e76 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e2a:	4b40      	ldr	r3, [pc, #256]	; (8013f2c <etharp_output+0x1fc>)
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	4619      	mov	r1, r3
 8013e30:	4a3f      	ldr	r2, [pc, #252]	; (8013f30 <etharp_output+0x200>)
 8013e32:	460b      	mov	r3, r1
 8013e34:	005b      	lsls	r3, r3, #1
 8013e36:	440b      	add	r3, r1
 8013e38:	00db      	lsls	r3, r3, #3
 8013e3a:	4413      	add	r3, r2
 8013e3c:	3308      	adds	r3, #8
 8013e3e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d117      	bne.n	8013e76 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	4b38      	ldr	r3, [pc, #224]	; (8013f2c <etharp_output+0x1fc>)
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	4618      	mov	r0, r3
 8013e50:	4937      	ldr	r1, [pc, #220]	; (8013f30 <etharp_output+0x200>)
 8013e52:	4603      	mov	r3, r0
 8013e54:	005b      	lsls	r3, r3, #1
 8013e56:	4403      	add	r3, r0
 8013e58:	00db      	lsls	r3, r3, #3
 8013e5a:	440b      	add	r3, r1
 8013e5c:	3304      	adds	r3, #4
 8013e5e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d108      	bne.n	8013e76 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013e64:	4b31      	ldr	r3, [pc, #196]	; (8013f2c <etharp_output+0x1fc>)
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	461a      	mov	r2, r3
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f7ff fec5 	bl	8013bfc <etharp_output_to_arp_index>
 8013e72:	4603      	mov	r3, r0
 8013e74:	e04a      	b.n	8013f0c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013e76:	2300      	movs	r3, #0
 8013e78:	75fb      	strb	r3, [r7, #23]
 8013e7a:	e031      	b.n	8013ee0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e7c:	7dfa      	ldrb	r2, [r7, #23]
 8013e7e:	492c      	ldr	r1, [pc, #176]	; (8013f30 <etharp_output+0x200>)
 8013e80:	4613      	mov	r3, r2
 8013e82:	005b      	lsls	r3, r3, #1
 8013e84:	4413      	add	r3, r2
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	440b      	add	r3, r1
 8013e8a:	3314      	adds	r3, #20
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d923      	bls.n	8013eda <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013e92:	7dfa      	ldrb	r2, [r7, #23]
 8013e94:	4926      	ldr	r1, [pc, #152]	; (8013f30 <etharp_output+0x200>)
 8013e96:	4613      	mov	r3, r2
 8013e98:	005b      	lsls	r3, r3, #1
 8013e9a:	4413      	add	r3, r2
 8013e9c:	00db      	lsls	r3, r3, #3
 8013e9e:	440b      	add	r3, r1
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d117      	bne.n	8013eda <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013eaa:	69bb      	ldr	r3, [r7, #24]
 8013eac:	6819      	ldr	r1, [r3, #0]
 8013eae:	7dfa      	ldrb	r2, [r7, #23]
 8013eb0:	481f      	ldr	r0, [pc, #124]	; (8013f30 <etharp_output+0x200>)
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	005b      	lsls	r3, r3, #1
 8013eb6:	4413      	add	r3, r2
 8013eb8:	00db      	lsls	r3, r3, #3
 8013eba:	4403      	add	r3, r0
 8013ebc:	3304      	adds	r3, #4
 8013ebe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013ec0:	4299      	cmp	r1, r3
 8013ec2:	d10a      	bne.n	8013eda <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013ec4:	4a19      	ldr	r2, [pc, #100]	; (8013f2c <etharp_output+0x1fc>)
 8013ec6:	7dfb      	ldrb	r3, [r7, #23]
 8013ec8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013eca:	7dfb      	ldrb	r3, [r7, #23]
 8013ecc:	461a      	mov	r2, r3
 8013ece:	68b9      	ldr	r1, [r7, #8]
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f7ff fe93 	bl	8013bfc <etharp_output_to_arp_index>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	e018      	b.n	8013f0c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013eda:	7dfb      	ldrb	r3, [r7, #23]
 8013edc:	3301      	adds	r3, #1
 8013ede:	75fb      	strb	r3, [r7, #23]
 8013ee0:	7dfb      	ldrb	r3, [r7, #23]
 8013ee2:	2b09      	cmp	r3, #9
 8013ee4:	d9ca      	bls.n	8013e7c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	69b9      	ldr	r1, [r7, #24]
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f000 f822 	bl	8013f34 <etharp_query>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	e00b      	b.n	8013f0c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8013efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	68b9      	ldr	r1, [r7, #8]
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f001 fd39 	bl	801597c <ethernet_output>
 8013f0a:	4603      	mov	r3, r0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3720      	adds	r7, #32
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	0801ee34 	.word	0x0801ee34
 8013f18:	0801ef84 	.word	0x0801ef84
 8013f1c:	0801eeac 	.word	0x0801eeac
 8013f20:	0801efd4 	.word	0x0801efd4
 8013f24:	0801ef74 	.word	0x0801ef74
 8013f28:	0801f860 	.word	0x0801f860
 8013f2c:	200055d4 	.word	0x200055d4
 8013f30:	200054e4 	.word	0x200054e4

08013f34 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08c      	sub	sp, #48	; 0x30
 8013f38:	af02      	add	r7, sp, #8
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3322      	adds	r3, #34	; 0x22
 8013f44:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013f46:	23ff      	movs	r3, #255	; 0xff
 8013f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	68f9      	ldr	r1, [r7, #12]
 8013f56:	4618      	mov	r0, r3
 8013f58:	f000 fe0c 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d10c      	bne.n	8013f7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f6a:	2be0      	cmp	r3, #224	; 0xe0
 8013f6c:	d006      	beq.n	8013f7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d003      	beq.n	8013f7c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f7c:	f06f 030f 	mvn.w	r3, #15
 8013f80:	e102      	b.n	8014188 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013f82:	68fa      	ldr	r2, [r7, #12]
 8013f84:	2101      	movs	r1, #1
 8013f86:	68b8      	ldr	r0, [r7, #8]
 8013f88:	f7ff fb60 	bl	801364c <etharp_find_entry>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013f90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	da02      	bge.n	8013f9e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013f98:	8a7b      	ldrh	r3, [r7, #18]
 8013f9a:	b25b      	sxtb	r3, r3
 8013f9c:	e0f4      	b.n	8014188 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013f9e:	8a7b      	ldrh	r3, [r7, #18]
 8013fa0:	2b7e      	cmp	r3, #126	; 0x7e
 8013fa2:	d906      	bls.n	8013fb2 <etharp_query+0x7e>
 8013fa4:	4b7a      	ldr	r3, [pc, #488]	; (8014190 <etharp_query+0x25c>)
 8013fa6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013faa:	497a      	ldr	r1, [pc, #488]	; (8014194 <etharp_query+0x260>)
 8013fac:	487a      	ldr	r0, [pc, #488]	; (8014198 <etharp_query+0x264>)
 8013fae:	f004 fd2f 	bl	8018a10 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013fb2:	8a7b      	ldrh	r3, [r7, #18]
 8013fb4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013fb6:	7c7a      	ldrb	r2, [r7, #17]
 8013fb8:	4978      	ldr	r1, [pc, #480]	; (801419c <etharp_query+0x268>)
 8013fba:	4613      	mov	r3, r2
 8013fbc:	005b      	lsls	r3, r3, #1
 8013fbe:	4413      	add	r3, r2
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	440b      	add	r3, r1
 8013fc4:	3314      	adds	r3, #20
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d115      	bne.n	8013ff8 <etharp_query+0xc4>
    is_new_entry = 1;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013fd0:	7c7a      	ldrb	r2, [r7, #17]
 8013fd2:	4972      	ldr	r1, [pc, #456]	; (801419c <etharp_query+0x268>)
 8013fd4:	4613      	mov	r3, r2
 8013fd6:	005b      	lsls	r3, r3, #1
 8013fd8:	4413      	add	r3, r2
 8013fda:	00db      	lsls	r3, r3, #3
 8013fdc:	440b      	add	r3, r1
 8013fde:	3314      	adds	r3, #20
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013fe4:	7c7a      	ldrb	r2, [r7, #17]
 8013fe6:	496d      	ldr	r1, [pc, #436]	; (801419c <etharp_query+0x268>)
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	3308      	adds	r3, #8
 8013ff4:	68fa      	ldr	r2, [r7, #12]
 8013ff6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013ff8:	7c7a      	ldrb	r2, [r7, #17]
 8013ffa:	4968      	ldr	r1, [pc, #416]	; (801419c <etharp_query+0x268>)
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	005b      	lsls	r3, r3, #1
 8014000:	4413      	add	r3, r2
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	440b      	add	r3, r1
 8014006:	3314      	adds	r3, #20
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d011      	beq.n	8014032 <etharp_query+0xfe>
 801400e:	7c7a      	ldrb	r2, [r7, #17]
 8014010:	4962      	ldr	r1, [pc, #392]	; (801419c <etharp_query+0x268>)
 8014012:	4613      	mov	r3, r2
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	4413      	add	r3, r2
 8014018:	00db      	lsls	r3, r3, #3
 801401a:	440b      	add	r3, r1
 801401c:	3314      	adds	r3, #20
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d806      	bhi.n	8014032 <etharp_query+0xfe>
 8014024:	4b5a      	ldr	r3, [pc, #360]	; (8014190 <etharp_query+0x25c>)
 8014026:	f240 32cf 	movw	r2, #975	; 0x3cf
 801402a:	495d      	ldr	r1, [pc, #372]	; (80141a0 <etharp_query+0x26c>)
 801402c:	485a      	ldr	r0, [pc, #360]	; (8014198 <etharp_query+0x264>)
 801402e:	f004 fcef 	bl	8018a10 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014032:	6a3b      	ldr	r3, [r7, #32]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d102      	bne.n	801403e <etharp_query+0x10a>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d10c      	bne.n	8014058 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801403e:	68b9      	ldr	r1, [r7, #8]
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f000 f963 	bl	801430c <etharp_request>
 8014046:	4603      	mov	r3, r0
 8014048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d102      	bne.n	8014058 <etharp_query+0x124>
      return result;
 8014052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014056:	e097      	b.n	8014188 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d106      	bne.n	801406c <etharp_query+0x138>
 801405e:	4b4c      	ldr	r3, [pc, #304]	; (8014190 <etharp_query+0x25c>)
 8014060:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014064:	494f      	ldr	r1, [pc, #316]	; (80141a4 <etharp_query+0x270>)
 8014066:	484c      	ldr	r0, [pc, #304]	; (8014198 <etharp_query+0x264>)
 8014068:	f004 fcd2 	bl	8018a10 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801406c:	7c7a      	ldrb	r2, [r7, #17]
 801406e:	494b      	ldr	r1, [pc, #300]	; (801419c <etharp_query+0x268>)
 8014070:	4613      	mov	r3, r2
 8014072:	005b      	lsls	r3, r3, #1
 8014074:	4413      	add	r3, r2
 8014076:	00db      	lsls	r3, r3, #3
 8014078:	440b      	add	r3, r1
 801407a:	3314      	adds	r3, #20
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	2b01      	cmp	r3, #1
 8014080:	d918      	bls.n	80140b4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014082:	4a49      	ldr	r2, [pc, #292]	; (80141a8 <etharp_query+0x274>)
 8014084:	7c7b      	ldrb	r3, [r7, #17]
 8014086:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014088:	7c7a      	ldrb	r2, [r7, #17]
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	3308      	adds	r3, #8
 8014094:	4a41      	ldr	r2, [pc, #260]	; (801419c <etharp_query+0x268>)
 8014096:	4413      	add	r3, r2
 8014098:	1d1a      	adds	r2, r3, #4
 801409a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	4613      	mov	r3, r2
 80140a2:	697a      	ldr	r2, [r7, #20]
 80140a4:	6879      	ldr	r1, [r7, #4]
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	f001 fc68 	bl	801597c <ethernet_output>
 80140ac:	4603      	mov	r3, r0
 80140ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140b2:	e067      	b.n	8014184 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140b4:	7c7a      	ldrb	r2, [r7, #17]
 80140b6:	4939      	ldr	r1, [pc, #228]	; (801419c <etharp_query+0x268>)
 80140b8:	4613      	mov	r3, r2
 80140ba:	005b      	lsls	r3, r3, #1
 80140bc:	4413      	add	r3, r2
 80140be:	00db      	lsls	r3, r3, #3
 80140c0:	440b      	add	r3, r1
 80140c2:	3314      	adds	r3, #20
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d15c      	bne.n	8014184 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80140ca:	2300      	movs	r3, #0
 80140cc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140d2:	e01c      	b.n	801410e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	895a      	ldrh	r2, [r3, #10]
 80140d8:	69fb      	ldr	r3, [r7, #28]
 80140da:	891b      	ldrh	r3, [r3, #8]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d10a      	bne.n	80140f6 <etharp_query+0x1c2>
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d006      	beq.n	80140f6 <etharp_query+0x1c2>
 80140e8:	4b29      	ldr	r3, [pc, #164]	; (8014190 <etharp_query+0x25c>)
 80140ea:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80140ee:	492f      	ldr	r1, [pc, #188]	; (80141ac <etharp_query+0x278>)
 80140f0:	4829      	ldr	r0, [pc, #164]	; (8014198 <etharp_query+0x264>)
 80140f2:	f004 fc8d 	bl	8018a10 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	7b1b      	ldrb	r3, [r3, #12]
 80140fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d002      	beq.n	8014108 <etharp_query+0x1d4>
        copy_needed = 1;
 8014102:	2301      	movs	r3, #1
 8014104:	61bb      	str	r3, [r7, #24]
        break;
 8014106:	e005      	b.n	8014114 <etharp_query+0x1e0>
      }
      p = p->next;
 8014108:	69fb      	ldr	r3, [r7, #28]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d1df      	bne.n	80140d4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d007      	beq.n	801412a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014120:	200e      	movs	r0, #14
 8014122:	f7f8 fc89 	bl	800ca38 <pbuf_clone>
 8014126:	61f8      	str	r0, [r7, #28]
 8014128:	e004      	b.n	8014134 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801412e:	69f8      	ldr	r0, [r7, #28]
 8014130:	f7f8 fac0 	bl	800c6b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d021      	beq.n	801417e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801413a:	7c7a      	ldrb	r2, [r7, #17]
 801413c:	4917      	ldr	r1, [pc, #92]	; (801419c <etharp_query+0x268>)
 801413e:	4613      	mov	r3, r2
 8014140:	005b      	lsls	r3, r3, #1
 8014142:	4413      	add	r3, r2
 8014144:	00db      	lsls	r3, r3, #3
 8014146:	440b      	add	r3, r1
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00a      	beq.n	8014164 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801414e:	7c7a      	ldrb	r2, [r7, #17]
 8014150:	4912      	ldr	r1, [pc, #72]	; (801419c <etharp_query+0x268>)
 8014152:	4613      	mov	r3, r2
 8014154:	005b      	lsls	r3, r3, #1
 8014156:	4413      	add	r3, r2
 8014158:	00db      	lsls	r3, r3, #3
 801415a:	440b      	add	r3, r1
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	4618      	mov	r0, r3
 8014160:	f7f8 fa02 	bl	800c568 <pbuf_free>
      }
      arp_table[i].q = p;
 8014164:	7c7a      	ldrb	r2, [r7, #17]
 8014166:	490d      	ldr	r1, [pc, #52]	; (801419c <etharp_query+0x268>)
 8014168:	4613      	mov	r3, r2
 801416a:	005b      	lsls	r3, r3, #1
 801416c:	4413      	add	r3, r2
 801416e:	00db      	lsls	r3, r3, #3
 8014170:	440b      	add	r3, r1
 8014172:	69fa      	ldr	r2, [r7, #28]
 8014174:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014176:	2300      	movs	r3, #0
 8014178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801417c:	e002      	b.n	8014184 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801417e:	23ff      	movs	r3, #255	; 0xff
 8014180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014184:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014188:	4618      	mov	r0, r3
 801418a:	3728      	adds	r7, #40	; 0x28
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}
 8014190:	0801ee34 	.word	0x0801ee34
 8014194:	0801efe0 	.word	0x0801efe0
 8014198:	0801eeac 	.word	0x0801eeac
 801419c:	200054e4 	.word	0x200054e4
 80141a0:	0801eff0 	.word	0x0801eff0
 80141a4:	0801efd4 	.word	0x0801efd4
 80141a8:	200055d4 	.word	0x200055d4
 80141ac:	0801f018 	.word	0x0801f018

080141b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b08a      	sub	sp, #40	; 0x28
 80141b4:	af02      	add	r7, sp, #8
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
 80141bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80141be:	2300      	movs	r3, #0
 80141c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d106      	bne.n	80141d6 <etharp_raw+0x26>
 80141c8:	4b3a      	ldr	r3, [pc, #232]	; (80142b4 <etharp_raw+0x104>)
 80141ca:	f240 4257 	movw	r2, #1111	; 0x457
 80141ce:	493a      	ldr	r1, [pc, #232]	; (80142b8 <etharp_raw+0x108>)
 80141d0:	483a      	ldr	r0, [pc, #232]	; (80142bc <etharp_raw+0x10c>)
 80141d2:	f004 fc1d 	bl	8018a10 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80141d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141da:	211c      	movs	r1, #28
 80141dc:	200e      	movs	r0, #14
 80141de:	f7f7 fee3 	bl	800bfa8 <pbuf_alloc>
 80141e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d102      	bne.n	80141f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80141ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141ee:	e05d      	b.n	80142ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	895b      	ldrh	r3, [r3, #10]
 80141f4:	2b1b      	cmp	r3, #27
 80141f6:	d806      	bhi.n	8014206 <etharp_raw+0x56>
 80141f8:	4b2e      	ldr	r3, [pc, #184]	; (80142b4 <etharp_raw+0x104>)
 80141fa:	f240 4263 	movw	r2, #1123	; 0x463
 80141fe:	4930      	ldr	r1, [pc, #192]	; (80142c0 <etharp_raw+0x110>)
 8014200:	482e      	ldr	r0, [pc, #184]	; (80142bc <etharp_raw+0x10c>)
 8014202:	f004 fc05 	bl	8018a10 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014206:	69bb      	ldr	r3, [r7, #24]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801420c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801420e:	4618      	mov	r0, r3
 8014210:	f7f6 fe7a 	bl	800af08 <lwip_htons>
 8014214:	4603      	mov	r3, r0
 8014216:	461a      	mov	r2, r3
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014222:	2b06      	cmp	r3, #6
 8014224:	d006      	beq.n	8014234 <etharp_raw+0x84>
 8014226:	4b23      	ldr	r3, [pc, #140]	; (80142b4 <etharp_raw+0x104>)
 8014228:	f240 426a 	movw	r2, #1130	; 0x46a
 801422c:	4925      	ldr	r1, [pc, #148]	; (80142c4 <etharp_raw+0x114>)
 801422e:	4823      	ldr	r0, [pc, #140]	; (80142bc <etharp_raw+0x10c>)
 8014230:	f004 fbee 	bl	8018a10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	3308      	adds	r3, #8
 8014238:	2206      	movs	r2, #6
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	4618      	mov	r0, r3
 801423e:	f003 fda7 	bl	8017d90 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	3312      	adds	r3, #18
 8014246:	2206      	movs	r2, #6
 8014248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801424a:	4618      	mov	r0, r3
 801424c:	f003 fda0 	bl	8017d90 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	330e      	adds	r3, #14
 8014254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014256:	6812      	ldr	r2, [r2, #0]
 8014258:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	3318      	adds	r3, #24
 801425e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014260:	6812      	ldr	r2, [r2, #0]
 8014262:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2200      	movs	r2, #0
 8014268:	701a      	strb	r2, [r3, #0]
 801426a:	2200      	movs	r2, #0
 801426c:	f042 0201 	orr.w	r2, r2, #1
 8014270:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	2200      	movs	r2, #0
 8014276:	f042 0208 	orr.w	r2, r2, #8
 801427a:	709a      	strb	r2, [r3, #2]
 801427c:	2200      	movs	r2, #0
 801427e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	2206      	movs	r2, #6
 8014284:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	2204      	movs	r2, #4
 801428a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801428c:	f640 0306 	movw	r3, #2054	; 0x806
 8014290:	9300      	str	r3, [sp, #0]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	69b9      	ldr	r1, [r7, #24]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f001 fb6f 	bl	801597c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801429e:	69b8      	ldr	r0, [r7, #24]
 80142a0:	f7f8 f962 	bl	800c568 <pbuf_free>
  p = NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80142a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3720      	adds	r7, #32
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	0801ee34 	.word	0x0801ee34
 80142b8:	0801ef84 	.word	0x0801ef84
 80142bc:	0801eeac 	.word	0x0801eeac
 80142c0:	0801f034 	.word	0x0801f034
 80142c4:	0801f068 	.word	0x0801f068

080142c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af04      	add	r7, sp, #16
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f103 0022 	add.w	r0, r3, #34	; 0x22
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142e4:	2201      	movs	r2, #1
 80142e6:	9203      	str	r2, [sp, #12]
 80142e8:	68ba      	ldr	r2, [r7, #8]
 80142ea:	9202      	str	r2, [sp, #8]
 80142ec:	4a06      	ldr	r2, [pc, #24]	; (8014308 <etharp_request_dst+0x40>)
 80142ee:	9201      	str	r2, [sp, #4]
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	4603      	mov	r3, r0
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff ff5a 	bl	80141b0 <etharp_raw>
 80142fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	0801f868 	.word	0x0801f868

0801430c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014316:	4a05      	ldr	r2, [pc, #20]	; (801432c <etharp_request+0x20>)
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff ffd4 	bl	80142c8 <etharp_request_dst>
 8014320:	4603      	mov	r3, r0
}
 8014322:	4618      	mov	r0, r3
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	0801f860 	.word	0x0801f860

08014330 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08e      	sub	sp, #56	; 0x38
 8014334:	af04      	add	r7, sp, #16
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801433a:	4b79      	ldr	r3, [pc, #484]	; (8014520 <icmp_input+0x1f0>)
 801433c:	689b      	ldr	r3, [r3, #8]
 801433e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	f003 030f 	and.w	r3, r3, #15
 8014348:	b2db      	uxtb	r3, r3
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	b2db      	uxtb	r3, r3
 801434e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014352:	2b13      	cmp	r3, #19
 8014354:	f240 80cd 	bls.w	80144f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	895b      	ldrh	r3, [r3, #10]
 801435c:	2b03      	cmp	r3, #3
 801435e:	f240 80ca 	bls.w	80144f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801436c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80b7 	beq.w	80144e4 <icmp_input+0x1b4>
 8014376:	2b08      	cmp	r3, #8
 8014378:	f040 80b7 	bne.w	80144ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801437c:	4b69      	ldr	r3, [pc, #420]	; (8014524 <icmp_input+0x1f4>)
 801437e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014380:	4b67      	ldr	r3, [pc, #412]	; (8014520 <icmp_input+0x1f0>)
 8014382:	695b      	ldr	r3, [r3, #20]
 8014384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014388:	2be0      	cmp	r3, #224	; 0xe0
 801438a:	f000 80bb 	beq.w	8014504 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801438e:	4b64      	ldr	r3, [pc, #400]	; (8014520 <icmp_input+0x1f0>)
 8014390:	695a      	ldr	r2, [r3, #20]
 8014392:	4b63      	ldr	r3, [pc, #396]	; (8014520 <icmp_input+0x1f0>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	4619      	mov	r1, r3
 8014398:	4610      	mov	r0, r2
 801439a:	f000 fbeb 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801439e:	4603      	mov	r3, r0
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	f040 80b1 	bne.w	8014508 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	891b      	ldrh	r3, [r3, #8]
 80143aa:	2b07      	cmp	r3, #7
 80143ac:	f240 80a5 	bls.w	80144fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80143b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143b2:	330e      	adds	r3, #14
 80143b4:	4619      	mov	r1, r3
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7f8 f840 	bl	800c43c <pbuf_add_header>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d04b      	beq.n	801445a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	891a      	ldrh	r2, [r3, #8]
 80143c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143c8:	4413      	add	r3, r2
 80143ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	891b      	ldrh	r3, [r3, #8]
 80143d0:	8b7a      	ldrh	r2, [r7, #26]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	f0c0 809a 	bcc.w	801450c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80143d8:	8b7b      	ldrh	r3, [r7, #26]
 80143da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143de:	4619      	mov	r1, r3
 80143e0:	200e      	movs	r0, #14
 80143e2:	f7f7 fde1 	bl	800bfa8 <pbuf_alloc>
 80143e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80143e8:	697b      	ldr	r3, [r7, #20]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f000 8090 	beq.w	8014510 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	895b      	ldrh	r3, [r3, #10]
 80143f4:	461a      	mov	r2, r3
 80143f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143f8:	3308      	adds	r3, #8
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d203      	bcs.n	8014406 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80143fe:	6978      	ldr	r0, [r7, #20]
 8014400:	f7f8 f8b2 	bl	800c568 <pbuf_free>
          goto icmperr;
 8014404:	e085      	b.n	8014512 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801440c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801440e:	4618      	mov	r0, r3
 8014410:	f003 fcbe 	bl	8017d90 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014416:	4619      	mov	r1, r3
 8014418:	6978      	ldr	r0, [r7, #20]
 801441a:	f7f8 f81f 	bl	800c45c <pbuf_remove_header>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d009      	beq.n	8014438 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014424:	4b40      	ldr	r3, [pc, #256]	; (8014528 <icmp_input+0x1f8>)
 8014426:	22b6      	movs	r2, #182	; 0xb6
 8014428:	4940      	ldr	r1, [pc, #256]	; (801452c <icmp_input+0x1fc>)
 801442a:	4841      	ldr	r0, [pc, #260]	; (8014530 <icmp_input+0x200>)
 801442c:	f004 faf0 	bl	8018a10 <iprintf>
          pbuf_free(r);
 8014430:	6978      	ldr	r0, [r7, #20]
 8014432:	f7f8 f899 	bl	800c568 <pbuf_free>
          goto icmperr;
 8014436:	e06c      	b.n	8014512 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014438:	6879      	ldr	r1, [r7, #4]
 801443a:	6978      	ldr	r0, [r7, #20]
 801443c:	f7f8 f9b8 	bl	800c7b0 <pbuf_copy>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d003      	beq.n	801444e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014446:	6978      	ldr	r0, [r7, #20]
 8014448:	f7f8 f88e 	bl	800c568 <pbuf_free>
          goto icmperr;
 801444c:	e061      	b.n	8014512 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7f8 f88a 	bl	800c568 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	607b      	str	r3, [r7, #4]
 8014458:	e00f      	b.n	801447a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801445a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801445c:	330e      	adds	r3, #14
 801445e:	4619      	mov	r1, r3
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7f7 fffb 	bl	800c45c <pbuf_remove_header>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d006      	beq.n	801447a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801446c:	4b2e      	ldr	r3, [pc, #184]	; (8014528 <icmp_input+0x1f8>)
 801446e:	22c7      	movs	r2, #199	; 0xc7
 8014470:	4930      	ldr	r1, [pc, #192]	; (8014534 <icmp_input+0x204>)
 8014472:	482f      	ldr	r0, [pc, #188]	; (8014530 <icmp_input+0x200>)
 8014474:	f004 facc 	bl	8018a10 <iprintf>
          goto icmperr;
 8014478:	e04b      	b.n	8014512 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014482:	4619      	mov	r1, r3
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7f7 ffd9 	bl	800c43c <pbuf_add_header>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d12b      	bne.n	80144e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801449e:	4b20      	ldr	r3, [pc, #128]	; (8014520 <icmp_input+0x1f0>)
 80144a0:	691a      	ldr	r2, [r3, #16]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	2200      	movs	r2, #0
 80144aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	2200      	movs	r2, #0
 80144b0:	709a      	strb	r2, [r3, #2]
 80144b2:	2200      	movs	r2, #0
 80144b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	22ff      	movs	r2, #255	; 0xff
 80144ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2200      	movs	r2, #0
 80144c0:	729a      	strb	r2, [r3, #10]
 80144c2:	2200      	movs	r2, #0
 80144c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	9302      	str	r3, [sp, #8]
 80144ca:	2301      	movs	r3, #1
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	2300      	movs	r3, #0
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	23ff      	movs	r3, #255	; 0xff
 80144d4:	2200      	movs	r2, #0
 80144d6:	69f9      	ldr	r1, [r7, #28]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fa73 	bl	80149c4 <ip4_output_if>
 80144de:	4603      	mov	r3, r0
 80144e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80144e2:	e001      	b.n	80144e8 <icmp_input+0x1b8>
      break;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <icmp_input+0x1ba>
      break;
 80144e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7f8 f83c 	bl	800c568 <pbuf_free>
  return;
 80144f0:	e013      	b.n	801451a <icmp_input+0x1ea>
    goto lenerr;
 80144f2:	bf00      	nop
 80144f4:	e002      	b.n	80144fc <icmp_input+0x1cc>
    goto lenerr;
 80144f6:	bf00      	nop
 80144f8:	e000      	b.n	80144fc <icmp_input+0x1cc>
        goto lenerr;
 80144fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7f8 f833 	bl	800c568 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014502:	e00a      	b.n	801451a <icmp_input+0x1ea>
        goto icmperr;
 8014504:	bf00      	nop
 8014506:	e004      	b.n	8014512 <icmp_input+0x1e2>
        goto icmperr;
 8014508:	bf00      	nop
 801450a:	e002      	b.n	8014512 <icmp_input+0x1e2>
          goto icmperr;
 801450c:	bf00      	nop
 801450e:	e000      	b.n	8014512 <icmp_input+0x1e2>
          goto icmperr;
 8014510:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f7f8 f828 	bl	800c568 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014518:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801451a:	3728      	adds	r7, #40	; 0x28
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	2000589c 	.word	0x2000589c
 8014524:	200058b0 	.word	0x200058b0
 8014528:	0801f0ac 	.word	0x0801f0ac
 801452c:	0801f0e4 	.word	0x0801f0e4
 8014530:	0801f11c 	.word	0x0801f11c
 8014534:	0801f144 	.word	0x0801f144

08014538 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	460b      	mov	r3, r1
 8014542:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014544:	78fb      	ldrb	r3, [r7, #3]
 8014546:	461a      	mov	r2, r3
 8014548:	2103      	movs	r1, #3
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f000 f814 	bl	8014578 <icmp_send_response>
}
 8014550:	bf00      	nop
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	460b      	mov	r3, r1
 8014562:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014564:	78fb      	ldrb	r3, [r7, #3]
 8014566:	461a      	mov	r2, r3
 8014568:	210b      	movs	r1, #11
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 f804 	bl	8014578 <icmp_send_response>
}
 8014570:	bf00      	nop
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b08c      	sub	sp, #48	; 0x30
 801457c:	af04      	add	r7, sp, #16
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	460b      	mov	r3, r1
 8014582:	70fb      	strb	r3, [r7, #3]
 8014584:	4613      	mov	r3, r2
 8014586:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014588:	f44f 7220 	mov.w	r2, #640	; 0x280
 801458c:	2124      	movs	r1, #36	; 0x24
 801458e:	2022      	movs	r0, #34	; 0x22
 8014590:	f7f7 fd0a 	bl	800bfa8 <pbuf_alloc>
 8014594:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d04c      	beq.n	8014636 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	895b      	ldrh	r3, [r3, #10]
 80145a0:	2b23      	cmp	r3, #35	; 0x23
 80145a2:	d806      	bhi.n	80145b2 <icmp_send_response+0x3a>
 80145a4:	4b26      	ldr	r3, [pc, #152]	; (8014640 <icmp_send_response+0xc8>)
 80145a6:	f240 1269 	movw	r2, #361	; 0x169
 80145aa:	4926      	ldr	r1, [pc, #152]	; (8014644 <icmp_send_response+0xcc>)
 80145ac:	4826      	ldr	r0, [pc, #152]	; (8014648 <icmp_send_response+0xd0>)
 80145ae:	f004 fa2f 	bl	8018a10 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	78fa      	ldrb	r2, [r7, #3]
 80145c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	78ba      	ldrb	r2, [r7, #2]
 80145c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	2200      	movs	r2, #0
 80145ce:	711a      	strb	r2, [r3, #4]
 80145d0:	2200      	movs	r2, #0
 80145d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	2200      	movs	r2, #0
 80145d8:	719a      	strb	r2, [r3, #6]
 80145da:	2200      	movs	r2, #0
 80145dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	f103 0008 	add.w	r0, r3, #8
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	221c      	movs	r2, #28
 80145ec:	4619      	mov	r1, r3
 80145ee:	f003 fbcf 	bl	8017d90 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80145f8:	f107 030c 	add.w	r3, r7, #12
 80145fc:	4618      	mov	r0, r3
 80145fe:	f000 f825 	bl	801464c <ip4_route>
 8014602:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d011      	beq.n	801462e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	2200      	movs	r2, #0
 801460e:	709a      	strb	r2, [r3, #2]
 8014610:	2200      	movs	r2, #0
 8014612:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014614:	f107 020c 	add.w	r2, r7, #12
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	9302      	str	r3, [sp, #8]
 801461c:	2301      	movs	r3, #1
 801461e:	9301      	str	r3, [sp, #4]
 8014620:	2300      	movs	r3, #0
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	23ff      	movs	r3, #255	; 0xff
 8014626:	2100      	movs	r1, #0
 8014628:	69f8      	ldr	r0, [r7, #28]
 801462a:	f000 f9cb 	bl	80149c4 <ip4_output_if>
  }
  pbuf_free(q);
 801462e:	69f8      	ldr	r0, [r7, #28]
 8014630:	f7f7 ff9a 	bl	800c568 <pbuf_free>
 8014634:	e000      	b.n	8014638 <icmp_send_response+0xc0>
    return;
 8014636:	bf00      	nop
}
 8014638:	3720      	adds	r7, #32
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
 801463e:	bf00      	nop
 8014640:	0801f0ac 	.word	0x0801f0ac
 8014644:	0801f178 	.word	0x0801f178
 8014648:	0801f11c 	.word	0x0801f11c

0801464c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014654:	4b33      	ldr	r3, [pc, #204]	; (8014724 <ip4_route+0xd8>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	60fb      	str	r3, [r7, #12]
 801465a:	e036      	b.n	80146ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014662:	f003 0301 	and.w	r3, r3, #1
 8014666:	b2db      	uxtb	r3, r3
 8014668:	2b00      	cmp	r3, #0
 801466a:	d02b      	beq.n	80146c4 <ip4_route+0x78>
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014672:	089b      	lsrs	r3, r3, #2
 8014674:	f003 0301 	and.w	r3, r3, #1
 8014678:	b2db      	uxtb	r3, r3
 801467a:	2b00      	cmp	r3, #0
 801467c:	d022      	beq.n	80146c4 <ip4_route+0x78>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	3304      	adds	r3, #4
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d01d      	beq.n	80146c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3304      	adds	r3, #4
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	405a      	eors	r2, r3
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	3308      	adds	r3, #8
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	4013      	ands	r3, r2
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	e038      	b.n	8014716 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80146aa:	f003 0302 	and.w	r3, r3, #2
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d108      	bne.n	80146c4 <ip4_route+0x78>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	330c      	adds	r3, #12
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d101      	bne.n	80146c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	e028      	b.n	8014716 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	60fb      	str	r3, [r7, #12]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1c5      	bne.n	801465c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146d0:	4b15      	ldr	r3, [pc, #84]	; (8014728 <ip4_route+0xdc>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d01a      	beq.n	801470e <ip4_route+0xc2>
 80146d8:	4b13      	ldr	r3, [pc, #76]	; (8014728 <ip4_route+0xdc>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80146e0:	f003 0301 	and.w	r3, r3, #1
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d012      	beq.n	801470e <ip4_route+0xc2>
 80146e8:	4b0f      	ldr	r3, [pc, #60]	; (8014728 <ip4_route+0xdc>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80146f0:	f003 0304 	and.w	r3, r3, #4
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00a      	beq.n	801470e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80146f8:	4b0b      	ldr	r3, [pc, #44]	; (8014728 <ip4_route+0xdc>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	3304      	adds	r3, #4
 80146fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014700:	2b00      	cmp	r3, #0
 8014702:	d004      	beq.n	801470e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	b2db      	uxtb	r3, r3
 801470a:	2b7f      	cmp	r3, #127	; 0x7f
 801470c:	d101      	bne.n	8014712 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801470e:	2300      	movs	r3, #0
 8014710:	e001      	b.n	8014716 <ip4_route+0xca>
  }

  return netif_default;
 8014712:	4b05      	ldr	r3, [pc, #20]	; (8014728 <ip4_route+0xdc>)
 8014714:	681b      	ldr	r3, [r3, #0]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3714      	adds	r7, #20
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	20008fa0 	.word	0x20008fa0
 8014728:	20008fa4 	.word	0x20008fa4

0801472c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801473a:	f003 0301 	and.w	r3, r3, #1
 801473e:	b2db      	uxtb	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	d016      	beq.n	8014772 <ip4_input_accept+0x46>
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3304      	adds	r3, #4
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d011      	beq.n	8014772 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801474e:	4b0b      	ldr	r3, [pc, #44]	; (801477c <ip4_input_accept+0x50>)
 8014750:	695a      	ldr	r2, [r3, #20]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3304      	adds	r3, #4
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	429a      	cmp	r2, r3
 801475a:	d008      	beq.n	801476e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801475c:	4b07      	ldr	r3, [pc, #28]	; (801477c <ip4_input_accept+0x50>)
 801475e:	695b      	ldr	r3, [r3, #20]
 8014760:	6879      	ldr	r1, [r7, #4]
 8014762:	4618      	mov	r0, r3
 8014764:	f000 fa06 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8014768:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801476a:	2b00      	cmp	r3, #0
 801476c:	d001      	beq.n	8014772 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801476e:	2301      	movs	r3, #1
 8014770:	e000      	b.n	8014774 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}
 801477c:	2000589c 	.word	0x2000589c

08014780 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b086      	sub	sp, #24
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	091b      	lsrs	r3, r3, #4
 8014796:	b2db      	uxtb	r3, r3
 8014798:	2b04      	cmp	r3, #4
 801479a:	d004      	beq.n	80147a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f7f7 fee3 	bl	800c568 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80147a2:	2300      	movs	r3, #0
 80147a4:	e105      	b.n	80149b2 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	f003 030f 	and.w	r3, r3, #15
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	009b      	lsls	r3, r3, #2
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	885b      	ldrh	r3, [r3, #2]
 80147ba:	b29b      	uxth	r3, r3
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f6 fba3 	bl	800af08 <lwip_htons>
 80147c2:	4603      	mov	r3, r0
 80147c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	891b      	ldrh	r3, [r3, #8]
 80147ca:	89ba      	ldrh	r2, [r7, #12]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d204      	bcs.n	80147da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80147d0:	89bb      	ldrh	r3, [r7, #12]
 80147d2:	4619      	mov	r1, r3
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7f7 fd41 	bl	800c25c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	895b      	ldrh	r3, [r3, #10]
 80147de:	89fa      	ldrh	r2, [r7, #14]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d807      	bhi.n	80147f4 <ip4_input+0x74>
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	891b      	ldrh	r3, [r3, #8]
 80147e8:	89ba      	ldrh	r2, [r7, #12]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d802      	bhi.n	80147f4 <ip4_input+0x74>
 80147ee:	89fb      	ldrh	r3, [r7, #14]
 80147f0:	2b13      	cmp	r3, #19
 80147f2:	d804      	bhi.n	80147fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f7f7 feb7 	bl	800c568 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e0d9      	b.n	80149b2 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	4a6e      	ldr	r2, [pc, #440]	; (80149bc <ip4_input+0x23c>)
 8014804:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	4a6c      	ldr	r2, [pc, #432]	; (80149bc <ip4_input+0x23c>)
 801480c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801480e:	4b6b      	ldr	r3, [pc, #428]	; (80149bc <ip4_input+0x23c>)
 8014810:	695b      	ldr	r3, [r3, #20]
 8014812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014816:	2be0      	cmp	r3, #224	; 0xe0
 8014818:	d112      	bne.n	8014840 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014820:	f003 0301 	and.w	r3, r3, #1
 8014824:	b2db      	uxtb	r3, r3
 8014826:	2b00      	cmp	r3, #0
 8014828:	d007      	beq.n	801483a <ip4_input+0xba>
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	3304      	adds	r3, #4
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <ip4_input+0xba>
      netif = inp;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	613b      	str	r3, [r7, #16]
 8014838:	e02a      	b.n	8014890 <ip4_input+0x110>
    } else {
      netif = NULL;
 801483a:	2300      	movs	r3, #0
 801483c:	613b      	str	r3, [r7, #16]
 801483e:	e027      	b.n	8014890 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014840:	6838      	ldr	r0, [r7, #0]
 8014842:	f7ff ff73 	bl	801472c <ip4_input_accept>
 8014846:	4603      	mov	r3, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <ip4_input+0xd2>
      netif = inp;
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	613b      	str	r3, [r7, #16]
 8014850:	e01e      	b.n	8014890 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014852:	2300      	movs	r3, #0
 8014854:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014856:	4b59      	ldr	r3, [pc, #356]	; (80149bc <ip4_input+0x23c>)
 8014858:	695b      	ldr	r3, [r3, #20]
 801485a:	b2db      	uxtb	r3, r3
 801485c:	2b7f      	cmp	r3, #127	; 0x7f
 801485e:	d017      	beq.n	8014890 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014860:	4b57      	ldr	r3, [pc, #348]	; (80149c0 <ip4_input+0x240>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	613b      	str	r3, [r7, #16]
 8014866:	e00e      	b.n	8014886 <ip4_input+0x106>
          if (netif == inp) {
 8014868:	693a      	ldr	r2, [r7, #16]
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	429a      	cmp	r2, r3
 801486e:	d006      	beq.n	801487e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014870:	6938      	ldr	r0, [r7, #16]
 8014872:	f7ff ff5b 	bl	801472c <ip4_input_accept>
 8014876:	4603      	mov	r3, r0
 8014878:	2b00      	cmp	r3, #0
 801487a:	d108      	bne.n	801488e <ip4_input+0x10e>
 801487c:	e000      	b.n	8014880 <ip4_input+0x100>
            continue;
 801487e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	613b      	str	r3, [r7, #16]
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d1ed      	bne.n	8014868 <ip4_input+0xe8>
 801488c:	e000      	b.n	8014890 <ip4_input+0x110>
            break;
 801488e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014890:	4b4a      	ldr	r3, [pc, #296]	; (80149bc <ip4_input+0x23c>)
 8014892:	691b      	ldr	r3, [r3, #16]
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	4618      	mov	r0, r3
 8014898:	f000 f96c 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d105      	bne.n	80148ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80148a2:	4b46      	ldr	r3, [pc, #280]	; (80149bc <ip4_input+0x23c>)
 80148a4:	691b      	ldr	r3, [r3, #16]
 80148a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80148aa:	2be0      	cmp	r3, #224	; 0xe0
 80148ac:	d104      	bne.n	80148b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7f7 fe5a 	bl	800c568 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80148b4:	2300      	movs	r3, #0
 80148b6:	e07c      	b.n	80149b2 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d104      	bne.n	80148c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7f7 fe52 	bl	800c568 <pbuf_free>
    return ERR_OK;
 80148c4:	2300      	movs	r3, #0
 80148c6:	e074      	b.n	80149b2 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	88db      	ldrh	r3, [r3, #6]
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	461a      	mov	r2, r3
 80148d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80148d4:	4013      	ands	r3, r2
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00b      	beq.n	80148f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 fc90 	bl	8015200 <ip4_reass>
 80148e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d101      	bne.n	80148ec <ip4_input+0x16c>
      return ERR_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	e062      	b.n	80149b2 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80148f2:	4a32      	ldr	r2, [pc, #200]	; (80149bc <ip4_input+0x23c>)
 80148f4:	693b      	ldr	r3, [r7, #16]
 80148f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80148f8:	4a30      	ldr	r2, [pc, #192]	; (80149bc <ip4_input+0x23c>)
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80148fe:	4a2f      	ldr	r2, [pc, #188]	; (80149bc <ip4_input+0x23c>)
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	f003 030f 	and.w	r3, r3, #15
 801490c:	b2db      	uxtb	r3, r3
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	b2db      	uxtb	r3, r3
 8014912:	b29a      	uxth	r2, r3
 8014914:	4b29      	ldr	r3, [pc, #164]	; (80149bc <ip4_input+0x23c>)
 8014916:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014918:	89fb      	ldrh	r3, [r7, #14]
 801491a:	4619      	mov	r1, r3
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7f7 fd9d 	bl	800c45c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	7a5b      	ldrb	r3, [r3, #9]
 8014926:	2b06      	cmp	r3, #6
 8014928:	d009      	beq.n	801493e <ip4_input+0x1be>
 801492a:	2b11      	cmp	r3, #17
 801492c:	d002      	beq.n	8014934 <ip4_input+0x1b4>
 801492e:	2b01      	cmp	r3, #1
 8014930:	d00a      	beq.n	8014948 <ip4_input+0x1c8>
 8014932:	e00e      	b.n	8014952 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7fe fb5c 	bl	8012ff4 <udp_input>
        break;
 801493c:	e026      	b.n	801498c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801493e:	6839      	ldr	r1, [r7, #0]
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7f9 ff09 	bl	800e758 <tcp_input>
        break;
 8014946:	e021      	b.n	801498c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014948:	6839      	ldr	r1, [r7, #0]
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7ff fcf0 	bl	8014330 <icmp_input>
        break;
 8014950:	e01c      	b.n	801498c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014952:	4b1a      	ldr	r3, [pc, #104]	; (80149bc <ip4_input+0x23c>)
 8014954:	695b      	ldr	r3, [r3, #20]
 8014956:	6939      	ldr	r1, [r7, #16]
 8014958:	4618      	mov	r0, r3
 801495a:	f000 f90b 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d10f      	bne.n	8014984 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014964:	4b15      	ldr	r3, [pc, #84]	; (80149bc <ip4_input+0x23c>)
 8014966:	695b      	ldr	r3, [r3, #20]
 8014968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801496c:	2be0      	cmp	r3, #224	; 0xe0
 801496e:	d009      	beq.n	8014984 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014974:	4619      	mov	r1, r3
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7f7 fde3 	bl	800c542 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801497c:	2102      	movs	r1, #2
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f7ff fdda 	bl	8014538 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7f7 fdef 	bl	800c568 <pbuf_free>
        break;
 801498a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801498c:	4b0b      	ldr	r3, [pc, #44]	; (80149bc <ip4_input+0x23c>)
 801498e:	2200      	movs	r2, #0
 8014990:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014992:	4b0a      	ldr	r3, [pc, #40]	; (80149bc <ip4_input+0x23c>)
 8014994:	2200      	movs	r2, #0
 8014996:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014998:	4b08      	ldr	r3, [pc, #32]	; (80149bc <ip4_input+0x23c>)
 801499a:	2200      	movs	r2, #0
 801499c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801499e:	4b07      	ldr	r3, [pc, #28]	; (80149bc <ip4_input+0x23c>)
 80149a0:	2200      	movs	r2, #0
 80149a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80149a4:	4b05      	ldr	r3, [pc, #20]	; (80149bc <ip4_input+0x23c>)
 80149a6:	2200      	movs	r2, #0
 80149a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80149aa:	4b04      	ldr	r3, [pc, #16]	; (80149bc <ip4_input+0x23c>)
 80149ac:	2200      	movs	r2, #0
 80149ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80149b0:	2300      	movs	r3, #0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3718      	adds	r7, #24
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	2000589c 	.word	0x2000589c
 80149c0:	20008fa0 	.word	0x20008fa0

080149c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b08a      	sub	sp, #40	; 0x28
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	607a      	str	r2, [r7, #4]
 80149d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d009      	beq.n	80149f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d003      	beq.n	80149ea <ip4_output_if+0x26>
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d102      	bne.n	80149f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80149ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ec:	3304      	adds	r3, #4
 80149ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80149f0:	78fa      	ldrb	r2, [r7, #3]
 80149f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f4:	9302      	str	r3, [sp, #8]
 80149f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149fa:	9301      	str	r3, [sp, #4]
 80149fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014a00:	9300      	str	r3, [sp, #0]
 8014a02:	4613      	mov	r3, r2
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	6979      	ldr	r1, [r7, #20]
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f000 f805 	bl	8014a18 <ip4_output_if_src>
 8014a0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3718      	adds	r7, #24
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b088      	sub	sp, #32
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	607a      	str	r2, [r7, #4]
 8014a24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	7b9b      	ldrb	r3, [r3, #14]
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d006      	beq.n	8014a3c <ip4_output_if_src+0x24>
 8014a2e:	4b4b      	ldr	r3, [pc, #300]	; (8014b5c <ip4_output_if_src+0x144>)
 8014a30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014a34:	494a      	ldr	r1, [pc, #296]	; (8014b60 <ip4_output_if_src+0x148>)
 8014a36:	484b      	ldr	r0, [pc, #300]	; (8014b64 <ip4_output_if_src+0x14c>)
 8014a38:	f003 ffea 	bl	8018a10 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d060      	beq.n	8014b04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014a42:	2314      	movs	r3, #20
 8014a44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014a46:	2114      	movs	r1, #20
 8014a48:	68f8      	ldr	r0, [r7, #12]
 8014a4a:	f7f7 fcf7 	bl	800c43c <pbuf_add_header>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d002      	beq.n	8014a5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014a54:	f06f 0301 	mvn.w	r3, #1
 8014a58:	e07c      	b.n	8014b54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	895b      	ldrh	r3, [r3, #10]
 8014a64:	2b13      	cmp	r3, #19
 8014a66:	d806      	bhi.n	8014a76 <ip4_output_if_src+0x5e>
 8014a68:	4b3c      	ldr	r3, [pc, #240]	; (8014b5c <ip4_output_if_src+0x144>)
 8014a6a:	f240 3289 	movw	r2, #905	; 0x389
 8014a6e:	493e      	ldr	r1, [pc, #248]	; (8014b68 <ip4_output_if_src+0x150>)
 8014a70:	483c      	ldr	r0, [pc, #240]	; (8014b64 <ip4_output_if_src+0x14c>)
 8014a72:	f003 ffcd 	bl	8018a10 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	78fa      	ldrb	r2, [r7, #3]
 8014a7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014a82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014a8c:	8b7b      	ldrh	r3, [r7, #26]
 8014a8e:	089b      	lsrs	r3, r3, #2
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014aa4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	891b      	ldrh	r3, [r3, #8]
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7f6 fa2c 	bl	800af08 <lwip_htons>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	2200      	movs	r2, #0
 8014abc:	719a      	strb	r2, [r3, #6]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014ac2:	4b2a      	ldr	r3, [pc, #168]	; (8014b6c <ip4_output_if_src+0x154>)
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f6 fa1e 	bl	800af08 <lwip_htons>
 8014acc:	4603      	mov	r3, r0
 8014ace:	461a      	mov	r2, r3
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014ad4:	4b25      	ldr	r3, [pc, #148]	; (8014b6c <ip4_output_if_src+0x154>)
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	4b23      	ldr	r3, [pc, #140]	; (8014b6c <ip4_output_if_src+0x154>)
 8014ade:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d104      	bne.n	8014af0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014ae6:	4b22      	ldr	r3, [pc, #136]	; (8014b70 <ip4_output_if_src+0x158>)
 8014ae8:	681a      	ldr	r2, [r3, #0]
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	60da      	str	r2, [r3, #12]
 8014aee:	e003      	b.n	8014af8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	2200      	movs	r2, #0
 8014afc:	729a      	strb	r2, [r3, #10]
 8014afe:	2200      	movs	r2, #0
 8014b00:	72da      	strb	r2, [r3, #11]
 8014b02:	e00f      	b.n	8014b24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	895b      	ldrh	r3, [r3, #10]
 8014b08:	2b13      	cmp	r3, #19
 8014b0a:	d802      	bhi.n	8014b12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b0c:	f06f 0301 	mvn.w	r3, #1
 8014b10:	e020      	b.n	8014b54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	691b      	ldr	r3, [r3, #16]
 8014b1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014b1e:	f107 0314 	add.w	r3, r7, #20
 8014b22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b26:	8c1b      	ldrh	r3, [r3, #32]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00c      	beq.n	8014b46 <ip4_output_if_src+0x12e>
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	891a      	ldrh	r2, [r3, #8]
 8014b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b32:	8c1b      	ldrh	r3, [r3, #32]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d906      	bls.n	8014b46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b3c:	68f8      	ldr	r0, [r7, #12]
 8014b3e:	f000 fd4b 	bl	80155d8 <ip4_frag>
 8014b42:	4603      	mov	r3, r0
 8014b44:	e006      	b.n	8014b54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	695b      	ldr	r3, [r3, #20]
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	68f9      	ldr	r1, [r7, #12]
 8014b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b50:	4798      	blx	r3
 8014b52:	4603      	mov	r3, r0
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3720      	adds	r7, #32
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	0801f1a4 	.word	0x0801f1a4
 8014b60:	0801f1d8 	.word	0x0801f1d8
 8014b64:	0801f1e4 	.word	0x0801f1e4
 8014b68:	0801f20c 	.word	0x0801f20c
 8014b6c:	200055d6 	.word	0x200055d6
 8014b70:	0801f85c 	.word	0x0801f85c

08014b74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b085      	sub	sp, #20
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b88:	d002      	beq.n	8014b90 <ip4_addr_isbroadcast_u32+0x1c>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d101      	bne.n	8014b94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014b90:	2301      	movs	r3, #1
 8014b92:	e02a      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014b9a:	f003 0302 	and.w	r3, r3, #2
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d101      	bne.n	8014ba6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	e021      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	3304      	adds	r3, #4
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d101      	bne.n	8014bb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	e019      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014bb6:	68fa      	ldr	r2, [r7, #12]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	3304      	adds	r3, #4
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	405a      	eors	r2, r3
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	3308      	adds	r3, #8
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	4013      	ands	r3, r2
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10d      	bne.n	8014be8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	43da      	mvns	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	3308      	adds	r3, #8
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d101      	bne.n	8014be8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014be4:	2301      	movs	r3, #1
 8014be6:	e000      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014be8:	2300      	movs	r3, #0
  }
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3714      	adds	r7, #20
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr
	...

08014bf8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014c02:	4b12      	ldr	r3, [pc, #72]	; (8014c4c <ip_reass_tmr+0x54>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014c08:	e018      	b.n	8014c3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	7fdb      	ldrb	r3, [r3, #31]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d00b      	beq.n	8014c2a <ip_reass_tmr+0x32>
      r->timer--;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	7fdb      	ldrb	r3, [r3, #31]
 8014c16:	3b01      	subs	r3, #1
 8014c18:	b2da      	uxtb	r2, r3
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	60fb      	str	r3, [r7, #12]
 8014c28:	e008      	b.n	8014c3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014c34:	68b9      	ldr	r1, [r7, #8]
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 f80a 	bl	8014c50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1e3      	bne.n	8014c0a <ip_reass_tmr+0x12>
    }
  }
}
 8014c42:	bf00      	nop
 8014c44:	3710      	adds	r7, #16
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	200055d8 	.word	0x200055d8

08014c50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b088      	sub	sp, #32
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014c5e:	683a      	ldr	r2, [r7, #0]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d105      	bne.n	8014c72 <ip_reass_free_complete_datagram+0x22>
 8014c66:	4b45      	ldr	r3, [pc, #276]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014c68:	22ab      	movs	r2, #171	; 0xab
 8014c6a:	4945      	ldr	r1, [pc, #276]	; (8014d80 <ip_reass_free_complete_datagram+0x130>)
 8014c6c:	4845      	ldr	r0, [pc, #276]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014c6e:	f003 fecf 	bl	8018a10 <iprintf>
  if (prev != NULL) {
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00a      	beq.n	8014c8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d005      	beq.n	8014c8e <ip_reass_free_complete_datagram+0x3e>
 8014c82:	4b3e      	ldr	r3, [pc, #248]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014c84:	22ad      	movs	r2, #173	; 0xad
 8014c86:	4940      	ldr	r1, [pc, #256]	; (8014d88 <ip_reass_free_complete_datagram+0x138>)
 8014c88:	483e      	ldr	r0, [pc, #248]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014c8a:	f003 fec1 	bl	8018a10 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	889b      	ldrh	r3, [r3, #4]
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d12a      	bne.n	8014cf6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014cae:	69bb      	ldr	r3, [r7, #24]
 8014cb0:	6858      	ldr	r0, [r3, #4]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	3308      	adds	r3, #8
 8014cb6:	2214      	movs	r2, #20
 8014cb8:	4619      	mov	r1, r3
 8014cba:	f003 f869 	bl	8017d90 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014cbe:	2101      	movs	r1, #1
 8014cc0:	69b8      	ldr	r0, [r7, #24]
 8014cc2:	f7ff fc49 	bl	8014558 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014cc6:	69b8      	ldr	r0, [r7, #24]
 8014cc8:	f7f7 fcdc 	bl	800c684 <pbuf_clen>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014cd0:	8bfa      	ldrh	r2, [r7, #30]
 8014cd2:	8a7b      	ldrh	r3, [r7, #18]
 8014cd4:	4413      	add	r3, r2
 8014cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cda:	db05      	blt.n	8014ce8 <ip_reass_free_complete_datagram+0x98>
 8014cdc:	4b27      	ldr	r3, [pc, #156]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014cde:	22bc      	movs	r2, #188	; 0xbc
 8014ce0:	492a      	ldr	r1, [pc, #168]	; (8014d8c <ip_reass_free_complete_datagram+0x13c>)
 8014ce2:	4828      	ldr	r0, [pc, #160]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014ce4:	f003 fe94 	bl	8018a10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014ce8:	8bfa      	ldrh	r2, [r7, #30]
 8014cea:	8a7b      	ldrh	r3, [r7, #18]
 8014cec:	4413      	add	r3, r2
 8014cee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014cf0:	69b8      	ldr	r0, [r7, #24]
 8014cf2:	f7f7 fc39 	bl	800c568 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014cfc:	e01f      	b.n	8014d3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014d04:	69bb      	ldr	r3, [r7, #24]
 8014d06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014d0e:	68f8      	ldr	r0, [r7, #12]
 8014d10:	f7f7 fcb8 	bl	800c684 <pbuf_clen>
 8014d14:	4603      	mov	r3, r0
 8014d16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d18:	8bfa      	ldrh	r2, [r7, #30]
 8014d1a:	8a7b      	ldrh	r3, [r7, #18]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d22:	db05      	blt.n	8014d30 <ip_reass_free_complete_datagram+0xe0>
 8014d24:	4b15      	ldr	r3, [pc, #84]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014d26:	22cc      	movs	r2, #204	; 0xcc
 8014d28:	4918      	ldr	r1, [pc, #96]	; (8014d8c <ip_reass_free_complete_datagram+0x13c>)
 8014d2a:	4816      	ldr	r0, [pc, #88]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014d2c:	f003 fe70 	bl	8018a10 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014d30:	8bfa      	ldrh	r2, [r7, #30]
 8014d32:	8a7b      	ldrh	r3, [r7, #18]
 8014d34:	4413      	add	r3, r2
 8014d36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014d38:	68f8      	ldr	r0, [r7, #12]
 8014d3a:	f7f7 fc15 	bl	800c568 <pbuf_free>
  while (p != NULL) {
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d1dc      	bne.n	8014cfe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014d44:	6839      	ldr	r1, [r7, #0]
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 f8c2 	bl	8014ed0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014d4c:	4b10      	ldr	r3, [pc, #64]	; (8014d90 <ip_reass_free_complete_datagram+0x140>)
 8014d4e:	881b      	ldrh	r3, [r3, #0]
 8014d50:	8bfa      	ldrh	r2, [r7, #30]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d905      	bls.n	8014d62 <ip_reass_free_complete_datagram+0x112>
 8014d56:	4b09      	ldr	r3, [pc, #36]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014d58:	22d2      	movs	r2, #210	; 0xd2
 8014d5a:	490e      	ldr	r1, [pc, #56]	; (8014d94 <ip_reass_free_complete_datagram+0x144>)
 8014d5c:	4809      	ldr	r0, [pc, #36]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014d5e:	f003 fe57 	bl	8018a10 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014d62:	4b0b      	ldr	r3, [pc, #44]	; (8014d90 <ip_reass_free_complete_datagram+0x140>)
 8014d64:	881a      	ldrh	r2, [r3, #0]
 8014d66:	8bfb      	ldrh	r3, [r7, #30]
 8014d68:	1ad3      	subs	r3, r2, r3
 8014d6a:	b29a      	uxth	r2, r3
 8014d6c:	4b08      	ldr	r3, [pc, #32]	; (8014d90 <ip_reass_free_complete_datagram+0x140>)
 8014d6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014d70:	8bfb      	ldrh	r3, [r7, #30]
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3720      	adds	r7, #32
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	0801f23c 	.word	0x0801f23c
 8014d80:	0801f278 	.word	0x0801f278
 8014d84:	0801f284 	.word	0x0801f284
 8014d88:	0801f2ac 	.word	0x0801f2ac
 8014d8c:	0801f2c0 	.word	0x0801f2c0
 8014d90:	200055dc 	.word	0x200055dc
 8014d94:	0801f2e0 	.word	0x0801f2e0

08014d98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b08a      	sub	sp, #40	; 0x28
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014da2:	2300      	movs	r3, #0
 8014da4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014da6:	2300      	movs	r3, #0
 8014da8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014daa:	2300      	movs	r3, #0
 8014dac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014dae:	2300      	movs	r3, #0
 8014db0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014db2:	2300      	movs	r3, #0
 8014db4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014db6:	4b28      	ldr	r3, [pc, #160]	; (8014e58 <ip_reass_remove_oldest_datagram+0xc0>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014dbc:	e030      	b.n	8014e20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc0:	695a      	ldr	r2, [r3, #20]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	68db      	ldr	r3, [r3, #12]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d10c      	bne.n	8014de4 <ip_reass_remove_oldest_datagram+0x4c>
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	699a      	ldr	r2, [r3, #24]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d106      	bne.n	8014de4 <ip_reass_remove_oldest_datagram+0x4c>
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	899a      	ldrh	r2, [r3, #12]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	889b      	ldrh	r3, [r3, #4]
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d014      	beq.n	8014e0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	3301      	adds	r3, #1
 8014de8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d104      	bne.n	8014dfa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	61bb      	str	r3, [r7, #24]
 8014df8:	e009      	b.n	8014e0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dfc:	7fda      	ldrb	r2, [r3, #31]
 8014dfe:	6a3b      	ldr	r3, [r7, #32]
 8014e00:	7fdb      	ldrb	r3, [r3, #31]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d803      	bhi.n	8014e0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d001      	beq.n	8014e1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d1cb      	bne.n	8014dbe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014e26:	6a3b      	ldr	r3, [r7, #32]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d008      	beq.n	8014e3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014e2c:	69b9      	ldr	r1, [r7, #24]
 8014e2e:	6a38      	ldr	r0, [r7, #32]
 8014e30:	f7ff ff0e 	bl	8014c50 <ip_reass_free_complete_datagram>
 8014e34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014e36:	697a      	ldr	r2, [r7, #20]
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014e3e:	697a      	ldr	r2, [r7, #20]
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	429a      	cmp	r2, r3
 8014e44:	da02      	bge.n	8014e4c <ip_reass_remove_oldest_datagram+0xb4>
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	dcac      	bgt.n	8014da6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014e4c:	697b      	ldr	r3, [r7, #20]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3728      	adds	r7, #40	; 0x28
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	200055d8 	.word	0x200055d8

08014e5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014e66:	2004      	movs	r0, #4
 8014e68:	f7f6 fd04 	bl	800b874 <memp_malloc>
 8014e6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d110      	bne.n	8014e96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f7ff ff8e 	bl	8014d98 <ip_reass_remove_oldest_datagram>
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	4293      	cmp	r3, r2
 8014e82:	dc03      	bgt.n	8014e8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014e84:	2004      	movs	r0, #4
 8014e86:	f7f6 fcf5 	bl	800b874 <memp_malloc>
 8014e8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014e92:	2300      	movs	r3, #0
 8014e94:	e016      	b.n	8014ec4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014e96:	2220      	movs	r2, #32
 8014e98:	2100      	movs	r1, #0
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	f002 ff9c 	bl	8017dd8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	220f      	movs	r2, #15
 8014ea4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014ea6:	4b09      	ldr	r3, [pc, #36]	; (8014ecc <ip_reass_enqueue_new_datagram+0x70>)
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014eae:	4a07      	ldr	r2, [pc, #28]	; (8014ecc <ip_reass_enqueue_new_datagram+0x70>)
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	3308      	adds	r3, #8
 8014eb8:	2214      	movs	r2, #20
 8014eba:	6879      	ldr	r1, [r7, #4]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f002 ff67 	bl	8017d90 <memcpy>
  return ipr;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	200055d8 	.word	0x200055d8

08014ed0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014eda:	4b10      	ldr	r3, [pc, #64]	; (8014f1c <ip_reass_dequeue_datagram+0x4c>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d104      	bne.n	8014eee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	4a0c      	ldr	r2, [pc, #48]	; (8014f1c <ip_reass_dequeue_datagram+0x4c>)
 8014eea:	6013      	str	r3, [r2, #0]
 8014eec:	e00d      	b.n	8014f0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d106      	bne.n	8014f02 <ip_reass_dequeue_datagram+0x32>
 8014ef4:	4b0a      	ldr	r3, [pc, #40]	; (8014f20 <ip_reass_dequeue_datagram+0x50>)
 8014ef6:	f240 1245 	movw	r2, #325	; 0x145
 8014efa:	490a      	ldr	r1, [pc, #40]	; (8014f24 <ip_reass_dequeue_datagram+0x54>)
 8014efc:	480a      	ldr	r0, [pc, #40]	; (8014f28 <ip_reass_dequeue_datagram+0x58>)
 8014efe:	f003 fd87 	bl	8018a10 <iprintf>
    prev->next = ipr->next;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681a      	ldr	r2, [r3, #0]
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014f0a:	6879      	ldr	r1, [r7, #4]
 8014f0c:	2004      	movs	r0, #4
 8014f0e:	f7f6 fd03 	bl	800b918 <memp_free>
}
 8014f12:	bf00      	nop
 8014f14:	3708      	adds	r7, #8
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	200055d8 	.word	0x200055d8
 8014f20:	0801f23c 	.word	0x0801f23c
 8014f24:	0801f304 	.word	0x0801f304
 8014f28:	0801f284 	.word	0x0801f284

08014f2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b08c      	sub	sp, #48	; 0x30
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	885b      	ldrh	r3, [r3, #2]
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f5 ffdb 	bl	800af08 <lwip_htons>
 8014f52:	4603      	mov	r3, r0
 8014f54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014f56:	69fb      	ldr	r3, [r7, #28]
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	f003 030f 	and.w	r3, r3, #15
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014f64:	7e7b      	ldrb	r3, [r7, #25]
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	8b7a      	ldrh	r2, [r7, #26]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d202      	bcs.n	8014f74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f72:	e135      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014f74:	7e7b      	ldrb	r3, [r7, #25]
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	8b7a      	ldrh	r2, [r7, #26]
 8014f7a:	1ad3      	subs	r3, r2, r3
 8014f7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	88db      	ldrh	r3, [r3, #6]
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7f5 ffbf 	bl	800af08 <lwip_htons>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	00db      	lsls	r3, r3, #3
 8014f94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	685b      	ldr	r3, [r3, #4]
 8014f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	701a      	strb	r2, [r3, #0]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	705a      	strb	r2, [r3, #1]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	709a      	strb	r2, [r3, #2]
 8014faa:	2200      	movs	r2, #0
 8014fac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb0:	8afa      	ldrh	r2, [r7, #22]
 8014fb2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014fb4:	8afa      	ldrh	r2, [r7, #22]
 8014fb6:	8b7b      	ldrh	r3, [r7, #26]
 8014fb8:	4413      	add	r3, r2
 8014fba:	b29a      	uxth	r2, r3
 8014fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fbe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc2:	88db      	ldrh	r3, [r3, #6]
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	8afa      	ldrh	r2, [r7, #22]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d902      	bls.n	8014fd2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fd0:	e106      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8014fd8:	e068      	b.n	80150ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe2:	889b      	ldrh	r3, [r3, #4]
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	889b      	ldrh	r3, [r3, #4]
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d235      	bcs.n	801505c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ff4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d020      	beq.n	801503e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffe:	889b      	ldrh	r3, [r3, #4]
 8015000:	b29a      	uxth	r2, r3
 8015002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015004:	88db      	ldrh	r3, [r3, #6]
 8015006:	b29b      	uxth	r3, r3
 8015008:	429a      	cmp	r2, r3
 801500a:	d307      	bcc.n	801501c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500e:	88db      	ldrh	r3, [r3, #6]
 8015010:	b29a      	uxth	r2, r3
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	889b      	ldrh	r3, [r3, #4]
 8015016:	b29b      	uxth	r3, r3
 8015018:	429a      	cmp	r2, r3
 801501a:	d902      	bls.n	8015022 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801501c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015020:	e0de      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015024:	68ba      	ldr	r2, [r7, #8]
 8015026:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502a:	88db      	ldrh	r3, [r3, #6]
 801502c:	b29a      	uxth	r2, r3
 801502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015030:	889b      	ldrh	r3, [r3, #4]
 8015032:	b29b      	uxth	r3, r3
 8015034:	429a      	cmp	r2, r3
 8015036:	d03d      	beq.n	80150b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801503c:	e03a      	b.n	80150b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015040:	88db      	ldrh	r3, [r3, #6]
 8015042:	b29a      	uxth	r2, r3
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	889b      	ldrh	r3, [r3, #4]
 8015048:	b29b      	uxth	r3, r3
 801504a:	429a      	cmp	r2, r3
 801504c:	d902      	bls.n	8015054 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801504e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015052:	e0c5      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	68ba      	ldr	r2, [r7, #8]
 8015058:	605a      	str	r2, [r3, #4]
      break;
 801505a:	e02b      	b.n	80150b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505e:	889b      	ldrh	r3, [r3, #4]
 8015060:	b29a      	uxth	r2, r3
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	889b      	ldrh	r3, [r3, #4]
 8015066:	b29b      	uxth	r3, r3
 8015068:	429a      	cmp	r2, r3
 801506a:	d102      	bne.n	8015072 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801506c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015070:	e0b6      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015074:	889b      	ldrh	r3, [r3, #4]
 8015076:	b29a      	uxth	r2, r3
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	88db      	ldrh	r3, [r3, #6]
 801507c:	b29b      	uxth	r3, r3
 801507e:	429a      	cmp	r2, r3
 8015080:	d202      	bcs.n	8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015086:	e0ab      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508a:	2b00      	cmp	r3, #0
 801508c:	d009      	beq.n	80150a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015090:	88db      	ldrh	r3, [r3, #6]
 8015092:	b29a      	uxth	r2, r3
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	889b      	ldrh	r3, [r3, #4]
 8015098:	b29b      	uxth	r3, r3
 801509a:	429a      	cmp	r2, r3
 801509c:	d001      	beq.n	80150a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801509e:	2300      	movs	r3, #0
 80150a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80150ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d193      	bne.n	8014fda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80150b2:	e000      	b.n	80150b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80150b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80150b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d12d      	bne.n	8015118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80150bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d01c      	beq.n	80150fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80150c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c4:	88db      	ldrh	r3, [r3, #6]
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ca:	889b      	ldrh	r3, [r3, #4]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d906      	bls.n	80150e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80150d2:	4b45      	ldr	r3, [pc, #276]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80150d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80150d8:	4944      	ldr	r1, [pc, #272]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80150da:	4845      	ldr	r0, [pc, #276]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80150dc:	f003 fc98 	bl	8018a10 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80150e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80150e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e8:	88db      	ldrh	r3, [r3, #6]
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ee:	889b      	ldrh	r3, [r3, #4]
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d010      	beq.n	8015118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80150f6:	2300      	movs	r3, #0
 80150f8:	623b      	str	r3, [r7, #32]
 80150fa:	e00d      	b.n	8015118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d006      	beq.n	8015112 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015104:	4b38      	ldr	r3, [pc, #224]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015106:	f240 12bf 	movw	r2, #447	; 0x1bf
 801510a:	493a      	ldr	r1, [pc, #232]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801510c:	4838      	ldr	r0, [pc, #224]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801510e:	f003 fc7f 	bl	8018a10 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	68ba      	ldr	r2, [r7, #8]
 8015116:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d105      	bne.n	801512a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	7f9b      	ldrb	r3, [r3, #30]
 8015122:	f003 0301 	and.w	r3, r3, #1
 8015126:	2b00      	cmp	r3, #0
 8015128:	d059      	beq.n	80151de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801512a:	6a3b      	ldr	r3, [r7, #32]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d04f      	beq.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d006      	beq.n	8015146 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	889b      	ldrh	r3, [r3, #4]
 8015140:	b29b      	uxth	r3, r3
 8015142:	2b00      	cmp	r3, #0
 8015144:	d002      	beq.n	801514c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015146:	2300      	movs	r3, #0
 8015148:	623b      	str	r3, [r7, #32]
 801514a:	e041      	b.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015156:	e012      	b.n	801517e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015160:	88db      	ldrh	r3, [r3, #6]
 8015162:	b29a      	uxth	r2, r3
 8015164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015166:	889b      	ldrh	r3, [r3, #4]
 8015168:	b29b      	uxth	r3, r3
 801516a:	429a      	cmp	r2, r3
 801516c:	d002      	beq.n	8015174 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801516e:	2300      	movs	r3, #0
 8015170:	623b      	str	r3, [r7, #32]
            break;
 8015172:	e007      	b.n	8015184 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015176:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	2b00      	cmp	r3, #0
 8015182:	d1e9      	bne.n	8015158 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015184:	6a3b      	ldr	r3, [r7, #32]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d022      	beq.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d106      	bne.n	80151a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015192:	4b15      	ldr	r3, [pc, #84]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015194:	f240 12df 	movw	r2, #479	; 0x1df
 8015198:	4917      	ldr	r1, [pc, #92]	; (80151f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801519a:	4815      	ldr	r0, [pc, #84]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801519c:	f003 fc38 	bl	8018a10 <iprintf>
          LWIP_ASSERT("sanity check",
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d106      	bne.n	80151ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80151ac:	4b0e      	ldr	r3, [pc, #56]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80151b2:	4911      	ldr	r1, [pc, #68]	; (80151f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80151b4:	480e      	ldr	r0, [pc, #56]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151b6:	f003 fc2b 	bl	8018a10 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80151ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d006      	beq.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80151c2:	4b09      	ldr	r3, [pc, #36]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80151c8:	490c      	ldr	r1, [pc, #48]	; (80151fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80151ca:	4809      	ldr	r0, [pc, #36]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151cc:	f003 fc20 	bl	8018a10 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80151d0:	6a3b      	ldr	r3, [r7, #32]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	bf14      	ite	ne
 80151d6:	2301      	movne	r3, #1
 80151d8:	2300      	moveq	r3, #0
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	e000      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80151de:	2300      	movs	r3, #0
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3730      	adds	r7, #48	; 0x30
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	0801f23c 	.word	0x0801f23c
 80151ec:	0801f320 	.word	0x0801f320
 80151f0:	0801f284 	.word	0x0801f284
 80151f4:	0801f340 	.word	0x0801f340
 80151f8:	0801f378 	.word	0x0801f378
 80151fc:	0801f388 	.word	0x0801f388

08015200 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b08e      	sub	sp, #56	; 0x38
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	f003 030f 	and.w	r3, r3, #15
 8015216:	b2db      	uxtb	r3, r3
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b14      	cmp	r3, #20
 801521e:	f040 8167 	bne.w	80154f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015224:	88db      	ldrh	r3, [r3, #6]
 8015226:	b29b      	uxth	r3, r3
 8015228:	4618      	mov	r0, r3
 801522a:	f7f5 fe6d 	bl	800af08 <lwip_htons>
 801522e:	4603      	mov	r3, r0
 8015230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015234:	b29b      	uxth	r3, r3
 8015236:	00db      	lsls	r3, r3, #3
 8015238:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	885b      	ldrh	r3, [r3, #2]
 801523e:	b29b      	uxth	r3, r3
 8015240:	4618      	mov	r0, r3
 8015242:	f7f5 fe61 	bl	800af08 <lwip_htons>
 8015246:	4603      	mov	r3, r0
 8015248:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801524c:	781b      	ldrb	r3, [r3, #0]
 801524e:	f003 030f 	and.w	r3, r3, #15
 8015252:	b2db      	uxtb	r3, r3
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801525a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801525e:	b29b      	uxth	r3, r3
 8015260:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015262:	429a      	cmp	r2, r3
 8015264:	f0c0 8146 	bcc.w	80154f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801526c:	b29b      	uxth	r3, r3
 801526e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7f7 fa05 	bl	800c684 <pbuf_clen>
 801527a:	4603      	mov	r3, r0
 801527c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801527e:	4ba3      	ldr	r3, [pc, #652]	; (801550c <ip4_reass+0x30c>)
 8015280:	881b      	ldrh	r3, [r3, #0]
 8015282:	461a      	mov	r2, r3
 8015284:	8c3b      	ldrh	r3, [r7, #32]
 8015286:	4413      	add	r3, r2
 8015288:	2b0a      	cmp	r3, #10
 801528a:	dd10      	ble.n	80152ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801528c:	8c3b      	ldrh	r3, [r7, #32]
 801528e:	4619      	mov	r1, r3
 8015290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015292:	f7ff fd81 	bl	8014d98 <ip_reass_remove_oldest_datagram>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 812d 	beq.w	80154f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801529e:	4b9b      	ldr	r3, [pc, #620]	; (801550c <ip4_reass+0x30c>)
 80152a0:	881b      	ldrh	r3, [r3, #0]
 80152a2:	461a      	mov	r2, r3
 80152a4:	8c3b      	ldrh	r3, [r7, #32]
 80152a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80152a8:	2b0a      	cmp	r3, #10
 80152aa:	f300 8125 	bgt.w	80154f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152ae:	4b98      	ldr	r3, [pc, #608]	; (8015510 <ip4_reass+0x310>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	633b      	str	r3, [r7, #48]	; 0x30
 80152b4:	e015      	b.n	80152e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80152b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b8:	695a      	ldr	r2, [r3, #20]
 80152ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152bc:	68db      	ldr	r3, [r3, #12]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d10c      	bne.n	80152dc <ip4_reass+0xdc>
 80152c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c4:	699a      	ldr	r2, [r3, #24]
 80152c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c8:	691b      	ldr	r3, [r3, #16]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d106      	bne.n	80152dc <ip4_reass+0xdc>
 80152ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d0:	899a      	ldrh	r2, [r3, #12]
 80152d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d4:	889b      	ldrh	r3, [r3, #4]
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	429a      	cmp	r2, r3
 80152da:	d006      	beq.n	80152ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	633b      	str	r3, [r7, #48]	; 0x30
 80152e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d1e6      	bne.n	80152b6 <ip4_reass+0xb6>
 80152e8:	e000      	b.n	80152ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80152ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80152ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d109      	bne.n	8015306 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80152f2:	8c3b      	ldrh	r3, [r7, #32]
 80152f4:	4619      	mov	r1, r3
 80152f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152f8:	f7ff fdb0 	bl	8014e5c <ip_reass_enqueue_new_datagram>
 80152fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80152fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015300:	2b00      	cmp	r3, #0
 8015302:	d11c      	bne.n	801533e <ip4_reass+0x13e>
      goto nullreturn;
 8015304:	e0f9      	b.n	80154fa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015308:	88db      	ldrh	r3, [r3, #6]
 801530a:	b29b      	uxth	r3, r3
 801530c:	4618      	mov	r0, r3
 801530e:	f7f5 fdfb 	bl	800af08 <lwip_htons>
 8015312:	4603      	mov	r3, r0
 8015314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015318:	2b00      	cmp	r3, #0
 801531a:	d110      	bne.n	801533e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531e:	89db      	ldrh	r3, [r3, #14]
 8015320:	4618      	mov	r0, r3
 8015322:	f7f5 fdf1 	bl	800af08 <lwip_htons>
 8015326:	4603      	mov	r3, r0
 8015328:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801532c:	2b00      	cmp	r3, #0
 801532e:	d006      	beq.n	801533e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015332:	3308      	adds	r3, #8
 8015334:	2214      	movs	r2, #20
 8015336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015338:	4618      	mov	r0, r3
 801533a:	f002 fd29 	bl	8017d90 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015340:	88db      	ldrh	r3, [r3, #6]
 8015342:	b29b      	uxth	r3, r3
 8015344:	f003 0320 	and.w	r3, r3, #32
 8015348:	2b00      	cmp	r3, #0
 801534a:	bf0c      	ite	eq
 801534c:	2301      	moveq	r3, #1
 801534e:	2300      	movne	r3, #0
 8015350:	b2db      	uxtb	r3, r3
 8015352:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d00e      	beq.n	8015378 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801535a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801535c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801535e:	4413      	add	r3, r2
 8015360:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015362:	8b7a      	ldrh	r2, [r7, #26]
 8015364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015366:	429a      	cmp	r2, r3
 8015368:	f0c0 80a0 	bcc.w	80154ac <ip4_reass+0x2ac>
 801536c:	8b7b      	ldrh	r3, [r7, #26]
 801536e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015372:	4293      	cmp	r3, r2
 8015374:	f200 809a 	bhi.w	80154ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015378:	69fa      	ldr	r2, [r7, #28]
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801537e:	f7ff fdd5 	bl	8014f2c <ip_reass_chain_frag_into_datagram_and_validate>
 8015382:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801538a:	f000 8091 	beq.w	80154b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801538e:	4b5f      	ldr	r3, [pc, #380]	; (801550c <ip4_reass+0x30c>)
 8015390:	881a      	ldrh	r2, [r3, #0]
 8015392:	8c3b      	ldrh	r3, [r7, #32]
 8015394:	4413      	add	r3, r2
 8015396:	b29a      	uxth	r2, r3
 8015398:	4b5c      	ldr	r3, [pc, #368]	; (801550c <ip4_reass+0x30c>)
 801539a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d00d      	beq.n	80153be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80153a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153a6:	4413      	add	r3, r2
 80153a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80153aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ac:	8a7a      	ldrh	r2, [r7, #18]
 80153ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80153b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b2:	7f9b      	ldrb	r3, [r3, #30]
 80153b4:	f043 0301 	orr.w	r3, r3, #1
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	d171      	bne.n	80154a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80153c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c6:	8b9b      	ldrh	r3, [r3, #28]
 80153c8:	3314      	adds	r3, #20
 80153ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80153de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e0:	3308      	adds	r3, #8
 80153e2:	2214      	movs	r2, #20
 80153e4:	4619      	mov	r1, r3
 80153e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153e8:	f002 fcd2 	bl	8017d90 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80153ec:	8a3b      	ldrh	r3, [r7, #16]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f5 fd8a 	bl	800af08 <lwip_htons>
 80153f4:	4603      	mov	r3, r0
 80153f6:	461a      	mov	r2, r3
 80153f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80153fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fe:	2200      	movs	r2, #0
 8015400:	719a      	strb	r2, [r3, #6]
 8015402:	2200      	movs	r2, #0
 8015404:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015408:	2200      	movs	r2, #0
 801540a:	729a      	strb	r2, [r3, #10]
 801540c:	2200      	movs	r2, #0
 801540e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015416:	e00d      	b.n	8015434 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801541e:	2114      	movs	r1, #20
 8015420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015422:	f7f7 f81b 	bl	800c45c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f7f7 f96b 	bl	800c704 <pbuf_cat>
      r = iprh->next_pbuf;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015436:	2b00      	cmp	r3, #0
 8015438:	d1ee      	bne.n	8015418 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801543a:	4b35      	ldr	r3, [pc, #212]	; (8015510 <ip4_reass+0x310>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015440:	429a      	cmp	r2, r3
 8015442:	d102      	bne.n	801544a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015444:	2300      	movs	r3, #0
 8015446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015448:	e010      	b.n	801546c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801544a:	4b31      	ldr	r3, [pc, #196]	; (8015510 <ip4_reass+0x310>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015450:	e007      	b.n	8015462 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015458:	429a      	cmp	r2, r3
 801545a:	d006      	beq.n	801546a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1f4      	bne.n	8015452 <ip4_reass+0x252>
 8015468:	e000      	b.n	801546c <ip4_reass+0x26c>
          break;
 801546a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801546c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801546e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015470:	f7ff fd2e 	bl	8014ed0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7f7 f905 	bl	800c684 <pbuf_clen>
 801547a:	4603      	mov	r3, r0
 801547c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801547e:	4b23      	ldr	r3, [pc, #140]	; (801550c <ip4_reass+0x30c>)
 8015480:	881b      	ldrh	r3, [r3, #0]
 8015482:	8c3a      	ldrh	r2, [r7, #32]
 8015484:	429a      	cmp	r2, r3
 8015486:	d906      	bls.n	8015496 <ip4_reass+0x296>
 8015488:	4b22      	ldr	r3, [pc, #136]	; (8015514 <ip4_reass+0x314>)
 801548a:	f240 229b 	movw	r2, #667	; 0x29b
 801548e:	4922      	ldr	r1, [pc, #136]	; (8015518 <ip4_reass+0x318>)
 8015490:	4822      	ldr	r0, [pc, #136]	; (801551c <ip4_reass+0x31c>)
 8015492:	f003 fabd 	bl	8018a10 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015496:	4b1d      	ldr	r3, [pc, #116]	; (801550c <ip4_reass+0x30c>)
 8015498:	881a      	ldrh	r2, [r3, #0]
 801549a:	8c3b      	ldrh	r3, [r7, #32]
 801549c:	1ad3      	subs	r3, r2, r3
 801549e:	b29a      	uxth	r2, r3
 80154a0:	4b1a      	ldr	r3, [pc, #104]	; (801550c <ip4_reass+0x30c>)
 80154a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	e02c      	b.n	8015502 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80154a8:	2300      	movs	r3, #0
 80154aa:	e02a      	b.n	8015502 <ip4_reass+0x302>

nullreturn_ipr:
 80154ac:	bf00      	nop
 80154ae:	e000      	b.n	80154b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80154b0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80154b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d106      	bne.n	80154c6 <ip4_reass+0x2c6>
 80154b8:	4b16      	ldr	r3, [pc, #88]	; (8015514 <ip4_reass+0x314>)
 80154ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80154be:	4918      	ldr	r1, [pc, #96]	; (8015520 <ip4_reass+0x320>)
 80154c0:	4816      	ldr	r0, [pc, #88]	; (801551c <ip4_reass+0x31c>)
 80154c2:	f003 faa5 	bl	8018a10 <iprintf>
  if (ipr->p == NULL) {
 80154c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d114      	bne.n	80154f8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80154ce:	4b10      	ldr	r3, [pc, #64]	; (8015510 <ip4_reass+0x310>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d006      	beq.n	80154e6 <ip4_reass+0x2e6>
 80154d8:	4b0e      	ldr	r3, [pc, #56]	; (8015514 <ip4_reass+0x314>)
 80154da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80154de:	4911      	ldr	r1, [pc, #68]	; (8015524 <ip4_reass+0x324>)
 80154e0:	480e      	ldr	r0, [pc, #56]	; (801551c <ip4_reass+0x31c>)
 80154e2:	f003 fa95 	bl	8018a10 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80154e6:	2100      	movs	r1, #0
 80154e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154ea:	f7ff fcf1 	bl	8014ed0 <ip_reass_dequeue_datagram>
 80154ee:	e004      	b.n	80154fa <ip4_reass+0x2fa>
    goto nullreturn;
 80154f0:	bf00      	nop
 80154f2:	e002      	b.n	80154fa <ip4_reass+0x2fa>
    goto nullreturn;
 80154f4:	bf00      	nop
 80154f6:	e000      	b.n	80154fa <ip4_reass+0x2fa>
  }

nullreturn:
 80154f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f7f7 f834 	bl	800c568 <pbuf_free>
  return NULL;
 8015500:	2300      	movs	r3, #0
}
 8015502:	4618      	mov	r0, r3
 8015504:	3738      	adds	r7, #56	; 0x38
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	200055dc 	.word	0x200055dc
 8015510:	200055d8 	.word	0x200055d8
 8015514:	0801f23c 	.word	0x0801f23c
 8015518:	0801f3ac 	.word	0x0801f3ac
 801551c:	0801f284 	.word	0x0801f284
 8015520:	0801f3c8 	.word	0x0801f3c8
 8015524:	0801f3d4 	.word	0x0801f3d4

08015528 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801552c:	2005      	movs	r0, #5
 801552e:	f7f6 f9a1 	bl	800b874 <memp_malloc>
 8015532:	4603      	mov	r3, r0
}
 8015534:	4618      	mov	r0, r3
 8015536:	bd80      	pop	{r7, pc}

08015538 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b082      	sub	sp, #8
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d106      	bne.n	8015554 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015546:	4b07      	ldr	r3, [pc, #28]	; (8015564 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015548:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801554c:	4906      	ldr	r1, [pc, #24]	; (8015568 <ip_frag_free_pbuf_custom_ref+0x30>)
 801554e:	4807      	ldr	r0, [pc, #28]	; (801556c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015550:	f003 fa5e 	bl	8018a10 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015554:	6879      	ldr	r1, [r7, #4]
 8015556:	2005      	movs	r0, #5
 8015558:	f7f6 f9de 	bl	800b918 <memp_free>
}
 801555c:	bf00      	nop
 801555e:	3708      	adds	r7, #8
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}
 8015564:	0801f23c 	.word	0x0801f23c
 8015568:	0801f3f4 	.word	0x0801f3f4
 801556c:	0801f284 	.word	0x0801f284

08015570 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b084      	sub	sp, #16
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d106      	bne.n	8015590 <ipfrag_free_pbuf_custom+0x20>
 8015582:	4b11      	ldr	r3, [pc, #68]	; (80155c8 <ipfrag_free_pbuf_custom+0x58>)
 8015584:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015588:	4910      	ldr	r1, [pc, #64]	; (80155cc <ipfrag_free_pbuf_custom+0x5c>)
 801558a:	4811      	ldr	r0, [pc, #68]	; (80155d0 <ipfrag_free_pbuf_custom+0x60>)
 801558c:	f003 fa40 	bl	8018a10 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	429a      	cmp	r2, r3
 8015596:	d006      	beq.n	80155a6 <ipfrag_free_pbuf_custom+0x36>
 8015598:	4b0b      	ldr	r3, [pc, #44]	; (80155c8 <ipfrag_free_pbuf_custom+0x58>)
 801559a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801559e:	490d      	ldr	r1, [pc, #52]	; (80155d4 <ipfrag_free_pbuf_custom+0x64>)
 80155a0:	480b      	ldr	r0, [pc, #44]	; (80155d0 <ipfrag_free_pbuf_custom+0x60>)
 80155a2:	f003 fa35 	bl	8018a10 <iprintf>
  if (pcr->original != NULL) {
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	695b      	ldr	r3, [r3, #20]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d004      	beq.n	80155b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	695b      	ldr	r3, [r3, #20]
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7f6 ffd8 	bl	800c568 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f7ff ffbd 	bl	8015538 <ip_frag_free_pbuf_custom_ref>
}
 80155be:	bf00      	nop
 80155c0:	3710      	adds	r7, #16
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	0801f23c 	.word	0x0801f23c
 80155cc:	0801f400 	.word	0x0801f400
 80155d0:	0801f284 	.word	0x0801f284
 80155d4:	0801f40c 	.word	0x0801f40c

080155d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b094      	sub	sp, #80	; 0x50
 80155dc:	af02      	add	r7, sp, #8
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	8c1b      	ldrh	r3, [r3, #32]
 80155ee:	3b14      	subs	r3, #20
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	da00      	bge.n	80155f6 <ip4_frag+0x1e>
 80155f4:	3307      	adds	r3, #7
 80155f6:	10db      	asrs	r3, r3, #3
 80155f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80155fa:	2314      	movs	r3, #20
 80155fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015606:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	f003 030f 	and.w	r3, r3, #15
 8015610:	b2db      	uxtb	r3, r3
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	b2db      	uxtb	r3, r3
 8015616:	2b14      	cmp	r3, #20
 8015618:	d002      	beq.n	8015620 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801561a:	f06f 0305 	mvn.w	r3, #5
 801561e:	e10f      	b.n	8015840 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	895b      	ldrh	r3, [r3, #10]
 8015624:	2b13      	cmp	r3, #19
 8015626:	d809      	bhi.n	801563c <ip4_frag+0x64>
 8015628:	4b87      	ldr	r3, [pc, #540]	; (8015848 <ip4_frag+0x270>)
 801562a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801562e:	4987      	ldr	r1, [pc, #540]	; (801584c <ip4_frag+0x274>)
 8015630:	4887      	ldr	r0, [pc, #540]	; (8015850 <ip4_frag+0x278>)
 8015632:	f003 f9ed 	bl	8018a10 <iprintf>
 8015636:	f06f 0305 	mvn.w	r3, #5
 801563a:	e101      	b.n	8015840 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801563e:	88db      	ldrh	r3, [r3, #6]
 8015640:	b29b      	uxth	r3, r3
 8015642:	4618      	mov	r0, r3
 8015644:	f7f5 fc60 	bl	800af08 <lwip_htons>
 8015648:	4603      	mov	r3, r0
 801564a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801564c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801564e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015652:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015656:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801565c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	891b      	ldrh	r3, [r3, #8]
 8015662:	3b14      	subs	r3, #20
 8015664:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015668:	e0e0      	b.n	801582c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801566a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801566c:	00db      	lsls	r3, r3, #3
 801566e:	b29b      	uxth	r3, r3
 8015670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015674:	4293      	cmp	r3, r2
 8015676:	bf28      	it	cs
 8015678:	4613      	movcs	r3, r2
 801567a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801567c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015680:	2114      	movs	r1, #20
 8015682:	200e      	movs	r0, #14
 8015684:	f7f6 fc90 	bl	800bfa8 <pbuf_alloc>
 8015688:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568c:	2b00      	cmp	r3, #0
 801568e:	f000 80d4 	beq.w	801583a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	895b      	ldrh	r3, [r3, #10]
 8015696:	2b13      	cmp	r3, #19
 8015698:	d806      	bhi.n	80156a8 <ip4_frag+0xd0>
 801569a:	4b6b      	ldr	r3, [pc, #428]	; (8015848 <ip4_frag+0x270>)
 801569c:	f240 3225 	movw	r2, #805	; 0x325
 80156a0:	496c      	ldr	r1, [pc, #432]	; (8015854 <ip4_frag+0x27c>)
 80156a2:	486b      	ldr	r0, [pc, #428]	; (8015850 <ip4_frag+0x278>)
 80156a4:	f003 f9b4 	bl	8018a10 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80156a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	2214      	movs	r2, #20
 80156ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156b0:	4618      	mov	r0, r3
 80156b2:	f002 fb6d 	bl	8017d90 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80156b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80156bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80156be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80156c2:	e064      	b.n	801578e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	895a      	ldrh	r2, [r3, #10]
 80156c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156ca:	1ad3      	subs	r3, r2, r3
 80156cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	895b      	ldrh	r3, [r3, #10]
 80156d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d906      	bls.n	80156e6 <ip4_frag+0x10e>
 80156d8:	4b5b      	ldr	r3, [pc, #364]	; (8015848 <ip4_frag+0x270>)
 80156da:	f240 322d 	movw	r2, #813	; 0x32d
 80156de:	495e      	ldr	r1, [pc, #376]	; (8015858 <ip4_frag+0x280>)
 80156e0:	485b      	ldr	r0, [pc, #364]	; (8015850 <ip4_frag+0x278>)
 80156e2:	f003 f995 	bl	8018a10 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80156e6:	8bfa      	ldrh	r2, [r7, #30]
 80156e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80156ec:	4293      	cmp	r3, r2
 80156ee:	bf28      	it	cs
 80156f0:	4613      	movcs	r3, r2
 80156f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80156f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d105      	bne.n	801570a <ip4_frag+0x132>
        poff = 0;
 80156fe:	2300      	movs	r3, #0
 8015700:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	60fb      	str	r3, [r7, #12]
        continue;
 8015708:	e041      	b.n	801578e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801570a:	f7ff ff0d 	bl	8015528 <ip_frag_alloc_pbuf_custom_ref>
 801570e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015710:	69bb      	ldr	r3, [r7, #24]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d103      	bne.n	801571e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015718:	f7f6 ff26 	bl	800c568 <pbuf_free>
        goto memerr;
 801571c:	e08e      	b.n	801583c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801571e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015724:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015726:	4413      	add	r3, r2
 8015728:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801572c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015730:	9201      	str	r2, [sp, #4]
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	4603      	mov	r3, r0
 8015736:	2241      	movs	r2, #65	; 0x41
 8015738:	2000      	movs	r0, #0
 801573a:	f7f6 fd5b 	bl	800c1f4 <pbuf_alloced_custom>
 801573e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d106      	bne.n	8015754 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015746:	69b8      	ldr	r0, [r7, #24]
 8015748:	f7ff fef6 	bl	8015538 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801574c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801574e:	f7f6 ff0b 	bl	800c568 <pbuf_free>
        goto memerr;
 8015752:	e073      	b.n	801583c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8015754:	68f8      	ldr	r0, [r7, #12]
 8015756:	f7f6 ffad 	bl	800c6b4 <pbuf_ref>
      pcr->original = p;
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	4a3e      	ldr	r2, [pc, #248]	; (801585c <ip4_frag+0x284>)
 8015764:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015766:	6979      	ldr	r1, [r7, #20]
 8015768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801576a:	f7f6 ffcb 	bl	800c704 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801576e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015772:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015776:	1ad3      	subs	r3, r2, r3
 8015778:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801577c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015780:	2b00      	cmp	r3, #0
 8015782:	d004      	beq.n	801578e <ip4_frag+0x1b6>
        poff = 0;
 8015784:	2300      	movs	r3, #0
 8015786:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801578e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015792:	2b00      	cmp	r3, #0
 8015794:	d196      	bne.n	80156c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015796:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015798:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801579c:	4413      	add	r3, r2
 801579e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80157a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	8c1b      	ldrh	r3, [r3, #32]
 80157a8:	3b14      	subs	r3, #20
 80157aa:	429a      	cmp	r2, r3
 80157ac:	bfd4      	ite	le
 80157ae:	2301      	movle	r3, #1
 80157b0:	2300      	movgt	r3, #0
 80157b2:	b2db      	uxtb	r3, r3
 80157b4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80157b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80157c0:	6a3b      	ldr	r3, [r7, #32]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d002      	beq.n	80157cc <ip4_frag+0x1f4>
 80157c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d003      	beq.n	80157d4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80157cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80157d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80157d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7f5 fb96 	bl	800af08 <lwip_htons>
 80157dc:	4603      	mov	r3, r0
 80157de:	461a      	mov	r2, r3
 80157e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80157e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157e6:	3314      	adds	r3, #20
 80157e8:	b29b      	uxth	r3, r3
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7f5 fb8c 	bl	800af08 <lwip_htons>
 80157f0:	4603      	mov	r3, r0
 80157f2:	461a      	mov	r2, r3
 80157f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80157f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157fa:	2200      	movs	r2, #0
 80157fc:	729a      	strb	r2, [r3, #10]
 80157fe:	2200      	movs	r2, #0
 8015800:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	695b      	ldr	r3, [r3, #20]
 8015806:	687a      	ldr	r2, [r7, #4]
 8015808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801580a:	68b8      	ldr	r0, [r7, #8]
 801580c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801580e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015810:	f7f6 feaa 	bl	800c568 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015818:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801581a:	1ad3      	subs	r3, r2, r3
 801581c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015820:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015824:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015826:	4413      	add	r3, r2
 8015828:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801582c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015830:	2b00      	cmp	r3, #0
 8015832:	f47f af1a 	bne.w	801566a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015836:	2300      	movs	r3, #0
 8015838:	e002      	b.n	8015840 <ip4_frag+0x268>
      goto memerr;
 801583a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801583c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015840:	4618      	mov	r0, r3
 8015842:	3748      	adds	r7, #72	; 0x48
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	0801f23c 	.word	0x0801f23c
 801584c:	0801f418 	.word	0x0801f418
 8015850:	0801f284 	.word	0x0801f284
 8015854:	0801f434 	.word	0x0801f434
 8015858:	0801f454 	.word	0x0801f454
 801585c:	08015571 	.word	0x08015571

08015860 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b086      	sub	sp, #24
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801586a:	230e      	movs	r3, #14
 801586c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	895b      	ldrh	r3, [r3, #10]
 8015872:	2b0e      	cmp	r3, #14
 8015874:	d96e      	bls.n	8015954 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	7bdb      	ldrb	r3, [r3, #15]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d106      	bne.n	801588c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015884:	3301      	adds	r3, #1
 8015886:	b2da      	uxtb	r2, r3
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	7b1a      	ldrb	r2, [r3, #12]
 8015896:	7b5b      	ldrb	r3, [r3, #13]
 8015898:	021b      	lsls	r3, r3, #8
 801589a:	4313      	orrs	r3, r2
 801589c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	f003 0301 	and.w	r3, r3, #1
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d023      	beq.n	80158f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	2b01      	cmp	r3, #1
 80158b0:	d10f      	bne.n	80158d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	785b      	ldrb	r3, [r3, #1]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d11b      	bne.n	80158f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158be:	2b5e      	cmp	r3, #94	; 0x5e
 80158c0:	d117      	bne.n	80158f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	7b5b      	ldrb	r3, [r3, #13]
 80158c6:	f043 0310 	orr.w	r3, r3, #16
 80158ca:	b2da      	uxtb	r2, r3
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	735a      	strb	r2, [r3, #13]
 80158d0:	e00f      	b.n	80158f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	2206      	movs	r2, #6
 80158d6:	4928      	ldr	r1, [pc, #160]	; (8015978 <ethernet_input+0x118>)
 80158d8:	4618      	mov	r0, r3
 80158da:	f002 fa4a 	bl	8017d72 <memcmp>
 80158de:	4603      	mov	r3, r0
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d106      	bne.n	80158f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	7b5b      	ldrb	r3, [r3, #13]
 80158e8:	f043 0308 	orr.w	r3, r3, #8
 80158ec:	b2da      	uxtb	r2, r3
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80158f2:	89fb      	ldrh	r3, [r7, #14]
 80158f4:	2b08      	cmp	r3, #8
 80158f6:	d003      	beq.n	8015900 <ethernet_input+0xa0>
 80158f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80158fc:	d014      	beq.n	8015928 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80158fe:	e032      	b.n	8015966 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8015906:	f003 0308 	and.w	r3, r3, #8
 801590a:	2b00      	cmp	r3, #0
 801590c:	d024      	beq.n	8015958 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801590e:	8afb      	ldrh	r3, [r7, #22]
 8015910:	4619      	mov	r1, r3
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f7f6 fda2 	bl	800c45c <pbuf_remove_header>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d11e      	bne.n	801595c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801591e:	6839      	ldr	r1, [r7, #0]
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f7fe ff2d 	bl	8014780 <ip4_input>
      break;
 8015926:	e013      	b.n	8015950 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801592e:	f003 0308 	and.w	r3, r3, #8
 8015932:	2b00      	cmp	r3, #0
 8015934:	d014      	beq.n	8015960 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015936:	8afb      	ldrh	r3, [r7, #22]
 8015938:	4619      	mov	r1, r3
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7f6 fd8e 	bl	800c45c <pbuf_remove_header>
 8015940:	4603      	mov	r3, r0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d10e      	bne.n	8015964 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015946:	6839      	ldr	r1, [r7, #0]
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f7fe f8cd 	bl	8013ae8 <etharp_input>
      break;
 801594e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015950:	2300      	movs	r3, #0
 8015952:	e00c      	b.n	801596e <ethernet_input+0x10e>
    goto free_and_return;
 8015954:	bf00      	nop
 8015956:	e006      	b.n	8015966 <ethernet_input+0x106>
        goto free_and_return;
 8015958:	bf00      	nop
 801595a:	e004      	b.n	8015966 <ethernet_input+0x106>
        goto free_and_return;
 801595c:	bf00      	nop
 801595e:	e002      	b.n	8015966 <ethernet_input+0x106>
        goto free_and_return;
 8015960:	bf00      	nop
 8015962:	e000      	b.n	8015966 <ethernet_input+0x106>
        goto free_and_return;
 8015964:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f7f6 fdfe 	bl	800c568 <pbuf_free>
  return ERR_OK;
 801596c:	2300      	movs	r3, #0
}
 801596e:	4618      	mov	r0, r3
 8015970:	3718      	adds	r7, #24
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	0801f860 	.word	0x0801f860

0801597c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801597c:	b580      	push	{r7, lr}
 801597e:	b086      	sub	sp, #24
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	607a      	str	r2, [r7, #4]
 8015988:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801598a:	8c3b      	ldrh	r3, [r7, #32]
 801598c:	4618      	mov	r0, r3
 801598e:	f7f5 fabb 	bl	800af08 <lwip_htons>
 8015992:	4603      	mov	r3, r0
 8015994:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015996:	210e      	movs	r1, #14
 8015998:	68b8      	ldr	r0, [r7, #8]
 801599a:	f7f6 fd4f 	bl	800c43c <pbuf_add_header>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d125      	bne.n	80159f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80159aa:	693b      	ldr	r3, [r7, #16]
 80159ac:	8afa      	ldrh	r2, [r7, #22]
 80159ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	2206      	movs	r2, #6
 80159b4:	6839      	ldr	r1, [r7, #0]
 80159b6:	4618      	mov	r0, r3
 80159b8:	f002 f9ea 	bl	8017d90 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	3306      	adds	r3, #6
 80159c0:	2206      	movs	r2, #6
 80159c2:	6879      	ldr	r1, [r7, #4]
 80159c4:	4618      	mov	r0, r3
 80159c6:	f002 f9e3 	bl	8017d90 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159d0:	2b06      	cmp	r3, #6
 80159d2:	d006      	beq.n	80159e2 <ethernet_output+0x66>
 80159d4:	4b0a      	ldr	r3, [pc, #40]	; (8015a00 <ethernet_output+0x84>)
 80159d6:	f240 1233 	movw	r2, #307	; 0x133
 80159da:	490a      	ldr	r1, [pc, #40]	; (8015a04 <ethernet_output+0x88>)
 80159dc:	480a      	ldr	r0, [pc, #40]	; (8015a08 <ethernet_output+0x8c>)
 80159de:	f003 f817 	bl	8018a10 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	699b      	ldr	r3, [r3, #24]
 80159e6:	68b9      	ldr	r1, [r7, #8]
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	4798      	blx	r3
 80159ec:	4603      	mov	r3, r0
 80159ee:	e002      	b.n	80159f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80159f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80159f2:	f06f 0301 	mvn.w	r3, #1
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3718      	adds	r7, #24
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	0801f464 	.word	0x0801f464
 8015a04:	0801f49c 	.word	0x0801f49c
 8015a08:	0801f4d0 	.word	0x0801f4d0

08015a0c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b086      	sub	sp, #24
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	60bb      	str	r3, [r7, #8]
 8015a1a:	2304      	movs	r3, #4
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	2300      	movs	r3, #0
 8015a20:	613b      	str	r3, [r7, #16]
 8015a22:	2300      	movs	r3, #0
 8015a24:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015a26:	f107 0308 	add.w	r3, r7, #8
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7f0 f91a 	bl	8005c66 <osMessageCreate>
 8015a32:	4602      	mov	r2, r0
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d102      	bne.n	8015a46 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a44:	e000      	b.n	8015a48 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015a46:	2300      	movs	r3, #0
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3718      	adds	r7, #24
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7f0 f9df 	bl	8005e20 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	4618      	mov	r0, r3
 8015a68:	f7f0 f9f0 	bl	8005e4c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015a6c:	bf00      	nop
 8015a6e:	3708      	adds	r7, #8
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b084      	sub	sp, #16
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	6839      	ldr	r1, [r7, #0]
 8015a84:	2200      	movs	r2, #0
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7f0 f916 	bl	8005cb8 <osMessagePut>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d102      	bne.n	8015a98 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015a92:	2300      	movs	r3, #0
 8015a94:	73fb      	strb	r3, [r7, #15]
 8015a96:	e001      	b.n	8015a9c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015a98:	23ff      	movs	r3, #255	; 0xff
 8015a9a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3710      	adds	r7, #16
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08c      	sub	sp, #48	; 0x30
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	61f8      	str	r0, [r7, #28]
 8015ab0:	61b9      	str	r1, [r7, #24]
 8015ab2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015ab4:	f7ef fef3 	bl	800589e <osKernelSysTick>
 8015ab8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d017      	beq.n	8015af0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	6819      	ldr	r1, [r3, #0]
 8015ac4:	f107 0320 	add.w	r3, r7, #32
 8015ac8:	697a      	ldr	r2, [r7, #20]
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7f0 f934 	bl	8005d38 <osMessageGet>

    if(event.status == osEventMessage)
 8015ad0:	6a3b      	ldr	r3, [r7, #32]
 8015ad2:	2b10      	cmp	r3, #16
 8015ad4:	d109      	bne.n	8015aea <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad8:	461a      	mov	r2, r3
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015ade:	f7ef fede 	bl	800589e <osKernelSysTick>
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae6:	1ad3      	subs	r3, r2, r3
 8015ae8:	e019      	b.n	8015b1e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015aee:	e016      	b.n	8015b1e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015af0:	69fb      	ldr	r3, [r7, #28]
 8015af2:	6819      	ldr	r1, [r3, #0]
 8015af4:	463b      	mov	r3, r7
 8015af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7f0 f91c 	bl	8005d38 <osMessageGet>
 8015b00:	f107 0320 	add.w	r3, r7, #32
 8015b04:	463a      	mov	r2, r7
 8015b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0e:	461a      	mov	r2, r3
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015b14:	f7ef fec3 	bl	800589e <osKernelSysTick>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b1c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3730      	adds	r7, #48	; 0x30
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b086      	sub	sp, #24
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
 8015b2e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6819      	ldr	r1, [r3, #0]
 8015b34:	f107 030c 	add.w	r3, r7, #12
 8015b38:	2200      	movs	r2, #0
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7f0 f8fc 	bl	8005d38 <osMessageGet>

  if(event.status == osEventMessage)
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	2b10      	cmp	r3, #16
 8015b44:	d105      	bne.n	8015b52 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	461a      	mov	r2, r3
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e001      	b.n	8015b56 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	3718      	adds	r7, #24
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bd80      	pop	{r7, pc}

08015b5e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015b5e:	b480      	push	{r7}
 8015b60:	b083      	sub	sp, #12
 8015b62:	af00      	add	r7, sp, #0
 8015b64:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d101      	bne.n	8015b72 <sys_mbox_valid+0x14>
    return 0;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e000      	b.n	8015b74 <sys_mbox_valid+0x16>
  else
    return 1;
 8015b72:	2301      	movs	r3, #1
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	370c      	adds	r7, #12
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr

08015b80 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015b80:	b480      	push	{r7}
 8015b82:	b083      	sub	sp, #12
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	601a      	str	r2, [r3, #0]
}
 8015b8e:	bf00      	nop
 8015b90:	370c      	adds	r7, #12
 8015b92:	46bd      	mov	sp, r7
 8015b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b98:	4770      	bx	lr

08015b9a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b084      	sub	sp, #16
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	60bb      	str	r3, [r7, #8]
 8015baa:	2300      	movs	r3, #0
 8015bac:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015bae:	f107 0308 	add.w	r3, r7, #8
 8015bb2:	2101      	movs	r1, #1
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7ef ff8b 	bl	8005ad0 <osSemaphoreCreate>
 8015bba:	4602      	mov	r2, r0
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d102      	bne.n	8015bce <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bcc:	e009      	b.n	8015be2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015bce:	78fb      	ldrb	r3, [r7, #3]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d105      	bne.n	8015be0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2100      	movs	r1, #0
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7ef ffac 	bl	8005b38 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015be0:	2300      	movs	r3, #0
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3710      	adds	r7, #16
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b084      	sub	sp, #16
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015bf4:	f7ef fe53 	bl	800589e <osKernelSysTick>
 8015bf8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d011      	beq.n	8015c24 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	6839      	ldr	r1, [r7, #0]
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ef ff96 	bl	8005b38 <osSemaphoreWait>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d105      	bne.n	8015c1e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015c12:	f7ef fe44 	bl	800589e <osKernelSysTick>
 8015c16:	4602      	mov	r2, r0
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	1ad3      	subs	r3, r2, r3
 8015c1c:	e012      	b.n	8015c44 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c22:	e00f      	b.n	8015c44 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015c24:	bf00      	nop
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7ef ff82 	bl	8005b38 <osSemaphoreWait>
 8015c34:	4603      	mov	r3, r0
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d1f5      	bne.n	8015c26 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015c3a:	f7ef fe30 	bl	800589e <osKernelSysTick>
 8015c3e:	4602      	mov	r2, r0
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015c44:	4618      	mov	r0, r3
 8015c46:	3710      	adds	r7, #16
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	bd80      	pop	{r7, pc}

08015c4c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b082      	sub	sp, #8
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7ef ffbb 	bl	8005bd4 <osSemaphoreRelease>
}
 8015c5e:	bf00      	nop
 8015c60:	3708      	adds	r7, #8
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}

08015c66 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015c66:	b580      	push	{r7, lr}
 8015c68:	b082      	sub	sp, #8
 8015c6a:	af00      	add	r7, sp, #0
 8015c6c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7ef ffe4 	bl	8005c40 <osSemaphoreDelete>
}
 8015c78:	bf00      	nop
 8015c7a:	3708      	adds	r7, #8
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015c80:	b480      	push	{r7}
 8015c82:	b083      	sub	sp, #12
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <sys_sem_valid+0x14>
    return 0;
 8015c90:	2300      	movs	r3, #0
 8015c92:	e000      	b.n	8015c96 <sys_sem_valid+0x16>
  else
    return 1;
 8015c94:	2301      	movs	r3, #1
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	370c      	adds	r7, #12
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca0:	4770      	bx	lr

08015ca2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015ca2:	b480      	push	{r7}
 8015ca4:	b083      	sub	sp, #12
 8015ca6:	af00      	add	r7, sp, #0
 8015ca8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2200      	movs	r2, #0
 8015cae:	601a      	str	r2, [r3, #0]
}
 8015cb0:	bf00      	nop
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr

08015cbc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015cc0:	4803      	ldr	r0, [pc, #12]	; (8015cd0 <sys_init+0x14>)
 8015cc2:	f7ef fe68 	bl	8005996 <osMutexCreate>
 8015cc6:	4602      	mov	r2, r0
 8015cc8:	4b02      	ldr	r3, [pc, #8]	; (8015cd4 <sys_init+0x18>)
 8015cca:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015ccc:	bf00      	nop
 8015cce:	bd80      	pop	{r7, pc}
 8015cd0:	0801f870 	.word	0x0801f870
 8015cd4:	20008fd0 	.word	0x20008fd0

08015cd8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	60bb      	str	r3, [r7, #8]
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015ce8:	f107 0308 	add.w	r3, r7, #8
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7ef fe52 	bl	8005996 <osMutexCreate>
 8015cf2:	4602      	mov	r2, r0
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d102      	bne.n	8015d06 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d04:	e000      	b.n	8015d08 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015d06:	2300      	movs	r3, #0
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3710      	adds	r7, #16
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7ef fe51 	bl	80059c8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015d26:	bf00      	nop
 8015d28:	3708      	adds	r7, #8
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}

08015d2e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015d2e:	b580      	push	{r7, lr}
 8015d30:	b082      	sub	sp, #8
 8015d32:	af00      	add	r7, sp, #0
 8015d34:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7ef fe92 	bl	8005a64 <osMutexRelease>
}
 8015d40:	bf00      	nop
 8015d42:	3708      	adds	r7, #8
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}

08015d48 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b08c      	sub	sp, #48	; 0x30
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
 8015d54:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015d56:	f107 0314 	add.w	r3, r7, #20
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	601a      	str	r2, [r3, #0]
 8015d5e:	605a      	str	r2, [r3, #4]
 8015d60:	609a      	str	r2, [r3, #8]
 8015d62:	60da      	str	r2, [r3, #12]
 8015d64:	611a      	str	r2, [r3, #16]
 8015d66:	615a      	str	r2, [r3, #20]
 8015d68:	619a      	str	r2, [r3, #24]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	617b      	str	r3, [r7, #20]
 8015d6e:	68bb      	ldr	r3, [r7, #8]
 8015d70:	61bb      	str	r3, [r7, #24]
 8015d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d74:	b21b      	sxth	r3, r3
 8015d76:	83bb      	strh	r3, [r7, #28]
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015d7c:	f107 0314 	add.w	r3, r7, #20
 8015d80:	6879      	ldr	r1, [r7, #4]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7ef fd9b 	bl	80058be <osThreadCreate>
 8015d88:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	3730      	adds	r7, #48	; 0x30
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}
	...

08015d94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015d98:	4b04      	ldr	r3, [pc, #16]	; (8015dac <sys_arch_protect+0x18>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7ef fe11 	bl	80059c8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015da6:	2301      	movs	r3, #1
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	20008fd0 	.word	0x20008fd0

08015db0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b082      	sub	sp, #8
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015db8:	4b04      	ldr	r3, [pc, #16]	; (8015dcc <sys_arch_unprotect+0x1c>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7ef fe51 	bl	8005a64 <osMutexRelease>
}
 8015dc2:	bf00      	nop
 8015dc4:	3708      	adds	r7, #8
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}
 8015dca:	bf00      	nop
 8015dcc:	20008fd0 	.word	0x20008fd0

08015dd0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b08e      	sub	sp, #56	; 0x38
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015ddc:	2200      	movs	r2, #0
 8015dde:	601a      	str	r2, [r3, #0]
 8015de0:	605a      	str	r2, [r3, #4]
 8015de2:	609a      	str	r2, [r3, #8]
 8015de4:	60da      	str	r2, [r3, #12]
 8015de6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	4a52      	ldr	r2, [pc, #328]	; (8015f38 <HAL_ETH_MspInit+0x168>)
 8015dee:	4293      	cmp	r3, r2
 8015df0:	f040 809e 	bne.w	8015f30 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8015df4:	4b51      	ldr	r3, [pc, #324]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015df8:	4a50      	ldr	r2, [pc, #320]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015dfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8015e00:	4b4e      	ldr	r3, [pc, #312]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015e08:	623b      	str	r3, [r7, #32]
 8015e0a:	6a3b      	ldr	r3, [r7, #32]
 8015e0c:	4b4b      	ldr	r3, [pc, #300]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e10:	4a4a      	ldr	r2, [pc, #296]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015e16:	6313      	str	r3, [r2, #48]	; 0x30
 8015e18:	4b48      	ldr	r3, [pc, #288]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015e20:	61fb      	str	r3, [r7, #28]
 8015e22:	69fb      	ldr	r3, [r7, #28]
 8015e24:	4b45      	ldr	r3, [pc, #276]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e28:	4a44      	ldr	r2, [pc, #272]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8015e30:	4b42      	ldr	r3, [pc, #264]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015e38:	61bb      	str	r3, [r7, #24]
 8015e3a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015e3c:	4b3f      	ldr	r3, [pc, #252]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e40:	4a3e      	ldr	r2, [pc, #248]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e42:	f043 0304 	orr.w	r3, r3, #4
 8015e46:	6313      	str	r3, [r2, #48]	; 0x30
 8015e48:	4b3c      	ldr	r3, [pc, #240]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e4c:	f003 0304 	and.w	r3, r3, #4
 8015e50:	617b      	str	r3, [r7, #20]
 8015e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e54:	4b39      	ldr	r3, [pc, #228]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e58:	4a38      	ldr	r2, [pc, #224]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e5a:	f043 0301 	orr.w	r3, r3, #1
 8015e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8015e60:	4b36      	ldr	r3, [pc, #216]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e64:	f003 0301 	and.w	r3, r3, #1
 8015e68:	613b      	str	r3, [r7, #16]
 8015e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015e6c:	4b33      	ldr	r3, [pc, #204]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e70:	4a32      	ldr	r2, [pc, #200]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e72:	f043 0302 	orr.w	r3, r3, #2
 8015e76:	6313      	str	r3, [r2, #48]	; 0x30
 8015e78:	4b30      	ldr	r3, [pc, #192]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e7c:	f003 0302 	and.w	r3, r3, #2
 8015e80:	60fb      	str	r3, [r7, #12]
 8015e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015e84:	4b2d      	ldr	r3, [pc, #180]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e88:	4a2c      	ldr	r2, [pc, #176]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8015e90:	4b2a      	ldr	r3, [pc, #168]	; (8015f3c <HAL_ETH_MspInit+0x16c>)
 8015e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e98:	60bb      	str	r3, [r7, #8]
 8015e9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8015e9c:	2332      	movs	r3, #50	; 0x32
 8015e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ea0:	2302      	movs	r3, #2
 8015ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ea8:	2303      	movs	r3, #3
 8015eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015eac:	230b      	movs	r3, #11
 8015eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015eb4:	4619      	mov	r1, r3
 8015eb6:	4822      	ldr	r0, [pc, #136]	; (8015f40 <HAL_ETH_MspInit+0x170>)
 8015eb8:	f7eb ff46 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8015ebc:	2386      	movs	r3, #134	; 0x86
 8015ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ec0:	2302      	movs	r3, #2
 8015ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ec8:	2303      	movs	r3, #3
 8015eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015ecc:	230b      	movs	r3, #11
 8015ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015ed4:	4619      	mov	r1, r3
 8015ed6:	481b      	ldr	r0, [pc, #108]	; (8015f44 <HAL_ETH_MspInit+0x174>)
 8015ed8:	f7eb ff36 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8015edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ee2:	2302      	movs	r3, #2
 8015ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015eea:	2303      	movs	r3, #3
 8015eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015eee:	230b      	movs	r3, #11
 8015ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8015ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4813      	ldr	r0, [pc, #76]	; (8015f48 <HAL_ETH_MspInit+0x178>)
 8015efa:	f7eb ff25 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8015efe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8015f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f04:	2302      	movs	r3, #2
 8015f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015f0c:	2303      	movs	r3, #3
 8015f0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8015f10:	230b      	movs	r3, #11
 8015f12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015f18:	4619      	mov	r1, r3
 8015f1a:	480c      	ldr	r0, [pc, #48]	; (8015f4c <HAL_ETH_MspInit+0x17c>)
 8015f1c:	f7eb ff14 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8015f20:	2200      	movs	r2, #0
 8015f22:	2105      	movs	r1, #5
 8015f24:	203d      	movs	r0, #61	; 0x3d
 8015f26:	f7ea fef3 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8015f2a:	203d      	movs	r0, #61	; 0x3d
 8015f2c:	f7ea ff0c 	bl	8000d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8015f30:	bf00      	nop
 8015f32:	3738      	adds	r7, #56	; 0x38
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bd80      	pop	{r7, pc}
 8015f38:	40028000 	.word	0x40028000
 8015f3c:	40023800 	.word	0x40023800
 8015f40:	40020800 	.word	0x40020800
 8015f44:	40020000 	.word	0x40020000
 8015f48:	40020400 	.word	0x40020400
 8015f4c:	40021800 	.word	0x40021800

08015f50 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8015f58:	4b04      	ldr	r3, [pc, #16]	; (8015f6c <HAL_ETH_RxCpltCallback+0x1c>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7ef fe39 	bl	8005bd4 <osSemaphoreRelease>
}
 8015f62:	bf00      	nop
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	200055e0 	.word	0x200055e0

08015f70 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8015f70:	b5b0      	push	{r4, r5, r7, lr}
 8015f72:	b090      	sub	sp, #64	; 0x40
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8015f7c:	4b5c      	ldr	r3, [pc, #368]	; (80160f0 <low_level_init+0x180>)
 8015f7e:	4a5d      	ldr	r2, [pc, #372]	; (80160f4 <low_level_init+0x184>)
 8015f80:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015f82:	4b5b      	ldr	r3, [pc, #364]	; (80160f0 <low_level_init+0x180>)
 8015f84:	2201      	movs	r2, #1
 8015f86:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8015f88:	4b59      	ldr	r3, [pc, #356]	; (80160f0 <low_level_init+0x180>)
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8015f94:	2380      	movs	r3, #128	; 0x80
 8015f96:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8015f9a:	23e1      	movs	r3, #225	; 0xe1
 8015f9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8015fac:	2300      	movs	r3, #0
 8015fae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8015fb2:	4a4f      	ldr	r2, [pc, #316]	; (80160f0 <low_level_init+0x180>)
 8015fb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015fb8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8015fba:	4b4d      	ldr	r3, [pc, #308]	; (80160f0 <low_level_init+0x180>)
 8015fbc:	2201      	movs	r2, #1
 8015fbe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8015fc0:	4b4b      	ldr	r3, [pc, #300]	; (80160f0 <low_level_init+0x180>)
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8015fc6:	4b4a      	ldr	r3, [pc, #296]	; (80160f0 <low_level_init+0x180>)
 8015fc8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015fcc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8015fce:	4848      	ldr	r0, [pc, #288]	; (80160f0 <low_level_init+0x180>)
 8015fd0:	f7ea fec8 	bl	8000d64 <HAL_ETH_Init>
 8015fd4:	4603      	mov	r3, r0
 8015fd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8015fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d108      	bne.n	8015ff4 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8015fe8:	f043 0304 	orr.w	r3, r3, #4
 8015fec:	b2da      	uxtb	r2, r3
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8015ff4:	2304      	movs	r3, #4
 8015ff6:	4a40      	ldr	r2, [pc, #256]	; (80160f8 <low_level_init+0x188>)
 8015ff8:	4940      	ldr	r1, [pc, #256]	; (80160fc <low_level_init+0x18c>)
 8015ffa:	483d      	ldr	r0, [pc, #244]	; (80160f0 <low_level_init+0x180>)
 8015ffc:	f7eb f84e 	bl	800109c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8016000:	2304      	movs	r3, #4
 8016002:	4a3f      	ldr	r2, [pc, #252]	; (8016100 <low_level_init+0x190>)
 8016004:	493f      	ldr	r1, [pc, #252]	; (8016104 <low_level_init+0x194>)
 8016006:	483a      	ldr	r0, [pc, #232]	; (80160f0 <low_level_init+0x180>)
 8016008:	f7eb f8b1 	bl	800116e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	2206      	movs	r2, #6
 8016010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8016014:	4b36      	ldr	r3, [pc, #216]	; (80160f0 <low_level_init+0x180>)
 8016016:	695b      	ldr	r3, [r3, #20]
 8016018:	781a      	ldrb	r2, [r3, #0]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8016020:	4b33      	ldr	r3, [pc, #204]	; (80160f0 <low_level_init+0x180>)
 8016022:	695b      	ldr	r3, [r3, #20]
 8016024:	785a      	ldrb	r2, [r3, #1]
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801602c:	4b30      	ldr	r3, [pc, #192]	; (80160f0 <low_level_init+0x180>)
 801602e:	695b      	ldr	r3, [r3, #20]
 8016030:	789a      	ldrb	r2, [r3, #2]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8016038:	4b2d      	ldr	r3, [pc, #180]	; (80160f0 <low_level_init+0x180>)
 801603a:	695b      	ldr	r3, [r3, #20]
 801603c:	78da      	ldrb	r2, [r3, #3]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8016044:	4b2a      	ldr	r3, [pc, #168]	; (80160f0 <low_level_init+0x180>)
 8016046:	695b      	ldr	r3, [r3, #20]
 8016048:	791a      	ldrb	r2, [r3, #4]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8016050:	4b27      	ldr	r3, [pc, #156]	; (80160f0 <low_level_init+0x180>)
 8016052:	695b      	ldr	r3, [r3, #20]
 8016054:	795a      	ldrb	r2, [r3, #5]
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8016062:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801606a:	f043 030a 	orr.w	r3, r3, #10
 801606e:	b2da      	uxtb	r2, r3
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8016076:	2300      	movs	r3, #0
 8016078:	62bb      	str	r3, [r7, #40]	; 0x28
 801607a:	2300      	movs	r3, #0
 801607c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801607e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016082:	2101      	movs	r1, #1
 8016084:	4618      	mov	r0, r3
 8016086:	f7ef fd23 	bl	8005ad0 <osSemaphoreCreate>
 801608a:	4602      	mov	r2, r0
 801608c:	4b1e      	ldr	r3, [pc, #120]	; (8016108 <low_level_init+0x198>)
 801608e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8016090:	4b1e      	ldr	r3, [pc, #120]	; (801610c <low_level_init+0x19c>)
 8016092:	f107 040c 	add.w	r4, r7, #12
 8016096:	461d      	mov	r5, r3
 8016098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801609a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801609c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80160a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80160a4:	f107 030c 	add.w	r3, r7, #12
 80160a8:	6879      	ldr	r1, [r7, #4]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7ef fc07 	bl	80058be <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80160b0:	480f      	ldr	r0, [pc, #60]	; (80160f0 <low_level_init+0x180>)
 80160b2:	f7eb fb84 	bl	80017be <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80160b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160ba:	461a      	mov	r2, r3
 80160bc:	211d      	movs	r1, #29
 80160be:	480c      	ldr	r0, [pc, #48]	; (80160f0 <low_level_init+0x180>)
 80160c0:	f7eb faaf 	bl	8001622 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80160c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c6:	f043 030b 	orr.w	r3, r3, #11
 80160ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80160cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ce:	461a      	mov	r2, r3
 80160d0:	211d      	movs	r1, #29
 80160d2:	4807      	ldr	r0, [pc, #28]	; (80160f0 <low_level_init+0x180>)
 80160d4:	f7eb fb0d 	bl	80016f2 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80160d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80160dc:	461a      	mov	r2, r3
 80160de:	211d      	movs	r1, #29
 80160e0:	4803      	ldr	r0, [pc, #12]	; (80160f0 <low_level_init+0x180>)
 80160e2:	f7eb fa9e 	bl	8001622 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80160e6:	bf00      	nop
 80160e8:	3740      	adds	r7, #64	; 0x40
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bdb0      	pop	{r4, r5, r7, pc}
 80160ee:	bf00      	nop
 80160f0:	2000a8a4 	.word	0x2000a8a4
 80160f4:	40028000 	.word	0x40028000
 80160f8:	2000a8ec 	.word	0x2000a8ec
 80160fc:	20008fd4 	.word	0x20008fd4
 8016100:	20009054 	.word	0x20009054
 8016104:	2000a824 	.word	0x2000a824
 8016108:	200055e0 	.word	0x200055e0
 801610c:	0801f500 	.word	0x0801f500

08016110 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b08a      	sub	sp, #40	; 0x28
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801611a:	4b4b      	ldr	r3, [pc, #300]	; (8016248 <low_level_output+0x138>)
 801611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801611e:	689b      	ldr	r3, [r3, #8]
 8016120:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8016122:	2300      	movs	r3, #0
 8016124:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8016126:	2300      	movs	r3, #0
 8016128:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 801612a:	2300      	movs	r3, #0
 801612c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 801612e:	2300      	movs	r3, #0
 8016130:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8016132:	4b45      	ldr	r3, [pc, #276]	; (8016248 <low_level_output+0x138>)
 8016134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016136:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8016138:	2300      	movs	r3, #0
 801613a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	623b      	str	r3, [r7, #32]
 8016140:	e05a      	b.n	80161f8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	2b00      	cmp	r3, #0
 8016148:	da03      	bge.n	8016152 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801614a:	23f8      	movs	r3, #248	; 0xf8
 801614c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8016150:	e05c      	b.n	801620c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8016152:	6a3b      	ldr	r3, [r7, #32]
 8016154:	895b      	ldrh	r3, [r3, #10]
 8016156:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8016158:	2300      	movs	r3, #0
 801615a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801615c:	e02f      	b.n	80161be <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801615e:	69fa      	ldr	r2, [r7, #28]
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	18d0      	adds	r0, r2, r3
 8016164:	6a3b      	ldr	r3, [r7, #32]
 8016166:	685a      	ldr	r2, [r3, #4]
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	18d1      	adds	r1, r2, r3
 801616c:	693a      	ldr	r2, [r7, #16]
 801616e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8016172:	1a9b      	subs	r3, r3, r2
 8016174:	461a      	mov	r2, r3
 8016176:	f001 fe0b 	bl	8017d90 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801617a:	69bb      	ldr	r3, [r7, #24]
 801617c:	68db      	ldr	r3, [r3, #12]
 801617e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016180:	69bb      	ldr	r3, [r7, #24]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	2b00      	cmp	r3, #0
 8016186:	da03      	bge.n	8016190 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8016188:	23f8      	movs	r3, #248	; 0xf8
 801618a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801618e:	e03d      	b.n	801620c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8016190:	69bb      	ldr	r3, [r7, #24]
 8016192:	689b      	ldr	r3, [r3, #8]
 8016194:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8016196:	693a      	ldr	r2, [r7, #16]
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	4413      	add	r3, r2
 801619c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80161a0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80161a2:	68ba      	ldr	r2, [r7, #8]
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	1ad3      	subs	r3, r2, r3
 80161a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80161ac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80161ae:	697a      	ldr	r2, [r7, #20]
 80161b0:	693b      	ldr	r3, [r7, #16]
 80161b2:	1ad3      	subs	r3, r2, r3
 80161b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80161b8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80161ba:	2300      	movs	r3, #0
 80161bc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80161be:	68fa      	ldr	r2, [r7, #12]
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	4413      	add	r3, r2
 80161c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d8c8      	bhi.n	801615e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80161cc:	69fa      	ldr	r2, [r7, #28]
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	18d0      	adds	r0, r2, r3
 80161d2:	6a3b      	ldr	r3, [r7, #32]
 80161d4:	685a      	ldr	r2, [r3, #4]
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	4413      	add	r3, r2
 80161da:	68fa      	ldr	r2, [r7, #12]
 80161dc:	4619      	mov	r1, r3
 80161de:	f001 fdd7 	bl	8017d90 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80161e2:	693a      	ldr	r2, [r7, #16]
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	4413      	add	r3, r2
 80161e8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80161ea:	697a      	ldr	r2, [r7, #20]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	4413      	add	r3, r2
 80161f0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80161f2:	6a3b      	ldr	r3, [r7, #32]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	623b      	str	r3, [r7, #32]
 80161f8:	6a3b      	ldr	r3, [r7, #32]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d1a1      	bne.n	8016142 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80161fe:	6979      	ldr	r1, [r7, #20]
 8016200:	4811      	ldr	r0, [pc, #68]	; (8016248 <low_level_output+0x138>)
 8016202:	f7eb f821 	bl	8001248 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8016206:	2300      	movs	r3, #0
 8016208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 801620c:	4b0e      	ldr	r3, [pc, #56]	; (8016248 <low_level_output+0x138>)
 801620e:	681a      	ldr	r2, [r3, #0]
 8016210:	f241 0314 	movw	r3, #4116	; 0x1014
 8016214:	4413      	add	r3, r2
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f003 0320 	and.w	r3, r3, #32
 801621c:	2b00      	cmp	r3, #0
 801621e:	d00d      	beq.n	801623c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8016220:	4b09      	ldr	r3, [pc, #36]	; (8016248 <low_level_output+0x138>)
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	f241 0314 	movw	r3, #4116	; 0x1014
 8016228:	4413      	add	r3, r2
 801622a:	2220      	movs	r2, #32
 801622c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 801622e:	4b06      	ldr	r3, [pc, #24]	; (8016248 <low_level_output+0x138>)
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	f241 0304 	movw	r3, #4100	; 0x1004
 8016236:	4413      	add	r3, r2
 8016238:	2200      	movs	r2, #0
 801623a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 801623c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016240:	4618      	mov	r0, r3
 8016242:	3728      	adds	r7, #40	; 0x28
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}
 8016248:	2000a8a4 	.word	0x2000a8a4

0801624c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b08c      	sub	sp, #48	; 0x30
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8016254:	2300      	movs	r3, #0
 8016256:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8016258:	2300      	movs	r3, #0
 801625a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 801625c:	2300      	movs	r3, #0
 801625e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8016260:	2300      	movs	r3, #0
 8016262:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8016264:	2300      	movs	r3, #0
 8016266:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8016268:	2300      	movs	r3, #0
 801626a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 801626c:	2300      	movs	r3, #0
 801626e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8016270:	484f      	ldr	r0, [pc, #316]	; (80163b0 <low_level_input+0x164>)
 8016272:	f7eb f8d3 	bl	800141c <HAL_ETH_GetReceivedFrame_IT>
 8016276:	4603      	mov	r3, r0
 8016278:	2b00      	cmp	r3, #0
 801627a:	d001      	beq.n	8016280 <low_level_input+0x34>
  
    return NULL;
 801627c:	2300      	movs	r3, #0
 801627e:	e092      	b.n	80163a6 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8016280:	4b4b      	ldr	r3, [pc, #300]	; (80163b0 <low_level_input+0x164>)
 8016282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016284:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8016286:	4b4a      	ldr	r3, [pc, #296]	; (80163b0 <low_level_input+0x164>)
 8016288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801628a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 801628c:	89fb      	ldrh	r3, [r7, #14]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d007      	beq.n	80162a2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8016292:	89fb      	ldrh	r3, [r7, #14]
 8016294:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8016298:	4619      	mov	r1, r3
 801629a:	2000      	movs	r0, #0
 801629c:	f7f5 fe84 	bl	800bfa8 <pbuf_alloc>
 80162a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80162a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d04b      	beq.n	8016340 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80162a8:	4b41      	ldr	r3, [pc, #260]	; (80163b0 <low_level_input+0x164>)
 80162aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162ac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80162b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80162b6:	e040      	b.n	801633a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80162b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ba:	895b      	ldrh	r3, [r3, #10]
 80162bc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80162be:	2300      	movs	r3, #0
 80162c0:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80162c2:	e021      	b.n	8016308 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80162c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c6:	685a      	ldr	r2, [r3, #4]
 80162c8:	69bb      	ldr	r3, [r7, #24]
 80162ca:	18d0      	adds	r0, r2, r3
 80162cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	18d1      	adds	r1, r2, r3
 80162d2:	69fa      	ldr	r2, [r7, #28]
 80162d4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80162d8:	1a9b      	subs	r3, r3, r2
 80162da:	461a      	mov	r2, r3
 80162dc:	f001 fd58 	bl	8017d90 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80162e0:	6a3b      	ldr	r3, [r7, #32]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80162e6:	6a3b      	ldr	r3, [r7, #32]
 80162e8:	689b      	ldr	r3, [r3, #8]
 80162ea:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80162ec:	69fa      	ldr	r2, [r7, #28]
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	4413      	add	r3, r2
 80162f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80162f6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80162f8:	69ba      	ldr	r2, [r7, #24]
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	1ad3      	subs	r3, r2, r3
 80162fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8016302:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8016304:	2300      	movs	r3, #0
 8016306:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8016308:	697a      	ldr	r2, [r7, #20]
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	4413      	add	r3, r2
 801630e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8016312:	4293      	cmp	r3, r2
 8016314:	d8d6      	bhi.n	80162c4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8016316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016318:	685a      	ldr	r2, [r3, #4]
 801631a:	69bb      	ldr	r3, [r7, #24]
 801631c:	18d0      	adds	r0, r2, r3
 801631e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016320:	69fb      	ldr	r3, [r7, #28]
 8016322:	4413      	add	r3, r2
 8016324:	697a      	ldr	r2, [r7, #20]
 8016326:	4619      	mov	r1, r3
 8016328:	f001 fd32 	bl	8017d90 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 801632c:	69fa      	ldr	r2, [r7, #28]
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	4413      	add	r3, r2
 8016332:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8016334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	62bb      	str	r3, [r7, #40]	; 0x28
 801633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801633c:	2b00      	cmp	r3, #0
 801633e:	d1bb      	bne.n	80162b8 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8016340:	4b1b      	ldr	r3, [pc, #108]	; (80163b0 <low_level_input+0x164>)
 8016342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016344:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8016346:	2300      	movs	r3, #0
 8016348:	613b      	str	r3, [r7, #16]
 801634a:	e00b      	b.n	8016364 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801634c:	6a3b      	ldr	r3, [r7, #32]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016354:	6a3b      	ldr	r3, [r7, #32]
 8016356:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8016358:	6a3b      	ldr	r3, [r7, #32]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801635e:	693b      	ldr	r3, [r7, #16]
 8016360:	3301      	adds	r3, #1
 8016362:	613b      	str	r3, [r7, #16]
 8016364:	4b12      	ldr	r3, [pc, #72]	; (80163b0 <low_level_input+0x164>)
 8016366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016368:	693a      	ldr	r2, [r7, #16]
 801636a:	429a      	cmp	r2, r3
 801636c:	d3ee      	bcc.n	801634c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 801636e:	4b10      	ldr	r3, [pc, #64]	; (80163b0 <low_level_input+0x164>)
 8016370:	2200      	movs	r2, #0
 8016372:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8016374:	4b0e      	ldr	r3, [pc, #56]	; (80163b0 <low_level_input+0x164>)
 8016376:	681a      	ldr	r2, [r3, #0]
 8016378:	f241 0314 	movw	r3, #4116	; 0x1014
 801637c:	4413      	add	r3, r2
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016384:	2b00      	cmp	r3, #0
 8016386:	d00d      	beq.n	80163a4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8016388:	4b09      	ldr	r3, [pc, #36]	; (80163b0 <low_level_input+0x164>)
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	f241 0314 	movw	r3, #4116	; 0x1014
 8016390:	4413      	add	r3, r2
 8016392:	2280      	movs	r2, #128	; 0x80
 8016394:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8016396:	4b06      	ldr	r3, [pc, #24]	; (80163b0 <low_level_input+0x164>)
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	f241 0308 	movw	r3, #4104	; 0x1008
 801639e:	4413      	add	r3, r2
 80163a0:	2200      	movs	r2, #0
 80163a2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80163a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3730      	adds	r7, #48	; 0x30
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	2000a8a4 	.word	0x2000a8a4

080163b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b084      	sub	sp, #16
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80163c0:	4b12      	ldr	r3, [pc, #72]	; (801640c <ethernetif_input+0x58>)
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7ef fbb5 	bl	8005b38 <osSemaphoreWait>
 80163ce:	4603      	mov	r3, r0
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d1f5      	bne.n	80163c0 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 80163d4:	480e      	ldr	r0, [pc, #56]	; (8016410 <ethernetif_input+0x5c>)
 80163d6:	f7ff fc9b 	bl	8015d10 <sys_mutex_lock>
        p = low_level_input( netif );
 80163da:	68f8      	ldr	r0, [r7, #12]
 80163dc:	f7ff ff36 	bl	801624c <low_level_input>
 80163e0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80163e2:	68bb      	ldr	r3, [r7, #8]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d00a      	beq.n	80163fe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	691b      	ldr	r3, [r3, #16]
 80163ec:	68f9      	ldr	r1, [r7, #12]
 80163ee:	68b8      	ldr	r0, [r7, #8]
 80163f0:	4798      	blx	r3
 80163f2:	4603      	mov	r3, r0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d002      	beq.n	80163fe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80163f8:	68b8      	ldr	r0, [r7, #8]
 80163fa:	f7f6 f8b5 	bl	800c568 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80163fe:	4804      	ldr	r0, [pc, #16]	; (8016410 <ethernetif_input+0x5c>)
 8016400:	f7ff fc95 	bl	8015d2e <sys_mutex_unlock>
      } while(p!=NULL);
 8016404:	68bb      	ldr	r3, [r7, #8]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d1e4      	bne.n	80163d4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801640a:	e7d9      	b.n	80163c0 <ethernetif_input+0xc>
 801640c:	200055e0 	.word	0x200055e0
 8016410:	20005898 	.word	0x20005898

08016414 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b082      	sub	sp, #8
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d106      	bne.n	8016430 <ethernetif_init+0x1c>
 8016422:	4b0e      	ldr	r3, [pc, #56]	; (801645c <ethernetif_init+0x48>)
 8016424:	f240 2235 	movw	r2, #565	; 0x235
 8016428:	490d      	ldr	r1, [pc, #52]	; (8016460 <ethernetif_init+0x4c>)
 801642a:	480e      	ldr	r0, [pc, #56]	; (8016464 <ethernetif_init+0x50>)
 801642c:	f002 faf0 	bl	8018a10 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2273      	movs	r2, #115	; 0x73
 8016434:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2274      	movs	r2, #116	; 0x74
 801643c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	4a09      	ldr	r2, [pc, #36]	; (8016468 <ethernetif_init+0x54>)
 8016444:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	4a08      	ldr	r2, [pc, #32]	; (801646c <ethernetif_init+0x58>)
 801644a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f7ff fd8f 	bl	8015f70 <low_level_init>

  return ERR_OK;
 8016452:	2300      	movs	r3, #0
}
 8016454:	4618      	mov	r0, r3
 8016456:	3708      	adds	r7, #8
 8016458:	46bd      	mov	sp, r7
 801645a:	bd80      	pop	{r7, pc}
 801645c:	0801f51c 	.word	0x0801f51c
 8016460:	0801f530 	.word	0x0801f530
 8016464:	0801f540 	.word	0x0801f540
 8016468:	08013d31 	.word	0x08013d31
 801646c:	08016111 	.word	0x08016111

08016470 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8016474:	f7ea f8de 	bl	8000634 <HAL_GetTick>
 8016478:	4603      	mov	r3, r0
}
 801647a:	4618      	mov	r0, r3
 801647c:	bd80      	pop	{r7, pc}
	...

08016480 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8016480:	b480      	push	{r7}
 8016482:	b085      	sub	sp, #20
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	4a07      	ldr	r2, [pc, #28]	; (80164ac <vApplicationGetIdleTaskMemory+0x2c>)
 8016490:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8016492:	68bb      	ldr	r3, [r7, #8]
 8016494:	4a06      	ldr	r2, [pc, #24]	; (80164b0 <vApplicationGetIdleTaskMemory+0x30>)
 8016496:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2280      	movs	r2, #128	; 0x80
 801649c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 801649e:	bf00      	nop
 80164a0:	3714      	adds	r7, #20
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop
 80164ac:	200055e4 	.word	0x200055e4
 80164b0:	20005638 	.word	0x20005638

080164b4 <http_server_serve>:
  * @brief serve tcp connection
  * @param conn: pointer on connection structure
  * @retval None
  */
void http_server_serve(struct netconn *conn)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b088      	sub	sp, #32
 80164b8:	af02      	add	r7, sp, #8
 80164ba:	6078      	str	r0, [r7, #4]
  char* buf;
  u16_t buflen;

  /* Read the data from the port, blocking if nothing yet there.
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 80164bc:	f107 0310 	add.w	r3, r7, #16
 80164c0:	4619      	mov	r1, r3
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7f2 fd8e 	bl	8008fe4 <netconn_recv>
 80164c8:	4603      	mov	r3, r0
 80164ca:	75fb      	strb	r3, [r7, #23]

  if (recv_err == ERR_OK)
 80164cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	f040 8201 	bne.w	80168d8 <http_server_serve+0x424>
  {
    if (netconn_err(conn) == ERR_OK)
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f7f2 ff0d 	bl	80092f6 <netconn_err>
 80164dc:	4603      	mov	r3, r0
 80164de:	2b00      	cmp	r3, #0
 80164e0:	f040 81fa 	bne.w	80168d8 <http_server_serve+0x424>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	f107 020a 	add.w	r2, r7, #10
 80164ea:	f107 010c 	add.w	r1, r7, #12
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7f4 fb0c 	bl	800ab0c <netbuf_data>

      /* Is this an HTTP GET command? (only check the first 5 chars, since
      there are other formats for GET, and we're keeping it very simple )*/
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 80164f4:	897b      	ldrh	r3, [r7, #10]
 80164f6:	2b04      	cmp	r3, #4
 80164f8:	f240 81ee 	bls.w	80168d8 <http_server_serve+0x424>
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	2205      	movs	r2, #5
 8016500:	49b5      	ldr	r1, [pc, #724]	; (80167d8 <http_server_serve+0x324>)
 8016502:	4618      	mov	r0, r3
 8016504:	f002 faf6 	bl	8018af4 <strncmp>
 8016508:	4603      	mov	r3, r0
 801650a:	2b00      	cmp	r3, #0
 801650c:	f040 81e4 	bne.w	80168d8 <http_server_serve+0x424>
      {

    	  if (strncmp((char const *)buf,"GET /index.html",15)==0) {
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	220f      	movs	r2, #15
 8016514:	49b1      	ldr	r1, [pc, #708]	; (80167dc <http_server_serve+0x328>)
 8016516:	4618      	mov	r0, r3
 8016518:	f002 faec 	bl	8018af4 <strncmp>
 801651c:	4603      	mov	r3, r0
 801651e:	2b00      	cmp	r3, #0
 8016520:	d108      	bne.n	8016534 <http_server_serve+0x80>
    		  netconn_write(conn, (const unsigned char*)index_html, index_html_len, NETCONN_NOCOPY);
 8016522:	4baf      	ldr	r3, [pc, #700]	; (80167e0 <http_server_serve+0x32c>)
 8016524:	681a      	ldr	r2, [r3, #0]
 8016526:	2300      	movs	r3, #0
 8016528:	9300      	str	r3, [sp, #0]
 801652a:	2300      	movs	r3, #0
 801652c:	49ad      	ldr	r1, [pc, #692]	; (80167e4 <http_server_serve+0x330>)
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f7f2 fdd2 	bl	80090d8 <netconn_write_partly>
    	  }
    	  if (strncmp((char const *)buf,"GET /led1", 9) == 0) {
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	2209      	movs	r2, #9
 8016538:	49ab      	ldr	r1, [pc, #684]	; (80167e8 <http_server_serve+0x334>)
 801653a:	4618      	mov	r0, r3
 801653c:	f002 fada 	bl	8018af4 <strncmp>
 8016540:	4603      	mov	r3, r0
 8016542:	2b00      	cmp	r3, #0
 8016544:	d10f      	bne.n	8016566 <http_server_serve+0xb2>
    		  t1 =HAL_GetTick();
 8016546:	f7ea f875 	bl	8000634 <HAL_GetTick>
 801654a:	4602      	mov	r2, r0
 801654c:	4ba7      	ldr	r3, [pc, #668]	; (80167ec <http_server_serve+0x338>)
 801654e:	601a      	str	r2, [r3, #0]
    		  __HAL_TIM_SetCounter(&htim4, 0);
 8016550:	4ba7      	ldr	r3, [pc, #668]	; (80167f0 <http_server_serve+0x33c>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2200      	movs	r2, #0
 8016556:	625a      	str	r2, [r3, #36]	; 0x24
    		  xSemaphoreGive(myBinarySem01Handle);
 8016558:	4ba6      	ldr	r3, [pc, #664]	; (80167f4 <http_server_serve+0x340>)
 801655a:	6818      	ldr	r0, [r3, #0]
 801655c:	2300      	movs	r3, #0
 801655e:	2200      	movs	r2, #0
 8016560:	2100      	movs	r1, #0
 8016562:	f7ef fecf 	bl	8006304 <xQueueGenericSend>
    	  }

    	  if (strncmp((char const *)buf,"GET /fun1", 9) == 0) {
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	2209      	movs	r2, #9
 801656a:	49a3      	ldr	r1, [pc, #652]	; (80167f8 <http_server_serve+0x344>)
 801656c:	4618      	mov	r0, r3
 801656e:	f002 fac1 	bl	8018af4 <strncmp>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d106      	bne.n	8016586 <http_server_serve+0xd2>

    	     	    xSemaphoreGive(myBinarySem04Handle);
 8016578:	4ba0      	ldr	r3, [pc, #640]	; (80167fc <http_server_serve+0x348>)
 801657a:	6818      	ldr	r0, [r3, #0]
 801657c:	2300      	movs	r3, #0
 801657e:	2200      	movs	r2, #0
 8016580:	2100      	movs	r1, #0
 8016582:	f7ef febf 	bl	8006304 <xQueueGenericSend>
    	     	    }
    	  if (strncmp((char const *)buf,"GET /fun2", 9) == 0) {
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2209      	movs	r2, #9
 801658a:	499d      	ldr	r1, [pc, #628]	; (8016800 <http_server_serve+0x34c>)
 801658c:	4618      	mov	r0, r3
 801658e:	f002 fab1 	bl	8018af4 <strncmp>
 8016592:	4603      	mov	r3, r0
 8016594:	2b00      	cmp	r3, #0
 8016596:	d106      	bne.n	80165a6 <http_server_serve+0xf2>

    	      	     	    xSemaphoreGive(myBinarySem05Handle);
 8016598:	4b9a      	ldr	r3, [pc, #616]	; (8016804 <http_server_serve+0x350>)
 801659a:	6818      	ldr	r0, [r3, #0]
 801659c:	2300      	movs	r3, #0
 801659e:	2200      	movs	r2, #0
 80165a0:	2100      	movs	r1, #0
 80165a2:	f7ef feaf 	bl	8006304 <xQueueGenericSend>
    	      	     	    }
    	  if (strncmp((char const *)buf,"GET /fun3", 9) == 0) {
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2209      	movs	r2, #9
 80165aa:	4997      	ldr	r1, [pc, #604]	; (8016808 <http_server_serve+0x354>)
 80165ac:	4618      	mov	r0, r3
 80165ae:	f002 faa1 	bl	8018af4 <strncmp>
 80165b2:	4603      	mov	r3, r0
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d106      	bne.n	80165c6 <http_server_serve+0x112>

    	      	      	     	    xSemaphoreGive(myBinarySem06Handle);
 80165b8:	4b94      	ldr	r3, [pc, #592]	; (801680c <http_server_serve+0x358>)
 80165ba:	6818      	ldr	r0, [r3, #0]
 80165bc:	2300      	movs	r3, #0
 80165be:	2200      	movs	r2, #0
 80165c0:	2100      	movs	r1, #0
 80165c2:	f7ef fe9f 	bl	8006304 <xQueueGenericSend>
    	      	      	     	    }

    	  if (strncmp((char const *)buf,"GET /led2", 9) == 0) {
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	2209      	movs	r2, #9
 80165ca:	4991      	ldr	r1, [pc, #580]	; (8016810 <http_server_serve+0x35c>)
 80165cc:	4618      	mov	r0, r3
 80165ce:	f002 fa91 	bl	8018af4 <strncmp>
 80165d2:	4603      	mov	r3, r0
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d106      	bne.n	80165e6 <http_server_serve+0x132>
    		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
    		  xSemaphoreGive(myBinarySem02Handle);
 80165d8:	4b8e      	ldr	r3, [pc, #568]	; (8016814 <http_server_serve+0x360>)
 80165da:	6818      	ldr	r0, [r3, #0]
 80165dc:	2300      	movs	r3, #0
 80165de:	2200      	movs	r2, #0
 80165e0:	2100      	movs	r1, #0
 80165e2:	f7ef fe8f 	bl	8006304 <xQueueGenericSend>

    	  }
    	  if (strncmp((char const *)buf,"GET /led3", 9) == 0) {
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2209      	movs	r2, #9
 80165ea:	498b      	ldr	r1, [pc, #556]	; (8016818 <http_server_serve+0x364>)
 80165ec:	4618      	mov	r0, r3
 80165ee:	f002 fa81 	bl	8018af4 <strncmp>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d106      	bne.n	8016606 <http_server_serve+0x152>
    		  //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    		  xSemaphoreGive(myBinarySem03Handle);
 80165f8:	4b88      	ldr	r3, [pc, #544]	; (801681c <http_server_serve+0x368>)
 80165fa:	6818      	ldr	r0, [r3, #0]
 80165fc:	2300      	movs	r3, #0
 80165fe:	2200      	movs	r2, #0
 8016600:	2100      	movs	r1, #0
 8016602:	f7ef fe7f 	bl	8006304 <xQueueGenericSend>
    	  }


    	  if (strncmp((char const *)buf,"GET /out1", 9) == 0) {
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	2209      	movs	r2, #9
 801660a:	4985      	ldr	r1, [pc, #532]	; (8016820 <http_server_serve+0x36c>)
 801660c:	4618      	mov	r0, r3
 801660e:	f002 fa71 	bl	8018af4 <strncmp>
 8016612:	4603      	mov	r3, r0
 8016614:	2b00      	cmp	r3, #0
 8016616:	d106      	bne.n	8016626 <http_server_serve+0x172>
    		  	  out = out|Out0_Pin;
 8016618:	4b82      	ldr	r3, [pc, #520]	; (8016824 <http_server_serve+0x370>)
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	f043 0301 	orr.w	r3, r3, #1
 8016620:	b2da      	uxtb	r2, r3
 8016622:	4b80      	ldr	r3, [pc, #512]	; (8016824 <http_server_serve+0x370>)
 8016624:	701a      	strb	r2, [r3, #0]
    	  }
    	  if (strncmp((char const *)buf,"GET /out2", 9) == 0) {
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2209      	movs	r2, #9
 801662a:	497f      	ldr	r1, [pc, #508]	; (8016828 <http_server_serve+0x374>)
 801662c:	4618      	mov	r0, r3
 801662e:	f002 fa61 	bl	8018af4 <strncmp>
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d106      	bne.n	8016646 <http_server_serve+0x192>
    		  	  out = out|Out1_Pin;
 8016638:	4b7a      	ldr	r3, [pc, #488]	; (8016824 <http_server_serve+0x370>)
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	f043 0302 	orr.w	r3, r3, #2
 8016640:	b2da      	uxtb	r2, r3
 8016642:	4b78      	ldr	r3, [pc, #480]	; (8016824 <http_server_serve+0x370>)
 8016644:	701a      	strb	r2, [r3, #0]
    	  }

    	  if (strncmp((char const *)buf,"GET /out3", 9) == 0) {
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	2209      	movs	r2, #9
 801664a:	4978      	ldr	r1, [pc, #480]	; (801682c <http_server_serve+0x378>)
 801664c:	4618      	mov	r0, r3
 801664e:	f002 fa51 	bl	8018af4 <strncmp>
 8016652:	4603      	mov	r3, r0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d106      	bne.n	8016666 <http_server_serve+0x1b2>
    		  	  out = out|Out2_Pin;
 8016658:	4b72      	ldr	r3, [pc, #456]	; (8016824 <http_server_serve+0x370>)
 801665a:	781b      	ldrb	r3, [r3, #0]
 801665c:	f043 0304 	orr.w	r3, r3, #4
 8016660:	b2da      	uxtb	r2, r3
 8016662:	4b70      	ldr	r3, [pc, #448]	; (8016824 <http_server_serve+0x370>)
 8016664:	701a      	strb	r2, [r3, #0]
    	  }
    	  if (strncmp((char const *)buf,"GET /out4", 9) == 0) {
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2209      	movs	r2, #9
 801666a:	4971      	ldr	r1, [pc, #452]	; (8016830 <http_server_serve+0x37c>)
 801666c:	4618      	mov	r0, r3
 801666e:	f002 fa41 	bl	8018af4 <strncmp>
 8016672:	4603      	mov	r3, r0
 8016674:	2b00      	cmp	r3, #0
 8016676:	d106      	bne.n	8016686 <http_server_serve+0x1d2>
    		  	  out = out|Out3_Pin;
 8016678:	4b6a      	ldr	r3, [pc, #424]	; (8016824 <http_server_serve+0x370>)
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	f043 0308 	orr.w	r3, r3, #8
 8016680:	b2da      	uxtb	r2, r3
 8016682:	4b68      	ldr	r3, [pc, #416]	; (8016824 <http_server_serve+0x370>)
 8016684:	701a      	strb	r2, [r3, #0]
    	  }
    	  if (strncmp((char const *)buf,"GET /out5", 9) == 0) {
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2209      	movs	r2, #9
 801668a:	496a      	ldr	r1, [pc, #424]	; (8016834 <http_server_serve+0x380>)
 801668c:	4618      	mov	r0, r3
 801668e:	f002 fa31 	bl	8018af4 <strncmp>
 8016692:	4603      	mov	r3, r0
 8016694:	2b00      	cmp	r3, #0
 8016696:	d106      	bne.n	80166a6 <http_server_serve+0x1f2>
    	    	   out = out|Out4_Pin;
 8016698:	4b62      	ldr	r3, [pc, #392]	; (8016824 <http_server_serve+0x370>)
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	f043 0310 	orr.w	r3, r3, #16
 80166a0:	b2da      	uxtb	r2, r3
 80166a2:	4b60      	ldr	r3, [pc, #384]	; (8016824 <http_server_serve+0x370>)
 80166a4:	701a      	strb	r2, [r3, #0]
    	  }
    	  if (strncmp((char const *)buf,"GET /out6", 9) == 0) {
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	2209      	movs	r2, #9
 80166aa:	4963      	ldr	r1, [pc, #396]	; (8016838 <http_server_serve+0x384>)
 80166ac:	4618      	mov	r0, r3
 80166ae:	f002 fa21 	bl	8018af4 <strncmp>
 80166b2:	4603      	mov	r3, r0
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d106      	bne.n	80166c6 <http_server_serve+0x212>
    	    	   out = out|Out5_Pin;
 80166b8:	4b5a      	ldr	r3, [pc, #360]	; (8016824 <http_server_serve+0x370>)
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	f043 0320 	orr.w	r3, r3, #32
 80166c0:	b2da      	uxtb	r2, r3
 80166c2:	4b58      	ldr	r3, [pc, #352]	; (8016824 <http_server_serve+0x370>)
 80166c4:	701a      	strb	r2, [r3, #0]
    	   }

    	   if (strncmp((char const *)buf,"GET /out7", 9) == 0) {
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	2209      	movs	r2, #9
 80166ca:	495c      	ldr	r1, [pc, #368]	; (801683c <http_server_serve+0x388>)
 80166cc:	4618      	mov	r0, r3
 80166ce:	f002 fa11 	bl	8018af4 <strncmp>
 80166d2:	4603      	mov	r3, r0
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d106      	bne.n	80166e6 <http_server_serve+0x232>
    	    	   out = out|Out6_Pin;
 80166d8:	4b52      	ldr	r3, [pc, #328]	; (8016824 <http_server_serve+0x370>)
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166e0:	b2da      	uxtb	r2, r3
 80166e2:	4b50      	ldr	r3, [pc, #320]	; (8016824 <http_server_serve+0x370>)
 80166e4:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /out8", 9) == 0) {
 80166e6:	68fb      	ldr	r3, [r7, #12]
 80166e8:	2209      	movs	r2, #9
 80166ea:	4955      	ldr	r1, [pc, #340]	; (8016840 <http_server_serve+0x38c>)
 80166ec:	4618      	mov	r0, r3
 80166ee:	f002 fa01 	bl	8018af4 <strncmp>
 80166f2:	4603      	mov	r3, r0
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d106      	bne.n	8016706 <http_server_serve+0x252>
    	    	   out = out|Out7_Pin;
 80166f8:	4b4a      	ldr	r3, [pc, #296]	; (8016824 <http_server_serve+0x370>)
 80166fa:	781b      	ldrb	r3, [r3, #0]
 80166fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016700:	b2da      	uxtb	r2, r3
 8016702:	4b48      	ldr	r3, [pc, #288]	; (8016824 <http_server_serve+0x370>)
 8016704:	701a      	strb	r2, [r3, #0]
    	   }


    	   if (strncmp((char const *)buf,"GET /nout1", 9) == 0) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	2209      	movs	r2, #9
 801670a:	494e      	ldr	r1, [pc, #312]	; (8016844 <http_server_serve+0x390>)
 801670c:	4618      	mov	r0, r3
 801670e:	f002 f9f1 	bl	8018af4 <strncmp>
 8016712:	4603      	mov	r3, r0
 8016714:	2b00      	cmp	r3, #0
 8016716:	d109      	bne.n	801672c <http_server_serve+0x278>
    		   Test = ~(1 << 0);
 8016718:	4b4b      	ldr	r3, [pc, #300]	; (8016848 <http_server_serve+0x394>)
 801671a:	22fe      	movs	r2, #254	; 0xfe
 801671c:	701a      	strb	r2, [r3, #0]
    		   out &= ~(1 << 0);
 801671e:	4b41      	ldr	r3, [pc, #260]	; (8016824 <http_server_serve+0x370>)
 8016720:	781b      	ldrb	r3, [r3, #0]
 8016722:	f023 0301 	bic.w	r3, r3, #1
 8016726:	b2da      	uxtb	r2, r3
 8016728:	4b3e      	ldr	r3, [pc, #248]	; (8016824 <http_server_serve+0x370>)
 801672a:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout2", 9) == 0) {
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2209      	movs	r2, #9
 8016730:	4946      	ldr	r1, [pc, #280]	; (801684c <http_server_serve+0x398>)
 8016732:	4618      	mov	r0, r3
 8016734:	f002 f9de 	bl	8018af4 <strncmp>
 8016738:	4603      	mov	r3, r0
 801673a:	2b00      	cmp	r3, #0
 801673c:	d106      	bne.n	801674c <http_server_serve+0x298>
    		   out &= ~(1 << 1);
 801673e:	4b39      	ldr	r3, [pc, #228]	; (8016824 <http_server_serve+0x370>)
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	f023 0302 	bic.w	r3, r3, #2
 8016746:	b2da      	uxtb	r2, r3
 8016748:	4b36      	ldr	r3, [pc, #216]	; (8016824 <http_server_serve+0x370>)
 801674a:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout3", 9) == 0) {
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	2209      	movs	r2, #9
 8016750:	493f      	ldr	r1, [pc, #252]	; (8016850 <http_server_serve+0x39c>)
 8016752:	4618      	mov	r0, r3
 8016754:	f002 f9ce 	bl	8018af4 <strncmp>
 8016758:	4603      	mov	r3, r0
 801675a:	2b00      	cmp	r3, #0
 801675c:	d106      	bne.n	801676c <http_server_serve+0x2b8>
    		   out &= ~(1 << 2);
 801675e:	4b31      	ldr	r3, [pc, #196]	; (8016824 <http_server_serve+0x370>)
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	f023 0304 	bic.w	r3, r3, #4
 8016766:	b2da      	uxtb	r2, r3
 8016768:	4b2e      	ldr	r3, [pc, #184]	; (8016824 <http_server_serve+0x370>)
 801676a:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout4", 9) == 0) {
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	2209      	movs	r2, #9
 8016770:	4938      	ldr	r1, [pc, #224]	; (8016854 <http_server_serve+0x3a0>)
 8016772:	4618      	mov	r0, r3
 8016774:	f002 f9be 	bl	8018af4 <strncmp>
 8016778:	4603      	mov	r3, r0
 801677a:	2b00      	cmp	r3, #0
 801677c:	d106      	bne.n	801678c <http_server_serve+0x2d8>
    		   out &= ~(1 << 3);
 801677e:	4b29      	ldr	r3, [pc, #164]	; (8016824 <http_server_serve+0x370>)
 8016780:	781b      	ldrb	r3, [r3, #0]
 8016782:	f023 0308 	bic.w	r3, r3, #8
 8016786:	b2da      	uxtb	r2, r3
 8016788:	4b26      	ldr	r3, [pc, #152]	; (8016824 <http_server_serve+0x370>)
 801678a:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout5", 9) == 0) {
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2209      	movs	r2, #9
 8016790:	4931      	ldr	r1, [pc, #196]	; (8016858 <http_server_serve+0x3a4>)
 8016792:	4618      	mov	r0, r3
 8016794:	f002 f9ae 	bl	8018af4 <strncmp>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d106      	bne.n	80167ac <http_server_serve+0x2f8>
    		   out &= ~(1 << 4);
 801679e:	4b21      	ldr	r3, [pc, #132]	; (8016824 <http_server_serve+0x370>)
 80167a0:	781b      	ldrb	r3, [r3, #0]
 80167a2:	f023 0310 	bic.w	r3, r3, #16
 80167a6:	b2da      	uxtb	r2, r3
 80167a8:	4b1e      	ldr	r3, [pc, #120]	; (8016824 <http_server_serve+0x370>)
 80167aa:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout6", 9) == 0) {
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	2209      	movs	r2, #9
 80167b0:	492a      	ldr	r1, [pc, #168]	; (801685c <http_server_serve+0x3a8>)
 80167b2:	4618      	mov	r0, r3
 80167b4:	f002 f99e 	bl	8018af4 <strncmp>
 80167b8:	4603      	mov	r3, r0
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d106      	bne.n	80167cc <http_server_serve+0x318>
    		   out &= ~(1 << 5);
 80167be:	4b19      	ldr	r3, [pc, #100]	; (8016824 <http_server_serve+0x370>)
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	f023 0320 	bic.w	r3, r3, #32
 80167c6:	b2da      	uxtb	r2, r3
 80167c8:	4b16      	ldr	r3, [pc, #88]	; (8016824 <http_server_serve+0x370>)
 80167ca:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout7", 9) == 0) {
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	2209      	movs	r2, #9
 80167d0:	4923      	ldr	r1, [pc, #140]	; (8016860 <http_server_serve+0x3ac>)
 80167d2:	4618      	mov	r0, r3
 80167d4:	e046      	b.n	8016864 <http_server_serve+0x3b0>
 80167d6:	bf00      	nop
 80167d8:	0801f568 	.word	0x0801f568
 80167dc:	0801f570 	.word	0x0801f570
 80167e0:	20001510 	.word	0x20001510
 80167e4:	20000018 	.word	0x20000018
 80167e8:	0801f580 	.word	0x0801f580
 80167ec:	20005840 	.word	0x20005840
 80167f0:	2000c10c 	.word	0x2000c10c
 80167f4:	2000c66c 	.word	0x2000c66c
 80167f8:	0801f58c 	.word	0x0801f58c
 80167fc:	2000c67c 	.word	0x2000c67c
 8016800:	0801f598 	.word	0x0801f598
 8016804:	2000c5d4 	.word	0x2000c5d4
 8016808:	0801f5a4 	.word	0x0801f5a4
 801680c:	2000c1cc 	.word	0x2000c1cc
 8016810:	0801f5b0 	.word	0x0801f5b0
 8016814:	2000c664 	.word	0x2000c664
 8016818:	0801f5bc 	.word	0x0801f5bc
 801681c:	2000c618 	.word	0x2000c618
 8016820:	0801f5c8 	.word	0x0801f5c8
 8016824:	20005839 	.word	0x20005839
 8016828:	0801f5d4 	.word	0x0801f5d4
 801682c:	0801f5e0 	.word	0x0801f5e0
 8016830:	0801f5ec 	.word	0x0801f5ec
 8016834:	0801f5f8 	.word	0x0801f5f8
 8016838:	0801f604 	.word	0x0801f604
 801683c:	0801f610 	.word	0x0801f610
 8016840:	0801f61c 	.word	0x0801f61c
 8016844:	0801f628 	.word	0x0801f628
 8016848:	20005838 	.word	0x20005838
 801684c:	0801f634 	.word	0x0801f634
 8016850:	0801f640 	.word	0x0801f640
 8016854:	0801f64c 	.word	0x0801f64c
 8016858:	0801f658 	.word	0x0801f658
 801685c:	0801f664 	.word	0x0801f664
 8016860:	0801f670 	.word	0x0801f670
 8016864:	f002 f946 	bl	8018af4 <strncmp>
 8016868:	4603      	mov	r3, r0
 801686a:	2b00      	cmp	r3, #0
 801686c:	d106      	bne.n	801687c <http_server_serve+0x3c8>
    		   out &= ~(1 << 6);
 801686e:	4b20      	ldr	r3, [pc, #128]	; (80168f0 <http_server_serve+0x43c>)
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016876:	b2da      	uxtb	r2, r3
 8016878:	4b1d      	ldr	r3, [pc, #116]	; (80168f0 <http_server_serve+0x43c>)
 801687a:	701a      	strb	r2, [r3, #0]
    	   }
    	   if (strncmp((char const *)buf,"GET /nout8", 9) == 0) {
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	2209      	movs	r2, #9
 8016880:	491c      	ldr	r1, [pc, #112]	; (80168f4 <http_server_serve+0x440>)
 8016882:	4618      	mov	r0, r3
 8016884:	f002 f936 	bl	8018af4 <strncmp>
 8016888:	4603      	mov	r3, r0
 801688a:	2b00      	cmp	r3, #0
 801688c:	d106      	bne.n	801689c <http_server_serve+0x3e8>
    		   out &= ~(1 << 7);
 801688e:	4b18      	ldr	r3, [pc, #96]	; (80168f0 <http_server_serve+0x43c>)
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016896:	b2da      	uxtb	r2, r3
 8016898:	4b15      	ldr	r3, [pc, #84]	; (80168f0 <http_server_serve+0x43c>)
 801689a:	701a      	strb	r2, [r3, #0]
    	   }



    	  if (strncmp((char const *)buf,"GET /btn1", 9) == 0) {
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	2209      	movs	r2, #9
 80168a0:	4915      	ldr	r1, [pc, #84]	; (80168f8 <http_server_serve+0x444>)
 80168a2:	4618      	mov	r0, r3
 80168a4:	f002 f926 	bl	8018af4 <strncmp>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d114      	bne.n	80168d8 <http_server_serve+0x424>
    		  if(Button == 1)
 80168ae:	4b13      	ldr	r3, [pc, #76]	; (80168fc <http_server_serve+0x448>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	2b01      	cmp	r3, #1
 80168b4:	d108      	bne.n	80168c8 <http_server_serve+0x414>
    			  netconn_write(conn, (const unsigned char*)"ON", 2, NETCONN_NOCOPY);
 80168b6:	2300      	movs	r3, #0
 80168b8:	9300      	str	r3, [sp, #0]
 80168ba:	2300      	movs	r3, #0
 80168bc:	2202      	movs	r2, #2
 80168be:	4910      	ldr	r1, [pc, #64]	; (8016900 <http_server_serve+0x44c>)
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f7f2 fc09 	bl	80090d8 <netconn_write_partly>
 80168c6:	e007      	b.n	80168d8 <http_server_serve+0x424>
    		  else
    			  netconn_write(conn, (const unsigned char*)"OFF", 3, NETCONN_NOCOPY);
 80168c8:	2300      	movs	r3, #0
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	2300      	movs	r3, #0
 80168ce:	2203      	movs	r2, #3
 80168d0:	490c      	ldr	r1, [pc, #48]	; (8016904 <http_server_serve+0x450>)
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f7f2 fc00 	bl	80090d8 <netconn_write_partly>
    	  */
      }
    }
  }
  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f7f2 fcff 	bl	80092dc <netconn_close>

  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7f4 f8f3 	bl	800aacc <netbuf_delete>
}
 80168e6:	bf00      	nop
 80168e8:	3718      	adds	r7, #24
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
 80168ee:	bf00      	nop
 80168f0:	20005839 	.word	0x20005839
 80168f4:	0801f67c 	.word	0x0801f67c
 80168f8:	0801f688 	.word	0x0801f688
 80168fc:	2000583c 	.word	0x2000583c
 8016900:	0801f694 	.word	0x0801f694
 8016904:	0801f698 	.word	0x0801f698

08016908 <http_server_netconn_thread>:
/**
  * @brief  http server thread
  * @retval None
  */
static void http_server_netconn_thread()
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b084      	sub	sp, #16
 801690c:	af00      	add	r7, sp, #0
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 801690e:	2200      	movs	r2, #0
 8016910:	2100      	movs	r1, #0
 8016912:	2010      	movs	r0, #16
 8016914:	f7f2 f840 	bl	8008998 <netconn_new_with_proto_and_callback>
 8016918:	60f8      	str	r0, [r7, #12]

  if (conn!= NULL)
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d022      	beq.n	8016966 <http_server_netconn_thread+0x5e>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 8016920:	2250      	movs	r2, #80	; 0x50
 8016922:	2100      	movs	r1, #0
 8016924:	68f8      	ldr	r0, [r7, #12]
 8016926:	f7f2 f8f1 	bl	8008b0c <netconn_bind>
 801692a:	4603      	mov	r3, r0
 801692c:	72fb      	strb	r3, [r7, #11]

    if (err == ERR_OK)
 801692e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d117      	bne.n	8016966 <http_server_netconn_thread+0x5e>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8016936:	21ff      	movs	r1, #255	; 0xff
 8016938:	68f8      	ldr	r0, [r7, #12]
 801693a:	f7f2 f91f 	bl	8008b7c <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 801693e:	1d3b      	adds	r3, r7, #4
 8016940:	4619      	mov	r1, r3
 8016942:	68f8      	ldr	r0, [r7, #12]
 8016944:	f7f2 f946 	bl	8008bd4 <netconn_accept>
 8016948:	4603      	mov	r3, r0
 801694a:	72bb      	strb	r3, [r7, #10]
        if(accept_err == ERR_OK)
 801694c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d1f4      	bne.n	801693e <http_server_netconn_thread+0x36>
        {
          /* serve connection */
          http_server_serve(newconn);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	4618      	mov	r0, r3
 8016958:	f7ff fdac 	bl	80164b4 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	4618      	mov	r0, r3
 8016960:	f7f2 f8b8 	bl	8008ad4 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8016964:	e7eb      	b.n	801693e <http_server_netconn_thread+0x36>
        }
      }
    }
  }
}
 8016966:	bf00      	nop
 8016968:	3710      	adds	r7, #16
 801696a:	46bd      	mov	sp, r7
 801696c:	bd80      	pop	{r7, pc}
	...

08016970 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8016976:	2304      	movs	r3, #4
 8016978:	9300      	str	r3, [sp, #0]
 801697a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801697e:	2200      	movs	r2, #0
 8016980:	4903      	ldr	r1, [pc, #12]	; (8016990 <http_server_netconn_init+0x20>)
 8016982:	4804      	ldr	r0, [pc, #16]	; (8016994 <http_server_netconn_init+0x24>)
 8016984:	f7ff f9e0 	bl	8015d48 <sys_thread_new>
}
 8016988:	bf00      	nop
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}
 801698e:	bf00      	nop
 8016990:	08016909 	.word	0x08016909
 8016994:	0801f69c 	.word	0x0801f69c

08016998 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801699e:	4b8c      	ldr	r3, [pc, #560]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169a0:	22c0      	movs	r2, #192	; 0xc0
 80169a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80169a4:	4b8a      	ldr	r3, [pc, #552]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169a6:	22a8      	movs	r2, #168	; 0xa8
 80169a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80169aa:	4b89      	ldr	r3, [pc, #548]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169ac:	2201      	movs	r2, #1
 80169ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 204;
 80169b0:	4b87      	ldr	r3, [pc, #540]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169b2:	22cc      	movs	r2, #204	; 0xcc
 80169b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80169b6:	4b87      	ldr	r3, [pc, #540]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 80169b8:	22ff      	movs	r2, #255	; 0xff
 80169ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80169bc:	4b85      	ldr	r3, [pc, #532]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 80169be:	22ff      	movs	r2, #255	; 0xff
 80169c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80169c2:	4b84      	ldr	r3, [pc, #528]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 80169c4:	22ff      	movs	r2, #255	; 0xff
 80169c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80169c8:	4b82      	ldr	r3, [pc, #520]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 80169ca:	2200      	movs	r2, #0
 80169cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80169ce:	4b82      	ldr	r3, [pc, #520]	; (8016bd8 <MX_LWIP_Init+0x240>)
 80169d0:	22c0      	movs	r2, #192	; 0xc0
 80169d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80169d4:	4b80      	ldr	r3, [pc, #512]	; (8016bd8 <MX_LWIP_Init+0x240>)
 80169d6:	22a8      	movs	r2, #168	; 0xa8
 80169d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80169da:	4b7f      	ldr	r3, [pc, #508]	; (8016bd8 <MX_LWIP_Init+0x240>)
 80169dc:	2201      	movs	r2, #1
 80169de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80169e0:	4b7d      	ldr	r3, [pc, #500]	; (8016bd8 <MX_LWIP_Init+0x240>)
 80169e2:	2201      	movs	r2, #1
 80169e4:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80169e6:	2100      	movs	r1, #0
 80169e8:	2000      	movs	r0, #0
 80169ea:	f7f4 fa43 	bl	800ae74 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80169ee:	4b78      	ldr	r3, [pc, #480]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	061a      	lsls	r2, r3, #24
 80169f4:	4b76      	ldr	r3, [pc, #472]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169f6:	785b      	ldrb	r3, [r3, #1]
 80169f8:	041b      	lsls	r3, r3, #16
 80169fa:	431a      	orrs	r2, r3
 80169fc:	4b74      	ldr	r3, [pc, #464]	; (8016bd0 <MX_LWIP_Init+0x238>)
 80169fe:	789b      	ldrb	r3, [r3, #2]
 8016a00:	021b      	lsls	r3, r3, #8
 8016a02:	4313      	orrs	r3, r2
 8016a04:	4a72      	ldr	r2, [pc, #456]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a06:	78d2      	ldrb	r2, [r2, #3]
 8016a08:	4313      	orrs	r3, r2
 8016a0a:	061a      	lsls	r2, r3, #24
 8016a0c:	4b70      	ldr	r3, [pc, #448]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	0619      	lsls	r1, r3, #24
 8016a12:	4b6f      	ldr	r3, [pc, #444]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a14:	785b      	ldrb	r3, [r3, #1]
 8016a16:	041b      	lsls	r3, r3, #16
 8016a18:	4319      	orrs	r1, r3
 8016a1a:	4b6d      	ldr	r3, [pc, #436]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a1c:	789b      	ldrb	r3, [r3, #2]
 8016a1e:	021b      	lsls	r3, r3, #8
 8016a20:	430b      	orrs	r3, r1
 8016a22:	496b      	ldr	r1, [pc, #428]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a24:	78c9      	ldrb	r1, [r1, #3]
 8016a26:	430b      	orrs	r3, r1
 8016a28:	021b      	lsls	r3, r3, #8
 8016a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016a2e:	431a      	orrs	r2, r3
 8016a30:	4b67      	ldr	r3, [pc, #412]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a32:	781b      	ldrb	r3, [r3, #0]
 8016a34:	0619      	lsls	r1, r3, #24
 8016a36:	4b66      	ldr	r3, [pc, #408]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a38:	785b      	ldrb	r3, [r3, #1]
 8016a3a:	041b      	lsls	r3, r3, #16
 8016a3c:	4319      	orrs	r1, r3
 8016a3e:	4b64      	ldr	r3, [pc, #400]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a40:	789b      	ldrb	r3, [r3, #2]
 8016a42:	021b      	lsls	r3, r3, #8
 8016a44:	430b      	orrs	r3, r1
 8016a46:	4962      	ldr	r1, [pc, #392]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a48:	78c9      	ldrb	r1, [r1, #3]
 8016a4a:	430b      	orrs	r3, r1
 8016a4c:	0a1b      	lsrs	r3, r3, #8
 8016a4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016a52:	431a      	orrs	r2, r3
 8016a54:	4b5e      	ldr	r3, [pc, #376]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	0619      	lsls	r1, r3, #24
 8016a5a:	4b5d      	ldr	r3, [pc, #372]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a5c:	785b      	ldrb	r3, [r3, #1]
 8016a5e:	041b      	lsls	r3, r3, #16
 8016a60:	4319      	orrs	r1, r3
 8016a62:	4b5b      	ldr	r3, [pc, #364]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a64:	789b      	ldrb	r3, [r3, #2]
 8016a66:	021b      	lsls	r3, r3, #8
 8016a68:	430b      	orrs	r3, r1
 8016a6a:	4959      	ldr	r1, [pc, #356]	; (8016bd0 <MX_LWIP_Init+0x238>)
 8016a6c:	78c9      	ldrb	r1, [r1, #3]
 8016a6e:	430b      	orrs	r3, r1
 8016a70:	0e1b      	lsrs	r3, r3, #24
 8016a72:	4313      	orrs	r3, r2
 8016a74:	4a59      	ldr	r2, [pc, #356]	; (8016bdc <MX_LWIP_Init+0x244>)
 8016a76:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8016a78:	4b56      	ldr	r3, [pc, #344]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	061a      	lsls	r2, r3, #24
 8016a7e:	4b55      	ldr	r3, [pc, #340]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016a80:	785b      	ldrb	r3, [r3, #1]
 8016a82:	041b      	lsls	r3, r3, #16
 8016a84:	431a      	orrs	r2, r3
 8016a86:	4b53      	ldr	r3, [pc, #332]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016a88:	789b      	ldrb	r3, [r3, #2]
 8016a8a:	021b      	lsls	r3, r3, #8
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	4a51      	ldr	r2, [pc, #324]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016a90:	78d2      	ldrb	r2, [r2, #3]
 8016a92:	4313      	orrs	r3, r2
 8016a94:	061a      	lsls	r2, r3, #24
 8016a96:	4b4f      	ldr	r3, [pc, #316]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	0619      	lsls	r1, r3, #24
 8016a9c:	4b4d      	ldr	r3, [pc, #308]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016a9e:	785b      	ldrb	r3, [r3, #1]
 8016aa0:	041b      	lsls	r3, r3, #16
 8016aa2:	4319      	orrs	r1, r3
 8016aa4:	4b4b      	ldr	r3, [pc, #300]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016aa6:	789b      	ldrb	r3, [r3, #2]
 8016aa8:	021b      	lsls	r3, r3, #8
 8016aaa:	430b      	orrs	r3, r1
 8016aac:	4949      	ldr	r1, [pc, #292]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016aae:	78c9      	ldrb	r1, [r1, #3]
 8016ab0:	430b      	orrs	r3, r1
 8016ab2:	021b      	lsls	r3, r3, #8
 8016ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016ab8:	431a      	orrs	r2, r3
 8016aba:	4b46      	ldr	r3, [pc, #280]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	0619      	lsls	r1, r3, #24
 8016ac0:	4b44      	ldr	r3, [pc, #272]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016ac2:	785b      	ldrb	r3, [r3, #1]
 8016ac4:	041b      	lsls	r3, r3, #16
 8016ac6:	4319      	orrs	r1, r3
 8016ac8:	4b42      	ldr	r3, [pc, #264]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016aca:	789b      	ldrb	r3, [r3, #2]
 8016acc:	021b      	lsls	r3, r3, #8
 8016ace:	430b      	orrs	r3, r1
 8016ad0:	4940      	ldr	r1, [pc, #256]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016ad2:	78c9      	ldrb	r1, [r1, #3]
 8016ad4:	430b      	orrs	r3, r1
 8016ad6:	0a1b      	lsrs	r3, r3, #8
 8016ad8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016adc:	431a      	orrs	r2, r3
 8016ade:	4b3d      	ldr	r3, [pc, #244]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	0619      	lsls	r1, r3, #24
 8016ae4:	4b3b      	ldr	r3, [pc, #236]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016ae6:	785b      	ldrb	r3, [r3, #1]
 8016ae8:	041b      	lsls	r3, r3, #16
 8016aea:	4319      	orrs	r1, r3
 8016aec:	4b39      	ldr	r3, [pc, #228]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016aee:	789b      	ldrb	r3, [r3, #2]
 8016af0:	021b      	lsls	r3, r3, #8
 8016af2:	430b      	orrs	r3, r1
 8016af4:	4937      	ldr	r1, [pc, #220]	; (8016bd4 <MX_LWIP_Init+0x23c>)
 8016af6:	78c9      	ldrb	r1, [r1, #3]
 8016af8:	430b      	orrs	r3, r1
 8016afa:	0e1b      	lsrs	r3, r3, #24
 8016afc:	4313      	orrs	r3, r2
 8016afe:	4a38      	ldr	r2, [pc, #224]	; (8016be0 <MX_LWIP_Init+0x248>)
 8016b00:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8016b02:	4b35      	ldr	r3, [pc, #212]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	061a      	lsls	r2, r3, #24
 8016b08:	4b33      	ldr	r3, [pc, #204]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b0a:	785b      	ldrb	r3, [r3, #1]
 8016b0c:	041b      	lsls	r3, r3, #16
 8016b0e:	431a      	orrs	r2, r3
 8016b10:	4b31      	ldr	r3, [pc, #196]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b12:	789b      	ldrb	r3, [r3, #2]
 8016b14:	021b      	lsls	r3, r3, #8
 8016b16:	4313      	orrs	r3, r2
 8016b18:	4a2f      	ldr	r2, [pc, #188]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b1a:	78d2      	ldrb	r2, [r2, #3]
 8016b1c:	4313      	orrs	r3, r2
 8016b1e:	061a      	lsls	r2, r3, #24
 8016b20:	4b2d      	ldr	r3, [pc, #180]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	0619      	lsls	r1, r3, #24
 8016b26:	4b2c      	ldr	r3, [pc, #176]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b28:	785b      	ldrb	r3, [r3, #1]
 8016b2a:	041b      	lsls	r3, r3, #16
 8016b2c:	4319      	orrs	r1, r3
 8016b2e:	4b2a      	ldr	r3, [pc, #168]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b30:	789b      	ldrb	r3, [r3, #2]
 8016b32:	021b      	lsls	r3, r3, #8
 8016b34:	430b      	orrs	r3, r1
 8016b36:	4928      	ldr	r1, [pc, #160]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b38:	78c9      	ldrb	r1, [r1, #3]
 8016b3a:	430b      	orrs	r3, r1
 8016b3c:	021b      	lsls	r3, r3, #8
 8016b3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016b42:	431a      	orrs	r2, r3
 8016b44:	4b24      	ldr	r3, [pc, #144]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	0619      	lsls	r1, r3, #24
 8016b4a:	4b23      	ldr	r3, [pc, #140]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b4c:	785b      	ldrb	r3, [r3, #1]
 8016b4e:	041b      	lsls	r3, r3, #16
 8016b50:	4319      	orrs	r1, r3
 8016b52:	4b21      	ldr	r3, [pc, #132]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b54:	789b      	ldrb	r3, [r3, #2]
 8016b56:	021b      	lsls	r3, r3, #8
 8016b58:	430b      	orrs	r3, r1
 8016b5a:	491f      	ldr	r1, [pc, #124]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b5c:	78c9      	ldrb	r1, [r1, #3]
 8016b5e:	430b      	orrs	r3, r1
 8016b60:	0a1b      	lsrs	r3, r3, #8
 8016b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016b66:	431a      	orrs	r2, r3
 8016b68:	4b1b      	ldr	r3, [pc, #108]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b6a:	781b      	ldrb	r3, [r3, #0]
 8016b6c:	0619      	lsls	r1, r3, #24
 8016b6e:	4b1a      	ldr	r3, [pc, #104]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b70:	785b      	ldrb	r3, [r3, #1]
 8016b72:	041b      	lsls	r3, r3, #16
 8016b74:	4319      	orrs	r1, r3
 8016b76:	4b18      	ldr	r3, [pc, #96]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b78:	789b      	ldrb	r3, [r3, #2]
 8016b7a:	021b      	lsls	r3, r3, #8
 8016b7c:	430b      	orrs	r3, r1
 8016b7e:	4916      	ldr	r1, [pc, #88]	; (8016bd8 <MX_LWIP_Init+0x240>)
 8016b80:	78c9      	ldrb	r1, [r1, #3]
 8016b82:	430b      	orrs	r3, r1
 8016b84:	0e1b      	lsrs	r3, r3, #24
 8016b86:	4313      	orrs	r3, r2
 8016b88:	4a16      	ldr	r2, [pc, #88]	; (8016be4 <MX_LWIP_Init+0x24c>)
 8016b8a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8016b8c:	4b16      	ldr	r3, [pc, #88]	; (8016be8 <MX_LWIP_Init+0x250>)
 8016b8e:	9302      	str	r3, [sp, #8]
 8016b90:	4b16      	ldr	r3, [pc, #88]	; (8016bec <MX_LWIP_Init+0x254>)
 8016b92:	9301      	str	r3, [sp, #4]
 8016b94:	2300      	movs	r3, #0
 8016b96:	9300      	str	r3, [sp, #0]
 8016b98:	4b12      	ldr	r3, [pc, #72]	; (8016be4 <MX_LWIP_Init+0x24c>)
 8016b9a:	4a11      	ldr	r2, [pc, #68]	; (8016be0 <MX_LWIP_Init+0x248>)
 8016b9c:	490f      	ldr	r1, [pc, #60]	; (8016bdc <MX_LWIP_Init+0x244>)
 8016b9e:	4814      	ldr	r0, [pc, #80]	; (8016bf0 <MX_LWIP_Init+0x258>)
 8016ba0:	f7f4 feec 	bl	800b97c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8016ba4:	4812      	ldr	r0, [pc, #72]	; (8016bf0 <MX_LWIP_Init+0x258>)
 8016ba6:	f7f5 f899 	bl	800bcdc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8016baa:	4b11      	ldr	r3, [pc, #68]	; (8016bf0 <MX_LWIP_Init+0x258>)
 8016bac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8016bb0:	089b      	lsrs	r3, r3, #2
 8016bb2:	f003 0301 	and.w	r3, r3, #1
 8016bb6:	b2db      	uxtb	r3, r3
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d003      	beq.n	8016bc4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8016bbc:	480c      	ldr	r0, [pc, #48]	; (8016bf0 <MX_LWIP_Init+0x258>)
 8016bbe:	f7f5 f89d 	bl	800bcfc <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8016bc2:	e002      	b.n	8016bca <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8016bc4:	480a      	ldr	r0, [pc, #40]	; (8016bf0 <MX_LWIP_Init+0x258>)
 8016bc6:	f7f5 f905 	bl	800bdd4 <netif_set_down>
}
 8016bca:	bf00      	nop
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	2000c0f8 	.word	0x2000c0f8
 8016bd4:	2000c0f4 	.word	0x2000c0f4
 8016bd8:	2000c0bc 	.word	0x2000c0bc
 8016bdc:	2000c0f0 	.word	0x2000c0f0
 8016be0:	2000c0fc 	.word	0x2000c0fc
 8016be4:	2000c100 	.word	0x2000c100
 8016be8:	0800ad85 	.word	0x0800ad85
 8016bec:	08016415 	.word	0x08016415
 8016bf0:	2000c0c0 	.word	0x2000c0c0

08016bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8016bf4:	b5b0      	push	{r4, r5, r7, lr}
 8016bf6:	b0ae      	sub	sp, #184	; 0xb8
 8016bf8:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0;
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
	DWT->CTRL |= 1 ; // enable the counter
	DWT->CYCCNT = 0; // reset the counter
*/
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8016bfa:	4b75      	ldr	r3, [pc, #468]	; (8016dd0 <main+0x1dc>)
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	4a74      	ldr	r2, [pc, #464]	; (8016dd0 <main+0x1dc>)
 8016c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016c04:	60d3      	str	r3, [r2, #12]
	DWT->LAR = 0xC5ACCE55;
 8016c06:	4b73      	ldr	r3, [pc, #460]	; (8016dd4 <main+0x1e0>)
 8016c08:	4a73      	ldr	r2, [pc, #460]	; (8016dd8 <main+0x1e4>)
 8016c0a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;
 8016c0e:	4b71      	ldr	r3, [pc, #452]	; (8016dd4 <main+0x1e0>)
 8016c10:	2200      	movs	r2, #0
 8016c12:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8016c14:	4b6f      	ldr	r3, [pc, #444]	; (8016dd4 <main+0x1e0>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	4a6e      	ldr	r2, [pc, #440]	; (8016dd4 <main+0x1e0>)
 8016c1a:	f043 0301 	orr.w	r3, r3, #1
 8016c1e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8016c20:	f7e9 fce6 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8016c24:	f000 f8fe 	bl	8016e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8016c28:	f000 fb92 	bl	8017350 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8016c2c:	f000 fb32 	bl	8017294 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8016c30:	f000 fb60 	bl	80172f4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8016c34:	f000 f98c 	bl	8016f50 <MX_ADC1_Init>
  MX_TIM3_Init();
 8016c38:	f000 f9de 	bl	8016ff8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8016c3c:	f000 fac4 	bl	80171c8 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8016c40:	2300      	movs	r3, #0
 8016c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016c46:	2300      	movs	r3, #0
 8016c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8016c4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7ee fea0 	bl	8005996 <osMutexCreate>
 8016c56:	4602      	mov	r2, r0
 8016c58:	4b60      	ldr	r3, [pc, #384]	; (8016ddc <main+0x1e8>)
 8016c5a:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016c62:	2300      	movs	r3, #0
 8016c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8016c68:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8016c6c:	2101      	movs	r1, #1
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7ee ff2e 	bl	8005ad0 <osSemaphoreCreate>
 8016c74:	4602      	mov	r2, r0
 8016c76:	4b5a      	ldr	r3, [pc, #360]	; (8016de0 <main+0x1ec>)
 8016c78:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8016c80:	2300      	movs	r3, #0
 8016c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8016c86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016c8a:	2101      	movs	r1, #1
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7ee ff1f 	bl	8005ad0 <osSemaphoreCreate>
 8016c92:	4602      	mov	r2, r0
 8016c94:	4b53      	ldr	r3, [pc, #332]	; (8016de4 <main+0x1f0>)
 8016c96:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
 8016c98:	2300      	movs	r3, #0
 8016c9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8016ca4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016ca8:	2101      	movs	r1, #1
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7ee ff10 	bl	8005ad0 <osSemaphoreCreate>
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	4b4d      	ldr	r3, [pc, #308]	; (8016de8 <main+0x1f4>)
 8016cb4:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem04 */
  osSemaphoreDef(myBinarySem04);
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  myBinarySem04Handle = osSemaphoreCreate(osSemaphore(myBinarySem04), 1);
 8016cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7ee ff01 	bl	8005ad0 <osSemaphoreCreate>
 8016cce:	4602      	mov	r2, r0
 8016cd0:	4b46      	ldr	r3, [pc, #280]	; (8016dec <main+0x1f8>)
 8016cd2:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem05 */
  osSemaphoreDef(myBinarySem05);
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016cda:	2300      	movs	r3, #0
 8016cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  myBinarySem05Handle = osSemaphoreCreate(osSemaphore(myBinarySem05), 1);
 8016ce0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8016ce4:	2101      	movs	r1, #1
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7ee fef2 	bl	8005ad0 <osSemaphoreCreate>
 8016cec:	4602      	mov	r2, r0
 8016cee:	4b40      	ldr	r3, [pc, #256]	; (8016df0 <main+0x1fc>)
 8016cf0:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem06 */
  osSemaphoreDef(myBinarySem06);
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myBinarySem06Handle = osSemaphoreCreate(osSemaphore(myBinarySem06), 1);
 8016cfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016d02:	2101      	movs	r1, #1
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7ee fee3 	bl	8005ad0 <osSemaphoreCreate>
 8016d0a:	4602      	mov	r2, r0
 8016d0c:	4b39      	ldr	r3, [pc, #228]	; (8016df4 <main+0x200>)
 8016d0e:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  HAL_TIM_Base_Start(&htim3);
 8016d10:	4839      	ldr	r0, [pc, #228]	; (8016df8 <main+0x204>)
 8016d12:	f7ec fd05 	bl	8003720 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim3);
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 8016d16:	4b39      	ldr	r3, [pc, #228]	; (8016dfc <main+0x208>)
 8016d18:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8016d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8016d22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016d26:	2100      	movs	r1, #0
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7ee ff9c 	bl	8005c66 <osMessageCreate>
 8016d2e:	4602      	mov	r2, r0
 8016d30:	4b33      	ldr	r3, [pc, #204]	; (8016e00 <main+0x20c>)
 8016d32:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8016d34:	4b33      	ldr	r3, [pc, #204]	; (8016e04 <main+0x210>)
 8016d36:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8016d3a:	461d      	mov	r5, r3
 8016d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8016d48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f7ee fdb5 	bl	80058be <osThreadCreate>
 8016d54:	4602      	mov	r2, r0
 8016d56:	4b2c      	ldr	r3, [pc, #176]	; (8016e08 <main+0x214>)
 8016d58:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask8IO */
  osThreadDef(myTask8IO, StartmyTask8IO, osPriorityHigh, 0, 128);
 8016d5a:	4b2c      	ldr	r3, [pc, #176]	; (8016e0c <main+0x218>)
 8016d5c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8016d60:	461d      	mov	r5, r3
 8016d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask8IOHandle = osThreadCreate(osThread(myTask8IO), NULL);
 8016d6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016d72:	2100      	movs	r1, #0
 8016d74:	4618      	mov	r0, r3
 8016d76:	f7ee fda2 	bl	80058be <osThreadCreate>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	4b24      	ldr	r3, [pc, #144]	; (8016e10 <main+0x21c>)
 8016d7e:	601a      	str	r2, [r3, #0]

  /* definition and creation of LED */
  osThreadDef(LED, StartTaskLED, osPriorityBelowNormal, 0, 128);
 8016d80:	4b24      	ldr	r3, [pc, #144]	; (8016e14 <main+0x220>)
 8016d82:	f107 041c 	add.w	r4, r7, #28
 8016d86:	461d      	mov	r5, r3
 8016d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016d90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LEDHandle = osThreadCreate(osThread(LED), NULL);
 8016d94:	f107 031c 	add.w	r3, r7, #28
 8016d98:	2100      	movs	r1, #0
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f7ee fd8f 	bl	80058be <osThreadCreate>
 8016da0:	4602      	mov	r2, r0
 8016da2:	4b1d      	ldr	r3, [pc, #116]	; (8016e18 <main+0x224>)
 8016da4:	601a      	str	r2, [r3, #0]

  /* definition and creation of Input */
  osThreadDef(Input, StartTaskInput, osPriorityNormal, 0, 128);
 8016da6:	4b1d      	ldr	r3, [pc, #116]	; (8016e1c <main+0x228>)
 8016da8:	463c      	mov	r4, r7
 8016daa:	461d      	mov	r5, r3
 8016dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016db0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016db4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputHandle = osThreadCreate(osThread(Input), NULL);
 8016db8:	463b      	mov	r3, r7
 8016dba:	2100      	movs	r1, #0
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7ee fd7e 	bl	80058be <osThreadCreate>
 8016dc2:	4602      	mov	r2, r0
 8016dc4:	4b16      	ldr	r3, [pc, #88]	; (8016e20 <main+0x22c>)
 8016dc6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8016dc8:	f7ee fd62 	bl	8005890 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8016dcc:	e7fe      	b.n	8016dcc <main+0x1d8>
 8016dce:	bf00      	nop
 8016dd0:	e000edf0 	.word	0xe000edf0
 8016dd4:	e0001000 	.word	0xe0001000
 8016dd8:	c5acce55 	.word	0xc5acce55
 8016ddc:	2000c678 	.word	0x2000c678
 8016de0:	2000c66c 	.word	0x2000c66c
 8016de4:	2000c664 	.word	0x2000c664
 8016de8:	2000c618 	.word	0x2000c618
 8016dec:	2000c67c 	.word	0x2000c67c
 8016df0:	2000c5d4 	.word	0x2000c5d4
 8016df4:	2000c1cc 	.word	0x2000c1cc
 8016df8:	2000c5d8 	.word	0x2000c5d8
 8016dfc:	0801f6a4 	.word	0x0801f6a4
 8016e00:	2000c670 	.word	0x2000c670
 8016e04:	0801f6c0 	.word	0x0801f6c0
 8016e08:	2000c104 	.word	0x2000c104
 8016e0c:	0801f6e8 	.word	0x0801f6e8
 8016e10:	2000c108 	.word	0x2000c108
 8016e14:	0801f708 	.word	0x0801f708
 8016e18:	2000c674 	.word	0x2000c674
 8016e1c:	0801f72c 	.word	0x0801f72c
 8016e20:	2000c668 	.word	0x2000c668

08016e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b0b8      	sub	sp, #224	; 0xe0
 8016e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016e2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016e2e:	2234      	movs	r2, #52	; 0x34
 8016e30:	2100      	movs	r1, #0
 8016e32:	4618      	mov	r0, r3
 8016e34:	f000 ffd0 	bl	8017dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016e38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	601a      	str	r2, [r3, #0]
 8016e40:	605a      	str	r2, [r3, #4]
 8016e42:	609a      	str	r2, [r3, #8]
 8016e44:	60da      	str	r2, [r3, #12]
 8016e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016e48:	f107 0308 	add.w	r3, r7, #8
 8016e4c:	2290      	movs	r2, #144	; 0x90
 8016e4e:	2100      	movs	r1, #0
 8016e50:	4618      	mov	r0, r3
 8016e52:	f000 ffc1 	bl	8017dd8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8016e56:	f7eb fad9 	bl	800240c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016e5a:	4b3a      	ldr	r3, [pc, #232]	; (8016f44 <SystemClock_Config+0x120>)
 8016e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e5e:	4a39      	ldr	r2, [pc, #228]	; (8016f44 <SystemClock_Config+0x120>)
 8016e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016e64:	6413      	str	r3, [r2, #64]	; 0x40
 8016e66:	4b37      	ldr	r3, [pc, #220]	; (8016f44 <SystemClock_Config+0x120>)
 8016e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016e6e:	607b      	str	r3, [r7, #4]
 8016e70:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016e72:	4b35      	ldr	r3, [pc, #212]	; (8016f48 <SystemClock_Config+0x124>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	4a34      	ldr	r2, [pc, #208]	; (8016f48 <SystemClock_Config+0x124>)
 8016e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016e7c:	6013      	str	r3, [r2, #0]
 8016e7e:	4b32      	ldr	r3, [pc, #200]	; (8016f48 <SystemClock_Config+0x124>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016e86:	603b      	str	r3, [r7, #0]
 8016e88:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8016e8a:	2301      	movs	r3, #1
 8016e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8016e90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8016e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016e98:	2302      	movs	r3, #2
 8016e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8016ea6:	2304      	movs	r3, #4
 8016ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8016eac:	23d8      	movs	r3, #216	; 0xd8
 8016eae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016eb2:	2302      	movs	r3, #2
 8016eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8016eb8:	2309      	movs	r3, #9
 8016eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016ebe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7eb fb02 	bl	80024cc <HAL_RCC_OscConfig>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d001      	beq.n	8016ed2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8016ece:	f000 fbf5 	bl	80176bc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8016ed2:	f7eb faab 	bl	800242c <HAL_PWREx_EnableOverDrive>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d001      	beq.n	8016ee0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8016edc:	f000 fbee 	bl	80176bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016ee0:	230f      	movs	r3, #15
 8016ee2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016ee6:	2302      	movs	r3, #2
 8016ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016eec:	2300      	movs	r3, #0
 8016eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016ef2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016efe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8016f02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016f06:	2107      	movs	r1, #7
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7eb fd8d 	bl	8002a28 <HAL_RCC_ClockConfig>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d001      	beq.n	8016f18 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8016f14:	f000 fbd2 	bl	80176bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8016f18:	4b0c      	ldr	r3, [pc, #48]	; (8016f4c <SystemClock_Config+0x128>)
 8016f1a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8016f20:	2300      	movs	r3, #0
 8016f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016f26:	f107 0308 	add.w	r3, r7, #8
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7eb ffa6 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8016f30:	4603      	mov	r3, r0
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d001      	beq.n	8016f3a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8016f36:	f000 fbc1 	bl	80176bc <Error_Handler>
  }
}
 8016f3a:	bf00      	nop
 8016f3c:	37e0      	adds	r7, #224	; 0xe0
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
 8016f42:	bf00      	nop
 8016f44:	40023800 	.word	0x40023800
 8016f48:	40007000 	.word	0x40007000
 8016f4c:	00200100 	.word	0x00200100

08016f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8016f56:	463b      	mov	r3, r7
 8016f58:	2200      	movs	r2, #0
 8016f5a:	601a      	str	r2, [r3, #0]
 8016f5c:	605a      	str	r2, [r3, #4]
 8016f5e:	609a      	str	r2, [r3, #8]
 8016f60:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8016f62:	4b21      	ldr	r3, [pc, #132]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f64:	4a21      	ldr	r2, [pc, #132]	; (8016fec <MX_ADC1_Init+0x9c>)
 8016f66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8016f68:	4b1f      	ldr	r3, [pc, #124]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016f6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8016f70:	4b1d      	ldr	r3, [pc, #116]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f72:	2200      	movs	r2, #0
 8016f74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8016f76:	4b1c      	ldr	r3, [pc, #112]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f78:	2200      	movs	r2, #0
 8016f7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8016f7c:	4b1a      	ldr	r3, [pc, #104]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f7e:	2200      	movs	r2, #0
 8016f80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8016f82:	4b19      	ldr	r3, [pc, #100]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f84:	2200      	movs	r2, #0
 8016f86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8016f8a:	4b17      	ldr	r3, [pc, #92]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8016f90:	4b15      	ldr	r3, [pc, #84]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f92:	4a17      	ldr	r2, [pc, #92]	; (8016ff0 <MX_ADC1_Init+0xa0>)
 8016f94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8016f96:	4b14      	ldr	r3, [pc, #80]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f98:	2200      	movs	r2, #0
 8016f9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8016f9c:	4b12      	ldr	r3, [pc, #72]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016f9e:	2201      	movs	r2, #1
 8016fa0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8016fa2:	4b11      	ldr	r3, [pc, #68]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016fa4:	2200      	movs	r2, #0
 8016fa6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8016faa:	4b0f      	ldr	r3, [pc, #60]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016fac:	2201      	movs	r2, #1
 8016fae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8016fb0:	480d      	ldr	r0, [pc, #52]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016fb2:	f7e9 fb6d 	bl	8000690 <HAL_ADC_Init>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d001      	beq.n	8016fc0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8016fbc:	f000 fb7e 	bl	80176bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8016fc0:	4b0c      	ldr	r3, [pc, #48]	; (8016ff4 <MX_ADC1_Init+0xa4>)
 8016fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8016fcc:	463b      	mov	r3, r7
 8016fce:	4619      	mov	r1, r3
 8016fd0:	4805      	ldr	r0, [pc, #20]	; (8016fe8 <MX_ADC1_Init+0x98>)
 8016fd2:	f7e9 fba1 	bl	8000718 <HAL_ADC_ConfigChannel>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d001      	beq.n	8016fe0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8016fdc:	f000 fb6e 	bl	80176bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8016fe0:	bf00      	nop
 8016fe2:	3710      	adds	r7, #16
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	2000c61c 	.word	0x2000c61c
 8016fec:	40012000 	.word	0x40012000
 8016ff0:	0f000001 	.word	0x0f000001
 8016ff4:	10000012 	.word	0x10000012

08016ff8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8016ff8:	b580      	push	{r7, lr}
 8016ffa:	b094      	sub	sp, #80	; 0x50
 8016ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017002:	2200      	movs	r2, #0
 8017004:	601a      	str	r2, [r3, #0]
 8017006:	605a      	str	r2, [r3, #4]
 8017008:	609a      	str	r2, [r3, #8]
 801700a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801700c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017010:	2200      	movs	r2, #0
 8017012:	601a      	str	r2, [r3, #0]
 8017014:	605a      	str	r2, [r3, #4]
 8017016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017018:	f107 0318 	add.w	r3, r7, #24
 801701c:	2200      	movs	r2, #0
 801701e:	601a      	str	r2, [r3, #0]
 8017020:	605a      	str	r2, [r3, #4]
 8017022:	609a      	str	r2, [r3, #8]
 8017024:	60da      	str	r2, [r3, #12]
 8017026:	611a      	str	r2, [r3, #16]
 8017028:	615a      	str	r2, [r3, #20]
 801702a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 801702c:	f107 0308 	add.w	r3, r7, #8
 8017030:	2200      	movs	r2, #0
 8017032:	601a      	str	r2, [r3, #0]
 8017034:	605a      	str	r2, [r3, #4]
 8017036:	609a      	str	r2, [r3, #8]
 8017038:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */
  __TIM3_CLK_ENABLE();
 801703a:	4b5f      	ldr	r3, [pc, #380]	; (80171b8 <MX_TIM3_Init+0x1c0>)
 801703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801703e:	4a5e      	ldr	r2, [pc, #376]	; (80171b8 <MX_TIM3_Init+0x1c0>)
 8017040:	f043 0302 	orr.w	r3, r3, #2
 8017044:	6413      	str	r3, [r2, #64]	; 0x40
 8017046:	4b5c      	ldr	r3, [pc, #368]	; (80171b8 <MX_TIM3_Init+0x1c0>)
 8017048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801704a:	f003 0302 	and.w	r3, r3, #2
 801704e:	607b      	str	r3, [r7, #4]
 8017050:	687b      	ldr	r3, [r7, #4]

  TIM3->PSC = HAL_RCC_GetPCLK1Freq()/1000000 - 1;
 8017052:	f7eb feb9 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8017056:	4602      	mov	r2, r0
 8017058:	4b58      	ldr	r3, [pc, #352]	; (80171bc <MX_TIM3_Init+0x1c4>)
 801705a:	fba3 2302 	umull	r2, r3, r3, r2
 801705e:	0c9b      	lsrs	r3, r3, #18
 8017060:	4a57      	ldr	r2, [pc, #348]	; (80171c0 <MX_TIM3_Init+0x1c8>)
 8017062:	3b01      	subs	r3, #1
 8017064:	6293      	str	r3, [r2, #40]	; 0x28
  TIM3->CR1 = TIM_CR1_CEN;
 8017066:	4b56      	ldr	r3, [pc, #344]	; (80171c0 <MX_TIM3_Init+0x1c8>)
 8017068:	2201      	movs	r2, #1
 801706a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801706c:	4b55      	ldr	r3, [pc, #340]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 801706e:	4a54      	ldr	r2, [pc, #336]	; (80171c0 <MX_TIM3_Init+0x1c8>)
 8017070:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 8017072:	4b54      	ldr	r3, [pc, #336]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017074:	2228      	movs	r2, #40	; 0x28
 8017076:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017078:	4b52      	ldr	r3, [pc, #328]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 801707a:	2200      	movs	r2, #0
 801707c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0x190;
 801707e:	4b51      	ldr	r3, [pc, #324]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017080:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8017084:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8017086:	4b4f      	ldr	r3, [pc, #316]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017088:	f44f 7200 	mov.w	r2, #512	; 0x200
 801708c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801708e:	4b4d      	ldr	r3, [pc, #308]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017090:	2280      	movs	r2, #128	; 0x80
 8017092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017094:	484b      	ldr	r0, [pc, #300]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017096:	f7ec fb17 	bl	80036c8 <HAL_TIM_Base_Init>
 801709a:	4603      	mov	r3, r0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d001      	beq.n	80170a4 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80170a0:	f000 fb0c 	bl	80176bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80170a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80170a8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80170aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80170ae:	4619      	mov	r1, r3
 80170b0:	4844      	ldr	r0, [pc, #272]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 80170b2:	f7ec fe69 	bl	8003d88 <HAL_TIM_ConfigClockSource>
 80170b6:	4603      	mov	r3, r0
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d001      	beq.n	80170c0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80170bc:	f000 fafe 	bl	80176bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80170c0:	4840      	ldr	r0, [pc, #256]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 80170c2:	f7ec fb81 	bl	80037c8 <HAL_TIM_OC_Init>
 80170c6:	4603      	mov	r3, r0
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d001      	beq.n	80170d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80170cc:	f000 faf6 	bl	80176bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80170d0:	483c      	ldr	r0, [pc, #240]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 80170d2:	f7ec fbae 	bl	8003832 <HAL_TIM_IC_Init>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d001      	beq.n	80170e0 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 80170dc:	f000 faee 	bl	80176bc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80170e0:	2108      	movs	r1, #8
 80170e2:	4838      	ldr	r0, [pc, #224]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 80170e4:	f7ec fbd0 	bl	8003888 <HAL_TIM_OnePulse_Init>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d001      	beq.n	80170f2 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80170ee:	f000 fae5 	bl	80176bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80170f2:	2300      	movs	r3, #0
 80170f4:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80170f6:	2300      	movs	r3, #0
 80170f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80170fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80170fe:	4619      	mov	r1, r3
 8017100:	4830      	ldr	r0, [pc, #192]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017102:	f7ed fbe5 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d001      	beq.n	8017110 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 801710c:	f000 fad6 	bl	80176bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8017110:	2300      	movs	r3, #0
 8017112:	61bb      	str	r3, [r7, #24]
  sConfigOC.Pulse = 0;
 8017114:	2300      	movs	r3, #0
 8017116:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017118:	2300      	movs	r3, #0
 801711a:	623b      	str	r3, [r7, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801711c:	2300      	movs	r3, #0
 801711e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017120:	f107 0318 	add.w	r3, r7, #24
 8017124:	2200      	movs	r2, #0
 8017126:	4619      	mov	r1, r3
 8017128:	4826      	ldr	r0, [pc, #152]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 801712a:	f7ec fd13 	bl	8003b54 <HAL_TIM_OC_ConfigChannel>
 801712e:	4603      	mov	r3, r0
 8017130:	2b00      	cmp	r3, #0
 8017132:	d001      	beq.n	8017138 <MX_TIM3_Init+0x140>
  {
    Error_Handler();
 8017134:	f000 fac2 	bl	80176bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8017138:	2300      	movs	r3, #0
 801713a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 801713c:	2301      	movs	r3, #1
 801713e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8017140:	2300      	movs	r3, #0
 8017142:	613b      	str	r3, [r7, #16]
  sConfigIC.ICFilter = 0;
 8017144:	2300      	movs	r3, #0
 8017146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8017148:	f107 0308 	add.w	r3, r7, #8
 801714c:	2204      	movs	r2, #4
 801714e:	4619      	mov	r1, r3
 8017150:	481c      	ldr	r0, [pc, #112]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017152:	f7ec fd7d 	bl	8003c50 <HAL_TIM_IC_ConfigChannel>
 8017156:	4603      	mov	r3, r0
 8017158:	2b00      	cmp	r3, #0
 801715a:	d001      	beq.n	8017160 <MX_TIM3_Init+0x168>
  {
    Error_Handler();
 801715c:	f000 faae 	bl	80176bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8017160:	f107 0308 	add.w	r3, r7, #8
 8017164:	2208      	movs	r2, #8
 8017166:	4619      	mov	r1, r3
 8017168:	4816      	ldr	r0, [pc, #88]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 801716a:	f7ec fd71 	bl	8003c50 <HAL_TIM_IC_ConfigChannel>
 801716e:	4603      	mov	r3, r0
 8017170:	2b00      	cmp	r3, #0
 8017172:	d001      	beq.n	8017178 <MX_TIM3_Init+0x180>
  {
    Error_Handler();
 8017174:	f000 faa2 	bl	80176bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8017178:	f107 0308 	add.w	r3, r7, #8
 801717c:	220c      	movs	r2, #12
 801717e:	4619      	mov	r1, r3
 8017180:	4810      	ldr	r0, [pc, #64]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 8017182:	f7ec fd65 	bl	8003c50 <HAL_TIM_IC_ConfigChannel>
 8017186:	4603      	mov	r3, r0
 8017188:	2b00      	cmp	r3, #0
 801718a:	d001      	beq.n	8017190 <MX_TIM3_Init+0x198>
  {
    Error_Handler();
 801718c:	f000 fa96 	bl	80176bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  __TIM3_CLK_ENABLE();;
 8017190:	4b09      	ldr	r3, [pc, #36]	; (80171b8 <MX_TIM3_Init+0x1c0>)
 8017192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017194:	4a08      	ldr	r2, [pc, #32]	; (80171b8 <MX_TIM3_Init+0x1c0>)
 8017196:	f043 0302 	orr.w	r3, r3, #2
 801719a:	6413      	str	r3, [r2, #64]	; 0x40
 801719c:	4b06      	ldr	r3, [pc, #24]	; (80171b8 <MX_TIM3_Init+0x1c0>)
 801719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171a0:	f003 0302 	and.w	r3, r3, #2
 80171a4:	603b      	str	r3, [r7, #0]
 80171a6:	683b      	ldr	r3, [r7, #0]
  HAL_TIM_Base_Start(&htim3);
 80171a8:	4806      	ldr	r0, [pc, #24]	; (80171c4 <MX_TIM3_Init+0x1cc>)
 80171aa:	f7ec fab9 	bl	8003720 <HAL_TIM_Base_Start>

  /* USER CODE END TIM3_Init 2 */

}
 80171ae:	bf00      	nop
 80171b0:	3750      	adds	r7, #80	; 0x50
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}
 80171b6:	bf00      	nop
 80171b8:	40023800 	.word	0x40023800
 80171bc:	431bde83 	.word	0x431bde83
 80171c0:	40000400 	.word	0x40000400
 80171c4:	2000c5d8 	.word	0x2000c5d8

080171c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b088      	sub	sp, #32
 80171cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80171ce:	f107 0314 	add.w	r3, r7, #20
 80171d2:	2200      	movs	r2, #0
 80171d4:	601a      	str	r2, [r3, #0]
 80171d6:	605a      	str	r2, [r3, #4]
 80171d8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80171da:	1d3b      	adds	r3, r7, #4
 80171dc:	2200      	movs	r2, #0
 80171de:	601a      	str	r2, [r3, #0]
 80171e0:	605a      	str	r2, [r3, #4]
 80171e2:	609a      	str	r2, [r3, #8]
 80171e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80171e6:	4b28      	ldr	r3, [pc, #160]	; (8017288 <MX_TIM4_Init+0xc0>)
 80171e8:	4a28      	ldr	r2, [pc, #160]	; (801728c <MX_TIM4_Init+0xc4>)
 80171ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1080;
 80171ec:	4b26      	ldr	r3, [pc, #152]	; (8017288 <MX_TIM4_Init+0xc0>)
 80171ee:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80171f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80171f4:	4b24      	ldr	r3, [pc, #144]	; (8017288 <MX_TIM4_Init+0xc0>)
 80171f6:	2200      	movs	r2, #0
 80171f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 80171fa:	4b23      	ldr	r3, [pc, #140]	; (8017288 <MX_TIM4_Init+0xc0>)
 80171fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017202:	4b21      	ldr	r3, [pc, #132]	; (8017288 <MX_TIM4_Init+0xc0>)
 8017204:	2200      	movs	r2, #0
 8017206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017208:	4b1f      	ldr	r3, [pc, #124]	; (8017288 <MX_TIM4_Init+0xc0>)
 801720a:	2280      	movs	r2, #128	; 0x80
 801720c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 801720e:	481e      	ldr	r0, [pc, #120]	; (8017288 <MX_TIM4_Init+0xc0>)
 8017210:	f7ec fb0f 	bl	8003832 <HAL_TIM_IC_Init>
 8017214:	4603      	mov	r3, r0
 8017216:	2b00      	cmp	r3, #0
 8017218:	d001      	beq.n	801721e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 801721a:	f000 fa4f 	bl	80176bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801721e:	2300      	movs	r3, #0
 8017220:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017222:	2300      	movs	r3, #0
 8017224:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8017226:	f107 0314 	add.w	r3, r7, #20
 801722a:	4619      	mov	r1, r3
 801722c:	4816      	ldr	r0, [pc, #88]	; (8017288 <MX_TIM4_Init+0xc0>)
 801722e:	f7ed fb4f 	bl	80048d0 <HAL_TIMEx_MasterConfigSynchronization>
 8017232:	4603      	mov	r3, r0
 8017234:	2b00      	cmp	r3, #0
 8017236:	d001      	beq.n	801723c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8017238:	f000 fa40 	bl	80176bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 801723c:	2300      	movs	r3, #0
 801723e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8017240:	2301      	movs	r3, #1
 8017242:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8017244:	2300      	movs	r3, #0
 8017246:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8017248:	2300      	movs	r3, #0
 801724a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 801724c:	1d3b      	adds	r3, r7, #4
 801724e:	2200      	movs	r2, #0
 8017250:	4619      	mov	r1, r3
 8017252:	480d      	ldr	r0, [pc, #52]	; (8017288 <MX_TIM4_Init+0xc0>)
 8017254:	f7ec fcfc 	bl	8003c50 <HAL_TIM_IC_ConfigChannel>
 8017258:	4603      	mov	r3, r0
 801725a:	2b00      	cmp	r3, #0
 801725c:	d001      	beq.n	8017262 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 801725e:	f000 fa2d 	bl	80176bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __TIM4_CLK_ENABLE();
 8017262:	4b0b      	ldr	r3, [pc, #44]	; (8017290 <MX_TIM4_Init+0xc8>)
 8017264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017266:	4a0a      	ldr	r2, [pc, #40]	; (8017290 <MX_TIM4_Init+0xc8>)
 8017268:	f043 0304 	orr.w	r3, r3, #4
 801726c:	6413      	str	r3, [r2, #64]	; 0x40
 801726e:	4b08      	ldr	r3, [pc, #32]	; (8017290 <MX_TIM4_Init+0xc8>)
 8017270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017272:	f003 0304 	and.w	r3, r3, #4
 8017276:	603b      	str	r3, [r7, #0]
 8017278:	683b      	ldr	r3, [r7, #0]
    HAL_TIM_Base_Start(&htim4);
 801727a:	4803      	ldr	r0, [pc, #12]	; (8017288 <MX_TIM4_Init+0xc0>)
 801727c:	f7ec fa50 	bl	8003720 <HAL_TIM_Base_Start>

  /* USER CODE END TIM4_Init 2 */

}
 8017280:	bf00      	nop
 8017282:	3720      	adds	r7, #32
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}
 8017288:	2000c10c 	.word	0x2000c10c
 801728c:	40000800 	.word	0x40000800
 8017290:	40023800 	.word	0x40023800

08017294 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8017298:	4b14      	ldr	r3, [pc, #80]	; (80172ec <MX_USART3_UART_Init+0x58>)
 801729a:	4a15      	ldr	r2, [pc, #84]	; (80172f0 <MX_USART3_UART_Init+0x5c>)
 801729c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 801729e:	4b13      	ldr	r3, [pc, #76]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80172a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80172a6:	4b11      	ldr	r3, [pc, #68]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172a8:	2200      	movs	r2, #0
 80172aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80172ac:	4b0f      	ldr	r3, [pc, #60]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80172b2:	4b0e      	ldr	r3, [pc, #56]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172b4:	2200      	movs	r2, #0
 80172b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80172b8:	4b0c      	ldr	r3, [pc, #48]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172ba:	220c      	movs	r2, #12
 80172bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80172be:	4b0b      	ldr	r3, [pc, #44]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172c0:	2200      	movs	r2, #0
 80172c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80172c4:	4b09      	ldr	r3, [pc, #36]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172c6:	2200      	movs	r2, #0
 80172c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80172ca:	4b08      	ldr	r3, [pc, #32]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172cc:	2200      	movs	r2, #0
 80172ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80172d0:	4b06      	ldr	r3, [pc, #24]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172d2:	2200      	movs	r2, #0
 80172d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80172d6:	4805      	ldr	r0, [pc, #20]	; (80172ec <MX_USART3_UART_Init+0x58>)
 80172d8:	f7ed fba6 	bl	8004a28 <HAL_UART_Init>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d001      	beq.n	80172e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80172e2:	f000 f9eb 	bl	80176bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80172e6:	bf00      	nop
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	2000c14c 	.word	0x2000c14c
 80172f0:	40004800 	.word	0x40004800

080172f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80172f8:	4b14      	ldr	r3, [pc, #80]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80172fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80172fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017300:	4b12      	ldr	r3, [pc, #72]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017302:	2206      	movs	r2, #6
 8017304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017306:	4b11      	ldr	r3, [pc, #68]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017308:	2202      	movs	r2, #2
 801730a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801730c:	4b0f      	ldr	r3, [pc, #60]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 801730e:	2200      	movs	r2, #0
 8017310:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017312:	4b0e      	ldr	r3, [pc, #56]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017314:	2202      	movs	r2, #2
 8017316:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8017318:	4b0c      	ldr	r3, [pc, #48]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 801731a:	2201      	movs	r2, #1
 801731c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801731e:	4b0b      	ldr	r3, [pc, #44]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017320:	2200      	movs	r2, #0
 8017322:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017324:	4b09      	ldr	r3, [pc, #36]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017326:	2200      	movs	r2, #0
 8017328:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801732a:	4b08      	ldr	r3, [pc, #32]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 801732c:	2201      	movs	r2, #1
 801732e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017330:	4b06      	ldr	r3, [pc, #24]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017332:	2200      	movs	r2, #0
 8017334:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017336:	4805      	ldr	r0, [pc, #20]	; (801734c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8017338:	f7ea ff1f 	bl	800217a <HAL_PCD_Init>
 801733c:	4603      	mov	r3, r0
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8017342:	f000 f9bb 	bl	80176bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8017346:	bf00      	nop
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	2000c1d0 	.word	0x2000c1d0

08017350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b08c      	sub	sp, #48	; 0x30
 8017354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017356:	f107 031c 	add.w	r3, r7, #28
 801735a:	2200      	movs	r2, #0
 801735c:	601a      	str	r2, [r3, #0]
 801735e:	605a      	str	r2, [r3, #4]
 8017360:	609a      	str	r2, [r3, #8]
 8017362:	60da      	str	r2, [r3, #12]
 8017364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8017366:	4b54      	ldr	r3, [pc, #336]	; (80174b8 <MX_GPIO_Init+0x168>)
 8017368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801736a:	4a53      	ldr	r2, [pc, #332]	; (80174b8 <MX_GPIO_Init+0x168>)
 801736c:	f043 0304 	orr.w	r3, r3, #4
 8017370:	6313      	str	r3, [r2, #48]	; 0x30
 8017372:	4b51      	ldr	r3, [pc, #324]	; (80174b8 <MX_GPIO_Init+0x168>)
 8017374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017376:	f003 0304 	and.w	r3, r3, #4
 801737a:	61bb      	str	r3, [r7, #24]
 801737c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801737e:	4b4e      	ldr	r3, [pc, #312]	; (80174b8 <MX_GPIO_Init+0x168>)
 8017380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017382:	4a4d      	ldr	r2, [pc, #308]	; (80174b8 <MX_GPIO_Init+0x168>)
 8017384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017388:	6313      	str	r3, [r2, #48]	; 0x30
 801738a:	4b4b      	ldr	r3, [pc, #300]	; (80174b8 <MX_GPIO_Init+0x168>)
 801738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801738e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017392:	617b      	str	r3, [r7, #20]
 8017394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017396:	4b48      	ldr	r3, [pc, #288]	; (80174b8 <MX_GPIO_Init+0x168>)
 8017398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801739a:	4a47      	ldr	r2, [pc, #284]	; (80174b8 <MX_GPIO_Init+0x168>)
 801739c:	f043 0301 	orr.w	r3, r3, #1
 80173a0:	6313      	str	r3, [r2, #48]	; 0x30
 80173a2:	4b45      	ldr	r3, [pc, #276]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173a6:	f003 0301 	and.w	r3, r3, #1
 80173aa:	613b      	str	r3, [r7, #16]
 80173ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80173ae:	4b42      	ldr	r3, [pc, #264]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173b2:	4a41      	ldr	r2, [pc, #260]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173b4:	f043 0302 	orr.w	r3, r3, #2
 80173b8:	6313      	str	r3, [r2, #48]	; 0x30
 80173ba:	4b3f      	ldr	r3, [pc, #252]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173be:	f003 0302 	and.w	r3, r3, #2
 80173c2:	60fb      	str	r3, [r7, #12]
 80173c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80173c6:	4b3c      	ldr	r3, [pc, #240]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ca:	4a3b      	ldr	r2, [pc, #236]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173cc:	f043 0308 	orr.w	r3, r3, #8
 80173d0:	6313      	str	r3, [r2, #48]	; 0x30
 80173d2:	4b39      	ldr	r3, [pc, #228]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173d6:	f003 0308 	and.w	r3, r3, #8
 80173da:	60bb      	str	r3, [r7, #8]
 80173dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80173de:	4b36      	ldr	r3, [pc, #216]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173e2:	4a35      	ldr	r2, [pc, #212]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173e8:	6313      	str	r3, [r2, #48]	; 0x30
 80173ea:	4b33      	ldr	r3, [pc, #204]	; (80174b8 <MX_GPIO_Init+0x168>)
 80173ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80173f2:	607b      	str	r3, [r7, #4]
 80173f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80173f6:	2200      	movs	r2, #0
 80173f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80173fc:	482f      	ldr	r0, [pc, #188]	; (80174bc <MX_GPIO_Init+0x16c>)
 80173fe:	f7ea fe65 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8017402:	2200      	movs	r2, #0
 8017404:	2140      	movs	r1, #64	; 0x40
 8017406:	482e      	ldr	r0, [pc, #184]	; (80174c0 <MX_GPIO_Init+0x170>)
 8017408:	f7ea fe60 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Out0_Pin|Out1_Pin|Out2_Pin|Out3_Pin 
 801740c:	2200      	movs	r2, #0
 801740e:	21ff      	movs	r1, #255	; 0xff
 8017410:	482c      	ldr	r0, [pc, #176]	; (80174c4 <MX_GPIO_Init+0x174>)
 8017412:	f7ea fe5b 	bl	80020cc <HAL_GPIO_WritePin>
                          |Out4_Pin|Out5_Pin|Out6_Pin|Out7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8017416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801741a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801741c:	4b2a      	ldr	r3, [pc, #168]	; (80174c8 <MX_GPIO_Init+0x178>)
 801741e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017420:	2300      	movs	r3, #0
 8017422:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8017424:	f107 031c 	add.w	r3, r7, #28
 8017428:	4619      	mov	r1, r3
 801742a:	4828      	ldr	r0, [pc, #160]	; (80174cc <MX_GPIO_Init+0x17c>)
 801742c:	f7ea fc8c 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8017430:	f244 0381 	movw	r3, #16513	; 0x4081
 8017434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017436:	2301      	movs	r3, #1
 8017438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801743a:	2300      	movs	r3, #0
 801743c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801743e:	2300      	movs	r3, #0
 8017440:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017442:	f107 031c 	add.w	r3, r7, #28
 8017446:	4619      	mov	r1, r3
 8017448:	481c      	ldr	r0, [pc, #112]	; (80174bc <MX_GPIO_Init+0x16c>)
 801744a:	f7ea fc7d 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 801744e:	2340      	movs	r3, #64	; 0x40
 8017450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017452:	2301      	movs	r3, #1
 8017454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017456:	2300      	movs	r3, #0
 8017458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801745a:	2300      	movs	r3, #0
 801745c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 801745e:	f107 031c 	add.w	r3, r7, #28
 8017462:	4619      	mov	r1, r3
 8017464:	4816      	ldr	r0, [pc, #88]	; (80174c0 <MX_GPIO_Init+0x170>)
 8017466:	f7ea fc6f 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 801746a:	2380      	movs	r3, #128	; 0x80
 801746c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801746e:	2300      	movs	r3, #0
 8017470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017472:	2300      	movs	r3, #0
 8017474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8017476:	f107 031c 	add.w	r3, r7, #28
 801747a:	4619      	mov	r1, r3
 801747c:	4810      	ldr	r0, [pc, #64]	; (80174c0 <MX_GPIO_Init+0x170>)
 801747e:	f7ea fc63 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : Out0_Pin Out1_Pin Out2_Pin Out3_Pin 
                           Out4_Pin Out5_Pin Out6_Pin Out7_Pin */
  GPIO_InitStruct.Pin = Out0_Pin|Out1_Pin|Out2_Pin|Out3_Pin 
 8017482:	23ff      	movs	r3, #255	; 0xff
 8017484:	61fb      	str	r3, [r7, #28]
                          |Out4_Pin|Out5_Pin|Out6_Pin|Out7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017486:	2301      	movs	r3, #1
 8017488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801748a:	2300      	movs	r3, #0
 801748c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801748e:	2303      	movs	r3, #3
 8017490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017492:	f107 031c 	add.w	r3, r7, #28
 8017496:	4619      	mov	r1, r3
 8017498:	480a      	ldr	r0, [pc, #40]	; (80174c4 <MX_GPIO_Init+0x174>)
 801749a:	f7ea fc55 	bl	8001d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 801749e:	2200      	movs	r2, #0
 80174a0:	2105      	movs	r1, #5
 80174a2:	2028      	movs	r0, #40	; 0x28
 80174a4:	f7e9 fc34 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80174a8:	2028      	movs	r0, #40	; 0x28
 80174aa:	f7e9 fc4d 	bl	8000d48 <HAL_NVIC_EnableIRQ>

}
 80174ae:	bf00      	nop
 80174b0:	3730      	adds	r7, #48	; 0x30
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	bf00      	nop
 80174b8:	40023800 	.word	0x40023800
 80174bc:	40020400 	.word	0x40020400
 80174c0:	40021800 	.word	0x40021800
 80174c4:	40020c00 	.word	0x40020c00
 80174c8:	10210000 	.word	0x10210000
 80174cc:	40020800 	.word	0x40020800

080174d0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b082      	sub	sp, #8
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80174d8:	f7ff fa5e 	bl	8016998 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_netconn_init();
 80174dc:	f7ff fa48 	bl	8016970 <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {
	  osThreadTerminate(NULL);
 80174e0:	2000      	movs	r0, #0
 80174e2:	f7ee fa38 	bl	8005956 <osThreadTerminate>
 80174e6:	e7fb      	b.n	80174e0 <StartDefaultTask+0x10>

080174e8 <StartmyTask8IO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartmyTask8IO */
void StartmyTask8IO(void const * argument)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
	  		  //count = TIM4->CNT;
	  		  //t2 = DWT->CYCCNT;
	  		  //diff = t2 - t1;
	  	  }
*/
	  HAL_GPIO_WritePin(GPIOD, out, GPIO_PIN_SET);
 80174f0:	4b05      	ldr	r3, [pc, #20]	; (8017508 <StartmyTask8IO+0x20>)
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	2201      	movs	r2, #1
 80174f8:	4619      	mov	r1, r3
 80174fa:	4804      	ldr	r0, [pc, #16]	; (801750c <StartmyTask8IO+0x24>)
 80174fc:	f7ea fde6 	bl	80020cc <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET);
		//HAL_GPIO_WritePin(GPIOD, Out0_Pin|Out1_Pin|Out2_Pin|Out3_Pin |Out4_Pin|Out5_Pin|Out6_Pin|Out7_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOD, out, GPIO_PIN_SET);
	}
	*/
    osDelay(1);
 8017500:	2001      	movs	r0, #1
 8017502:	f7ee fa34 	bl	800596e <osDelay>
	  HAL_GPIO_WritePin(GPIOD, out, GPIO_PIN_SET);
 8017506:	e7f3      	b.n	80174f0 <StartmyTask8IO+0x8>
 8017508:	20005839 	.word	0x20005839
 801750c:	40020c00 	.word	0x40020c00

08017510 <StartTaskLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED */
void StartTaskLED(void const * argument)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b082      	sub	sp, #8
 8017514:	af00      	add	r7, sp, #0
 8017516:	6078      	str	r0, [r7, #4]
	  //osDelay(1000);
	  //t2 = DWT->CYCCNT;
	  //diff = t2 - t1;


	  if(xSemaphoreTake(myBinarySem01Handle,1))
 8017518:	4b48      	ldr	r3, [pc, #288]	; (801763c <StartTaskLED+0x12c>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	2101      	movs	r1, #1
 801751e:	4618      	mov	r0, r3
 8017520:	f7ef fa02 	bl	8006928 <xQueueSemaphoreTake>
 8017524:	4603      	mov	r3, r0
 8017526:	2b00      	cmp	r3, #0
 8017528:	d007      	beq.n	801753a <StartTaskLED+0x2a>
	  {

		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 801752a:	2101      	movs	r1, #1
 801752c:	4844      	ldr	r0, [pc, #272]	; (8017640 <StartTaskLED+0x130>)
 801752e:	f7ea fde6 	bl	80020fe <HAL_GPIO_TogglePin>
		  count = TIM4->CNT;
 8017532:	4b44      	ldr	r3, [pc, #272]	; (8017644 <StartTaskLED+0x134>)
 8017534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017536:	4a44      	ldr	r2, [pc, #272]	; (8017648 <StartTaskLED+0x138>)
 8017538:	6013      	str	r3, [r2, #0]
		  //t2 = DWT->CYCCNT;
		  //diff = t2 - t1;
	  }


	  if(xSemaphoreTake(myBinarySem02Handle,1))
 801753a:	4b44      	ldr	r3, [pc, #272]	; (801764c <StartTaskLED+0x13c>)
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2101      	movs	r1, #1
 8017540:	4618      	mov	r0, r3
 8017542:	f7ef f9f1 	bl	8006928 <xQueueSemaphoreTake>
 8017546:	4603      	mov	r3, r0
 8017548:	2b00      	cmp	r3, #0
 801754a:	d003      	beq.n	8017554 <StartTaskLED+0x44>
	 	  {

	 		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 801754c:	2180      	movs	r1, #128	; 0x80
 801754e:	483c      	ldr	r0, [pc, #240]	; (8017640 <StartTaskLED+0x130>)
 8017550:	f7ea fdd5 	bl	80020fe <HAL_GPIO_TogglePin>
	 	  }

	  if(xSemaphoreTake(myBinarySem03Handle,1))
 8017554:	4b3e      	ldr	r3, [pc, #248]	; (8017650 <StartTaskLED+0x140>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2101      	movs	r1, #1
 801755a:	4618      	mov	r0, r3
 801755c:	f7ef f9e4 	bl	8006928 <xQueueSemaphoreTake>
 8017560:	4603      	mov	r3, r0
 8017562:	2b00      	cmp	r3, #0
 8017564:	d004      	beq.n	8017570 <StartTaskLED+0x60>
	  	 	  {

	  	 		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8017566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801756a:	4835      	ldr	r0, [pc, #212]	; (8017640 <StartTaskLED+0x130>)
 801756c:	f7ea fdc7 	bl	80020fe <HAL_GPIO_TogglePin>


	  	 	  }

	  if(xSemaphoreTake(myBinarySem04Handle,1))
 8017570:	4b38      	ldr	r3, [pc, #224]	; (8017654 <StartTaskLED+0x144>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	2101      	movs	r1, #1
 8017576:	4618      	mov	r0, r3
 8017578:	f7ef f9d6 	bl	8006928 <xQueueSemaphoreTake>
 801757c:	4603      	mov	r3, r0
 801757e:	2b00      	cmp	r3, #0
 8017580:	d028      	beq.n	80175d4 <StartTaskLED+0xc4>
	  	 	  {
		  	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8017582:	2200      	movs	r2, #0
 8017584:	2101      	movs	r1, #1
 8017586:	482e      	ldr	r0, [pc, #184]	; (8017640 <StartTaskLED+0x130>)
 8017588:	f7ea fda0 	bl	80020cc <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 801758c:	2200      	movs	r2, #0
 801758e:	2180      	movs	r1, #128	; 0x80
 8017590:	482b      	ldr	r0, [pc, #172]	; (8017640 <StartTaskLED+0x130>)
 8017592:	f7ea fd9b 	bl	80020cc <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8017596:	2200      	movs	r2, #0
 8017598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801759c:	4828      	ldr	r0, [pc, #160]	; (8017640 <StartTaskLED+0x130>)
 801759e:	f7ea fd95 	bl	80020cc <HAL_GPIO_WritePin>
		  	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80175a2:	2101      	movs	r1, #1
 80175a4:	4826      	ldr	r0, [pc, #152]	; (8017640 <StartTaskLED+0x130>)
 80175a6:	f7ea fdaa 	bl	80020fe <HAL_GPIO_TogglePin>
		  	  osDelay(500);
 80175aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80175ae:	f7ee f9de 	bl	800596e <osDelay>
		  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80175b2:	2180      	movs	r1, #128	; 0x80
 80175b4:	4822      	ldr	r0, [pc, #136]	; (8017640 <StartTaskLED+0x130>)
 80175b6:	f7ea fda2 	bl	80020fe <HAL_GPIO_TogglePin>
		  	  osDelay(500);
 80175ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80175be:	f7ee f9d6 	bl	800596e <osDelay>
		  	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80175c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80175c6:	481e      	ldr	r0, [pc, #120]	; (8017640 <StartTaskLED+0x130>)
 80175c8:	f7ea fd99 	bl	80020fe <HAL_GPIO_TogglePin>
		  	  osDelay(500);
 80175cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80175d0:	f7ee f9cd 	bl	800596e <osDelay>
	  	 	  }

	  if(xSemaphoreTake(myBinarySem05Handle,1))
 80175d4:	4b20      	ldr	r3, [pc, #128]	; (8017658 <StartTaskLED+0x148>)
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2101      	movs	r1, #1
 80175da:	4618      	mov	r0, r3
 80175dc:	f7ef f9a4 	bl	8006928 <xQueueSemaphoreTake>
 80175e0:	4603      	mov	r3, r0
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d00f      	beq.n	8017606 <StartTaskLED+0xf6>
	  	  	 	  {

		  	  	  	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80175e6:	2200      	movs	r2, #0
 80175e8:	2101      	movs	r1, #1
 80175ea:	4815      	ldr	r0, [pc, #84]	; (8017640 <StartTaskLED+0x130>)
 80175ec:	f7ea fd6e 	bl	80020cc <HAL_GPIO_WritePin>
		  		  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80175f0:	2200      	movs	r2, #0
 80175f2:	2180      	movs	r1, #128	; 0x80
 80175f4:	4812      	ldr	r0, [pc, #72]	; (8017640 <StartTaskLED+0x130>)
 80175f6:	f7ea fd69 	bl	80020cc <HAL_GPIO_WritePin>
		  		  	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80175fa:	2200      	movs	r2, #0
 80175fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8017600:	480f      	ldr	r0, [pc, #60]	; (8017640 <StartTaskLED+0x130>)
 8017602:	f7ea fd63 	bl	80020cc <HAL_GPIO_WritePin>
	  	  	 	  }
	  	if(xSemaphoreTake(myBinarySem06Handle,1))
 8017606:	4b15      	ldr	r3, [pc, #84]	; (801765c <StartTaskLED+0x14c>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	2101      	movs	r1, #1
 801760c:	4618      	mov	r0, r3
 801760e:	f7ef f98b 	bl	8006928 <xQueueSemaphoreTake>
 8017612:	4603      	mov	r3, r0
 8017614:	2b00      	cmp	r3, #0
 8017616:	f43f af7f 	beq.w	8017518 <StartTaskLED+0x8>
	  		  	  	 	  {
	  		                      HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 801761a:	2201      	movs	r2, #1
 801761c:	2101      	movs	r1, #1
 801761e:	4808      	ldr	r0, [pc, #32]	; (8017640 <StartTaskLED+0x130>)
 8017620:	f7ea fd54 	bl	80020cc <HAL_GPIO_WritePin>
	  				  		  	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8017624:	2201      	movs	r2, #1
 8017626:	2180      	movs	r1, #128	; 0x80
 8017628:	4805      	ldr	r0, [pc, #20]	; (8017640 <StartTaskLED+0x130>)
 801762a:	f7ea fd4f 	bl	80020cc <HAL_GPIO_WritePin>
	  				  		  	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 801762e:	2201      	movs	r2, #1
 8017630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8017634:	4802      	ldr	r0, [pc, #8]	; (8017640 <StartTaskLED+0x130>)
 8017636:	f7ea fd49 	bl	80020cc <HAL_GPIO_WritePin>
	  if(xSemaphoreTake(myBinarySem01Handle,1))
 801763a:	e76d      	b.n	8017518 <StartTaskLED+0x8>
 801763c:	2000c66c 	.word	0x2000c66c
 8017640:	40020400 	.word	0x40020400
 8017644:	40000800 	.word	0x40000800
 8017648:	20005844 	.word	0x20005844
 801764c:	2000c664 	.word	0x2000c664
 8017650:	2000c618 	.word	0x2000c618
 8017654:	2000c67c 	.word	0x2000c67c
 8017658:	2000c5d4 	.word	0x2000c5d4
 801765c:	2000c1cc 	.word	0x2000c1cc

08017660 <StartTaskInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskInput */
void StartTaskInput(void const * argument)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b082      	sub	sp, #8
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskInput */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8017668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801766c:	4808      	ldr	r0, [pc, #32]	; (8017690 <StartTaskInput+0x30>)
 801766e:	f7ea fd15 	bl	800209c <HAL_GPIO_ReadPin>
 8017672:	4603      	mov	r3, r0
 8017674:	2b01      	cmp	r3, #1
 8017676:	d103      	bne.n	8017680 <StartTaskInput+0x20>
		  Button = 1;
 8017678:	4b06      	ldr	r3, [pc, #24]	; (8017694 <StartTaskInput+0x34>)
 801767a:	2201      	movs	r2, #1
 801767c:	601a      	str	r2, [r3, #0]
 801767e:	e002      	b.n	8017686 <StartTaskInput+0x26>
		  //xSemaphoreGive(myBinarySem01Handle);
	  }
	  	  else
	  {
	  		Button = 0;
 8017680:	4b04      	ldr	r3, [pc, #16]	; (8017694 <StartTaskInput+0x34>)
 8017682:	2200      	movs	r2, #0
 8017684:	601a      	str	r2, [r3, #0]
  	  }

    osDelay(1);
 8017686:	2001      	movs	r0, #1
 8017688:	f7ee f971 	bl	800596e <osDelay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 801768c:	e7ec      	b.n	8017668 <StartTaskInput+0x8>
 801768e:	bf00      	nop
 8017690:	40020800 	.word	0x40020800
 8017694:	2000583c 	.word	0x2000583c

08017698 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	4a04      	ldr	r2, [pc, #16]	; (80176b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80176a6:	4293      	cmp	r3, r2
 80176a8:	d101      	bne.n	80176ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80176aa:	f7e8 ffaf 	bl	800060c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80176ae:	bf00      	nop
 80176b0:	3708      	adds	r7, #8
 80176b2:	46bd      	mov	sp, r7
 80176b4:	bd80      	pop	{r7, pc}
 80176b6:	bf00      	nop
 80176b8:	40001400 	.word	0x40001400

080176bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80176bc:	b480      	push	{r7}
 80176be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80176c0:	bf00      	nop
 80176c2:	46bd      	mov	sp, r7
 80176c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c8:	4770      	bx	lr
	...

080176cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80176d2:	4b15      	ldr	r3, [pc, #84]	; (8017728 <HAL_MspInit+0x5c>)
 80176d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176d6:	4a14      	ldr	r2, [pc, #80]	; (8017728 <HAL_MspInit+0x5c>)
 80176d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80176dc:	6413      	str	r3, [r2, #64]	; 0x40
 80176de:	4b12      	ldr	r3, [pc, #72]	; (8017728 <HAL_MspInit+0x5c>)
 80176e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80176e6:	607b      	str	r3, [r7, #4]
 80176e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80176ea:	4b0f      	ldr	r3, [pc, #60]	; (8017728 <HAL_MspInit+0x5c>)
 80176ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176ee:	4a0e      	ldr	r2, [pc, #56]	; (8017728 <HAL_MspInit+0x5c>)
 80176f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176f4:	6453      	str	r3, [r2, #68]	; 0x44
 80176f6:	4b0c      	ldr	r3, [pc, #48]	; (8017728 <HAL_MspInit+0x5c>)
 80176f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176fe:	603b      	str	r3, [r7, #0]
 8017700:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017702:	2200      	movs	r2, #0
 8017704:	210f      	movs	r1, #15
 8017706:	f06f 0001 	mvn.w	r0, #1
 801770a:	f7e9 fb01 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 801770e:	2200      	movs	r2, #0
 8017710:	2105      	movs	r1, #5
 8017712:	2005      	movs	r0, #5
 8017714:	f7e9 fafc 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8017718:	2005      	movs	r0, #5
 801771a:	f7e9 fb15 	bl	8000d48 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801771e:	bf00      	nop
 8017720:	3708      	adds	r7, #8
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}
 8017726:	bf00      	nop
 8017728:	40023800 	.word	0x40023800

0801772c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801772c:	b480      	push	{r7}
 801772e:	b085      	sub	sp, #20
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	4a0a      	ldr	r2, [pc, #40]	; (8017764 <HAL_ADC_MspInit+0x38>)
 801773a:	4293      	cmp	r3, r2
 801773c:	d10b      	bne.n	8017756 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 801773e:	4b0a      	ldr	r3, [pc, #40]	; (8017768 <HAL_ADC_MspInit+0x3c>)
 8017740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017742:	4a09      	ldr	r2, [pc, #36]	; (8017768 <HAL_ADC_MspInit+0x3c>)
 8017744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017748:	6453      	str	r3, [r2, #68]	; 0x44
 801774a:	4b07      	ldr	r3, [pc, #28]	; (8017768 <HAL_ADC_MspInit+0x3c>)
 801774c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801774e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017752:	60fb      	str	r3, [r7, #12]
 8017754:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8017756:	bf00      	nop
 8017758:	3714      	adds	r7, #20
 801775a:	46bd      	mov	sp, r7
 801775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017760:	4770      	bx	lr
 8017762:	bf00      	nop
 8017764:	40012000 	.word	0x40012000
 8017768:	40023800 	.word	0x40023800

0801776c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b08a      	sub	sp, #40	; 0x28
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017774:	f107 0314 	add.w	r3, r7, #20
 8017778:	2200      	movs	r2, #0
 801777a:	601a      	str	r2, [r3, #0]
 801777c:	605a      	str	r2, [r3, #4]
 801777e:	609a      	str	r2, [r3, #8]
 8017780:	60da      	str	r2, [r3, #12]
 8017782:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	4a29      	ldr	r2, [pc, #164]	; (8017830 <HAL_TIM_Base_MspInit+0xc4>)
 801778a:	4293      	cmp	r3, r2
 801778c:	d14c      	bne.n	8017828 <HAL_TIM_Base_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 801778e:	4b29      	ldr	r3, [pc, #164]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 8017790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017792:	4a28      	ldr	r2, [pc, #160]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 8017794:	f043 0302 	orr.w	r3, r3, #2
 8017798:	6413      	str	r3, [r2, #64]	; 0x40
 801779a:	4b26      	ldr	r3, [pc, #152]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 801779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801779e:	f003 0302 	and.w	r3, r3, #2
 80177a2:	613b      	str	r3, [r7, #16]
 80177a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80177a6:	4b23      	ldr	r3, [pc, #140]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 80177a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177aa:	4a22      	ldr	r2, [pc, #136]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 80177ac:	f043 0302 	orr.w	r3, r3, #2
 80177b0:	6313      	str	r3, [r2, #48]	; 0x30
 80177b2:	4b20      	ldr	r3, [pc, #128]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 80177b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177b6:	f003 0302 	and.w	r3, r3, #2
 80177ba:	60fb      	str	r3, [r7, #12]
 80177bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80177be:	4b1d      	ldr	r3, [pc, #116]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 80177c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c2:	4a1c      	ldr	r2, [pc, #112]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 80177c4:	f043 0304 	orr.w	r3, r3, #4
 80177c8:	6313      	str	r3, [r2, #48]	; 0x30
 80177ca:	4b1a      	ldr	r3, [pc, #104]	; (8017834 <HAL_TIM_Base_MspInit+0xc8>)
 80177cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177ce:	f003 0304 	and.w	r3, r3, #4
 80177d2:	60bb      	str	r3, [r7, #8]
 80177d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80177d6:	2302      	movs	r3, #2
 80177d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177da:	2302      	movs	r3, #2
 80177dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177de:	2300      	movs	r3, #0
 80177e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80177e2:	2300      	movs	r3, #0
 80177e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80177e6:	2302      	movs	r3, #2
 80177e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80177ea:	f107 0314 	add.w	r3, r7, #20
 80177ee:	4619      	mov	r1, r3
 80177f0:	4811      	ldr	r0, [pc, #68]	; (8017838 <HAL_TIM_Base_MspInit+0xcc>)
 80177f2:	f7ea faa9 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80177f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80177fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177fc:	2302      	movs	r3, #2
 80177fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017800:	2300      	movs	r3, #0
 8017802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017804:	2300      	movs	r3, #0
 8017806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8017808:	2302      	movs	r3, #2
 801780a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801780c:	f107 0314 	add.w	r3, r7, #20
 8017810:	4619      	mov	r1, r3
 8017812:	480a      	ldr	r0, [pc, #40]	; (801783c <HAL_TIM_Base_MspInit+0xd0>)
 8017814:	f7ea fa98 	bl	8001d48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8017818:	2200      	movs	r2, #0
 801781a:	2105      	movs	r1, #5
 801781c:	201d      	movs	r0, #29
 801781e:	f7e9 fa77 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017822:	201d      	movs	r0, #29
 8017824:	f7e9 fa90 	bl	8000d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8017828:	bf00      	nop
 801782a:	3728      	adds	r7, #40	; 0x28
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	40000400 	.word	0x40000400
 8017834:	40023800 	.word	0x40023800
 8017838:	40020400 	.word	0x40020400
 801783c:	40020800 	.word	0x40020800

08017840 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b08a      	sub	sp, #40	; 0x28
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017848:	f107 0314 	add.w	r3, r7, #20
 801784c:	2200      	movs	r2, #0
 801784e:	601a      	str	r2, [r3, #0]
 8017850:	605a      	str	r2, [r3, #4]
 8017852:	609a      	str	r2, [r3, #8]
 8017854:	60da      	str	r2, [r3, #12]
 8017856:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	4a17      	ldr	r2, [pc, #92]	; (80178bc <HAL_TIM_IC_MspInit+0x7c>)
 801785e:	4293      	cmp	r3, r2
 8017860:	d128      	bne.n	80178b4 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8017862:	4b17      	ldr	r3, [pc, #92]	; (80178c0 <HAL_TIM_IC_MspInit+0x80>)
 8017864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017866:	4a16      	ldr	r2, [pc, #88]	; (80178c0 <HAL_TIM_IC_MspInit+0x80>)
 8017868:	f043 0304 	orr.w	r3, r3, #4
 801786c:	6413      	str	r3, [r2, #64]	; 0x40
 801786e:	4b14      	ldr	r3, [pc, #80]	; (80178c0 <HAL_TIM_IC_MspInit+0x80>)
 8017870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017872:	f003 0304 	and.w	r3, r3, #4
 8017876:	613b      	str	r3, [r7, #16]
 8017878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801787a:	4b11      	ldr	r3, [pc, #68]	; (80178c0 <HAL_TIM_IC_MspInit+0x80>)
 801787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801787e:	4a10      	ldr	r2, [pc, #64]	; (80178c0 <HAL_TIM_IC_MspInit+0x80>)
 8017880:	f043 0308 	orr.w	r3, r3, #8
 8017884:	6313      	str	r3, [r2, #48]	; 0x30
 8017886:	4b0e      	ldr	r3, [pc, #56]	; (80178c0 <HAL_TIM_IC_MspInit+0x80>)
 8017888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801788a:	f003 0308 	and.w	r3, r3, #8
 801788e:	60fb      	str	r3, [r7, #12]
 8017890:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8017892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017898:	2302      	movs	r3, #2
 801789a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801789c:	2300      	movs	r3, #0
 801789e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178a0:	2300      	movs	r3, #0
 80178a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80178a4:	2302      	movs	r3, #2
 80178a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80178a8:	f107 0314 	add.w	r3, r7, #20
 80178ac:	4619      	mov	r1, r3
 80178ae:	4805      	ldr	r0, [pc, #20]	; (80178c4 <HAL_TIM_IC_MspInit+0x84>)
 80178b0:	f7ea fa4a 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80178b4:	bf00      	nop
 80178b6:	3728      	adds	r7, #40	; 0x28
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	40000800 	.word	0x40000800
 80178c0:	40023800 	.word	0x40023800
 80178c4:	40020c00 	.word	0x40020c00

080178c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b08a      	sub	sp, #40	; 0x28
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80178d0:	f107 0314 	add.w	r3, r7, #20
 80178d4:	2200      	movs	r2, #0
 80178d6:	601a      	str	r2, [r3, #0]
 80178d8:	605a      	str	r2, [r3, #4]
 80178da:	609a      	str	r2, [r3, #8]
 80178dc:	60da      	str	r2, [r3, #12]
 80178de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4a17      	ldr	r2, [pc, #92]	; (8017944 <HAL_UART_MspInit+0x7c>)
 80178e6:	4293      	cmp	r3, r2
 80178e8:	d128      	bne.n	801793c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80178ea:	4b17      	ldr	r3, [pc, #92]	; (8017948 <HAL_UART_MspInit+0x80>)
 80178ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ee:	4a16      	ldr	r2, [pc, #88]	; (8017948 <HAL_UART_MspInit+0x80>)
 80178f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80178f4:	6413      	str	r3, [r2, #64]	; 0x40
 80178f6:	4b14      	ldr	r3, [pc, #80]	; (8017948 <HAL_UART_MspInit+0x80>)
 80178f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80178fe:	613b      	str	r3, [r7, #16]
 8017900:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017902:	4b11      	ldr	r3, [pc, #68]	; (8017948 <HAL_UART_MspInit+0x80>)
 8017904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017906:	4a10      	ldr	r2, [pc, #64]	; (8017948 <HAL_UART_MspInit+0x80>)
 8017908:	f043 0308 	orr.w	r3, r3, #8
 801790c:	6313      	str	r3, [r2, #48]	; 0x30
 801790e:	4b0e      	ldr	r3, [pc, #56]	; (8017948 <HAL_UART_MspInit+0x80>)
 8017910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017912:	f003 0308 	and.w	r3, r3, #8
 8017916:	60fb      	str	r3, [r7, #12]
 8017918:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 801791a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801791e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017920:	2302      	movs	r3, #2
 8017922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017924:	2300      	movs	r3, #0
 8017926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017928:	2303      	movs	r3, #3
 801792a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 801792c:	2307      	movs	r3, #7
 801792e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017930:	f107 0314 	add.w	r3, r7, #20
 8017934:	4619      	mov	r1, r3
 8017936:	4805      	ldr	r0, [pc, #20]	; (801794c <HAL_UART_MspInit+0x84>)
 8017938:	f7ea fa06 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 801793c:	bf00      	nop
 801793e:	3728      	adds	r7, #40	; 0x28
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}
 8017944:	40004800 	.word	0x40004800
 8017948:	40023800 	.word	0x40023800
 801794c:	40020c00 	.word	0x40020c00

08017950 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b08a      	sub	sp, #40	; 0x28
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017958:	f107 0314 	add.w	r3, r7, #20
 801795c:	2200      	movs	r2, #0
 801795e:	601a      	str	r2, [r3, #0]
 8017960:	605a      	str	r2, [r3, #4]
 8017962:	609a      	str	r2, [r3, #8]
 8017964:	60da      	str	r2, [r3, #12]
 8017966:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017970:	d141      	bne.n	80179f6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017972:	4b23      	ldr	r3, [pc, #140]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 8017974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017976:	4a22      	ldr	r2, [pc, #136]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 8017978:	f043 0301 	orr.w	r3, r3, #1
 801797c:	6313      	str	r3, [r2, #48]	; 0x30
 801797e:	4b20      	ldr	r3, [pc, #128]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 8017980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017982:	f003 0301 	and.w	r3, r3, #1
 8017986:	613b      	str	r3, [r7, #16]
 8017988:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801798a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801798e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017990:	2302      	movs	r3, #2
 8017992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017994:	2300      	movs	r3, #0
 8017996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017998:	2303      	movs	r3, #3
 801799a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801799c:	230a      	movs	r3, #10
 801799e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80179a0:	f107 0314 	add.w	r3, r7, #20
 80179a4:	4619      	mov	r1, r3
 80179a6:	4817      	ldr	r0, [pc, #92]	; (8017a04 <HAL_PCD_MspInit+0xb4>)
 80179a8:	f7ea f9ce 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80179ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80179b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80179b2:	2300      	movs	r3, #0
 80179b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80179b6:	2300      	movs	r3, #0
 80179b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80179ba:	f107 0314 	add.w	r3, r7, #20
 80179be:	4619      	mov	r1, r3
 80179c0:	4810      	ldr	r0, [pc, #64]	; (8017a04 <HAL_PCD_MspInit+0xb4>)
 80179c2:	f7ea f9c1 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80179c6:	4b0e      	ldr	r3, [pc, #56]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 80179c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179ca:	4a0d      	ldr	r2, [pc, #52]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 80179cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179d0:	6353      	str	r3, [r2, #52]	; 0x34
 80179d2:	4b0b      	ldr	r3, [pc, #44]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 80179d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80179da:	60fb      	str	r3, [r7, #12]
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	4b08      	ldr	r3, [pc, #32]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 80179e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179e2:	4a07      	ldr	r2, [pc, #28]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 80179e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80179e8:	6453      	str	r3, [r2, #68]	; 0x44
 80179ea:	4b05      	ldr	r3, [pc, #20]	; (8017a00 <HAL_PCD_MspInit+0xb0>)
 80179ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80179f2:	60bb      	str	r3, [r7, #8]
 80179f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80179f6:	bf00      	nop
 80179f8:	3728      	adds	r7, #40	; 0x28
 80179fa:	46bd      	mov	sp, r7
 80179fc:	bd80      	pop	{r7, pc}
 80179fe:	bf00      	nop
 8017a00:	40023800 	.word	0x40023800
 8017a04:	40020000 	.word	0x40020000

08017a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b08c      	sub	sp, #48	; 0x30
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017a10:	2300      	movs	r3, #0
 8017a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8017a18:	2200      	movs	r2, #0
 8017a1a:	6879      	ldr	r1, [r7, #4]
 8017a1c:	2037      	movs	r0, #55	; 0x37
 8017a1e:	f7e9 f977 	bl	8000d10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8017a22:	2037      	movs	r0, #55	; 0x37
 8017a24:	f7e9 f990 	bl	8000d48 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8017a28:	4b1f      	ldr	r3, [pc, #124]	; (8017aa8 <HAL_InitTick+0xa0>)
 8017a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a2c:	4a1e      	ldr	r2, [pc, #120]	; (8017aa8 <HAL_InitTick+0xa0>)
 8017a2e:	f043 0320 	orr.w	r3, r3, #32
 8017a32:	6413      	str	r3, [r2, #64]	; 0x40
 8017a34:	4b1c      	ldr	r3, [pc, #112]	; (8017aa8 <HAL_InitTick+0xa0>)
 8017a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a38:	f003 0320 	and.w	r3, r3, #32
 8017a3c:	60fb      	str	r3, [r7, #12]
 8017a3e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017a40:	f107 0210 	add.w	r2, r7, #16
 8017a44:	f107 0314 	add.w	r3, r7, #20
 8017a48:	4611      	mov	r1, r2
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7eb f9e4 	bl	8002e18 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017a50:	f7eb f9ba 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8017a54:	4603      	mov	r3, r0
 8017a56:	005b      	lsls	r3, r3, #1
 8017a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8017a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5c:	4a13      	ldr	r2, [pc, #76]	; (8017aac <HAL_InitTick+0xa4>)
 8017a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8017a62:	0c9b      	lsrs	r3, r3, #18
 8017a64:	3b01      	subs	r3, #1
 8017a66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8017a68:	4b11      	ldr	r3, [pc, #68]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a6a:	4a12      	ldr	r2, [pc, #72]	; (8017ab4 <HAL_InitTick+0xac>)
 8017a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8017a6e:	4b10      	ldr	r3, [pc, #64]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017a74:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8017a76:	4a0e      	ldr	r2, [pc, #56]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a7a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8017a7c:	4b0c      	ldr	r3, [pc, #48]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a7e:	2200      	movs	r2, #0
 8017a80:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017a82:	4b0b      	ldr	r3, [pc, #44]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a84:	2200      	movs	r2, #0
 8017a86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8017a88:	4809      	ldr	r0, [pc, #36]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a8a:	f7eb fe1d 	bl	80036c8 <HAL_TIM_Base_Init>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d104      	bne.n	8017a9e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8017a94:	4806      	ldr	r0, [pc, #24]	; (8017ab0 <HAL_InitTick+0xa8>)
 8017a96:	f7eb fe6d 	bl	8003774 <HAL_TIM_Base_Start_IT>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	e000      	b.n	8017aa0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8017a9e:	2301      	movs	r3, #1
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3730      	adds	r7, #48	; 0x30
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}
 8017aa8:	40023800 	.word	0x40023800
 8017aac:	431bde83 	.word	0x431bde83
 8017ab0:	2000c680 	.word	0x2000c680
 8017ab4:	40001400 	.word	0x40001400

08017ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017ab8:	b480      	push	{r7}
 8017aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8017abc:	bf00      	nop
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac4:	4770      	bx	lr

08017ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017ac6:	b480      	push	{r7}
 8017ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017aca:	e7fe      	b.n	8017aca <HardFault_Handler+0x4>

08017acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017acc:	b480      	push	{r7}
 8017ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017ad0:	e7fe      	b.n	8017ad0 <MemManage_Handler+0x4>

08017ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017ad2:	b480      	push	{r7}
 8017ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017ad6:	e7fe      	b.n	8017ad6 <BusFault_Handler+0x4>

08017ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017ad8:	b480      	push	{r7}
 8017ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017adc:	e7fe      	b.n	8017adc <UsageFault_Handler+0x4>

08017ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017ade:	b480      	push	{r7}
 8017ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017ae2:	bf00      	nop
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aea:	4770      	bx	lr

08017aec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8017aec:	b480      	push	{r7}
 8017aee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8017af0:	bf00      	nop
 8017af2:	46bd      	mov	sp, r7
 8017af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af8:	4770      	bx	lr
	...

08017afc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8017b00:	4802      	ldr	r0, [pc, #8]	; (8017b0c <TIM3_IRQHandler+0x10>)
 8017b02:	f7eb ff07 	bl	8003914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8017b06:	bf00      	nop
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	2000c5d8 	.word	0x2000c5d8

08017b10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8017b14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017b18:	f7ea fb0c 	bl	8002134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8017b1c:	bf00      	nop
 8017b1e:	bd80      	pop	{r7, pc}

08017b20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8017b24:	4802      	ldr	r0, [pc, #8]	; (8017b30 <TIM7_IRQHandler+0x10>)
 8017b26:	f7eb fef5 	bl	8003914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8017b2a:	bf00      	nop
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	2000c680 	.word	0x2000c680

08017b34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8017b38:	4802      	ldr	r0, [pc, #8]	; (8017b44 <ETH_IRQHandler+0x10>)
 8017b3a:	f7e9 fcf7 	bl	800152c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8017b3e:	bf00      	nop
 8017b40:	bd80      	pop	{r7, pc}
 8017b42:	bf00      	nop
 8017b44:	2000a8a4 	.word	0x2000a8a4

08017b48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b086      	sub	sp, #24
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017b54:	2300      	movs	r3, #0
 8017b56:	617b      	str	r3, [r7, #20]
 8017b58:	e00a      	b.n	8017b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017b5a:	f3af 8000 	nop.w
 8017b5e:	4601      	mov	r1, r0
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	1c5a      	adds	r2, r3, #1
 8017b64:	60ba      	str	r2, [r7, #8]
 8017b66:	b2ca      	uxtb	r2, r1
 8017b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	617b      	str	r3, [r7, #20]
 8017b70:	697a      	ldr	r2, [r7, #20]
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	dbf0      	blt.n	8017b5a <_read+0x12>
	}

return len;
 8017b78:	687b      	ldr	r3, [r7, #4]
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3718      	adds	r7, #24
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}

08017b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017b82:	b580      	push	{r7, lr}
 8017b84:	b086      	sub	sp, #24
 8017b86:	af00      	add	r7, sp, #0
 8017b88:	60f8      	str	r0, [r7, #12]
 8017b8a:	60b9      	str	r1, [r7, #8]
 8017b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017b8e:	2300      	movs	r3, #0
 8017b90:	617b      	str	r3, [r7, #20]
 8017b92:	e009      	b.n	8017ba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017b94:	68bb      	ldr	r3, [r7, #8]
 8017b96:	1c5a      	adds	r2, r3, #1
 8017b98:	60ba      	str	r2, [r7, #8]
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	617b      	str	r3, [r7, #20]
 8017ba8:	697a      	ldr	r2, [r7, #20]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	429a      	cmp	r2, r3
 8017bae:	dbf1      	blt.n	8017b94 <_write+0x12>
	}
	return len;
 8017bb0:	687b      	ldr	r3, [r7, #4]
}
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	3718      	adds	r7, #24
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}

08017bba <_close>:

int _close(int file)
{
 8017bba:	b480      	push	{r7}
 8017bbc:	b083      	sub	sp, #12
 8017bbe:	af00      	add	r7, sp, #0
 8017bc0:	6078      	str	r0, [r7, #4]
	return -1;
 8017bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	370c      	adds	r7, #12
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd0:	4770      	bx	lr

08017bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017bd2:	b480      	push	{r7}
 8017bd4:	b083      	sub	sp, #12
 8017bd6:	af00      	add	r7, sp, #0
 8017bd8:	6078      	str	r0, [r7, #4]
 8017bda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017be2:	605a      	str	r2, [r3, #4]
	return 0;
 8017be4:	2300      	movs	r3, #0
}
 8017be6:	4618      	mov	r0, r3
 8017be8:	370c      	adds	r7, #12
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr

08017bf2 <_isatty>:

int _isatty(int file)
{
 8017bf2:	b480      	push	{r7}
 8017bf4:	b083      	sub	sp, #12
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8017bfa:	2301      	movs	r3, #1
}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	370c      	adds	r7, #12
 8017c00:	46bd      	mov	sp, r7
 8017c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c06:	4770      	bx	lr

08017c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b085      	sub	sp, #20
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	60f8      	str	r0, [r7, #12]
 8017c10:	60b9      	str	r1, [r7, #8]
 8017c12:	607a      	str	r2, [r7, #4]
	return 0;
 8017c14:	2300      	movs	r3, #0
}
 8017c16:	4618      	mov	r0, r3
 8017c18:	3714      	adds	r7, #20
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c20:	4770      	bx	lr
	...

08017c24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8017c24:	b480      	push	{r7}
 8017c26:	b085      	sub	sp, #20
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017c2c:	4b11      	ldr	r3, [pc, #68]	; (8017c74 <_sbrk+0x50>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d102      	bne.n	8017c3a <_sbrk+0x16>
		heap_end = &end;
 8017c34:	4b0f      	ldr	r3, [pc, #60]	; (8017c74 <_sbrk+0x50>)
 8017c36:	4a10      	ldr	r2, [pc, #64]	; (8017c78 <_sbrk+0x54>)
 8017c38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8017c3a:	4b0e      	ldr	r3, [pc, #56]	; (8017c74 <_sbrk+0x50>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8017c40:	4b0c      	ldr	r3, [pc, #48]	; (8017c74 <_sbrk+0x50>)
 8017c42:	681a      	ldr	r2, [r3, #0]
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	4413      	add	r3, r2
 8017c48:	466a      	mov	r2, sp
 8017c4a:	4293      	cmp	r3, r2
 8017c4c:	d905      	bls.n	8017c5a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8017c4e:	4b0b      	ldr	r3, [pc, #44]	; (8017c7c <_sbrk+0x58>)
 8017c50:	220c      	movs	r2, #12
 8017c52:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8017c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c58:	e006      	b.n	8017c68 <_sbrk+0x44>
	}

	heap_end += incr;
 8017c5a:	4b06      	ldr	r3, [pc, #24]	; (8017c74 <_sbrk+0x50>)
 8017c5c:	681a      	ldr	r2, [r3, #0]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	4413      	add	r3, r2
 8017c62:	4a04      	ldr	r2, [pc, #16]	; (8017c74 <_sbrk+0x50>)
 8017c64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8017c66:	68fb      	ldr	r3, [r7, #12]
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3714      	adds	r7, #20
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c72:	4770      	bx	lr
 8017c74:	20005848 	.word	0x20005848
 8017c78:	2000c6c0 	.word	0x2000c6c0
 8017c7c:	20008fcc 	.word	0x20008fcc

08017c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017c80:	b480      	push	{r7}
 8017c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017c84:	4b08      	ldr	r3, [pc, #32]	; (8017ca8 <SystemInit+0x28>)
 8017c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c8a:	4a07      	ldr	r2, [pc, #28]	; (8017ca8 <SystemInit+0x28>)
 8017c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017c94:	4b04      	ldr	r3, [pc, #16]	; (8017ca8 <SystemInit+0x28>)
 8017c96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017c9a:	609a      	str	r2, [r3, #8]
#endif
}
 8017c9c:	bf00      	nop
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	e000ed00 	.word	0xe000ed00

08017cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8017cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017ce4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8017cb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8017cb2:	e003      	b.n	8017cbc <LoopCopyDataInit>

08017cb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8017cb4:	4b0c      	ldr	r3, [pc, #48]	; (8017ce8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8017cb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8017cb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8017cba:	3104      	adds	r1, #4

08017cbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8017cbc:	480b      	ldr	r0, [pc, #44]	; (8017cec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8017cbe:	4b0c      	ldr	r3, [pc, #48]	; (8017cf0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8017cc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8017cc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8017cc4:	d3f6      	bcc.n	8017cb4 <CopyDataInit>
  ldr  r2, =_sbss
 8017cc6:	4a0b      	ldr	r2, [pc, #44]	; (8017cf4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8017cc8:	e002      	b.n	8017cd0 <LoopFillZerobss>

08017cca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8017cca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8017ccc:	f842 3b04 	str.w	r3, [r2], #4

08017cd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8017cd0:	4b09      	ldr	r3, [pc, #36]	; (8017cf8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8017cd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8017cd4:	d3f9      	bcc.n	8017cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8017cd6:	f7ff ffd3 	bl	8017c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017cda:	f000 f811 	bl	8017d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017cde:	f7fe ff89 	bl	8016bf4 <main>
  bx  lr    
 8017ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8017ce4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8017ce8:	0801fbb8 	.word	0x0801fbb8
  ldr  r0, =_sdata
 8017cec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017cf0:	200016e8 	.word	0x200016e8
  ldr  r2, =_sbss
 8017cf4:	200016e8 	.word	0x200016e8
  ldr  r3, = _ebss
 8017cf8:	2000c6c0 	.word	0x2000c6c0

08017cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017cfc:	e7fe      	b.n	8017cfc <ADC_IRQHandler>
	...

08017d00 <__libc_init_array>:
 8017d00:	b570      	push	{r4, r5, r6, lr}
 8017d02:	4e0d      	ldr	r6, [pc, #52]	; (8017d38 <__libc_init_array+0x38>)
 8017d04:	4c0d      	ldr	r4, [pc, #52]	; (8017d3c <__libc_init_array+0x3c>)
 8017d06:	1ba4      	subs	r4, r4, r6
 8017d08:	10a4      	asrs	r4, r4, #2
 8017d0a:	2500      	movs	r5, #0
 8017d0c:	42a5      	cmp	r5, r4
 8017d0e:	d109      	bne.n	8017d24 <__libc_init_array+0x24>
 8017d10:	4e0b      	ldr	r6, [pc, #44]	; (8017d40 <__libc_init_array+0x40>)
 8017d12:	4c0c      	ldr	r4, [pc, #48]	; (8017d44 <__libc_init_array+0x44>)
 8017d14:	f004 f978 	bl	801c008 <_init>
 8017d18:	1ba4      	subs	r4, r4, r6
 8017d1a:	10a4      	asrs	r4, r4, #2
 8017d1c:	2500      	movs	r5, #0
 8017d1e:	42a5      	cmp	r5, r4
 8017d20:	d105      	bne.n	8017d2e <__libc_init_array+0x2e>
 8017d22:	bd70      	pop	{r4, r5, r6, pc}
 8017d24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d28:	4798      	blx	r3
 8017d2a:	3501      	adds	r5, #1
 8017d2c:	e7ee      	b.n	8017d0c <__libc_init_array+0xc>
 8017d2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d32:	4798      	blx	r3
 8017d34:	3501      	adds	r5, #1
 8017d36:	e7f2      	b.n	8017d1e <__libc_init_array+0x1e>
 8017d38:	0801fbb0 	.word	0x0801fbb0
 8017d3c:	0801fbb0 	.word	0x0801fbb0
 8017d40:	0801fbb0 	.word	0x0801fbb0
 8017d44:	0801fbb4 	.word	0x0801fbb4

08017d48 <__locale_ctype_ptr_l>:
 8017d48:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017d4c:	4770      	bx	lr

08017d4e <__ascii_mbtowc>:
 8017d4e:	b082      	sub	sp, #8
 8017d50:	b901      	cbnz	r1, 8017d54 <__ascii_mbtowc+0x6>
 8017d52:	a901      	add	r1, sp, #4
 8017d54:	b142      	cbz	r2, 8017d68 <__ascii_mbtowc+0x1a>
 8017d56:	b14b      	cbz	r3, 8017d6c <__ascii_mbtowc+0x1e>
 8017d58:	7813      	ldrb	r3, [r2, #0]
 8017d5a:	600b      	str	r3, [r1, #0]
 8017d5c:	7812      	ldrb	r2, [r2, #0]
 8017d5e:	1c10      	adds	r0, r2, #0
 8017d60:	bf18      	it	ne
 8017d62:	2001      	movne	r0, #1
 8017d64:	b002      	add	sp, #8
 8017d66:	4770      	bx	lr
 8017d68:	4610      	mov	r0, r2
 8017d6a:	e7fb      	b.n	8017d64 <__ascii_mbtowc+0x16>
 8017d6c:	f06f 0001 	mvn.w	r0, #1
 8017d70:	e7f8      	b.n	8017d64 <__ascii_mbtowc+0x16>

08017d72 <memcmp>:
 8017d72:	b530      	push	{r4, r5, lr}
 8017d74:	2400      	movs	r4, #0
 8017d76:	42a2      	cmp	r2, r4
 8017d78:	d101      	bne.n	8017d7e <memcmp+0xc>
 8017d7a:	2000      	movs	r0, #0
 8017d7c:	e007      	b.n	8017d8e <memcmp+0x1c>
 8017d7e:	5d03      	ldrb	r3, [r0, r4]
 8017d80:	3401      	adds	r4, #1
 8017d82:	190d      	adds	r5, r1, r4
 8017d84:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017d88:	42ab      	cmp	r3, r5
 8017d8a:	d0f4      	beq.n	8017d76 <memcmp+0x4>
 8017d8c:	1b58      	subs	r0, r3, r5
 8017d8e:	bd30      	pop	{r4, r5, pc}

08017d90 <memcpy>:
 8017d90:	b510      	push	{r4, lr}
 8017d92:	1e43      	subs	r3, r0, #1
 8017d94:	440a      	add	r2, r1
 8017d96:	4291      	cmp	r1, r2
 8017d98:	d100      	bne.n	8017d9c <memcpy+0xc>
 8017d9a:	bd10      	pop	{r4, pc}
 8017d9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017da4:	e7f7      	b.n	8017d96 <memcpy+0x6>

08017da6 <memmove>:
 8017da6:	4288      	cmp	r0, r1
 8017da8:	b510      	push	{r4, lr}
 8017daa:	eb01 0302 	add.w	r3, r1, r2
 8017dae:	d807      	bhi.n	8017dc0 <memmove+0x1a>
 8017db0:	1e42      	subs	r2, r0, #1
 8017db2:	4299      	cmp	r1, r3
 8017db4:	d00a      	beq.n	8017dcc <memmove+0x26>
 8017db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017dbe:	e7f8      	b.n	8017db2 <memmove+0xc>
 8017dc0:	4283      	cmp	r3, r0
 8017dc2:	d9f5      	bls.n	8017db0 <memmove+0xa>
 8017dc4:	1881      	adds	r1, r0, r2
 8017dc6:	1ad2      	subs	r2, r2, r3
 8017dc8:	42d3      	cmn	r3, r2
 8017dca:	d100      	bne.n	8017dce <memmove+0x28>
 8017dcc:	bd10      	pop	{r4, pc}
 8017dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017dd2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017dd6:	e7f7      	b.n	8017dc8 <memmove+0x22>

08017dd8 <memset>:
 8017dd8:	4402      	add	r2, r0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d100      	bne.n	8017de2 <memset+0xa>
 8017de0:	4770      	bx	lr
 8017de2:	f803 1b01 	strb.w	r1, [r3], #1
 8017de6:	e7f9      	b.n	8017ddc <memset+0x4>

08017de8 <__cvt>:
 8017de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dea:	ed2d 8b02 	vpush	{d8}
 8017dee:	eeb0 8b40 	vmov.f64	d8, d0
 8017df2:	b085      	sub	sp, #20
 8017df4:	4617      	mov	r7, r2
 8017df6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017df8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017dfa:	ee18 2a90 	vmov	r2, s17
 8017dfe:	f025 0520 	bic.w	r5, r5, #32
 8017e02:	2a00      	cmp	r2, #0
 8017e04:	bfb6      	itet	lt
 8017e06:	222d      	movlt	r2, #45	; 0x2d
 8017e08:	2200      	movge	r2, #0
 8017e0a:	eeb1 8b40 	vneglt.f64	d8, d0
 8017e0e:	2d46      	cmp	r5, #70	; 0x46
 8017e10:	460c      	mov	r4, r1
 8017e12:	701a      	strb	r2, [r3, #0]
 8017e14:	d004      	beq.n	8017e20 <__cvt+0x38>
 8017e16:	2d45      	cmp	r5, #69	; 0x45
 8017e18:	d100      	bne.n	8017e1c <__cvt+0x34>
 8017e1a:	3401      	adds	r4, #1
 8017e1c:	2102      	movs	r1, #2
 8017e1e:	e000      	b.n	8017e22 <__cvt+0x3a>
 8017e20:	2103      	movs	r1, #3
 8017e22:	ab03      	add	r3, sp, #12
 8017e24:	9301      	str	r3, [sp, #4]
 8017e26:	ab02      	add	r3, sp, #8
 8017e28:	9300      	str	r3, [sp, #0]
 8017e2a:	4622      	mov	r2, r4
 8017e2c:	4633      	mov	r3, r6
 8017e2e:	eeb0 0b48 	vmov.f64	d0, d8
 8017e32:	f001 fd8d 	bl	8019950 <_dtoa_r>
 8017e36:	2d47      	cmp	r5, #71	; 0x47
 8017e38:	d101      	bne.n	8017e3e <__cvt+0x56>
 8017e3a:	07fb      	lsls	r3, r7, #31
 8017e3c:	d51e      	bpl.n	8017e7c <__cvt+0x94>
 8017e3e:	2d46      	cmp	r5, #70	; 0x46
 8017e40:	eb00 0304 	add.w	r3, r0, r4
 8017e44:	d10c      	bne.n	8017e60 <__cvt+0x78>
 8017e46:	7802      	ldrb	r2, [r0, #0]
 8017e48:	2a30      	cmp	r2, #48	; 0x30
 8017e4a:	d107      	bne.n	8017e5c <__cvt+0x74>
 8017e4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e54:	bf1c      	itt	ne
 8017e56:	f1c4 0401 	rsbne	r4, r4, #1
 8017e5a:	6034      	strne	r4, [r6, #0]
 8017e5c:	6832      	ldr	r2, [r6, #0]
 8017e5e:	4413      	add	r3, r2
 8017e60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e68:	d007      	beq.n	8017e7a <__cvt+0x92>
 8017e6a:	2130      	movs	r1, #48	; 0x30
 8017e6c:	9a03      	ldr	r2, [sp, #12]
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d204      	bcs.n	8017e7c <__cvt+0x94>
 8017e72:	1c54      	adds	r4, r2, #1
 8017e74:	9403      	str	r4, [sp, #12]
 8017e76:	7011      	strb	r1, [r2, #0]
 8017e78:	e7f8      	b.n	8017e6c <__cvt+0x84>
 8017e7a:	9303      	str	r3, [sp, #12]
 8017e7c:	9b03      	ldr	r3, [sp, #12]
 8017e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017e80:	1a1b      	subs	r3, r3, r0
 8017e82:	6013      	str	r3, [r2, #0]
 8017e84:	b005      	add	sp, #20
 8017e86:	ecbd 8b02 	vpop	{d8}
 8017e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017e8c <__exponent>:
 8017e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e8e:	2900      	cmp	r1, #0
 8017e90:	4604      	mov	r4, r0
 8017e92:	bfba      	itte	lt
 8017e94:	4249      	neglt	r1, r1
 8017e96:	232d      	movlt	r3, #45	; 0x2d
 8017e98:	232b      	movge	r3, #43	; 0x2b
 8017e9a:	2909      	cmp	r1, #9
 8017e9c:	f804 2b02 	strb.w	r2, [r4], #2
 8017ea0:	7043      	strb	r3, [r0, #1]
 8017ea2:	dd20      	ble.n	8017ee6 <__exponent+0x5a>
 8017ea4:	f10d 0307 	add.w	r3, sp, #7
 8017ea8:	461f      	mov	r7, r3
 8017eaa:	260a      	movs	r6, #10
 8017eac:	fb91 f5f6 	sdiv	r5, r1, r6
 8017eb0:	fb06 1115 	mls	r1, r6, r5, r1
 8017eb4:	3130      	adds	r1, #48	; 0x30
 8017eb6:	2d09      	cmp	r5, #9
 8017eb8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8017ebc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8017ec0:	4629      	mov	r1, r5
 8017ec2:	dc09      	bgt.n	8017ed8 <__exponent+0x4c>
 8017ec4:	3130      	adds	r1, #48	; 0x30
 8017ec6:	3b02      	subs	r3, #2
 8017ec8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8017ecc:	42bb      	cmp	r3, r7
 8017ece:	4622      	mov	r2, r4
 8017ed0:	d304      	bcc.n	8017edc <__exponent+0x50>
 8017ed2:	1a10      	subs	r0, r2, r0
 8017ed4:	b003      	add	sp, #12
 8017ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ed8:	4613      	mov	r3, r2
 8017eda:	e7e7      	b.n	8017eac <__exponent+0x20>
 8017edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ee0:	f804 2b01 	strb.w	r2, [r4], #1
 8017ee4:	e7f2      	b.n	8017ecc <__exponent+0x40>
 8017ee6:	2330      	movs	r3, #48	; 0x30
 8017ee8:	4419      	add	r1, r3
 8017eea:	7083      	strb	r3, [r0, #2]
 8017eec:	1d02      	adds	r2, r0, #4
 8017eee:	70c1      	strb	r1, [r0, #3]
 8017ef0:	e7ef      	b.n	8017ed2 <__exponent+0x46>
 8017ef2:	0000      	movs	r0, r0
 8017ef4:	0000      	movs	r0, r0
	...

08017ef8 <_printf_float>:
 8017ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017efc:	b08d      	sub	sp, #52	; 0x34
 8017efe:	460c      	mov	r4, r1
 8017f00:	4616      	mov	r6, r2
 8017f02:	461f      	mov	r7, r3
 8017f04:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017f08:	4605      	mov	r5, r0
 8017f0a:	f002 fe5f 	bl	801abcc <_localeconv_r>
 8017f0e:	f8d0 b000 	ldr.w	fp, [r0]
 8017f12:	4658      	mov	r0, fp
 8017f14:	f7e8 f994 	bl	8000240 <strlen>
 8017f18:	2300      	movs	r3, #0
 8017f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f20:	9005      	str	r0, [sp, #20]
 8017f22:	3307      	adds	r3, #7
 8017f24:	f023 0307 	bic.w	r3, r3, #7
 8017f28:	f103 0108 	add.w	r1, r3, #8
 8017f2c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8017f30:	6822      	ldr	r2, [r4, #0]
 8017f32:	f8c8 1000 	str.w	r1, [r8]
 8017f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017f3a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8017f3e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80181c8 <_printf_float+0x2d0>
 8017f42:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8017f46:	eeb0 6bc0 	vabs.f64	d6, d0
 8017f4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8017f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f52:	dd24      	ble.n	8017f9e <_printf_float+0xa6>
 8017f54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f5c:	d502      	bpl.n	8017f64 <_printf_float+0x6c>
 8017f5e:	232d      	movs	r3, #45	; 0x2d
 8017f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f64:	499a      	ldr	r1, [pc, #616]	; (80181d0 <_printf_float+0x2d8>)
 8017f66:	4b9b      	ldr	r3, [pc, #620]	; (80181d4 <_printf_float+0x2dc>)
 8017f68:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017f6c:	bf8c      	ite	hi
 8017f6e:	4688      	movhi	r8, r1
 8017f70:	4698      	movls	r8, r3
 8017f72:	f022 0204 	bic.w	r2, r2, #4
 8017f76:	2303      	movs	r3, #3
 8017f78:	6123      	str	r3, [r4, #16]
 8017f7a:	6022      	str	r2, [r4, #0]
 8017f7c:	f04f 0a00 	mov.w	sl, #0
 8017f80:	9700      	str	r7, [sp, #0]
 8017f82:	4633      	mov	r3, r6
 8017f84:	aa0b      	add	r2, sp, #44	; 0x2c
 8017f86:	4621      	mov	r1, r4
 8017f88:	4628      	mov	r0, r5
 8017f8a:	f000 f9e1 	bl	8018350 <_printf_common>
 8017f8e:	3001      	adds	r0, #1
 8017f90:	f040 8089 	bne.w	80180a6 <_printf_float+0x1ae>
 8017f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f98:	b00d      	add	sp, #52	; 0x34
 8017f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f9e:	eeb4 0b40 	vcmp.f64	d0, d0
 8017fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fa6:	d702      	bvc.n	8017fae <_printf_float+0xb6>
 8017fa8:	498b      	ldr	r1, [pc, #556]	; (80181d8 <_printf_float+0x2e0>)
 8017faa:	4b8c      	ldr	r3, [pc, #560]	; (80181dc <_printf_float+0x2e4>)
 8017fac:	e7dc      	b.n	8017f68 <_printf_float+0x70>
 8017fae:	6861      	ldr	r1, [r4, #4]
 8017fb0:	1c4b      	adds	r3, r1, #1
 8017fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017fb6:	ab0a      	add	r3, sp, #40	; 0x28
 8017fb8:	a809      	add	r0, sp, #36	; 0x24
 8017fba:	d13b      	bne.n	8018034 <_printf_float+0x13c>
 8017fbc:	2106      	movs	r1, #6
 8017fbe:	6061      	str	r1, [r4, #4]
 8017fc0:	f04f 0c00 	mov.w	ip, #0
 8017fc4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8017fc8:	e9cd 0900 	strd	r0, r9, [sp]
 8017fcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017fd0:	6022      	str	r2, [r4, #0]
 8017fd2:	6861      	ldr	r1, [r4, #4]
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	f7ff ff07 	bl	8017de8 <__cvt>
 8017fda:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8017fde:	2b47      	cmp	r3, #71	; 0x47
 8017fe0:	4680      	mov	r8, r0
 8017fe2:	d109      	bne.n	8017ff8 <_printf_float+0x100>
 8017fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fe6:	1cd8      	adds	r0, r3, #3
 8017fe8:	db02      	blt.n	8017ff0 <_printf_float+0xf8>
 8017fea:	6862      	ldr	r2, [r4, #4]
 8017fec:	4293      	cmp	r3, r2
 8017fee:	dd47      	ble.n	8018080 <_printf_float+0x188>
 8017ff0:	f1a9 0902 	sub.w	r9, r9, #2
 8017ff4:	fa5f f989 	uxtb.w	r9, r9
 8017ff8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8017ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ffe:	d824      	bhi.n	801804a <_printf_float+0x152>
 8018000:	3901      	subs	r1, #1
 8018002:	464a      	mov	r2, r9
 8018004:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018008:	9109      	str	r1, [sp, #36]	; 0x24
 801800a:	f7ff ff3f 	bl	8017e8c <__exponent>
 801800e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018010:	1813      	adds	r3, r2, r0
 8018012:	2a01      	cmp	r2, #1
 8018014:	4682      	mov	sl, r0
 8018016:	6123      	str	r3, [r4, #16]
 8018018:	dc02      	bgt.n	8018020 <_printf_float+0x128>
 801801a:	6822      	ldr	r2, [r4, #0]
 801801c:	07d1      	lsls	r1, r2, #31
 801801e:	d501      	bpl.n	8018024 <_printf_float+0x12c>
 8018020:	3301      	adds	r3, #1
 8018022:	6123      	str	r3, [r4, #16]
 8018024:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018028:	2b00      	cmp	r3, #0
 801802a:	d0a9      	beq.n	8017f80 <_printf_float+0x88>
 801802c:	232d      	movs	r3, #45	; 0x2d
 801802e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018032:	e7a5      	b.n	8017f80 <_printf_float+0x88>
 8018034:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8018038:	f000 8178 	beq.w	801832c <_printf_float+0x434>
 801803c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8018040:	d1be      	bne.n	8017fc0 <_printf_float+0xc8>
 8018042:	2900      	cmp	r1, #0
 8018044:	d1bc      	bne.n	8017fc0 <_printf_float+0xc8>
 8018046:	2101      	movs	r1, #1
 8018048:	e7b9      	b.n	8017fbe <_printf_float+0xc6>
 801804a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801804e:	d119      	bne.n	8018084 <_printf_float+0x18c>
 8018050:	2900      	cmp	r1, #0
 8018052:	6863      	ldr	r3, [r4, #4]
 8018054:	dd0c      	ble.n	8018070 <_printf_float+0x178>
 8018056:	6121      	str	r1, [r4, #16]
 8018058:	b913      	cbnz	r3, 8018060 <_printf_float+0x168>
 801805a:	6822      	ldr	r2, [r4, #0]
 801805c:	07d2      	lsls	r2, r2, #31
 801805e:	d502      	bpl.n	8018066 <_printf_float+0x16e>
 8018060:	3301      	adds	r3, #1
 8018062:	440b      	add	r3, r1
 8018064:	6123      	str	r3, [r4, #16]
 8018066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018068:	65a3      	str	r3, [r4, #88]	; 0x58
 801806a:	f04f 0a00 	mov.w	sl, #0
 801806e:	e7d9      	b.n	8018024 <_printf_float+0x12c>
 8018070:	b913      	cbnz	r3, 8018078 <_printf_float+0x180>
 8018072:	6822      	ldr	r2, [r4, #0]
 8018074:	07d0      	lsls	r0, r2, #31
 8018076:	d501      	bpl.n	801807c <_printf_float+0x184>
 8018078:	3302      	adds	r3, #2
 801807a:	e7f3      	b.n	8018064 <_printf_float+0x16c>
 801807c:	2301      	movs	r3, #1
 801807e:	e7f1      	b.n	8018064 <_printf_float+0x16c>
 8018080:	f04f 0967 	mov.w	r9, #103	; 0x67
 8018084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018088:	4293      	cmp	r3, r2
 801808a:	db05      	blt.n	8018098 <_printf_float+0x1a0>
 801808c:	6822      	ldr	r2, [r4, #0]
 801808e:	6123      	str	r3, [r4, #16]
 8018090:	07d1      	lsls	r1, r2, #31
 8018092:	d5e8      	bpl.n	8018066 <_printf_float+0x16e>
 8018094:	3301      	adds	r3, #1
 8018096:	e7e5      	b.n	8018064 <_printf_float+0x16c>
 8018098:	2b00      	cmp	r3, #0
 801809a:	bfd4      	ite	le
 801809c:	f1c3 0302 	rsble	r3, r3, #2
 80180a0:	2301      	movgt	r3, #1
 80180a2:	4413      	add	r3, r2
 80180a4:	e7de      	b.n	8018064 <_printf_float+0x16c>
 80180a6:	6823      	ldr	r3, [r4, #0]
 80180a8:	055a      	lsls	r2, r3, #21
 80180aa:	d407      	bmi.n	80180bc <_printf_float+0x1c4>
 80180ac:	6923      	ldr	r3, [r4, #16]
 80180ae:	4642      	mov	r2, r8
 80180b0:	4631      	mov	r1, r6
 80180b2:	4628      	mov	r0, r5
 80180b4:	47b8      	blx	r7
 80180b6:	3001      	adds	r0, #1
 80180b8:	d12a      	bne.n	8018110 <_printf_float+0x218>
 80180ba:	e76b      	b.n	8017f94 <_printf_float+0x9c>
 80180bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80180c0:	f240 80de 	bls.w	8018280 <_printf_float+0x388>
 80180c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80180c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80180cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d0:	d133      	bne.n	801813a <_printf_float+0x242>
 80180d2:	2301      	movs	r3, #1
 80180d4:	4a42      	ldr	r2, [pc, #264]	; (80181e0 <_printf_float+0x2e8>)
 80180d6:	4631      	mov	r1, r6
 80180d8:	4628      	mov	r0, r5
 80180da:	47b8      	blx	r7
 80180dc:	3001      	adds	r0, #1
 80180de:	f43f af59 	beq.w	8017f94 <_printf_float+0x9c>
 80180e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80180e6:	429a      	cmp	r2, r3
 80180e8:	db02      	blt.n	80180f0 <_printf_float+0x1f8>
 80180ea:	6823      	ldr	r3, [r4, #0]
 80180ec:	07d8      	lsls	r0, r3, #31
 80180ee:	d50f      	bpl.n	8018110 <_printf_float+0x218>
 80180f0:	9b05      	ldr	r3, [sp, #20]
 80180f2:	465a      	mov	r2, fp
 80180f4:	4631      	mov	r1, r6
 80180f6:	4628      	mov	r0, r5
 80180f8:	47b8      	blx	r7
 80180fa:	3001      	adds	r0, #1
 80180fc:	f43f af4a 	beq.w	8017f94 <_printf_float+0x9c>
 8018100:	f04f 0800 	mov.w	r8, #0
 8018104:	f104 091a 	add.w	r9, r4, #26
 8018108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801810a:	3b01      	subs	r3, #1
 801810c:	4543      	cmp	r3, r8
 801810e:	dc09      	bgt.n	8018124 <_printf_float+0x22c>
 8018110:	6823      	ldr	r3, [r4, #0]
 8018112:	079b      	lsls	r3, r3, #30
 8018114:	f100 8105 	bmi.w	8018322 <_printf_float+0x42a>
 8018118:	68e0      	ldr	r0, [r4, #12]
 801811a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801811c:	4298      	cmp	r0, r3
 801811e:	bfb8      	it	lt
 8018120:	4618      	movlt	r0, r3
 8018122:	e739      	b.n	8017f98 <_printf_float+0xa0>
 8018124:	2301      	movs	r3, #1
 8018126:	464a      	mov	r2, r9
 8018128:	4631      	mov	r1, r6
 801812a:	4628      	mov	r0, r5
 801812c:	47b8      	blx	r7
 801812e:	3001      	adds	r0, #1
 8018130:	f43f af30 	beq.w	8017f94 <_printf_float+0x9c>
 8018134:	f108 0801 	add.w	r8, r8, #1
 8018138:	e7e6      	b.n	8018108 <_printf_float+0x210>
 801813a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801813c:	2b00      	cmp	r3, #0
 801813e:	dc2b      	bgt.n	8018198 <_printf_float+0x2a0>
 8018140:	2301      	movs	r3, #1
 8018142:	4a27      	ldr	r2, [pc, #156]	; (80181e0 <_printf_float+0x2e8>)
 8018144:	4631      	mov	r1, r6
 8018146:	4628      	mov	r0, r5
 8018148:	47b8      	blx	r7
 801814a:	3001      	adds	r0, #1
 801814c:	f43f af22 	beq.w	8017f94 <_printf_float+0x9c>
 8018150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018152:	b923      	cbnz	r3, 801815e <_printf_float+0x266>
 8018154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018156:	b913      	cbnz	r3, 801815e <_printf_float+0x266>
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	07d9      	lsls	r1, r3, #31
 801815c:	d5d8      	bpl.n	8018110 <_printf_float+0x218>
 801815e:	9b05      	ldr	r3, [sp, #20]
 8018160:	465a      	mov	r2, fp
 8018162:	4631      	mov	r1, r6
 8018164:	4628      	mov	r0, r5
 8018166:	47b8      	blx	r7
 8018168:	3001      	adds	r0, #1
 801816a:	f43f af13 	beq.w	8017f94 <_printf_float+0x9c>
 801816e:	f04f 0900 	mov.w	r9, #0
 8018172:	f104 0a1a 	add.w	sl, r4, #26
 8018176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018178:	425b      	negs	r3, r3
 801817a:	454b      	cmp	r3, r9
 801817c:	dc01      	bgt.n	8018182 <_printf_float+0x28a>
 801817e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018180:	e795      	b.n	80180ae <_printf_float+0x1b6>
 8018182:	2301      	movs	r3, #1
 8018184:	4652      	mov	r2, sl
 8018186:	4631      	mov	r1, r6
 8018188:	4628      	mov	r0, r5
 801818a:	47b8      	blx	r7
 801818c:	3001      	adds	r0, #1
 801818e:	f43f af01 	beq.w	8017f94 <_printf_float+0x9c>
 8018192:	f109 0901 	add.w	r9, r9, #1
 8018196:	e7ee      	b.n	8018176 <_printf_float+0x27e>
 8018198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801819a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801819c:	429a      	cmp	r2, r3
 801819e:	bfa8      	it	ge
 80181a0:	461a      	movge	r2, r3
 80181a2:	2a00      	cmp	r2, #0
 80181a4:	4691      	mov	r9, r2
 80181a6:	dd07      	ble.n	80181b8 <_printf_float+0x2c0>
 80181a8:	4613      	mov	r3, r2
 80181aa:	4631      	mov	r1, r6
 80181ac:	4642      	mov	r2, r8
 80181ae:	4628      	mov	r0, r5
 80181b0:	47b8      	blx	r7
 80181b2:	3001      	adds	r0, #1
 80181b4:	f43f aeee 	beq.w	8017f94 <_printf_float+0x9c>
 80181b8:	f104 031a 	add.w	r3, r4, #26
 80181bc:	f04f 0a00 	mov.w	sl, #0
 80181c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80181c4:	9307      	str	r3, [sp, #28]
 80181c6:	e017      	b.n	80181f8 <_printf_float+0x300>
 80181c8:	ffffffff 	.word	0xffffffff
 80181cc:	7fefffff 	.word	0x7fefffff
 80181d0:	0801f8a2 	.word	0x0801f8a2
 80181d4:	0801f89e 	.word	0x0801f89e
 80181d8:	0801f8aa 	.word	0x0801f8aa
 80181dc:	0801f8a6 	.word	0x0801f8a6
 80181e0:	0801f8ae 	.word	0x0801f8ae
 80181e4:	2301      	movs	r3, #1
 80181e6:	9a07      	ldr	r2, [sp, #28]
 80181e8:	4631      	mov	r1, r6
 80181ea:	4628      	mov	r0, r5
 80181ec:	47b8      	blx	r7
 80181ee:	3001      	adds	r0, #1
 80181f0:	f43f aed0 	beq.w	8017f94 <_printf_float+0x9c>
 80181f4:	f10a 0a01 	add.w	sl, sl, #1
 80181f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80181fa:	9306      	str	r3, [sp, #24]
 80181fc:	eba3 0309 	sub.w	r3, r3, r9
 8018200:	4553      	cmp	r3, sl
 8018202:	dcef      	bgt.n	80181e4 <_printf_float+0x2ec>
 8018204:	9b06      	ldr	r3, [sp, #24]
 8018206:	4498      	add	r8, r3
 8018208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801820c:	429a      	cmp	r2, r3
 801820e:	db15      	blt.n	801823c <_printf_float+0x344>
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	07da      	lsls	r2, r3, #31
 8018214:	d412      	bmi.n	801823c <_printf_float+0x344>
 8018216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018218:	9a06      	ldr	r2, [sp, #24]
 801821a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801821c:	1a9a      	subs	r2, r3, r2
 801821e:	eba3 0a01 	sub.w	sl, r3, r1
 8018222:	4592      	cmp	sl, r2
 8018224:	bfa8      	it	ge
 8018226:	4692      	movge	sl, r2
 8018228:	f1ba 0f00 	cmp.w	sl, #0
 801822c:	dc0e      	bgt.n	801824c <_printf_float+0x354>
 801822e:	f04f 0800 	mov.w	r8, #0
 8018232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018236:	f104 091a 	add.w	r9, r4, #26
 801823a:	e019      	b.n	8018270 <_printf_float+0x378>
 801823c:	9b05      	ldr	r3, [sp, #20]
 801823e:	465a      	mov	r2, fp
 8018240:	4631      	mov	r1, r6
 8018242:	4628      	mov	r0, r5
 8018244:	47b8      	blx	r7
 8018246:	3001      	adds	r0, #1
 8018248:	d1e5      	bne.n	8018216 <_printf_float+0x31e>
 801824a:	e6a3      	b.n	8017f94 <_printf_float+0x9c>
 801824c:	4653      	mov	r3, sl
 801824e:	4642      	mov	r2, r8
 8018250:	4631      	mov	r1, r6
 8018252:	4628      	mov	r0, r5
 8018254:	47b8      	blx	r7
 8018256:	3001      	adds	r0, #1
 8018258:	d1e9      	bne.n	801822e <_printf_float+0x336>
 801825a:	e69b      	b.n	8017f94 <_printf_float+0x9c>
 801825c:	2301      	movs	r3, #1
 801825e:	464a      	mov	r2, r9
 8018260:	4631      	mov	r1, r6
 8018262:	4628      	mov	r0, r5
 8018264:	47b8      	blx	r7
 8018266:	3001      	adds	r0, #1
 8018268:	f43f ae94 	beq.w	8017f94 <_printf_float+0x9c>
 801826c:	f108 0801 	add.w	r8, r8, #1
 8018270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018274:	1a9b      	subs	r3, r3, r2
 8018276:	eba3 030a 	sub.w	r3, r3, sl
 801827a:	4543      	cmp	r3, r8
 801827c:	dcee      	bgt.n	801825c <_printf_float+0x364>
 801827e:	e747      	b.n	8018110 <_printf_float+0x218>
 8018280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018282:	2a01      	cmp	r2, #1
 8018284:	dc01      	bgt.n	801828a <_printf_float+0x392>
 8018286:	07db      	lsls	r3, r3, #31
 8018288:	d539      	bpl.n	80182fe <_printf_float+0x406>
 801828a:	2301      	movs	r3, #1
 801828c:	4642      	mov	r2, r8
 801828e:	4631      	mov	r1, r6
 8018290:	4628      	mov	r0, r5
 8018292:	47b8      	blx	r7
 8018294:	3001      	adds	r0, #1
 8018296:	f43f ae7d 	beq.w	8017f94 <_printf_float+0x9c>
 801829a:	9b05      	ldr	r3, [sp, #20]
 801829c:	465a      	mov	r2, fp
 801829e:	4631      	mov	r1, r6
 80182a0:	4628      	mov	r0, r5
 80182a2:	47b8      	blx	r7
 80182a4:	3001      	adds	r0, #1
 80182a6:	f108 0801 	add.w	r8, r8, #1
 80182aa:	f43f ae73 	beq.w	8017f94 <_printf_float+0x9c>
 80182ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80182b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80182b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80182c0:	d018      	beq.n	80182f4 <_printf_float+0x3fc>
 80182c2:	4642      	mov	r2, r8
 80182c4:	4631      	mov	r1, r6
 80182c6:	4628      	mov	r0, r5
 80182c8:	47b8      	blx	r7
 80182ca:	3001      	adds	r0, #1
 80182cc:	d10e      	bne.n	80182ec <_printf_float+0x3f4>
 80182ce:	e661      	b.n	8017f94 <_printf_float+0x9c>
 80182d0:	2301      	movs	r3, #1
 80182d2:	464a      	mov	r2, r9
 80182d4:	4631      	mov	r1, r6
 80182d6:	4628      	mov	r0, r5
 80182d8:	47b8      	blx	r7
 80182da:	3001      	adds	r0, #1
 80182dc:	f43f ae5a 	beq.w	8017f94 <_printf_float+0x9c>
 80182e0:	f108 0801 	add.w	r8, r8, #1
 80182e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182e6:	3b01      	subs	r3, #1
 80182e8:	4543      	cmp	r3, r8
 80182ea:	dcf1      	bgt.n	80182d0 <_printf_float+0x3d8>
 80182ec:	4653      	mov	r3, sl
 80182ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80182f2:	e6dd      	b.n	80180b0 <_printf_float+0x1b8>
 80182f4:	f04f 0800 	mov.w	r8, #0
 80182f8:	f104 091a 	add.w	r9, r4, #26
 80182fc:	e7f2      	b.n	80182e4 <_printf_float+0x3ec>
 80182fe:	2301      	movs	r3, #1
 8018300:	e7df      	b.n	80182c2 <_printf_float+0x3ca>
 8018302:	2301      	movs	r3, #1
 8018304:	464a      	mov	r2, r9
 8018306:	4631      	mov	r1, r6
 8018308:	4628      	mov	r0, r5
 801830a:	47b8      	blx	r7
 801830c:	3001      	adds	r0, #1
 801830e:	f43f ae41 	beq.w	8017f94 <_printf_float+0x9c>
 8018312:	f108 0801 	add.w	r8, r8, #1
 8018316:	68e3      	ldr	r3, [r4, #12]
 8018318:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801831a:	1a9b      	subs	r3, r3, r2
 801831c:	4543      	cmp	r3, r8
 801831e:	dcf0      	bgt.n	8018302 <_printf_float+0x40a>
 8018320:	e6fa      	b.n	8018118 <_printf_float+0x220>
 8018322:	f04f 0800 	mov.w	r8, #0
 8018326:	f104 0919 	add.w	r9, r4, #25
 801832a:	e7f4      	b.n	8018316 <_printf_float+0x41e>
 801832c:	2900      	cmp	r1, #0
 801832e:	f43f ae8a 	beq.w	8018046 <_printf_float+0x14e>
 8018332:	f04f 0c00 	mov.w	ip, #0
 8018336:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801833a:	e9cd 0900 	strd	r0, r9, [sp]
 801833e:	6022      	str	r2, [r4, #0]
 8018340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018344:	4628      	mov	r0, r5
 8018346:	f7ff fd4f 	bl	8017de8 <__cvt>
 801834a:	4680      	mov	r8, r0
 801834c:	e64a      	b.n	8017fe4 <_printf_float+0xec>
 801834e:	bf00      	nop

08018350 <_printf_common>:
 8018350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018354:	4691      	mov	r9, r2
 8018356:	461f      	mov	r7, r3
 8018358:	688a      	ldr	r2, [r1, #8]
 801835a:	690b      	ldr	r3, [r1, #16]
 801835c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018360:	4293      	cmp	r3, r2
 8018362:	bfb8      	it	lt
 8018364:	4613      	movlt	r3, r2
 8018366:	f8c9 3000 	str.w	r3, [r9]
 801836a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801836e:	4606      	mov	r6, r0
 8018370:	460c      	mov	r4, r1
 8018372:	b112      	cbz	r2, 801837a <_printf_common+0x2a>
 8018374:	3301      	adds	r3, #1
 8018376:	f8c9 3000 	str.w	r3, [r9]
 801837a:	6823      	ldr	r3, [r4, #0]
 801837c:	0699      	lsls	r1, r3, #26
 801837e:	bf42      	ittt	mi
 8018380:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018384:	3302      	addmi	r3, #2
 8018386:	f8c9 3000 	strmi.w	r3, [r9]
 801838a:	6825      	ldr	r5, [r4, #0]
 801838c:	f015 0506 	ands.w	r5, r5, #6
 8018390:	d107      	bne.n	80183a2 <_printf_common+0x52>
 8018392:	f104 0a19 	add.w	sl, r4, #25
 8018396:	68e3      	ldr	r3, [r4, #12]
 8018398:	f8d9 2000 	ldr.w	r2, [r9]
 801839c:	1a9b      	subs	r3, r3, r2
 801839e:	42ab      	cmp	r3, r5
 80183a0:	dc28      	bgt.n	80183f4 <_printf_common+0xa4>
 80183a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80183a6:	6822      	ldr	r2, [r4, #0]
 80183a8:	3300      	adds	r3, #0
 80183aa:	bf18      	it	ne
 80183ac:	2301      	movne	r3, #1
 80183ae:	0692      	lsls	r2, r2, #26
 80183b0:	d42d      	bmi.n	801840e <_printf_common+0xbe>
 80183b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80183b6:	4639      	mov	r1, r7
 80183b8:	4630      	mov	r0, r6
 80183ba:	47c0      	blx	r8
 80183bc:	3001      	adds	r0, #1
 80183be:	d020      	beq.n	8018402 <_printf_common+0xb2>
 80183c0:	6823      	ldr	r3, [r4, #0]
 80183c2:	68e5      	ldr	r5, [r4, #12]
 80183c4:	f8d9 2000 	ldr.w	r2, [r9]
 80183c8:	f003 0306 	and.w	r3, r3, #6
 80183cc:	2b04      	cmp	r3, #4
 80183ce:	bf08      	it	eq
 80183d0:	1aad      	subeq	r5, r5, r2
 80183d2:	68a3      	ldr	r3, [r4, #8]
 80183d4:	6922      	ldr	r2, [r4, #16]
 80183d6:	bf0c      	ite	eq
 80183d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183dc:	2500      	movne	r5, #0
 80183de:	4293      	cmp	r3, r2
 80183e0:	bfc4      	itt	gt
 80183e2:	1a9b      	subgt	r3, r3, r2
 80183e4:	18ed      	addgt	r5, r5, r3
 80183e6:	f04f 0900 	mov.w	r9, #0
 80183ea:	341a      	adds	r4, #26
 80183ec:	454d      	cmp	r5, r9
 80183ee:	d11a      	bne.n	8018426 <_printf_common+0xd6>
 80183f0:	2000      	movs	r0, #0
 80183f2:	e008      	b.n	8018406 <_printf_common+0xb6>
 80183f4:	2301      	movs	r3, #1
 80183f6:	4652      	mov	r2, sl
 80183f8:	4639      	mov	r1, r7
 80183fa:	4630      	mov	r0, r6
 80183fc:	47c0      	blx	r8
 80183fe:	3001      	adds	r0, #1
 8018400:	d103      	bne.n	801840a <_printf_common+0xba>
 8018402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801840a:	3501      	adds	r5, #1
 801840c:	e7c3      	b.n	8018396 <_printf_common+0x46>
 801840e:	18e1      	adds	r1, r4, r3
 8018410:	1c5a      	adds	r2, r3, #1
 8018412:	2030      	movs	r0, #48	; 0x30
 8018414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018418:	4422      	add	r2, r4
 801841a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801841e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018422:	3302      	adds	r3, #2
 8018424:	e7c5      	b.n	80183b2 <_printf_common+0x62>
 8018426:	2301      	movs	r3, #1
 8018428:	4622      	mov	r2, r4
 801842a:	4639      	mov	r1, r7
 801842c:	4630      	mov	r0, r6
 801842e:	47c0      	blx	r8
 8018430:	3001      	adds	r0, #1
 8018432:	d0e6      	beq.n	8018402 <_printf_common+0xb2>
 8018434:	f109 0901 	add.w	r9, r9, #1
 8018438:	e7d8      	b.n	80183ec <_printf_common+0x9c>
	...

0801843c <_printf_i>:
 801843c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018440:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018444:	460c      	mov	r4, r1
 8018446:	7e09      	ldrb	r1, [r1, #24]
 8018448:	b085      	sub	sp, #20
 801844a:	296e      	cmp	r1, #110	; 0x6e
 801844c:	4617      	mov	r7, r2
 801844e:	4606      	mov	r6, r0
 8018450:	4698      	mov	r8, r3
 8018452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018454:	f000 80b3 	beq.w	80185be <_printf_i+0x182>
 8018458:	d822      	bhi.n	80184a0 <_printf_i+0x64>
 801845a:	2963      	cmp	r1, #99	; 0x63
 801845c:	d036      	beq.n	80184cc <_printf_i+0x90>
 801845e:	d80a      	bhi.n	8018476 <_printf_i+0x3a>
 8018460:	2900      	cmp	r1, #0
 8018462:	f000 80b9 	beq.w	80185d8 <_printf_i+0x19c>
 8018466:	2958      	cmp	r1, #88	; 0x58
 8018468:	f000 8083 	beq.w	8018572 <_printf_i+0x136>
 801846c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018470:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018474:	e032      	b.n	80184dc <_printf_i+0xa0>
 8018476:	2964      	cmp	r1, #100	; 0x64
 8018478:	d001      	beq.n	801847e <_printf_i+0x42>
 801847a:	2969      	cmp	r1, #105	; 0x69
 801847c:	d1f6      	bne.n	801846c <_printf_i+0x30>
 801847e:	6820      	ldr	r0, [r4, #0]
 8018480:	6813      	ldr	r3, [r2, #0]
 8018482:	0605      	lsls	r5, r0, #24
 8018484:	f103 0104 	add.w	r1, r3, #4
 8018488:	d52a      	bpl.n	80184e0 <_printf_i+0xa4>
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	6011      	str	r1, [r2, #0]
 801848e:	2b00      	cmp	r3, #0
 8018490:	da03      	bge.n	801849a <_printf_i+0x5e>
 8018492:	222d      	movs	r2, #45	; 0x2d
 8018494:	425b      	negs	r3, r3
 8018496:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801849a:	486f      	ldr	r0, [pc, #444]	; (8018658 <_printf_i+0x21c>)
 801849c:	220a      	movs	r2, #10
 801849e:	e039      	b.n	8018514 <_printf_i+0xd8>
 80184a0:	2973      	cmp	r1, #115	; 0x73
 80184a2:	f000 809d 	beq.w	80185e0 <_printf_i+0x1a4>
 80184a6:	d808      	bhi.n	80184ba <_printf_i+0x7e>
 80184a8:	296f      	cmp	r1, #111	; 0x6f
 80184aa:	d020      	beq.n	80184ee <_printf_i+0xb2>
 80184ac:	2970      	cmp	r1, #112	; 0x70
 80184ae:	d1dd      	bne.n	801846c <_printf_i+0x30>
 80184b0:	6823      	ldr	r3, [r4, #0]
 80184b2:	f043 0320 	orr.w	r3, r3, #32
 80184b6:	6023      	str	r3, [r4, #0]
 80184b8:	e003      	b.n	80184c2 <_printf_i+0x86>
 80184ba:	2975      	cmp	r1, #117	; 0x75
 80184bc:	d017      	beq.n	80184ee <_printf_i+0xb2>
 80184be:	2978      	cmp	r1, #120	; 0x78
 80184c0:	d1d4      	bne.n	801846c <_printf_i+0x30>
 80184c2:	2378      	movs	r3, #120	; 0x78
 80184c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80184c8:	4864      	ldr	r0, [pc, #400]	; (801865c <_printf_i+0x220>)
 80184ca:	e055      	b.n	8018578 <_printf_i+0x13c>
 80184cc:	6813      	ldr	r3, [r2, #0]
 80184ce:	1d19      	adds	r1, r3, #4
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	6011      	str	r1, [r2, #0]
 80184d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184dc:	2301      	movs	r3, #1
 80184de:	e08c      	b.n	80185fa <_printf_i+0x1be>
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	6011      	str	r1, [r2, #0]
 80184e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80184e8:	bf18      	it	ne
 80184ea:	b21b      	sxthne	r3, r3
 80184ec:	e7cf      	b.n	801848e <_printf_i+0x52>
 80184ee:	6813      	ldr	r3, [r2, #0]
 80184f0:	6825      	ldr	r5, [r4, #0]
 80184f2:	1d18      	adds	r0, r3, #4
 80184f4:	6010      	str	r0, [r2, #0]
 80184f6:	0628      	lsls	r0, r5, #24
 80184f8:	d501      	bpl.n	80184fe <_printf_i+0xc2>
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	e002      	b.n	8018504 <_printf_i+0xc8>
 80184fe:	0668      	lsls	r0, r5, #25
 8018500:	d5fb      	bpl.n	80184fa <_printf_i+0xbe>
 8018502:	881b      	ldrh	r3, [r3, #0]
 8018504:	4854      	ldr	r0, [pc, #336]	; (8018658 <_printf_i+0x21c>)
 8018506:	296f      	cmp	r1, #111	; 0x6f
 8018508:	bf14      	ite	ne
 801850a:	220a      	movne	r2, #10
 801850c:	2208      	moveq	r2, #8
 801850e:	2100      	movs	r1, #0
 8018510:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018514:	6865      	ldr	r5, [r4, #4]
 8018516:	60a5      	str	r5, [r4, #8]
 8018518:	2d00      	cmp	r5, #0
 801851a:	f2c0 8095 	blt.w	8018648 <_printf_i+0x20c>
 801851e:	6821      	ldr	r1, [r4, #0]
 8018520:	f021 0104 	bic.w	r1, r1, #4
 8018524:	6021      	str	r1, [r4, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d13d      	bne.n	80185a6 <_printf_i+0x16a>
 801852a:	2d00      	cmp	r5, #0
 801852c:	f040 808e 	bne.w	801864c <_printf_i+0x210>
 8018530:	4665      	mov	r5, ip
 8018532:	2a08      	cmp	r2, #8
 8018534:	d10b      	bne.n	801854e <_printf_i+0x112>
 8018536:	6823      	ldr	r3, [r4, #0]
 8018538:	07db      	lsls	r3, r3, #31
 801853a:	d508      	bpl.n	801854e <_printf_i+0x112>
 801853c:	6923      	ldr	r3, [r4, #16]
 801853e:	6862      	ldr	r2, [r4, #4]
 8018540:	429a      	cmp	r2, r3
 8018542:	bfde      	ittt	le
 8018544:	2330      	movle	r3, #48	; 0x30
 8018546:	f805 3c01 	strble.w	r3, [r5, #-1]
 801854a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801854e:	ebac 0305 	sub.w	r3, ip, r5
 8018552:	6123      	str	r3, [r4, #16]
 8018554:	f8cd 8000 	str.w	r8, [sp]
 8018558:	463b      	mov	r3, r7
 801855a:	aa03      	add	r2, sp, #12
 801855c:	4621      	mov	r1, r4
 801855e:	4630      	mov	r0, r6
 8018560:	f7ff fef6 	bl	8018350 <_printf_common>
 8018564:	3001      	adds	r0, #1
 8018566:	d14d      	bne.n	8018604 <_printf_i+0x1c8>
 8018568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801856c:	b005      	add	sp, #20
 801856e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018572:	4839      	ldr	r0, [pc, #228]	; (8018658 <_printf_i+0x21c>)
 8018574:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018578:	6813      	ldr	r3, [r2, #0]
 801857a:	6821      	ldr	r1, [r4, #0]
 801857c:	1d1d      	adds	r5, r3, #4
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	6015      	str	r5, [r2, #0]
 8018582:	060a      	lsls	r2, r1, #24
 8018584:	d50b      	bpl.n	801859e <_printf_i+0x162>
 8018586:	07ca      	lsls	r2, r1, #31
 8018588:	bf44      	itt	mi
 801858a:	f041 0120 	orrmi.w	r1, r1, #32
 801858e:	6021      	strmi	r1, [r4, #0]
 8018590:	b91b      	cbnz	r3, 801859a <_printf_i+0x15e>
 8018592:	6822      	ldr	r2, [r4, #0]
 8018594:	f022 0220 	bic.w	r2, r2, #32
 8018598:	6022      	str	r2, [r4, #0]
 801859a:	2210      	movs	r2, #16
 801859c:	e7b7      	b.n	801850e <_printf_i+0xd2>
 801859e:	064d      	lsls	r5, r1, #25
 80185a0:	bf48      	it	mi
 80185a2:	b29b      	uxthmi	r3, r3
 80185a4:	e7ef      	b.n	8018586 <_printf_i+0x14a>
 80185a6:	4665      	mov	r5, ip
 80185a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80185ac:	fb02 3311 	mls	r3, r2, r1, r3
 80185b0:	5cc3      	ldrb	r3, [r0, r3]
 80185b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80185b6:	460b      	mov	r3, r1
 80185b8:	2900      	cmp	r1, #0
 80185ba:	d1f5      	bne.n	80185a8 <_printf_i+0x16c>
 80185bc:	e7b9      	b.n	8018532 <_printf_i+0xf6>
 80185be:	6813      	ldr	r3, [r2, #0]
 80185c0:	6825      	ldr	r5, [r4, #0]
 80185c2:	6961      	ldr	r1, [r4, #20]
 80185c4:	1d18      	adds	r0, r3, #4
 80185c6:	6010      	str	r0, [r2, #0]
 80185c8:	0628      	lsls	r0, r5, #24
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	d501      	bpl.n	80185d2 <_printf_i+0x196>
 80185ce:	6019      	str	r1, [r3, #0]
 80185d0:	e002      	b.n	80185d8 <_printf_i+0x19c>
 80185d2:	066a      	lsls	r2, r5, #25
 80185d4:	d5fb      	bpl.n	80185ce <_printf_i+0x192>
 80185d6:	8019      	strh	r1, [r3, #0]
 80185d8:	2300      	movs	r3, #0
 80185da:	6123      	str	r3, [r4, #16]
 80185dc:	4665      	mov	r5, ip
 80185de:	e7b9      	b.n	8018554 <_printf_i+0x118>
 80185e0:	6813      	ldr	r3, [r2, #0]
 80185e2:	1d19      	adds	r1, r3, #4
 80185e4:	6011      	str	r1, [r2, #0]
 80185e6:	681d      	ldr	r5, [r3, #0]
 80185e8:	6862      	ldr	r2, [r4, #4]
 80185ea:	2100      	movs	r1, #0
 80185ec:	4628      	mov	r0, r5
 80185ee:	f7e7 fe2f 	bl	8000250 <memchr>
 80185f2:	b108      	cbz	r0, 80185f8 <_printf_i+0x1bc>
 80185f4:	1b40      	subs	r0, r0, r5
 80185f6:	6060      	str	r0, [r4, #4]
 80185f8:	6863      	ldr	r3, [r4, #4]
 80185fa:	6123      	str	r3, [r4, #16]
 80185fc:	2300      	movs	r3, #0
 80185fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018602:	e7a7      	b.n	8018554 <_printf_i+0x118>
 8018604:	6923      	ldr	r3, [r4, #16]
 8018606:	462a      	mov	r2, r5
 8018608:	4639      	mov	r1, r7
 801860a:	4630      	mov	r0, r6
 801860c:	47c0      	blx	r8
 801860e:	3001      	adds	r0, #1
 8018610:	d0aa      	beq.n	8018568 <_printf_i+0x12c>
 8018612:	6823      	ldr	r3, [r4, #0]
 8018614:	079b      	lsls	r3, r3, #30
 8018616:	d413      	bmi.n	8018640 <_printf_i+0x204>
 8018618:	68e0      	ldr	r0, [r4, #12]
 801861a:	9b03      	ldr	r3, [sp, #12]
 801861c:	4298      	cmp	r0, r3
 801861e:	bfb8      	it	lt
 8018620:	4618      	movlt	r0, r3
 8018622:	e7a3      	b.n	801856c <_printf_i+0x130>
 8018624:	2301      	movs	r3, #1
 8018626:	464a      	mov	r2, r9
 8018628:	4639      	mov	r1, r7
 801862a:	4630      	mov	r0, r6
 801862c:	47c0      	blx	r8
 801862e:	3001      	adds	r0, #1
 8018630:	d09a      	beq.n	8018568 <_printf_i+0x12c>
 8018632:	3501      	adds	r5, #1
 8018634:	68e3      	ldr	r3, [r4, #12]
 8018636:	9a03      	ldr	r2, [sp, #12]
 8018638:	1a9b      	subs	r3, r3, r2
 801863a:	42ab      	cmp	r3, r5
 801863c:	dcf2      	bgt.n	8018624 <_printf_i+0x1e8>
 801863e:	e7eb      	b.n	8018618 <_printf_i+0x1dc>
 8018640:	2500      	movs	r5, #0
 8018642:	f104 0919 	add.w	r9, r4, #25
 8018646:	e7f5      	b.n	8018634 <_printf_i+0x1f8>
 8018648:	2b00      	cmp	r3, #0
 801864a:	d1ac      	bne.n	80185a6 <_printf_i+0x16a>
 801864c:	7803      	ldrb	r3, [r0, #0]
 801864e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018656:	e76c      	b.n	8018532 <_printf_i+0xf6>
 8018658:	0801f8b0 	.word	0x0801f8b0
 801865c:	0801f8c1 	.word	0x0801f8c1

08018660 <_scanf_float>:
 8018660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018664:	469a      	mov	sl, r3
 8018666:	688b      	ldr	r3, [r1, #8]
 8018668:	4616      	mov	r6, r2
 801866a:	1e5a      	subs	r2, r3, #1
 801866c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018670:	b087      	sub	sp, #28
 8018672:	bf83      	ittte	hi
 8018674:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8018678:	189b      	addhi	r3, r3, r2
 801867a:	9301      	strhi	r3, [sp, #4]
 801867c:	2300      	movls	r3, #0
 801867e:	bf86      	itte	hi
 8018680:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018684:	608b      	strhi	r3, [r1, #8]
 8018686:	9301      	strls	r3, [sp, #4]
 8018688:	680b      	ldr	r3, [r1, #0]
 801868a:	4688      	mov	r8, r1
 801868c:	f04f 0b00 	mov.w	fp, #0
 8018690:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018694:	f848 3b1c 	str.w	r3, [r8], #28
 8018698:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801869c:	4607      	mov	r7, r0
 801869e:	460c      	mov	r4, r1
 80186a0:	4645      	mov	r5, r8
 80186a2:	465a      	mov	r2, fp
 80186a4:	46d9      	mov	r9, fp
 80186a6:	f8cd b008 	str.w	fp, [sp, #8]
 80186aa:	68a1      	ldr	r1, [r4, #8]
 80186ac:	b181      	cbz	r1, 80186d0 <_scanf_float+0x70>
 80186ae:	6833      	ldr	r3, [r6, #0]
 80186b0:	781b      	ldrb	r3, [r3, #0]
 80186b2:	2b49      	cmp	r3, #73	; 0x49
 80186b4:	d071      	beq.n	801879a <_scanf_float+0x13a>
 80186b6:	d84d      	bhi.n	8018754 <_scanf_float+0xf4>
 80186b8:	2b39      	cmp	r3, #57	; 0x39
 80186ba:	d840      	bhi.n	801873e <_scanf_float+0xde>
 80186bc:	2b31      	cmp	r3, #49	; 0x31
 80186be:	f080 8088 	bcs.w	80187d2 <_scanf_float+0x172>
 80186c2:	2b2d      	cmp	r3, #45	; 0x2d
 80186c4:	f000 8090 	beq.w	80187e8 <_scanf_float+0x188>
 80186c8:	d815      	bhi.n	80186f6 <_scanf_float+0x96>
 80186ca:	2b2b      	cmp	r3, #43	; 0x2b
 80186cc:	f000 808c 	beq.w	80187e8 <_scanf_float+0x188>
 80186d0:	f1b9 0f00 	cmp.w	r9, #0
 80186d4:	d003      	beq.n	80186de <_scanf_float+0x7e>
 80186d6:	6823      	ldr	r3, [r4, #0]
 80186d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80186dc:	6023      	str	r3, [r4, #0]
 80186de:	3a01      	subs	r2, #1
 80186e0:	2a01      	cmp	r2, #1
 80186e2:	f200 80ea 	bhi.w	80188ba <_scanf_float+0x25a>
 80186e6:	4545      	cmp	r5, r8
 80186e8:	f200 80dc 	bhi.w	80188a4 <_scanf_float+0x244>
 80186ec:	2601      	movs	r6, #1
 80186ee:	4630      	mov	r0, r6
 80186f0:	b007      	add	sp, #28
 80186f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f6:	2b2e      	cmp	r3, #46	; 0x2e
 80186f8:	f000 809f 	beq.w	801883a <_scanf_float+0x1da>
 80186fc:	2b30      	cmp	r3, #48	; 0x30
 80186fe:	d1e7      	bne.n	80186d0 <_scanf_float+0x70>
 8018700:	6820      	ldr	r0, [r4, #0]
 8018702:	f410 7f80 	tst.w	r0, #256	; 0x100
 8018706:	d064      	beq.n	80187d2 <_scanf_float+0x172>
 8018708:	9b01      	ldr	r3, [sp, #4]
 801870a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801870e:	6020      	str	r0, [r4, #0]
 8018710:	f109 0901 	add.w	r9, r9, #1
 8018714:	b11b      	cbz	r3, 801871e <_scanf_float+0xbe>
 8018716:	3b01      	subs	r3, #1
 8018718:	3101      	adds	r1, #1
 801871a:	9301      	str	r3, [sp, #4]
 801871c:	60a1      	str	r1, [r4, #8]
 801871e:	68a3      	ldr	r3, [r4, #8]
 8018720:	3b01      	subs	r3, #1
 8018722:	60a3      	str	r3, [r4, #8]
 8018724:	6923      	ldr	r3, [r4, #16]
 8018726:	3301      	adds	r3, #1
 8018728:	6123      	str	r3, [r4, #16]
 801872a:	6873      	ldr	r3, [r6, #4]
 801872c:	3b01      	subs	r3, #1
 801872e:	2b00      	cmp	r3, #0
 8018730:	6073      	str	r3, [r6, #4]
 8018732:	f340 80ac 	ble.w	801888e <_scanf_float+0x22e>
 8018736:	6833      	ldr	r3, [r6, #0]
 8018738:	3301      	adds	r3, #1
 801873a:	6033      	str	r3, [r6, #0]
 801873c:	e7b5      	b.n	80186aa <_scanf_float+0x4a>
 801873e:	2b45      	cmp	r3, #69	; 0x45
 8018740:	f000 8085 	beq.w	801884e <_scanf_float+0x1ee>
 8018744:	2b46      	cmp	r3, #70	; 0x46
 8018746:	d06a      	beq.n	801881e <_scanf_float+0x1be>
 8018748:	2b41      	cmp	r3, #65	; 0x41
 801874a:	d1c1      	bne.n	80186d0 <_scanf_float+0x70>
 801874c:	2a01      	cmp	r2, #1
 801874e:	d1bf      	bne.n	80186d0 <_scanf_float+0x70>
 8018750:	2202      	movs	r2, #2
 8018752:	e046      	b.n	80187e2 <_scanf_float+0x182>
 8018754:	2b65      	cmp	r3, #101	; 0x65
 8018756:	d07a      	beq.n	801884e <_scanf_float+0x1ee>
 8018758:	d818      	bhi.n	801878c <_scanf_float+0x12c>
 801875a:	2b54      	cmp	r3, #84	; 0x54
 801875c:	d066      	beq.n	801882c <_scanf_float+0x1cc>
 801875e:	d811      	bhi.n	8018784 <_scanf_float+0x124>
 8018760:	2b4e      	cmp	r3, #78	; 0x4e
 8018762:	d1b5      	bne.n	80186d0 <_scanf_float+0x70>
 8018764:	2a00      	cmp	r2, #0
 8018766:	d146      	bne.n	80187f6 <_scanf_float+0x196>
 8018768:	f1b9 0f00 	cmp.w	r9, #0
 801876c:	d145      	bne.n	80187fa <_scanf_float+0x19a>
 801876e:	6821      	ldr	r1, [r4, #0]
 8018770:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8018774:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8018778:	d13f      	bne.n	80187fa <_scanf_float+0x19a>
 801877a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801877e:	6021      	str	r1, [r4, #0]
 8018780:	2201      	movs	r2, #1
 8018782:	e02e      	b.n	80187e2 <_scanf_float+0x182>
 8018784:	2b59      	cmp	r3, #89	; 0x59
 8018786:	d01e      	beq.n	80187c6 <_scanf_float+0x166>
 8018788:	2b61      	cmp	r3, #97	; 0x61
 801878a:	e7de      	b.n	801874a <_scanf_float+0xea>
 801878c:	2b6e      	cmp	r3, #110	; 0x6e
 801878e:	d0e9      	beq.n	8018764 <_scanf_float+0x104>
 8018790:	d815      	bhi.n	80187be <_scanf_float+0x15e>
 8018792:	2b66      	cmp	r3, #102	; 0x66
 8018794:	d043      	beq.n	801881e <_scanf_float+0x1be>
 8018796:	2b69      	cmp	r3, #105	; 0x69
 8018798:	d19a      	bne.n	80186d0 <_scanf_float+0x70>
 801879a:	f1bb 0f00 	cmp.w	fp, #0
 801879e:	d138      	bne.n	8018812 <_scanf_float+0x1b2>
 80187a0:	f1b9 0f00 	cmp.w	r9, #0
 80187a4:	d197      	bne.n	80186d6 <_scanf_float+0x76>
 80187a6:	6821      	ldr	r1, [r4, #0]
 80187a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80187ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80187b0:	d195      	bne.n	80186de <_scanf_float+0x7e>
 80187b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80187b6:	6021      	str	r1, [r4, #0]
 80187b8:	f04f 0b01 	mov.w	fp, #1
 80187bc:	e011      	b.n	80187e2 <_scanf_float+0x182>
 80187be:	2b74      	cmp	r3, #116	; 0x74
 80187c0:	d034      	beq.n	801882c <_scanf_float+0x1cc>
 80187c2:	2b79      	cmp	r3, #121	; 0x79
 80187c4:	d184      	bne.n	80186d0 <_scanf_float+0x70>
 80187c6:	f1bb 0f07 	cmp.w	fp, #7
 80187ca:	d181      	bne.n	80186d0 <_scanf_float+0x70>
 80187cc:	f04f 0b08 	mov.w	fp, #8
 80187d0:	e007      	b.n	80187e2 <_scanf_float+0x182>
 80187d2:	eb12 0f0b 	cmn.w	r2, fp
 80187d6:	f47f af7b 	bne.w	80186d0 <_scanf_float+0x70>
 80187da:	6821      	ldr	r1, [r4, #0]
 80187dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80187e0:	6021      	str	r1, [r4, #0]
 80187e2:	702b      	strb	r3, [r5, #0]
 80187e4:	3501      	adds	r5, #1
 80187e6:	e79a      	b.n	801871e <_scanf_float+0xbe>
 80187e8:	6821      	ldr	r1, [r4, #0]
 80187ea:	0608      	lsls	r0, r1, #24
 80187ec:	f57f af70 	bpl.w	80186d0 <_scanf_float+0x70>
 80187f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80187f4:	e7f4      	b.n	80187e0 <_scanf_float+0x180>
 80187f6:	2a02      	cmp	r2, #2
 80187f8:	d047      	beq.n	801888a <_scanf_float+0x22a>
 80187fa:	f1bb 0f01 	cmp.w	fp, #1
 80187fe:	d003      	beq.n	8018808 <_scanf_float+0x1a8>
 8018800:	f1bb 0f04 	cmp.w	fp, #4
 8018804:	f47f af64 	bne.w	80186d0 <_scanf_float+0x70>
 8018808:	f10b 0b01 	add.w	fp, fp, #1
 801880c:	fa5f fb8b 	uxtb.w	fp, fp
 8018810:	e7e7      	b.n	80187e2 <_scanf_float+0x182>
 8018812:	f1bb 0f03 	cmp.w	fp, #3
 8018816:	d0f7      	beq.n	8018808 <_scanf_float+0x1a8>
 8018818:	f1bb 0f05 	cmp.w	fp, #5
 801881c:	e7f2      	b.n	8018804 <_scanf_float+0x1a4>
 801881e:	f1bb 0f02 	cmp.w	fp, #2
 8018822:	f47f af55 	bne.w	80186d0 <_scanf_float+0x70>
 8018826:	f04f 0b03 	mov.w	fp, #3
 801882a:	e7da      	b.n	80187e2 <_scanf_float+0x182>
 801882c:	f1bb 0f06 	cmp.w	fp, #6
 8018830:	f47f af4e 	bne.w	80186d0 <_scanf_float+0x70>
 8018834:	f04f 0b07 	mov.w	fp, #7
 8018838:	e7d3      	b.n	80187e2 <_scanf_float+0x182>
 801883a:	6821      	ldr	r1, [r4, #0]
 801883c:	0588      	lsls	r0, r1, #22
 801883e:	f57f af47 	bpl.w	80186d0 <_scanf_float+0x70>
 8018842:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8018846:	6021      	str	r1, [r4, #0]
 8018848:	f8cd 9008 	str.w	r9, [sp, #8]
 801884c:	e7c9      	b.n	80187e2 <_scanf_float+0x182>
 801884e:	6821      	ldr	r1, [r4, #0]
 8018850:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8018854:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018858:	d006      	beq.n	8018868 <_scanf_float+0x208>
 801885a:	0548      	lsls	r0, r1, #21
 801885c:	f57f af38 	bpl.w	80186d0 <_scanf_float+0x70>
 8018860:	f1b9 0f00 	cmp.w	r9, #0
 8018864:	f43f af3b 	beq.w	80186de <_scanf_float+0x7e>
 8018868:	0588      	lsls	r0, r1, #22
 801886a:	bf58      	it	pl
 801886c:	9802      	ldrpl	r0, [sp, #8]
 801886e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8018872:	bf58      	it	pl
 8018874:	eba9 0000 	subpl.w	r0, r9, r0
 8018878:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801887c:	bf58      	it	pl
 801887e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8018882:	6021      	str	r1, [r4, #0]
 8018884:	f04f 0900 	mov.w	r9, #0
 8018888:	e7ab      	b.n	80187e2 <_scanf_float+0x182>
 801888a:	2203      	movs	r2, #3
 801888c:	e7a9      	b.n	80187e2 <_scanf_float+0x182>
 801888e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018892:	9205      	str	r2, [sp, #20]
 8018894:	4631      	mov	r1, r6
 8018896:	4638      	mov	r0, r7
 8018898:	4798      	blx	r3
 801889a:	9a05      	ldr	r2, [sp, #20]
 801889c:	2800      	cmp	r0, #0
 801889e:	f43f af04 	beq.w	80186aa <_scanf_float+0x4a>
 80188a2:	e715      	b.n	80186d0 <_scanf_float+0x70>
 80188a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80188a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80188ac:	4632      	mov	r2, r6
 80188ae:	4638      	mov	r0, r7
 80188b0:	4798      	blx	r3
 80188b2:	6923      	ldr	r3, [r4, #16]
 80188b4:	3b01      	subs	r3, #1
 80188b6:	6123      	str	r3, [r4, #16]
 80188b8:	e715      	b.n	80186e6 <_scanf_float+0x86>
 80188ba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80188be:	2b06      	cmp	r3, #6
 80188c0:	d80a      	bhi.n	80188d8 <_scanf_float+0x278>
 80188c2:	f1bb 0f02 	cmp.w	fp, #2
 80188c6:	d966      	bls.n	8018996 <_scanf_float+0x336>
 80188c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80188cc:	fa5f fb8b 	uxtb.w	fp, fp
 80188d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80188d4:	455d      	cmp	r5, fp
 80188d6:	d149      	bne.n	801896c <_scanf_float+0x30c>
 80188d8:	6823      	ldr	r3, [r4, #0]
 80188da:	05da      	lsls	r2, r3, #23
 80188dc:	d51f      	bpl.n	801891e <_scanf_float+0x2be>
 80188de:	055b      	lsls	r3, r3, #21
 80188e0:	d466      	bmi.n	80189b0 <_scanf_float+0x350>
 80188e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80188e6:	6923      	ldr	r3, [r4, #16]
 80188e8:	2965      	cmp	r1, #101	; 0x65
 80188ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80188ee:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80188f2:	6123      	str	r3, [r4, #16]
 80188f4:	d00d      	beq.n	8018912 <_scanf_float+0x2b2>
 80188f6:	2945      	cmp	r1, #69	; 0x45
 80188f8:	d00b      	beq.n	8018912 <_scanf_float+0x2b2>
 80188fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80188fe:	4632      	mov	r2, r6
 8018900:	4638      	mov	r0, r7
 8018902:	4798      	blx	r3
 8018904:	6923      	ldr	r3, [r4, #16]
 8018906:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801890a:	3b01      	subs	r3, #1
 801890c:	f1a5 0b02 	sub.w	fp, r5, #2
 8018910:	6123      	str	r3, [r4, #16]
 8018912:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018916:	4632      	mov	r2, r6
 8018918:	4638      	mov	r0, r7
 801891a:	4798      	blx	r3
 801891c:	465d      	mov	r5, fp
 801891e:	6826      	ldr	r6, [r4, #0]
 8018920:	f016 0610 	ands.w	r6, r6, #16
 8018924:	d170      	bne.n	8018a08 <_scanf_float+0x3a8>
 8018926:	702e      	strb	r6, [r5, #0]
 8018928:	6823      	ldr	r3, [r4, #0]
 801892a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801892e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018932:	d140      	bne.n	80189b6 <_scanf_float+0x356>
 8018934:	9b02      	ldr	r3, [sp, #8]
 8018936:	eba9 0303 	sub.w	r3, r9, r3
 801893a:	425a      	negs	r2, r3
 801893c:	2b00      	cmp	r3, #0
 801893e:	d147      	bne.n	80189d0 <_scanf_float+0x370>
 8018940:	2200      	movs	r2, #0
 8018942:	4638      	mov	r0, r7
 8018944:	4641      	mov	r1, r8
 8018946:	f000 fecb 	bl	80196e0 <_strtod_r>
 801894a:	6820      	ldr	r0, [r4, #0]
 801894c:	f8da 3000 	ldr.w	r3, [sl]
 8018950:	f010 0f02 	tst.w	r0, #2
 8018954:	f103 0204 	add.w	r2, r3, #4
 8018958:	f8ca 2000 	str.w	r2, [sl]
 801895c:	d043      	beq.n	80189e6 <_scanf_float+0x386>
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	ed83 0b00 	vstr	d0, [r3]
 8018964:	68e3      	ldr	r3, [r4, #12]
 8018966:	3301      	adds	r3, #1
 8018968:	60e3      	str	r3, [r4, #12]
 801896a:	e6c0      	b.n	80186ee <_scanf_float+0x8e>
 801896c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018970:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8018974:	4632      	mov	r2, r6
 8018976:	4638      	mov	r0, r7
 8018978:	4798      	blx	r3
 801897a:	6923      	ldr	r3, [r4, #16]
 801897c:	3b01      	subs	r3, #1
 801897e:	6123      	str	r3, [r4, #16]
 8018980:	e7a8      	b.n	80188d4 <_scanf_float+0x274>
 8018982:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018986:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801898a:	4632      	mov	r2, r6
 801898c:	4638      	mov	r0, r7
 801898e:	4798      	blx	r3
 8018990:	6923      	ldr	r3, [r4, #16]
 8018992:	3b01      	subs	r3, #1
 8018994:	6123      	str	r3, [r4, #16]
 8018996:	4545      	cmp	r5, r8
 8018998:	d8f3      	bhi.n	8018982 <_scanf_float+0x322>
 801899a:	e6a7      	b.n	80186ec <_scanf_float+0x8c>
 801899c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80189a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80189a4:	4632      	mov	r2, r6
 80189a6:	4638      	mov	r0, r7
 80189a8:	4798      	blx	r3
 80189aa:	6923      	ldr	r3, [r4, #16]
 80189ac:	3b01      	subs	r3, #1
 80189ae:	6123      	str	r3, [r4, #16]
 80189b0:	4545      	cmp	r5, r8
 80189b2:	d8f3      	bhi.n	801899c <_scanf_float+0x33c>
 80189b4:	e69a      	b.n	80186ec <_scanf_float+0x8c>
 80189b6:	9b03      	ldr	r3, [sp, #12]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d0c1      	beq.n	8018940 <_scanf_float+0x2e0>
 80189bc:	9904      	ldr	r1, [sp, #16]
 80189be:	230a      	movs	r3, #10
 80189c0:	4632      	mov	r2, r6
 80189c2:	3101      	adds	r1, #1
 80189c4:	4638      	mov	r0, r7
 80189c6:	f000 ff17 	bl	80197f8 <_strtol_r>
 80189ca:	9b03      	ldr	r3, [sp, #12]
 80189cc:	9d04      	ldr	r5, [sp, #16]
 80189ce:	1ac2      	subs	r2, r0, r3
 80189d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80189d4:	429d      	cmp	r5, r3
 80189d6:	bf28      	it	cs
 80189d8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80189dc:	490b      	ldr	r1, [pc, #44]	; (8018a0c <_scanf_float+0x3ac>)
 80189de:	4628      	mov	r0, r5
 80189e0:	f000 f868 	bl	8018ab4 <siprintf>
 80189e4:	e7ac      	b.n	8018940 <_scanf_float+0x2e0>
 80189e6:	f010 0004 	ands.w	r0, r0, #4
 80189ea:	d1b8      	bne.n	801895e <_scanf_float+0x2fe>
 80189ec:	eeb4 0b40 	vcmp.f64	d0, d0
 80189f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189f4:	681d      	ldr	r5, [r3, #0]
 80189f6:	d704      	bvc.n	8018a02 <_scanf_float+0x3a2>
 80189f8:	f000 f856 	bl	8018aa8 <nanf>
 80189fc:	ed85 0a00 	vstr	s0, [r5]
 8018a00:	e7b0      	b.n	8018964 <_scanf_float+0x304>
 8018a02:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018a06:	e7f9      	b.n	80189fc <_scanf_float+0x39c>
 8018a08:	2600      	movs	r6, #0
 8018a0a:	e670      	b.n	80186ee <_scanf_float+0x8e>
 8018a0c:	0801f8d2 	.word	0x0801f8d2

08018a10 <iprintf>:
 8018a10:	b40f      	push	{r0, r1, r2, r3}
 8018a12:	4b0a      	ldr	r3, [pc, #40]	; (8018a3c <iprintf+0x2c>)
 8018a14:	b513      	push	{r0, r1, r4, lr}
 8018a16:	681c      	ldr	r4, [r3, #0]
 8018a18:	b124      	cbz	r4, 8018a24 <iprintf+0x14>
 8018a1a:	69a3      	ldr	r3, [r4, #24]
 8018a1c:	b913      	cbnz	r3, 8018a24 <iprintf+0x14>
 8018a1e:	4620      	mov	r0, r4
 8018a20:	f001 fd22 	bl	801a468 <__sinit>
 8018a24:	ab05      	add	r3, sp, #20
 8018a26:	9a04      	ldr	r2, [sp, #16]
 8018a28:	68a1      	ldr	r1, [r4, #8]
 8018a2a:	9301      	str	r3, [sp, #4]
 8018a2c:	4620      	mov	r0, r4
 8018a2e:	f002 ff15 	bl	801b85c <_vfiprintf_r>
 8018a32:	b002      	add	sp, #8
 8018a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a38:	b004      	add	sp, #16
 8018a3a:	4770      	bx	lr
 8018a3c:	20001518 	.word	0x20001518

08018a40 <rand>:
 8018a40:	b538      	push	{r3, r4, r5, lr}
 8018a42:	4b13      	ldr	r3, [pc, #76]	; (8018a90 <rand+0x50>)
 8018a44:	681c      	ldr	r4, [r3, #0]
 8018a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018a48:	b97b      	cbnz	r3, 8018a6a <rand+0x2a>
 8018a4a:	2018      	movs	r0, #24
 8018a4c:	f002 f8cc 	bl	801abe8 <malloc>
 8018a50:	4a10      	ldr	r2, [pc, #64]	; (8018a94 <rand+0x54>)
 8018a52:	4b11      	ldr	r3, [pc, #68]	; (8018a98 <rand+0x58>)
 8018a54:	63a0      	str	r0, [r4, #56]	; 0x38
 8018a56:	e9c0 2300 	strd	r2, r3, [r0]
 8018a5a:	4b10      	ldr	r3, [pc, #64]	; (8018a9c <rand+0x5c>)
 8018a5c:	6083      	str	r3, [r0, #8]
 8018a5e:	230b      	movs	r3, #11
 8018a60:	8183      	strh	r3, [r0, #12]
 8018a62:	2201      	movs	r2, #1
 8018a64:	2300      	movs	r3, #0
 8018a66:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018a6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018a6c:	480c      	ldr	r0, [pc, #48]	; (8018aa0 <rand+0x60>)
 8018a6e:	690a      	ldr	r2, [r1, #16]
 8018a70:	694b      	ldr	r3, [r1, #20]
 8018a72:	4c0c      	ldr	r4, [pc, #48]	; (8018aa4 <rand+0x64>)
 8018a74:	4350      	muls	r0, r2
 8018a76:	fb04 0003 	mla	r0, r4, r3, r0
 8018a7a:	fba2 2304 	umull	r2, r3, r2, r4
 8018a7e:	4403      	add	r3, r0
 8018a80:	1c54      	adds	r4, r2, #1
 8018a82:	f143 0500 	adc.w	r5, r3, #0
 8018a86:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8018a8a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8018a8e:	bd38      	pop	{r3, r4, r5, pc}
 8018a90:	20001518 	.word	0x20001518
 8018a94:	abcd330e 	.word	0xabcd330e
 8018a98:	e66d1234 	.word	0xe66d1234
 8018a9c:	0005deec 	.word	0x0005deec
 8018aa0:	5851f42d 	.word	0x5851f42d
 8018aa4:	4c957f2d 	.word	0x4c957f2d

08018aa8 <nanf>:
 8018aa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018ab0 <nanf+0x8>
 8018aac:	4770      	bx	lr
 8018aae:	bf00      	nop
 8018ab0:	7fc00000 	.word	0x7fc00000

08018ab4 <siprintf>:
 8018ab4:	b40e      	push	{r1, r2, r3}
 8018ab6:	b500      	push	{lr}
 8018ab8:	b09c      	sub	sp, #112	; 0x70
 8018aba:	ab1d      	add	r3, sp, #116	; 0x74
 8018abc:	9002      	str	r0, [sp, #8]
 8018abe:	9006      	str	r0, [sp, #24]
 8018ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018ac4:	4809      	ldr	r0, [pc, #36]	; (8018aec <siprintf+0x38>)
 8018ac6:	9107      	str	r1, [sp, #28]
 8018ac8:	9104      	str	r1, [sp, #16]
 8018aca:	4909      	ldr	r1, [pc, #36]	; (8018af0 <siprintf+0x3c>)
 8018acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ad0:	9105      	str	r1, [sp, #20]
 8018ad2:	6800      	ldr	r0, [r0, #0]
 8018ad4:	9301      	str	r3, [sp, #4]
 8018ad6:	a902      	add	r1, sp, #8
 8018ad8:	f002 fd9e 	bl	801b618 <_svfiprintf_r>
 8018adc:	9b02      	ldr	r3, [sp, #8]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	701a      	strb	r2, [r3, #0]
 8018ae2:	b01c      	add	sp, #112	; 0x70
 8018ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ae8:	b003      	add	sp, #12
 8018aea:	4770      	bx	lr
 8018aec:	20001518 	.word	0x20001518
 8018af0:	ffff0208 	.word	0xffff0208

08018af4 <strncmp>:
 8018af4:	b510      	push	{r4, lr}
 8018af6:	b16a      	cbz	r2, 8018b14 <strncmp+0x20>
 8018af8:	3901      	subs	r1, #1
 8018afa:	1884      	adds	r4, r0, r2
 8018afc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018b00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018b04:	4293      	cmp	r3, r2
 8018b06:	d103      	bne.n	8018b10 <strncmp+0x1c>
 8018b08:	42a0      	cmp	r0, r4
 8018b0a:	d001      	beq.n	8018b10 <strncmp+0x1c>
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d1f5      	bne.n	8018afc <strncmp+0x8>
 8018b10:	1a98      	subs	r0, r3, r2
 8018b12:	bd10      	pop	{r4, pc}
 8018b14:	4610      	mov	r0, r2
 8018b16:	e7fc      	b.n	8018b12 <strncmp+0x1e>

08018b18 <sulp>:
 8018b18:	b570      	push	{r4, r5, r6, lr}
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	460d      	mov	r5, r1
 8018b1e:	4616      	mov	r6, r2
 8018b20:	ec45 4b10 	vmov	d0, r4, r5
 8018b24:	f002 fb34 	bl	801b190 <__ulp>
 8018b28:	b17e      	cbz	r6, 8018b4a <sulp+0x32>
 8018b2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8018b2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	dd09      	ble.n	8018b4a <sulp+0x32>
 8018b36:	051b      	lsls	r3, r3, #20
 8018b38:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8018b42:	ec41 0b17 	vmov	d7, r0, r1
 8018b46:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018b4a:	bd70      	pop	{r4, r5, r6, pc}
 8018b4c:	0000      	movs	r0, r0
	...

08018b50 <_strtod_l>:
 8018b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	ed2d 8b0c 	vpush	{d8-d13}
 8018b58:	4698      	mov	r8, r3
 8018b5a:	b09d      	sub	sp, #116	; 0x74
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	4604      	mov	r4, r0
 8018b60:	4640      	mov	r0, r8
 8018b62:	460e      	mov	r6, r1
 8018b64:	9214      	str	r2, [sp, #80]	; 0x50
 8018b66:	9318      	str	r3, [sp, #96]	; 0x60
 8018b68:	f002 f82e 	bl	801abc8 <__localeconv_l>
 8018b6c:	4681      	mov	r9, r0
 8018b6e:	6800      	ldr	r0, [r0, #0]
 8018b70:	f7e7 fb66 	bl	8000240 <strlen>
 8018b74:	f04f 0a00 	mov.w	sl, #0
 8018b78:	4607      	mov	r7, r0
 8018b7a:	f04f 0b00 	mov.w	fp, #0
 8018b7e:	9617      	str	r6, [sp, #92]	; 0x5c
 8018b80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018b82:	781a      	ldrb	r2, [r3, #0]
 8018b84:	2a0d      	cmp	r2, #13
 8018b86:	d834      	bhi.n	8018bf2 <_strtod_l+0xa2>
 8018b88:	2a09      	cmp	r2, #9
 8018b8a:	d238      	bcs.n	8018bfe <_strtod_l+0xae>
 8018b8c:	2a00      	cmp	r2, #0
 8018b8e:	d040      	beq.n	8018c12 <_strtod_l+0xc2>
 8018b90:	2300      	movs	r3, #0
 8018b92:	930d      	str	r3, [sp, #52]	; 0x34
 8018b94:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8018b96:	782b      	ldrb	r3, [r5, #0]
 8018b98:	2b30      	cmp	r3, #48	; 0x30
 8018b9a:	f040 80b3 	bne.w	8018d04 <_strtod_l+0x1b4>
 8018b9e:	786b      	ldrb	r3, [r5, #1]
 8018ba0:	2b58      	cmp	r3, #88	; 0x58
 8018ba2:	d001      	beq.n	8018ba8 <_strtod_l+0x58>
 8018ba4:	2b78      	cmp	r3, #120	; 0x78
 8018ba6:	d169      	bne.n	8018c7c <_strtod_l+0x12c>
 8018ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018baa:	9301      	str	r3, [sp, #4]
 8018bac:	ab18      	add	r3, sp, #96	; 0x60
 8018bae:	9300      	str	r3, [sp, #0]
 8018bb0:	f8cd 8008 	str.w	r8, [sp, #8]
 8018bb4:	ab19      	add	r3, sp, #100	; 0x64
 8018bb6:	4a8f      	ldr	r2, [pc, #572]	; (8018df4 <_strtod_l+0x2a4>)
 8018bb8:	a917      	add	r1, sp, #92	; 0x5c
 8018bba:	4620      	mov	r0, r4
 8018bbc:	f001 fd2d 	bl	801a61a <__gethex>
 8018bc0:	f010 0607 	ands.w	r6, r0, #7
 8018bc4:	4607      	mov	r7, r0
 8018bc6:	d005      	beq.n	8018bd4 <_strtod_l+0x84>
 8018bc8:	2e06      	cmp	r6, #6
 8018bca:	d12c      	bne.n	8018c26 <_strtod_l+0xd6>
 8018bcc:	3501      	adds	r5, #1
 8018bce:	2300      	movs	r3, #0
 8018bd0:	9517      	str	r5, [sp, #92]	; 0x5c
 8018bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8018bd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	f040 855e 	bne.w	8019698 <_strtod_l+0xb48>
 8018bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018bde:	b1eb      	cbz	r3, 8018c1c <_strtod_l+0xcc>
 8018be0:	ec4b ab17 	vmov	d7, sl, fp
 8018be4:	eeb1 0b47 	vneg.f64	d0, d7
 8018be8:	b01d      	add	sp, #116	; 0x74
 8018bea:	ecbd 8b0c 	vpop	{d8-d13}
 8018bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf2:	2a2b      	cmp	r2, #43	; 0x2b
 8018bf4:	d015      	beq.n	8018c22 <_strtod_l+0xd2>
 8018bf6:	2a2d      	cmp	r2, #45	; 0x2d
 8018bf8:	d004      	beq.n	8018c04 <_strtod_l+0xb4>
 8018bfa:	2a20      	cmp	r2, #32
 8018bfc:	d1c8      	bne.n	8018b90 <_strtod_l+0x40>
 8018bfe:	3301      	adds	r3, #1
 8018c00:	9317      	str	r3, [sp, #92]	; 0x5c
 8018c02:	e7bd      	b.n	8018b80 <_strtod_l+0x30>
 8018c04:	2201      	movs	r2, #1
 8018c06:	920d      	str	r2, [sp, #52]	; 0x34
 8018c08:	1c5a      	adds	r2, r3, #1
 8018c0a:	9217      	str	r2, [sp, #92]	; 0x5c
 8018c0c:	785b      	ldrb	r3, [r3, #1]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d1c0      	bne.n	8018b94 <_strtod_l+0x44>
 8018c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c14:	9617      	str	r6, [sp, #92]	; 0x5c
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f040 853c 	bne.w	8019694 <_strtod_l+0xb44>
 8018c1c:	ec4b ab10 	vmov	d0, sl, fp
 8018c20:	e7e2      	b.n	8018be8 <_strtod_l+0x98>
 8018c22:	2200      	movs	r2, #0
 8018c24:	e7ef      	b.n	8018c06 <_strtod_l+0xb6>
 8018c26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018c28:	b13a      	cbz	r2, 8018c3a <_strtod_l+0xea>
 8018c2a:	2135      	movs	r1, #53	; 0x35
 8018c2c:	a81a      	add	r0, sp, #104	; 0x68
 8018c2e:	f002 fba8 	bl	801b382 <__copybits>
 8018c32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018c34:	4620      	mov	r0, r4
 8018c36:	f002 f813 	bl	801ac60 <_Bfree>
 8018c3a:	3e01      	subs	r6, #1
 8018c3c:	2e04      	cmp	r6, #4
 8018c3e:	d806      	bhi.n	8018c4e <_strtod_l+0xfe>
 8018c40:	e8df f006 	tbb	[pc, r6]
 8018c44:	1714030a 	.word	0x1714030a
 8018c48:	0a          	.byte	0x0a
 8018c49:	00          	.byte	0x00
 8018c4a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8018c4e:	073b      	lsls	r3, r7, #28
 8018c50:	d5c0      	bpl.n	8018bd4 <_strtod_l+0x84>
 8018c52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018c56:	e7bd      	b.n	8018bd4 <_strtod_l+0x84>
 8018c58:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8018c5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018c5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018c62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018c66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8018c6a:	e7f0      	b.n	8018c4e <_strtod_l+0xfe>
 8018c6c:	f8df b188 	ldr.w	fp, [pc, #392]	; 8018df8 <_strtod_l+0x2a8>
 8018c70:	e7ed      	b.n	8018c4e <_strtod_l+0xfe>
 8018c72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8018c76:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018c7a:	e7e8      	b.n	8018c4e <_strtod_l+0xfe>
 8018c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018c7e:	1c5a      	adds	r2, r3, #1
 8018c80:	9217      	str	r2, [sp, #92]	; 0x5c
 8018c82:	785b      	ldrb	r3, [r3, #1]
 8018c84:	2b30      	cmp	r3, #48	; 0x30
 8018c86:	d0f9      	beq.n	8018c7c <_strtod_l+0x12c>
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d0a3      	beq.n	8018bd4 <_strtod_l+0x84>
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8018c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018c92:	930c      	str	r3, [sp, #48]	; 0x30
 8018c94:	2300      	movs	r3, #0
 8018c96:	9306      	str	r3, [sp, #24]
 8018c98:	9308      	str	r3, [sp, #32]
 8018c9a:	461d      	mov	r5, r3
 8018c9c:	220a      	movs	r2, #10
 8018c9e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8018ca0:	f890 8000 	ldrb.w	r8, [r0]
 8018ca4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8018ca8:	b2d9      	uxtb	r1, r3
 8018caa:	2909      	cmp	r1, #9
 8018cac:	d92c      	bls.n	8018d08 <_strtod_l+0x1b8>
 8018cae:	463a      	mov	r2, r7
 8018cb0:	f8d9 1000 	ldr.w	r1, [r9]
 8018cb4:	f7ff ff1e 	bl	8018af4 <strncmp>
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	d035      	beq.n	8018d28 <_strtod_l+0x1d8>
 8018cbc:	2000      	movs	r0, #0
 8018cbe:	4642      	mov	r2, r8
 8018cc0:	462b      	mov	r3, r5
 8018cc2:	4601      	mov	r1, r0
 8018cc4:	9004      	str	r0, [sp, #16]
 8018cc6:	2a65      	cmp	r2, #101	; 0x65
 8018cc8:	d001      	beq.n	8018cce <_strtod_l+0x17e>
 8018cca:	2a45      	cmp	r2, #69	; 0x45
 8018ccc:	d117      	bne.n	8018cfe <_strtod_l+0x1ae>
 8018cce:	b923      	cbnz	r3, 8018cda <_strtod_l+0x18a>
 8018cd0:	b910      	cbnz	r0, 8018cd8 <_strtod_l+0x188>
 8018cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d09c      	beq.n	8018c12 <_strtod_l+0xc2>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018cdc:	1c72      	adds	r2, r6, #1
 8018cde:	9217      	str	r2, [sp, #92]	; 0x5c
 8018ce0:	7872      	ldrb	r2, [r6, #1]
 8018ce2:	2a2b      	cmp	r2, #43	; 0x2b
 8018ce4:	f000 8082 	beq.w	8018dec <_strtod_l+0x29c>
 8018ce8:	2a2d      	cmp	r2, #45	; 0x2d
 8018cea:	d079      	beq.n	8018de0 <_strtod_l+0x290>
 8018cec:	f04f 0e00 	mov.w	lr, #0
 8018cf0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8018cf4:	f1bc 0f09 	cmp.w	ip, #9
 8018cf8:	f240 8086 	bls.w	8018e08 <_strtod_l+0x2b8>
 8018cfc:	9617      	str	r6, [sp, #92]	; 0x5c
 8018cfe:	f04f 0800 	mov.w	r8, #0
 8018d02:	e0a8      	b.n	8018e56 <_strtod_l+0x306>
 8018d04:	2300      	movs	r3, #0
 8018d06:	e7c2      	b.n	8018c8e <_strtod_l+0x13e>
 8018d08:	2d08      	cmp	r5, #8
 8018d0a:	bfd5      	itete	le
 8018d0c:	9908      	ldrle	r1, [sp, #32]
 8018d0e:	9906      	ldrgt	r1, [sp, #24]
 8018d10:	fb02 3301 	mlale	r3, r2, r1, r3
 8018d14:	fb02 3301 	mlagt	r3, r2, r1, r3
 8018d18:	f100 0001 	add.w	r0, r0, #1
 8018d1c:	bfd4      	ite	le
 8018d1e:	9308      	strle	r3, [sp, #32]
 8018d20:	9306      	strgt	r3, [sp, #24]
 8018d22:	3501      	adds	r5, #1
 8018d24:	9017      	str	r0, [sp, #92]	; 0x5c
 8018d26:	e7ba      	b.n	8018c9e <_strtod_l+0x14e>
 8018d28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018d2a:	19da      	adds	r2, r3, r7
 8018d2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8018d2e:	5dda      	ldrb	r2, [r3, r7]
 8018d30:	2d00      	cmp	r5, #0
 8018d32:	d038      	beq.n	8018da6 <_strtod_l+0x256>
 8018d34:	4601      	mov	r1, r0
 8018d36:	462b      	mov	r3, r5
 8018d38:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8018d3c:	2f09      	cmp	r7, #9
 8018d3e:	d913      	bls.n	8018d68 <_strtod_l+0x218>
 8018d40:	2701      	movs	r7, #1
 8018d42:	9704      	str	r7, [sp, #16]
 8018d44:	e7bf      	b.n	8018cc6 <_strtod_l+0x176>
 8018d46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018d48:	1c5a      	adds	r2, r3, #1
 8018d4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8018d4c:	785a      	ldrb	r2, [r3, #1]
 8018d4e:	3001      	adds	r0, #1
 8018d50:	2a30      	cmp	r2, #48	; 0x30
 8018d52:	d0f8      	beq.n	8018d46 <_strtod_l+0x1f6>
 8018d54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8018d58:	2b08      	cmp	r3, #8
 8018d5a:	f200 84a2 	bhi.w	80196a2 <_strtod_l+0xb52>
 8018d5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018d60:	930c      	str	r3, [sp, #48]	; 0x30
 8018d62:	4601      	mov	r1, r0
 8018d64:	2000      	movs	r0, #0
 8018d66:	4603      	mov	r3, r0
 8018d68:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8018d6c:	f100 0701 	add.w	r7, r0, #1
 8018d70:	d013      	beq.n	8018d9a <_strtod_l+0x24a>
 8018d72:	4439      	add	r1, r7
 8018d74:	eb00 0e03 	add.w	lr, r0, r3
 8018d78:	461f      	mov	r7, r3
 8018d7a:	f04f 0c0a 	mov.w	ip, #10
 8018d7e:	45be      	cmp	lr, r7
 8018d80:	d113      	bne.n	8018daa <_strtod_l+0x25a>
 8018d82:	181f      	adds	r7, r3, r0
 8018d84:	2f08      	cmp	r7, #8
 8018d86:	f103 0301 	add.w	r3, r3, #1
 8018d8a:	4403      	add	r3, r0
 8018d8c:	dc1d      	bgt.n	8018dca <_strtod_l+0x27a>
 8018d8e:	9a08      	ldr	r2, [sp, #32]
 8018d90:	200a      	movs	r0, #10
 8018d92:	fb00 8202 	mla	r2, r0, r2, r8
 8018d96:	9208      	str	r2, [sp, #32]
 8018d98:	2700      	movs	r7, #0
 8018d9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018d9c:	1c50      	adds	r0, r2, #1
 8018d9e:	9017      	str	r0, [sp, #92]	; 0x5c
 8018da0:	7852      	ldrb	r2, [r2, #1]
 8018da2:	4638      	mov	r0, r7
 8018da4:	e7c8      	b.n	8018d38 <_strtod_l+0x1e8>
 8018da6:	4628      	mov	r0, r5
 8018da8:	e7d2      	b.n	8018d50 <_strtod_l+0x200>
 8018daa:	2f08      	cmp	r7, #8
 8018dac:	f107 0701 	add.w	r7, r7, #1
 8018db0:	dc04      	bgt.n	8018dbc <_strtod_l+0x26c>
 8018db2:	9a08      	ldr	r2, [sp, #32]
 8018db4:	fb0c f202 	mul.w	r2, ip, r2
 8018db8:	9208      	str	r2, [sp, #32]
 8018dba:	e7e0      	b.n	8018d7e <_strtod_l+0x22e>
 8018dbc:	2f10      	cmp	r7, #16
 8018dbe:	bfde      	ittt	le
 8018dc0:	9a06      	ldrle	r2, [sp, #24]
 8018dc2:	fb0c f202 	mulle.w	r2, ip, r2
 8018dc6:	9206      	strle	r2, [sp, #24]
 8018dc8:	e7d9      	b.n	8018d7e <_strtod_l+0x22e>
 8018dca:	2b10      	cmp	r3, #16
 8018dcc:	bfdf      	itttt	le
 8018dce:	9a06      	ldrle	r2, [sp, #24]
 8018dd0:	200a      	movle	r0, #10
 8018dd2:	fb00 8202 	mlale	r2, r0, r2, r8
 8018dd6:	9206      	strle	r2, [sp, #24]
 8018dd8:	e7de      	b.n	8018d98 <_strtod_l+0x248>
 8018dda:	2301      	movs	r3, #1
 8018ddc:	9304      	str	r3, [sp, #16]
 8018dde:	e777      	b.n	8018cd0 <_strtod_l+0x180>
 8018de0:	f04f 0e01 	mov.w	lr, #1
 8018de4:	1cb2      	adds	r2, r6, #2
 8018de6:	9217      	str	r2, [sp, #92]	; 0x5c
 8018de8:	78b2      	ldrb	r2, [r6, #2]
 8018dea:	e781      	b.n	8018cf0 <_strtod_l+0x1a0>
 8018dec:	f04f 0e00 	mov.w	lr, #0
 8018df0:	e7f8      	b.n	8018de4 <_strtod_l+0x294>
 8018df2:	bf00      	nop
 8018df4:	0801f8d8 	.word	0x0801f8d8
 8018df8:	7ff00000 	.word	0x7ff00000
 8018dfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018dfe:	f102 0c01 	add.w	ip, r2, #1
 8018e02:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8018e06:	7852      	ldrb	r2, [r2, #1]
 8018e08:	2a30      	cmp	r2, #48	; 0x30
 8018e0a:	d0f7      	beq.n	8018dfc <_strtod_l+0x2ac>
 8018e0c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8018e10:	f1bc 0f08 	cmp.w	ip, #8
 8018e14:	f63f af73 	bhi.w	8018cfe <_strtod_l+0x1ae>
 8018e18:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8018e1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018e1e:	920e      	str	r2, [sp, #56]	; 0x38
 8018e20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018e22:	f102 0c01 	add.w	ip, r2, #1
 8018e26:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8018e2a:	7852      	ldrb	r2, [r2, #1]
 8018e2c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8018e30:	f1b9 0f09 	cmp.w	r9, #9
 8018e34:	d939      	bls.n	8018eaa <_strtod_l+0x35a>
 8018e36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8018e38:	ebac 0c07 	sub.w	ip, ip, r7
 8018e3c:	f1bc 0f08 	cmp.w	ip, #8
 8018e40:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8018e44:	dc37      	bgt.n	8018eb6 <_strtod_l+0x366>
 8018e46:	45e0      	cmp	r8, ip
 8018e48:	bfa8      	it	ge
 8018e4a:	46e0      	movge	r8, ip
 8018e4c:	f1be 0f00 	cmp.w	lr, #0
 8018e50:	d001      	beq.n	8018e56 <_strtod_l+0x306>
 8018e52:	f1c8 0800 	rsb	r8, r8, #0
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d151      	bne.n	8018efe <_strtod_l+0x3ae>
 8018e5a:	2800      	cmp	r0, #0
 8018e5c:	f47f aeba 	bne.w	8018bd4 <_strtod_l+0x84>
 8018e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	f47f aeb6 	bne.w	8018bd4 <_strtod_l+0x84>
 8018e68:	9b04      	ldr	r3, [sp, #16]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	f47f aed1 	bne.w	8018c12 <_strtod_l+0xc2>
 8018e70:	2a4e      	cmp	r2, #78	; 0x4e
 8018e72:	d027      	beq.n	8018ec4 <_strtod_l+0x374>
 8018e74:	dc21      	bgt.n	8018eba <_strtod_l+0x36a>
 8018e76:	2a49      	cmp	r2, #73	; 0x49
 8018e78:	f47f aecb 	bne.w	8018c12 <_strtod_l+0xc2>
 8018e7c:	499a      	ldr	r1, [pc, #616]	; (80190e8 <_strtod_l+0x598>)
 8018e7e:	a817      	add	r0, sp, #92	; 0x5c
 8018e80:	f001 fdfe 	bl	801aa80 <__match>
 8018e84:	2800      	cmp	r0, #0
 8018e86:	f43f aec4 	beq.w	8018c12 <_strtod_l+0xc2>
 8018e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e8c:	4997      	ldr	r1, [pc, #604]	; (80190ec <_strtod_l+0x59c>)
 8018e8e:	3b01      	subs	r3, #1
 8018e90:	a817      	add	r0, sp, #92	; 0x5c
 8018e92:	9317      	str	r3, [sp, #92]	; 0x5c
 8018e94:	f001 fdf4 	bl	801aa80 <__match>
 8018e98:	b910      	cbnz	r0, 8018ea0 <_strtod_l+0x350>
 8018e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018e9c:	3301      	adds	r3, #1
 8018e9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018ea0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8019104 <_strtod_l+0x5b4>
 8018ea4:	f04f 0a00 	mov.w	sl, #0
 8018ea8:	e694      	b.n	8018bd4 <_strtod_l+0x84>
 8018eaa:	270a      	movs	r7, #10
 8018eac:	fb07 2808 	mla	r8, r7, r8, r2
 8018eb0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8018eb4:	e7b4      	b.n	8018e20 <_strtod_l+0x2d0>
 8018eb6:	46e0      	mov	r8, ip
 8018eb8:	e7c8      	b.n	8018e4c <_strtod_l+0x2fc>
 8018eba:	2a69      	cmp	r2, #105	; 0x69
 8018ebc:	d0de      	beq.n	8018e7c <_strtod_l+0x32c>
 8018ebe:	2a6e      	cmp	r2, #110	; 0x6e
 8018ec0:	f47f aea7 	bne.w	8018c12 <_strtod_l+0xc2>
 8018ec4:	498a      	ldr	r1, [pc, #552]	; (80190f0 <_strtod_l+0x5a0>)
 8018ec6:	a817      	add	r0, sp, #92	; 0x5c
 8018ec8:	f001 fdda 	bl	801aa80 <__match>
 8018ecc:	2800      	cmp	r0, #0
 8018ece:	f43f aea0 	beq.w	8018c12 <_strtod_l+0xc2>
 8018ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018ed4:	781b      	ldrb	r3, [r3, #0]
 8018ed6:	2b28      	cmp	r3, #40	; 0x28
 8018ed8:	d10e      	bne.n	8018ef8 <_strtod_l+0x3a8>
 8018eda:	aa1a      	add	r2, sp, #104	; 0x68
 8018edc:	4985      	ldr	r1, [pc, #532]	; (80190f4 <_strtod_l+0x5a4>)
 8018ede:	a817      	add	r0, sp, #92	; 0x5c
 8018ee0:	f001 fde2 	bl	801aaa8 <__hexnan>
 8018ee4:	2805      	cmp	r0, #5
 8018ee6:	d107      	bne.n	8018ef8 <_strtod_l+0x3a8>
 8018ee8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018eea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8018eee:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018ef2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018ef6:	e66d      	b.n	8018bd4 <_strtod_l+0x84>
 8018ef8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8019108 <_strtod_l+0x5b8>
 8018efc:	e7d2      	b.n	8018ea4 <_strtod_l+0x354>
 8018efe:	eddd 7a08 	vldr	s15, [sp, #32]
 8018f02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018f06:	eba8 0201 	sub.w	r2, r8, r1
 8018f0a:	2d00      	cmp	r5, #0
 8018f0c:	bf08      	it	eq
 8018f0e:	461d      	moveq	r5, r3
 8018f10:	2b10      	cmp	r3, #16
 8018f12:	9204      	str	r2, [sp, #16]
 8018f14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018f18:	461a      	mov	r2, r3
 8018f1a:	bfa8      	it	ge
 8018f1c:	2210      	movge	r2, #16
 8018f1e:	2b09      	cmp	r3, #9
 8018f20:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8018f24:	dc14      	bgt.n	8018f50 <_strtod_l+0x400>
 8018f26:	9904      	ldr	r1, [sp, #16]
 8018f28:	2900      	cmp	r1, #0
 8018f2a:	f43f ae53 	beq.w	8018bd4 <_strtod_l+0x84>
 8018f2e:	9904      	ldr	r1, [sp, #16]
 8018f30:	dd72      	ble.n	8019018 <_strtod_l+0x4c8>
 8018f32:	2916      	cmp	r1, #22
 8018f34:	dc5a      	bgt.n	8018fec <_strtod_l+0x49c>
 8018f36:	4970      	ldr	r1, [pc, #448]	; (80190f8 <_strtod_l+0x5a8>)
 8018f38:	9b04      	ldr	r3, [sp, #16]
 8018f3a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018f3e:	ed91 7b00 	vldr	d7, [r1]
 8018f42:	ec4b ab16 	vmov	d6, sl, fp
 8018f46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018f4a:	ec5b ab17 	vmov	sl, fp, d7
 8018f4e:	e641      	b.n	8018bd4 <_strtod_l+0x84>
 8018f50:	4969      	ldr	r1, [pc, #420]	; (80190f8 <_strtod_l+0x5a8>)
 8018f52:	eddd 7a06 	vldr	s15, [sp, #24]
 8018f56:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018f5a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8018f5e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8018f62:	2b0f      	cmp	r3, #15
 8018f64:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018f68:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018f6c:	ec5b ab17 	vmov	sl, fp, d7
 8018f70:	ddd9      	ble.n	8018f26 <_strtod_l+0x3d6>
 8018f72:	9904      	ldr	r1, [sp, #16]
 8018f74:	1a9a      	subs	r2, r3, r2
 8018f76:	440a      	add	r2, r1
 8018f78:	2a00      	cmp	r2, #0
 8018f7a:	f340 8096 	ble.w	80190aa <_strtod_l+0x55a>
 8018f7e:	f012 000f 	ands.w	r0, r2, #15
 8018f82:	d00a      	beq.n	8018f9a <_strtod_l+0x44a>
 8018f84:	495c      	ldr	r1, [pc, #368]	; (80190f8 <_strtod_l+0x5a8>)
 8018f86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018f8a:	ed91 7b00 	vldr	d7, [r1]
 8018f8e:	ec4b ab16 	vmov	d6, sl, fp
 8018f92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018f96:	ec5b ab17 	vmov	sl, fp, d7
 8018f9a:	f032 020f 	bics.w	r2, r2, #15
 8018f9e:	d072      	beq.n	8019086 <_strtod_l+0x536>
 8018fa0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8018fa4:	dd45      	ble.n	8019032 <_strtod_l+0x4e2>
 8018fa6:	2500      	movs	r5, #0
 8018fa8:	46a8      	mov	r8, r5
 8018faa:	9506      	str	r5, [sp, #24]
 8018fac:	46a9      	mov	r9, r5
 8018fae:	2322      	movs	r3, #34	; 0x22
 8018fb0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8019104 <_strtod_l+0x5b4>
 8018fb4:	6023      	str	r3, [r4, #0]
 8018fb6:	f04f 0a00 	mov.w	sl, #0
 8018fba:	9b06      	ldr	r3, [sp, #24]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	f43f ae09 	beq.w	8018bd4 <_strtod_l+0x84>
 8018fc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	f001 fe4b 	bl	801ac60 <_Bfree>
 8018fca:	4649      	mov	r1, r9
 8018fcc:	4620      	mov	r0, r4
 8018fce:	f001 fe47 	bl	801ac60 <_Bfree>
 8018fd2:	4641      	mov	r1, r8
 8018fd4:	4620      	mov	r0, r4
 8018fd6:	f001 fe43 	bl	801ac60 <_Bfree>
 8018fda:	9906      	ldr	r1, [sp, #24]
 8018fdc:	4620      	mov	r0, r4
 8018fde:	f001 fe3f 	bl	801ac60 <_Bfree>
 8018fe2:	4629      	mov	r1, r5
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	f001 fe3b 	bl	801ac60 <_Bfree>
 8018fea:	e5f3      	b.n	8018bd4 <_strtod_l+0x84>
 8018fec:	9804      	ldr	r0, [sp, #16]
 8018fee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8018ff2:	4281      	cmp	r1, r0
 8018ff4:	dbbd      	blt.n	8018f72 <_strtod_l+0x422>
 8018ff6:	4a40      	ldr	r2, [pc, #256]	; (80190f8 <_strtod_l+0x5a8>)
 8018ff8:	f1c3 030f 	rsb	r3, r3, #15
 8018ffc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8019000:	ed91 7b00 	vldr	d7, [r1]
 8019004:	ec4b ab16 	vmov	d6, sl, fp
 8019008:	1ac3      	subs	r3, r0, r3
 801900a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801900e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019012:	ed92 6b00 	vldr	d6, [r2]
 8019016:	e796      	b.n	8018f46 <_strtod_l+0x3f6>
 8019018:	3116      	adds	r1, #22
 801901a:	dbaa      	blt.n	8018f72 <_strtod_l+0x422>
 801901c:	4936      	ldr	r1, [pc, #216]	; (80190f8 <_strtod_l+0x5a8>)
 801901e:	9b04      	ldr	r3, [sp, #16]
 8019020:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8019024:	ed91 7b00 	vldr	d7, [r1]
 8019028:	ec4b ab16 	vmov	d6, sl, fp
 801902c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019030:	e78b      	b.n	8018f4a <_strtod_l+0x3fa>
 8019032:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8019036:	2000      	movs	r0, #0
 8019038:	4e30      	ldr	r6, [pc, #192]	; (80190fc <_strtod_l+0x5ac>)
 801903a:	1112      	asrs	r2, r2, #4
 801903c:	4601      	mov	r1, r0
 801903e:	2a01      	cmp	r2, #1
 8019040:	dc23      	bgt.n	801908a <_strtod_l+0x53a>
 8019042:	b108      	cbz	r0, 8019048 <_strtod_l+0x4f8>
 8019044:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8019048:	4a2c      	ldr	r2, [pc, #176]	; (80190fc <_strtod_l+0x5ac>)
 801904a:	482d      	ldr	r0, [pc, #180]	; (8019100 <_strtod_l+0x5b0>)
 801904c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8019050:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8019054:	ed91 7b00 	vldr	d7, [r1]
 8019058:	ec4b ab16 	vmov	d6, sl, fp
 801905c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019060:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019064:	9907      	ldr	r1, [sp, #28]
 8019066:	4a27      	ldr	r2, [pc, #156]	; (8019104 <_strtod_l+0x5b4>)
 8019068:	400a      	ands	r2, r1
 801906a:	4282      	cmp	r2, r0
 801906c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8019070:	d899      	bhi.n	8018fa6 <_strtod_l+0x456>
 8019072:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8019076:	4282      	cmp	r2, r0
 8019078:	bf86      	itte	hi
 801907a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801910c <_strtod_l+0x5bc>
 801907e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8019082:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8019086:	2700      	movs	r7, #0
 8019088:	e070      	b.n	801916c <_strtod_l+0x61c>
 801908a:	07d7      	lsls	r7, r2, #31
 801908c:	d50a      	bpl.n	80190a4 <_strtod_l+0x554>
 801908e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8019092:	ed90 7b00 	vldr	d7, [r0]
 8019096:	ed9d 6b06 	vldr	d6, [sp, #24]
 801909a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801909e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80190a2:	2001      	movs	r0, #1
 80190a4:	3101      	adds	r1, #1
 80190a6:	1052      	asrs	r2, r2, #1
 80190a8:	e7c9      	b.n	801903e <_strtod_l+0x4ee>
 80190aa:	d0ec      	beq.n	8019086 <_strtod_l+0x536>
 80190ac:	4252      	negs	r2, r2
 80190ae:	f012 000f 	ands.w	r0, r2, #15
 80190b2:	d00a      	beq.n	80190ca <_strtod_l+0x57a>
 80190b4:	4910      	ldr	r1, [pc, #64]	; (80190f8 <_strtod_l+0x5a8>)
 80190b6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80190ba:	ed91 7b00 	vldr	d7, [r1]
 80190be:	ec4b ab16 	vmov	d6, sl, fp
 80190c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80190c6:	ec5b ab17 	vmov	sl, fp, d7
 80190ca:	1112      	asrs	r2, r2, #4
 80190cc:	d0db      	beq.n	8019086 <_strtod_l+0x536>
 80190ce:	2a1f      	cmp	r2, #31
 80190d0:	dd1e      	ble.n	8019110 <_strtod_l+0x5c0>
 80190d2:	2500      	movs	r5, #0
 80190d4:	46a8      	mov	r8, r5
 80190d6:	9506      	str	r5, [sp, #24]
 80190d8:	46a9      	mov	r9, r5
 80190da:	2322      	movs	r3, #34	; 0x22
 80190dc:	f04f 0a00 	mov.w	sl, #0
 80190e0:	f04f 0b00 	mov.w	fp, #0
 80190e4:	6023      	str	r3, [r4, #0]
 80190e6:	e768      	b.n	8018fba <_strtod_l+0x46a>
 80190e8:	0801f8a3 	.word	0x0801f8a3
 80190ec:	0801fa2c 	.word	0x0801fa2c
 80190f0:	0801f8ab 	.word	0x0801f8ab
 80190f4:	0801f8ec 	.word	0x0801f8ec
 80190f8:	0801fac0 	.word	0x0801fac0
 80190fc:	0801fa98 	.word	0x0801fa98
 8019100:	7ca00000 	.word	0x7ca00000
 8019104:	7ff00000 	.word	0x7ff00000
 8019108:	fff80000 	.word	0xfff80000
 801910c:	7fefffff 	.word	0x7fefffff
 8019110:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8019114:	f012 0710 	ands.w	r7, r2, #16
 8019118:	49ab      	ldr	r1, [pc, #684]	; (80193c8 <_strtod_l+0x878>)
 801911a:	bf18      	it	ne
 801911c:	276a      	movne	r7, #106	; 0x6a
 801911e:	2000      	movs	r0, #0
 8019120:	2a00      	cmp	r2, #0
 8019122:	f300 8113 	bgt.w	801934c <_strtod_l+0x7fc>
 8019126:	b108      	cbz	r0, 801912c <_strtod_l+0x5dc>
 8019128:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801912c:	b1bf      	cbz	r7, 801915e <_strtod_l+0x60e>
 801912e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019132:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8019136:	2a00      	cmp	r2, #0
 8019138:	4659      	mov	r1, fp
 801913a:	dd10      	ble.n	801915e <_strtod_l+0x60e>
 801913c:	2a1f      	cmp	r2, #31
 801913e:	f340 8113 	ble.w	8019368 <_strtod_l+0x818>
 8019142:	2a34      	cmp	r2, #52	; 0x34
 8019144:	bfde      	ittt	le
 8019146:	3a20      	suble	r2, #32
 8019148:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 801914c:	fa00 f202 	lslle.w	r2, r0, r2
 8019150:	f04f 0a00 	mov.w	sl, #0
 8019154:	bfcc      	ite	gt
 8019156:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801915a:	ea02 0b01 	andle.w	fp, r2, r1
 801915e:	ec4b ab17 	vmov	d7, sl, fp
 8019162:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801916a:	d0b2      	beq.n	80190d2 <_strtod_l+0x582>
 801916c:	9a08      	ldr	r2, [sp, #32]
 801916e:	9200      	str	r2, [sp, #0]
 8019170:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019172:	462a      	mov	r2, r5
 8019174:	4620      	mov	r0, r4
 8019176:	f001 fdc5 	bl	801ad04 <__s2b>
 801917a:	9006      	str	r0, [sp, #24]
 801917c:	2800      	cmp	r0, #0
 801917e:	f43f af12 	beq.w	8018fa6 <_strtod_l+0x456>
 8019182:	9a04      	ldr	r2, [sp, #16]
 8019184:	9b04      	ldr	r3, [sp, #16]
 8019186:	2a00      	cmp	r2, #0
 8019188:	f1c3 0300 	rsb	r3, r3, #0
 801918c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 80193b0 <_strtod_l+0x860>
 8019190:	bfa8      	it	ge
 8019192:	2300      	movge	r3, #0
 8019194:	ed9f ab88 	vldr	d10, [pc, #544]	; 80193b8 <_strtod_l+0x868>
 8019198:	ed9f bb89 	vldr	d11, [pc, #548]	; 80193c0 <_strtod_l+0x870>
 801919c:	930e      	str	r3, [sp, #56]	; 0x38
 801919e:	2500      	movs	r5, #0
 80191a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80191a4:	9310      	str	r3, [sp, #64]	; 0x40
 80191a6:	46a8      	mov	r8, r5
 80191a8:	9b06      	ldr	r3, [sp, #24]
 80191aa:	4620      	mov	r0, r4
 80191ac:	6859      	ldr	r1, [r3, #4]
 80191ae:	f001 fd23 	bl	801abf8 <_Balloc>
 80191b2:	4681      	mov	r9, r0
 80191b4:	2800      	cmp	r0, #0
 80191b6:	f43f aefa 	beq.w	8018fae <_strtod_l+0x45e>
 80191ba:	9b06      	ldr	r3, [sp, #24]
 80191bc:	691a      	ldr	r2, [r3, #16]
 80191be:	3202      	adds	r2, #2
 80191c0:	f103 010c 	add.w	r1, r3, #12
 80191c4:	0092      	lsls	r2, r2, #2
 80191c6:	300c      	adds	r0, #12
 80191c8:	f7fe fde2 	bl	8017d90 <memcpy>
 80191cc:	aa1a      	add	r2, sp, #104	; 0x68
 80191ce:	a919      	add	r1, sp, #100	; 0x64
 80191d0:	ec4b ab10 	vmov	d0, sl, fp
 80191d4:	4620      	mov	r0, r4
 80191d6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80191da:	f002 f84f 	bl	801b27c <__d2b>
 80191de:	9018      	str	r0, [sp, #96]	; 0x60
 80191e0:	2800      	cmp	r0, #0
 80191e2:	f43f aee4 	beq.w	8018fae <_strtod_l+0x45e>
 80191e6:	2101      	movs	r1, #1
 80191e8:	4620      	mov	r0, r4
 80191ea:	f001 fe17 	bl	801ae1c <__i2b>
 80191ee:	4680      	mov	r8, r0
 80191f0:	2800      	cmp	r0, #0
 80191f2:	f43f aedc 	beq.w	8018fae <_strtod_l+0x45e>
 80191f6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80191f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80191fa:	2e00      	cmp	r6, #0
 80191fc:	bfb1      	iteee	lt
 80191fe:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8019200:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8019202:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8019204:	18f3      	addge	r3, r6, r3
 8019206:	bfba      	itte	lt
 8019208:	1b98      	sublt	r0, r3, r6
 801920a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801920c:	9308      	strge	r3, [sp, #32]
 801920e:	eba6 0607 	sub.w	r6, r6, r7
 8019212:	bfb8      	it	lt
 8019214:	9308      	strlt	r3, [sp, #32]
 8019216:	4416      	add	r6, r2
 8019218:	4b6c      	ldr	r3, [pc, #432]	; (80193cc <_strtod_l+0x87c>)
 801921a:	3e01      	subs	r6, #1
 801921c:	429e      	cmp	r6, r3
 801921e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8019222:	f280 80b4 	bge.w	801938e <_strtod_l+0x83e>
 8019226:	1b9b      	subs	r3, r3, r6
 8019228:	2b1f      	cmp	r3, #31
 801922a:	eba2 0203 	sub.w	r2, r2, r3
 801922e:	f04f 0101 	mov.w	r1, #1
 8019232:	f300 80a0 	bgt.w	8019376 <_strtod_l+0x826>
 8019236:	fa01 f303 	lsl.w	r3, r1, r3
 801923a:	9311      	str	r3, [sp, #68]	; 0x44
 801923c:	2300      	movs	r3, #0
 801923e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019240:	9b08      	ldr	r3, [sp, #32]
 8019242:	4413      	add	r3, r2
 8019244:	4402      	add	r2, r0
 8019246:	18be      	adds	r6, r7, r2
 8019248:	9a08      	ldr	r2, [sp, #32]
 801924a:	429a      	cmp	r2, r3
 801924c:	bfa8      	it	ge
 801924e:	461a      	movge	r2, r3
 8019250:	42b2      	cmp	r2, r6
 8019252:	bfa8      	it	ge
 8019254:	4632      	movge	r2, r6
 8019256:	2a00      	cmp	r2, #0
 8019258:	dd04      	ble.n	8019264 <_strtod_l+0x714>
 801925a:	9908      	ldr	r1, [sp, #32]
 801925c:	1a9b      	subs	r3, r3, r2
 801925e:	1ab6      	subs	r6, r6, r2
 8019260:	1a8a      	subs	r2, r1, r2
 8019262:	9208      	str	r2, [sp, #32]
 8019264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019266:	b1c2      	cbz	r2, 801929a <_strtod_l+0x74a>
 8019268:	4641      	mov	r1, r8
 801926a:	4620      	mov	r0, r4
 801926c:	9315      	str	r3, [sp, #84]	; 0x54
 801926e:	f001 fe75 	bl	801af5c <__pow5mult>
 8019272:	4680      	mov	r8, r0
 8019274:	2800      	cmp	r0, #0
 8019276:	f43f ae9a 	beq.w	8018fae <_strtod_l+0x45e>
 801927a:	4601      	mov	r1, r0
 801927c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801927e:	4620      	mov	r0, r4
 8019280:	f001 fdd5 	bl	801ae2e <__multiply>
 8019284:	900c      	str	r0, [sp, #48]	; 0x30
 8019286:	2800      	cmp	r0, #0
 8019288:	f43f ae91 	beq.w	8018fae <_strtod_l+0x45e>
 801928c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801928e:	4620      	mov	r0, r4
 8019290:	f001 fce6 	bl	801ac60 <_Bfree>
 8019294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019298:	9218      	str	r2, [sp, #96]	; 0x60
 801929a:	2b00      	cmp	r3, #0
 801929c:	dc7c      	bgt.n	8019398 <_strtod_l+0x848>
 801929e:	9b04      	ldr	r3, [sp, #16]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	dd08      	ble.n	80192b6 <_strtod_l+0x766>
 80192a4:	4649      	mov	r1, r9
 80192a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192a8:	4620      	mov	r0, r4
 80192aa:	f001 fe57 	bl	801af5c <__pow5mult>
 80192ae:	4681      	mov	r9, r0
 80192b0:	2800      	cmp	r0, #0
 80192b2:	f43f ae7c 	beq.w	8018fae <_strtod_l+0x45e>
 80192b6:	2e00      	cmp	r6, #0
 80192b8:	dd08      	ble.n	80192cc <_strtod_l+0x77c>
 80192ba:	4649      	mov	r1, r9
 80192bc:	4632      	mov	r2, r6
 80192be:	4620      	mov	r0, r4
 80192c0:	f001 fe9a 	bl	801aff8 <__lshift>
 80192c4:	4681      	mov	r9, r0
 80192c6:	2800      	cmp	r0, #0
 80192c8:	f43f ae71 	beq.w	8018fae <_strtod_l+0x45e>
 80192cc:	9b08      	ldr	r3, [sp, #32]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	dd08      	ble.n	80192e4 <_strtod_l+0x794>
 80192d2:	4641      	mov	r1, r8
 80192d4:	461a      	mov	r2, r3
 80192d6:	4620      	mov	r0, r4
 80192d8:	f001 fe8e 	bl	801aff8 <__lshift>
 80192dc:	4680      	mov	r8, r0
 80192de:	2800      	cmp	r0, #0
 80192e0:	f43f ae65 	beq.w	8018fae <_strtod_l+0x45e>
 80192e4:	464a      	mov	r2, r9
 80192e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80192e8:	4620      	mov	r0, r4
 80192ea:	f001 fef3 	bl	801b0d4 <__mdiff>
 80192ee:	4605      	mov	r5, r0
 80192f0:	2800      	cmp	r0, #0
 80192f2:	f43f ae5c 	beq.w	8018fae <_strtod_l+0x45e>
 80192f6:	68c3      	ldr	r3, [r0, #12]
 80192f8:	930c      	str	r3, [sp, #48]	; 0x30
 80192fa:	2300      	movs	r3, #0
 80192fc:	60c3      	str	r3, [r0, #12]
 80192fe:	4641      	mov	r1, r8
 8019300:	f001 fece 	bl	801b0a0 <__mcmp>
 8019304:	2800      	cmp	r0, #0
 8019306:	da63      	bge.n	80193d0 <_strtod_l+0x880>
 8019308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801930a:	b9e3      	cbnz	r3, 8019346 <_strtod_l+0x7f6>
 801930c:	f1ba 0f00 	cmp.w	sl, #0
 8019310:	d119      	bne.n	8019346 <_strtod_l+0x7f6>
 8019312:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019316:	b9b3      	cbnz	r3, 8019346 <_strtod_l+0x7f6>
 8019318:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801931c:	0d1b      	lsrs	r3, r3, #20
 801931e:	051b      	lsls	r3, r3, #20
 8019320:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8019324:	d90f      	bls.n	8019346 <_strtod_l+0x7f6>
 8019326:	696b      	ldr	r3, [r5, #20]
 8019328:	b913      	cbnz	r3, 8019330 <_strtod_l+0x7e0>
 801932a:	692b      	ldr	r3, [r5, #16]
 801932c:	2b01      	cmp	r3, #1
 801932e:	dd0a      	ble.n	8019346 <_strtod_l+0x7f6>
 8019330:	4629      	mov	r1, r5
 8019332:	2201      	movs	r2, #1
 8019334:	4620      	mov	r0, r4
 8019336:	f001 fe5f 	bl	801aff8 <__lshift>
 801933a:	4641      	mov	r1, r8
 801933c:	4605      	mov	r5, r0
 801933e:	f001 feaf 	bl	801b0a0 <__mcmp>
 8019342:	2800      	cmp	r0, #0
 8019344:	dc75      	bgt.n	8019432 <_strtod_l+0x8e2>
 8019346:	2f00      	cmp	r7, #0
 8019348:	d17f      	bne.n	801944a <_strtod_l+0x8fa>
 801934a:	e63a      	b.n	8018fc2 <_strtod_l+0x472>
 801934c:	07d6      	lsls	r6, r2, #31
 801934e:	d508      	bpl.n	8019362 <_strtod_l+0x812>
 8019350:	ed9d 6b06 	vldr	d6, [sp, #24]
 8019354:	ed91 7b00 	vldr	d7, [r1]
 8019358:	ee26 7b07 	vmul.f64	d7, d6, d7
 801935c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019360:	2001      	movs	r0, #1
 8019362:	1052      	asrs	r2, r2, #1
 8019364:	3108      	adds	r1, #8
 8019366:	e6db      	b.n	8019120 <_strtod_l+0x5d0>
 8019368:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801936c:	fa01 f202 	lsl.w	r2, r1, r2
 8019370:	ea02 0a0a 	and.w	sl, r2, sl
 8019374:	e6f3      	b.n	801915e <_strtod_l+0x60e>
 8019376:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801937a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801937e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019382:	36e2      	adds	r6, #226	; 0xe2
 8019384:	fa01 f306 	lsl.w	r3, r1, r6
 8019388:	930f      	str	r3, [sp, #60]	; 0x3c
 801938a:	9111      	str	r1, [sp, #68]	; 0x44
 801938c:	e758      	b.n	8019240 <_strtod_l+0x6f0>
 801938e:	2300      	movs	r3, #0
 8019390:	930f      	str	r3, [sp, #60]	; 0x3c
 8019392:	2301      	movs	r3, #1
 8019394:	9311      	str	r3, [sp, #68]	; 0x44
 8019396:	e753      	b.n	8019240 <_strtod_l+0x6f0>
 8019398:	461a      	mov	r2, r3
 801939a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801939c:	4620      	mov	r0, r4
 801939e:	f001 fe2b 	bl	801aff8 <__lshift>
 80193a2:	9018      	str	r0, [sp, #96]	; 0x60
 80193a4:	2800      	cmp	r0, #0
 80193a6:	f47f af7a 	bne.w	801929e <_strtod_l+0x74e>
 80193aa:	e600      	b.n	8018fae <_strtod_l+0x45e>
 80193ac:	f3af 8000 	nop.w
 80193b0:	94a03595 	.word	0x94a03595
 80193b4:	3fdfffff 	.word	0x3fdfffff
 80193b8:	35afe535 	.word	0x35afe535
 80193bc:	3fe00000 	.word	0x3fe00000
 80193c0:	94a03595 	.word	0x94a03595
 80193c4:	3fcfffff 	.word	0x3fcfffff
 80193c8:	0801f900 	.word	0x0801f900
 80193cc:	fffffc02 	.word	0xfffffc02
 80193d0:	f8cd b020 	str.w	fp, [sp, #32]
 80193d4:	f040 8085 	bne.w	80194e2 <_strtod_l+0x992>
 80193d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80193de:	b322      	cbz	r2, 801942a <_strtod_l+0x8da>
 80193e0:	4ab7      	ldr	r2, [pc, #732]	; (80196c0 <_strtod_l+0xb70>)
 80193e2:	4293      	cmp	r3, r2
 80193e4:	d154      	bne.n	8019490 <_strtod_l+0x940>
 80193e6:	4651      	mov	r1, sl
 80193e8:	b1e7      	cbz	r7, 8019424 <_strtod_l+0x8d4>
 80193ea:	4bb6      	ldr	r3, [pc, #728]	; (80196c4 <_strtod_l+0xb74>)
 80193ec:	465a      	mov	r2, fp
 80193ee:	4013      	ands	r3, r2
 80193f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80193f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80193f8:	d803      	bhi.n	8019402 <_strtod_l+0x8b2>
 80193fa:	0d1b      	lsrs	r3, r3, #20
 80193fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019400:	409a      	lsls	r2, r3
 8019402:	4291      	cmp	r1, r2
 8019404:	d144      	bne.n	8019490 <_strtod_l+0x940>
 8019406:	4bb0      	ldr	r3, [pc, #704]	; (80196c8 <_strtod_l+0xb78>)
 8019408:	9a08      	ldr	r2, [sp, #32]
 801940a:	429a      	cmp	r2, r3
 801940c:	d102      	bne.n	8019414 <_strtod_l+0x8c4>
 801940e:	3101      	adds	r1, #1
 8019410:	f43f adcd 	beq.w	8018fae <_strtod_l+0x45e>
 8019414:	4bab      	ldr	r3, [pc, #684]	; (80196c4 <_strtod_l+0xb74>)
 8019416:	9a08      	ldr	r2, [sp, #32]
 8019418:	401a      	ands	r2, r3
 801941a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801941e:	f04f 0a00 	mov.w	sl, #0
 8019422:	e790      	b.n	8019346 <_strtod_l+0x7f6>
 8019424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019428:	e7eb      	b.n	8019402 <_strtod_l+0x8b2>
 801942a:	bb8b      	cbnz	r3, 8019490 <_strtod_l+0x940>
 801942c:	f1ba 0f00 	cmp.w	sl, #0
 8019430:	d12e      	bne.n	8019490 <_strtod_l+0x940>
 8019432:	465b      	mov	r3, fp
 8019434:	4aa3      	ldr	r2, [pc, #652]	; (80196c4 <_strtod_l+0xb74>)
 8019436:	b30f      	cbz	r7, 801947c <_strtod_l+0x92c>
 8019438:	ea02 010b 	and.w	r1, r2, fp
 801943c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019440:	dc1c      	bgt.n	801947c <_strtod_l+0x92c>
 8019442:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019446:	f77f ae48 	ble.w	80190da <_strtod_l+0x58a>
 801944a:	4aa0      	ldr	r2, [pc, #640]	; (80196cc <_strtod_l+0xb7c>)
 801944c:	2300      	movs	r3, #0
 801944e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8019452:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8019456:	ec4b ab17 	vmov	d7, sl, fp
 801945a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801945e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019462:	9b05      	ldr	r3, [sp, #20]
 8019464:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8019468:	2b00      	cmp	r3, #0
 801946a:	f47f adaa 	bne.w	8018fc2 <_strtod_l+0x472>
 801946e:	9b04      	ldr	r3, [sp, #16]
 8019470:	2b00      	cmp	r3, #0
 8019472:	f47f ada6 	bne.w	8018fc2 <_strtod_l+0x472>
 8019476:	2322      	movs	r3, #34	; 0x22
 8019478:	6023      	str	r3, [r4, #0]
 801947a:	e5a2      	b.n	8018fc2 <_strtod_l+0x472>
 801947c:	4013      	ands	r3, r2
 801947e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019482:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8019486:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801948a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801948e:	e75a      	b.n	8019346 <_strtod_l+0x7f6>
 8019490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019492:	b18b      	cbz	r3, 80194b8 <_strtod_l+0x968>
 8019494:	9a08      	ldr	r2, [sp, #32]
 8019496:	4213      	tst	r3, r2
 8019498:	f43f af55 	beq.w	8019346 <_strtod_l+0x7f6>
 801949c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801949e:	463a      	mov	r2, r7
 80194a0:	4650      	mov	r0, sl
 80194a2:	4659      	mov	r1, fp
 80194a4:	b163      	cbz	r3, 80194c0 <_strtod_l+0x970>
 80194a6:	f7ff fb37 	bl	8018b18 <sulp>
 80194aa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80194ae:	ee37 7b00 	vadd.f64	d7, d7, d0
 80194b2:	ec5b ab17 	vmov	sl, fp, d7
 80194b6:	e746      	b.n	8019346 <_strtod_l+0x7f6>
 80194b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80194ba:	ea13 0f0a 	tst.w	r3, sl
 80194be:	e7eb      	b.n	8019498 <_strtod_l+0x948>
 80194c0:	f7ff fb2a 	bl	8018b18 <sulp>
 80194c4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80194c8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80194cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80194d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80194d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194d8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80194dc:	f43f adfd 	beq.w	80190da <_strtod_l+0x58a>
 80194e0:	e731      	b.n	8019346 <_strtod_l+0x7f6>
 80194e2:	4641      	mov	r1, r8
 80194e4:	4628      	mov	r0, r5
 80194e6:	f001 ff18 	bl	801b31a <__ratio>
 80194ea:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80194ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80194f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f6:	d869      	bhi.n	80195cc <_strtod_l+0xa7c>
 80194f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d045      	beq.n	801958a <_strtod_l+0xa3a>
 80194fe:	4b74      	ldr	r3, [pc, #464]	; (80196d0 <_strtod_l+0xb80>)
 8019500:	2200      	movs	r2, #0
 8019502:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8019506:	9808      	ldr	r0, [sp, #32]
 8019508:	496e      	ldr	r1, [pc, #440]	; (80196c4 <_strtod_l+0xb74>)
 801950a:	ea00 0601 	and.w	r6, r0, r1
 801950e:	4871      	ldr	r0, [pc, #452]	; (80196d4 <_strtod_l+0xb84>)
 8019510:	4286      	cmp	r6, r0
 8019512:	f040 8089 	bne.w	8019628 <_strtod_l+0xad8>
 8019516:	910f      	str	r1, [sp, #60]	; 0x3c
 8019518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801951c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8019520:	9908      	ldr	r1, [sp, #32]
 8019522:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8019526:	ec4b ab10 	vmov	d0, sl, fp
 801952a:	ec43 2b1c 	vmov	d12, r2, r3
 801952e:	f001 fe2f 	bl	801b190 <__ulp>
 8019532:	ec4b ab1d 	vmov	d13, sl, fp
 8019536:	eeac db00 	vfma.f64	d13, d12, d0
 801953a:	ed8d db08 	vstr	d13, [sp, #32]
 801953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019542:	4a65      	ldr	r2, [pc, #404]	; (80196d8 <_strtod_l+0xb88>)
 8019544:	4019      	ands	r1, r3
 8019546:	4291      	cmp	r1, r2
 8019548:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801954c:	d948      	bls.n	80195e0 <_strtod_l+0xa90>
 801954e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019550:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8019554:	4293      	cmp	r3, r2
 8019556:	d103      	bne.n	8019560 <_strtod_l+0xa10>
 8019558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801955a:	3301      	adds	r3, #1
 801955c:	f43f ad27 	beq.w	8018fae <_strtod_l+0x45e>
 8019560:	f8df b164 	ldr.w	fp, [pc, #356]	; 80196c8 <_strtod_l+0xb78>
 8019564:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8019568:	9918      	ldr	r1, [sp, #96]	; 0x60
 801956a:	4620      	mov	r0, r4
 801956c:	f001 fb78 	bl	801ac60 <_Bfree>
 8019570:	4649      	mov	r1, r9
 8019572:	4620      	mov	r0, r4
 8019574:	f001 fb74 	bl	801ac60 <_Bfree>
 8019578:	4641      	mov	r1, r8
 801957a:	4620      	mov	r0, r4
 801957c:	f001 fb70 	bl	801ac60 <_Bfree>
 8019580:	4629      	mov	r1, r5
 8019582:	4620      	mov	r0, r4
 8019584:	f001 fb6c 	bl	801ac60 <_Bfree>
 8019588:	e60e      	b.n	80191a8 <_strtod_l+0x658>
 801958a:	f1ba 0f00 	cmp.w	sl, #0
 801958e:	d113      	bne.n	80195b8 <_strtod_l+0xa68>
 8019590:	9b08      	ldr	r3, [sp, #32]
 8019592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019596:	b9b3      	cbnz	r3, 80195c6 <_strtod_l+0xa76>
 8019598:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801959c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80195a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195a4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80195a8:	d401      	bmi.n	80195ae <_strtod_l+0xa5e>
 80195aa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80195ae:	eeb1 7b48 	vneg.f64	d7, d8
 80195b2:	ec53 2b17 	vmov	r2, r3, d7
 80195b6:	e7a6      	b.n	8019506 <_strtod_l+0x9b6>
 80195b8:	f1ba 0f01 	cmp.w	sl, #1
 80195bc:	d103      	bne.n	80195c6 <_strtod_l+0xa76>
 80195be:	9b08      	ldr	r3, [sp, #32]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	f43f ad8a 	beq.w	80190da <_strtod_l+0x58a>
 80195c6:	2200      	movs	r2, #0
 80195c8:	4b44      	ldr	r3, [pc, #272]	; (80196dc <_strtod_l+0xb8c>)
 80195ca:	e79a      	b.n	8019502 <_strtod_l+0x9b2>
 80195cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80195d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d0e9      	beq.n	80195ae <_strtod_l+0xa5e>
 80195da:	ec53 2b18 	vmov	r2, r3, d8
 80195de:	e792      	b.n	8019506 <_strtod_l+0x9b6>
 80195e0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80195e4:	2f00      	cmp	r7, #0
 80195e6:	d1bf      	bne.n	8019568 <_strtod_l+0xa18>
 80195e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80195ec:	0d1b      	lsrs	r3, r3, #20
 80195ee:	051b      	lsls	r3, r3, #20
 80195f0:	429e      	cmp	r6, r3
 80195f2:	d1b9      	bne.n	8019568 <_strtod_l+0xa18>
 80195f4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80195f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80195fa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80195fe:	ee38 8b40 	vsub.f64	d8, d8, d0
 8019602:	b92b      	cbnz	r3, 8019610 <_strtod_l+0xac0>
 8019604:	f1ba 0f00 	cmp.w	sl, #0
 8019608:	d102      	bne.n	8019610 <_strtod_l+0xac0>
 801960a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801960e:	b3d2      	cbz	r2, 8019686 <_strtod_l+0xb36>
 8019610:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8019614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019618:	f53f acd3 	bmi.w	8018fc2 <_strtod_l+0x472>
 801961c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8019620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019624:	dda0      	ble.n	8019568 <_strtod_l+0xa18>
 8019626:	e4cc      	b.n	8018fc2 <_strtod_l+0x472>
 8019628:	b1ef      	cbz	r7, 8019666 <_strtod_l+0xb16>
 801962a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801962e:	d81a      	bhi.n	8019666 <_strtod_l+0xb16>
 8019630:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80196b8 <_strtod_l+0xb68>
 8019634:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801963c:	d810      	bhi.n	8019660 <_strtod_l+0xb10>
 801963e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8019642:	ee17 3a90 	vmov	r3, s15
 8019646:	2b00      	cmp	r3, #0
 8019648:	bf08      	it	eq
 801964a:	2301      	moveq	r3, #1
 801964c:	ee07 3a90 	vmov	s15, r3
 8019650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019652:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8019656:	b99b      	cbnz	r3, 8019680 <_strtod_l+0xb30>
 8019658:	eeb1 7b48 	vneg.f64	d7, d8
 801965c:	ec53 2b17 	vmov	r2, r3, d7
 8019660:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8019664:	1b8b      	subs	r3, r1, r6
 8019666:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801966a:	ec43 2b1c 	vmov	d12, r2, r3
 801966e:	f001 fd8f 	bl	801b190 <__ulp>
 8019672:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8019676:	eeac 7b00 	vfma.f64	d7, d12, d0
 801967a:	ec5b ab17 	vmov	sl, fp, d7
 801967e:	e7b1      	b.n	80195e4 <_strtod_l+0xa94>
 8019680:	ec53 2b18 	vmov	r2, r3, d8
 8019684:	e7ec      	b.n	8019660 <_strtod_l+0xb10>
 8019686:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801968e:	f57f af6b 	bpl.w	8019568 <_strtod_l+0xa18>
 8019692:	e496      	b.n	8018fc2 <_strtod_l+0x472>
 8019694:	2300      	movs	r3, #0
 8019696:	930d      	str	r3, [sp, #52]	; 0x34
 8019698:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801969a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801969c:	6013      	str	r3, [r2, #0]
 801969e:	f7ff ba9d 	b.w	8018bdc <_strtod_l+0x8c>
 80196a2:	2a65      	cmp	r2, #101	; 0x65
 80196a4:	f04f 0100 	mov.w	r1, #0
 80196a8:	f43f ab97 	beq.w	8018dda <_strtod_l+0x28a>
 80196ac:	2701      	movs	r7, #1
 80196ae:	460b      	mov	r3, r1
 80196b0:	9704      	str	r7, [sp, #16]
 80196b2:	f7ff bb0a 	b.w	8018cca <_strtod_l+0x17a>
 80196b6:	bf00      	nop
 80196b8:	ffc00000 	.word	0xffc00000
 80196bc:	41dfffff 	.word	0x41dfffff
 80196c0:	000fffff 	.word	0x000fffff
 80196c4:	7ff00000 	.word	0x7ff00000
 80196c8:	7fefffff 	.word	0x7fefffff
 80196cc:	39500000 	.word	0x39500000
 80196d0:	3ff00000 	.word	0x3ff00000
 80196d4:	7fe00000 	.word	0x7fe00000
 80196d8:	7c9fffff 	.word	0x7c9fffff
 80196dc:	bff00000 	.word	0xbff00000

080196e0 <_strtod_r>:
 80196e0:	4b05      	ldr	r3, [pc, #20]	; (80196f8 <_strtod_r+0x18>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	b410      	push	{r4}
 80196e6:	6a1b      	ldr	r3, [r3, #32]
 80196e8:	4c04      	ldr	r4, [pc, #16]	; (80196fc <_strtod_r+0x1c>)
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	bf08      	it	eq
 80196ee:	4623      	moveq	r3, r4
 80196f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196f4:	f7ff ba2c 	b.w	8018b50 <_strtod_l>
 80196f8:	20001518 	.word	0x20001518
 80196fc:	2000157c 	.word	0x2000157c

08019700 <_strtol_l.isra.0>:
 8019700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019704:	4680      	mov	r8, r0
 8019706:	4689      	mov	r9, r1
 8019708:	4692      	mov	sl, r2
 801970a:	461e      	mov	r6, r3
 801970c:	460f      	mov	r7, r1
 801970e:	463d      	mov	r5, r7
 8019710:	9808      	ldr	r0, [sp, #32]
 8019712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019716:	f7fe fb17 	bl	8017d48 <__locale_ctype_ptr_l>
 801971a:	4420      	add	r0, r4
 801971c:	7843      	ldrb	r3, [r0, #1]
 801971e:	f013 0308 	ands.w	r3, r3, #8
 8019722:	d132      	bne.n	801978a <_strtol_l.isra.0+0x8a>
 8019724:	2c2d      	cmp	r4, #45	; 0x2d
 8019726:	d132      	bne.n	801978e <_strtol_l.isra.0+0x8e>
 8019728:	787c      	ldrb	r4, [r7, #1]
 801972a:	1cbd      	adds	r5, r7, #2
 801972c:	2201      	movs	r2, #1
 801972e:	2e00      	cmp	r6, #0
 8019730:	d05d      	beq.n	80197ee <_strtol_l.isra.0+0xee>
 8019732:	2e10      	cmp	r6, #16
 8019734:	d109      	bne.n	801974a <_strtol_l.isra.0+0x4a>
 8019736:	2c30      	cmp	r4, #48	; 0x30
 8019738:	d107      	bne.n	801974a <_strtol_l.isra.0+0x4a>
 801973a:	782b      	ldrb	r3, [r5, #0]
 801973c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019740:	2b58      	cmp	r3, #88	; 0x58
 8019742:	d14f      	bne.n	80197e4 <_strtol_l.isra.0+0xe4>
 8019744:	786c      	ldrb	r4, [r5, #1]
 8019746:	2610      	movs	r6, #16
 8019748:	3502      	adds	r5, #2
 801974a:	2a00      	cmp	r2, #0
 801974c:	bf14      	ite	ne
 801974e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8019752:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8019756:	2700      	movs	r7, #0
 8019758:	fbb1 fcf6 	udiv	ip, r1, r6
 801975c:	4638      	mov	r0, r7
 801975e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8019762:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8019766:	2b09      	cmp	r3, #9
 8019768:	d817      	bhi.n	801979a <_strtol_l.isra.0+0x9a>
 801976a:	461c      	mov	r4, r3
 801976c:	42a6      	cmp	r6, r4
 801976e:	dd23      	ble.n	80197b8 <_strtol_l.isra.0+0xb8>
 8019770:	1c7b      	adds	r3, r7, #1
 8019772:	d007      	beq.n	8019784 <_strtol_l.isra.0+0x84>
 8019774:	4584      	cmp	ip, r0
 8019776:	d31c      	bcc.n	80197b2 <_strtol_l.isra.0+0xb2>
 8019778:	d101      	bne.n	801977e <_strtol_l.isra.0+0x7e>
 801977a:	45a6      	cmp	lr, r4
 801977c:	db19      	blt.n	80197b2 <_strtol_l.isra.0+0xb2>
 801977e:	fb00 4006 	mla	r0, r0, r6, r4
 8019782:	2701      	movs	r7, #1
 8019784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019788:	e7eb      	b.n	8019762 <_strtol_l.isra.0+0x62>
 801978a:	462f      	mov	r7, r5
 801978c:	e7bf      	b.n	801970e <_strtol_l.isra.0+0xe>
 801978e:	2c2b      	cmp	r4, #43	; 0x2b
 8019790:	bf04      	itt	eq
 8019792:	1cbd      	addeq	r5, r7, #2
 8019794:	787c      	ldrbeq	r4, [r7, #1]
 8019796:	461a      	mov	r2, r3
 8019798:	e7c9      	b.n	801972e <_strtol_l.isra.0+0x2e>
 801979a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801979e:	2b19      	cmp	r3, #25
 80197a0:	d801      	bhi.n	80197a6 <_strtol_l.isra.0+0xa6>
 80197a2:	3c37      	subs	r4, #55	; 0x37
 80197a4:	e7e2      	b.n	801976c <_strtol_l.isra.0+0x6c>
 80197a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80197aa:	2b19      	cmp	r3, #25
 80197ac:	d804      	bhi.n	80197b8 <_strtol_l.isra.0+0xb8>
 80197ae:	3c57      	subs	r4, #87	; 0x57
 80197b0:	e7dc      	b.n	801976c <_strtol_l.isra.0+0x6c>
 80197b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80197b6:	e7e5      	b.n	8019784 <_strtol_l.isra.0+0x84>
 80197b8:	1c7b      	adds	r3, r7, #1
 80197ba:	d108      	bne.n	80197ce <_strtol_l.isra.0+0xce>
 80197bc:	2322      	movs	r3, #34	; 0x22
 80197be:	f8c8 3000 	str.w	r3, [r8]
 80197c2:	4608      	mov	r0, r1
 80197c4:	f1ba 0f00 	cmp.w	sl, #0
 80197c8:	d107      	bne.n	80197da <_strtol_l.isra.0+0xda>
 80197ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197ce:	b102      	cbz	r2, 80197d2 <_strtol_l.isra.0+0xd2>
 80197d0:	4240      	negs	r0, r0
 80197d2:	f1ba 0f00 	cmp.w	sl, #0
 80197d6:	d0f8      	beq.n	80197ca <_strtol_l.isra.0+0xca>
 80197d8:	b10f      	cbz	r7, 80197de <_strtol_l.isra.0+0xde>
 80197da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80197de:	f8ca 9000 	str.w	r9, [sl]
 80197e2:	e7f2      	b.n	80197ca <_strtol_l.isra.0+0xca>
 80197e4:	2430      	movs	r4, #48	; 0x30
 80197e6:	2e00      	cmp	r6, #0
 80197e8:	d1af      	bne.n	801974a <_strtol_l.isra.0+0x4a>
 80197ea:	2608      	movs	r6, #8
 80197ec:	e7ad      	b.n	801974a <_strtol_l.isra.0+0x4a>
 80197ee:	2c30      	cmp	r4, #48	; 0x30
 80197f0:	d0a3      	beq.n	801973a <_strtol_l.isra.0+0x3a>
 80197f2:	260a      	movs	r6, #10
 80197f4:	e7a9      	b.n	801974a <_strtol_l.isra.0+0x4a>
	...

080197f8 <_strtol_r>:
 80197f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197fa:	4c06      	ldr	r4, [pc, #24]	; (8019814 <_strtol_r+0x1c>)
 80197fc:	4d06      	ldr	r5, [pc, #24]	; (8019818 <_strtol_r+0x20>)
 80197fe:	6824      	ldr	r4, [r4, #0]
 8019800:	6a24      	ldr	r4, [r4, #32]
 8019802:	2c00      	cmp	r4, #0
 8019804:	bf08      	it	eq
 8019806:	462c      	moveq	r4, r5
 8019808:	9400      	str	r4, [sp, #0]
 801980a:	f7ff ff79 	bl	8019700 <_strtol_l.isra.0>
 801980e:	b003      	add	sp, #12
 8019810:	bd30      	pop	{r4, r5, pc}
 8019812:	bf00      	nop
 8019814:	20001518 	.word	0x20001518
 8019818:	2000157c 	.word	0x2000157c

0801981c <__ascii_wctomb>:
 801981c:	b149      	cbz	r1, 8019832 <__ascii_wctomb+0x16>
 801981e:	2aff      	cmp	r2, #255	; 0xff
 8019820:	bf85      	ittet	hi
 8019822:	238a      	movhi	r3, #138	; 0x8a
 8019824:	6003      	strhi	r3, [r0, #0]
 8019826:	700a      	strbls	r2, [r1, #0]
 8019828:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801982c:	bf98      	it	ls
 801982e:	2001      	movls	r0, #1
 8019830:	4770      	bx	lr
 8019832:	4608      	mov	r0, r1
 8019834:	4770      	bx	lr

08019836 <quorem>:
 8019836:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801983a:	6903      	ldr	r3, [r0, #16]
 801983c:	690c      	ldr	r4, [r1, #16]
 801983e:	42a3      	cmp	r3, r4
 8019840:	4680      	mov	r8, r0
 8019842:	f2c0 8082 	blt.w	801994a <quorem+0x114>
 8019846:	3c01      	subs	r4, #1
 8019848:	f101 0714 	add.w	r7, r1, #20
 801984c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8019850:	f100 0614 	add.w	r6, r0, #20
 8019854:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8019858:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801985c:	eb06 030c 	add.w	r3, r6, ip
 8019860:	3501      	adds	r5, #1
 8019862:	eb07 090c 	add.w	r9, r7, ip
 8019866:	9301      	str	r3, [sp, #4]
 8019868:	fbb0 f5f5 	udiv	r5, r0, r5
 801986c:	b395      	cbz	r5, 80198d4 <quorem+0x9e>
 801986e:	f04f 0a00 	mov.w	sl, #0
 8019872:	4638      	mov	r0, r7
 8019874:	46b6      	mov	lr, r6
 8019876:	46d3      	mov	fp, sl
 8019878:	f850 2b04 	ldr.w	r2, [r0], #4
 801987c:	b293      	uxth	r3, r2
 801987e:	fb05 a303 	mla	r3, r5, r3, sl
 8019882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019886:	b29b      	uxth	r3, r3
 8019888:	ebab 0303 	sub.w	r3, fp, r3
 801988c:	0c12      	lsrs	r2, r2, #16
 801988e:	f8de b000 	ldr.w	fp, [lr]
 8019892:	fb05 a202 	mla	r2, r5, r2, sl
 8019896:	fa13 f38b 	uxtah	r3, r3, fp
 801989a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801989e:	fa1f fb82 	uxth.w	fp, r2
 80198a2:	f8de 2000 	ldr.w	r2, [lr]
 80198a6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80198aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80198b4:	4581      	cmp	r9, r0
 80198b6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80198ba:	f84e 3b04 	str.w	r3, [lr], #4
 80198be:	d2db      	bcs.n	8019878 <quorem+0x42>
 80198c0:	f856 300c 	ldr.w	r3, [r6, ip]
 80198c4:	b933      	cbnz	r3, 80198d4 <quorem+0x9e>
 80198c6:	9b01      	ldr	r3, [sp, #4]
 80198c8:	3b04      	subs	r3, #4
 80198ca:	429e      	cmp	r6, r3
 80198cc:	461a      	mov	r2, r3
 80198ce:	d330      	bcc.n	8019932 <quorem+0xfc>
 80198d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80198d4:	4640      	mov	r0, r8
 80198d6:	f001 fbe3 	bl	801b0a0 <__mcmp>
 80198da:	2800      	cmp	r0, #0
 80198dc:	db25      	blt.n	801992a <quorem+0xf4>
 80198de:	3501      	adds	r5, #1
 80198e0:	4630      	mov	r0, r6
 80198e2:	f04f 0c00 	mov.w	ip, #0
 80198e6:	f857 2b04 	ldr.w	r2, [r7], #4
 80198ea:	f8d0 e000 	ldr.w	lr, [r0]
 80198ee:	b293      	uxth	r3, r2
 80198f0:	ebac 0303 	sub.w	r3, ip, r3
 80198f4:	0c12      	lsrs	r2, r2, #16
 80198f6:	fa13 f38e 	uxtah	r3, r3, lr
 80198fa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80198fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019902:	b29b      	uxth	r3, r3
 8019904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019908:	45b9      	cmp	r9, r7
 801990a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801990e:	f840 3b04 	str.w	r3, [r0], #4
 8019912:	d2e8      	bcs.n	80198e6 <quorem+0xb0>
 8019914:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8019918:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801991c:	b92a      	cbnz	r2, 801992a <quorem+0xf4>
 801991e:	3b04      	subs	r3, #4
 8019920:	429e      	cmp	r6, r3
 8019922:	461a      	mov	r2, r3
 8019924:	d30b      	bcc.n	801993e <quorem+0x108>
 8019926:	f8c8 4010 	str.w	r4, [r8, #16]
 801992a:	4628      	mov	r0, r5
 801992c:	b003      	add	sp, #12
 801992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019932:	6812      	ldr	r2, [r2, #0]
 8019934:	3b04      	subs	r3, #4
 8019936:	2a00      	cmp	r2, #0
 8019938:	d1ca      	bne.n	80198d0 <quorem+0x9a>
 801993a:	3c01      	subs	r4, #1
 801993c:	e7c5      	b.n	80198ca <quorem+0x94>
 801993e:	6812      	ldr	r2, [r2, #0]
 8019940:	3b04      	subs	r3, #4
 8019942:	2a00      	cmp	r2, #0
 8019944:	d1ef      	bne.n	8019926 <quorem+0xf0>
 8019946:	3c01      	subs	r4, #1
 8019948:	e7ea      	b.n	8019920 <quorem+0xea>
 801994a:	2000      	movs	r0, #0
 801994c:	e7ee      	b.n	801992c <quorem+0xf6>
	...

08019950 <_dtoa_r>:
 8019950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019954:	ec57 6b10 	vmov	r6, r7, d0
 8019958:	b095      	sub	sp, #84	; 0x54
 801995a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801995c:	9108      	str	r1, [sp, #32]
 801995e:	4604      	mov	r4, r0
 8019960:	920a      	str	r2, [sp, #40]	; 0x28
 8019962:	9311      	str	r3, [sp, #68]	; 0x44
 8019964:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8019968:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801996c:	b93d      	cbnz	r5, 801997e <_dtoa_r+0x2e>
 801996e:	2010      	movs	r0, #16
 8019970:	f001 f93a 	bl	801abe8 <malloc>
 8019974:	6260      	str	r0, [r4, #36]	; 0x24
 8019976:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801997a:	6005      	str	r5, [r0, #0]
 801997c:	60c5      	str	r5, [r0, #12]
 801997e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019980:	6819      	ldr	r1, [r3, #0]
 8019982:	b151      	cbz	r1, 801999a <_dtoa_r+0x4a>
 8019984:	685a      	ldr	r2, [r3, #4]
 8019986:	604a      	str	r2, [r1, #4]
 8019988:	2301      	movs	r3, #1
 801998a:	4093      	lsls	r3, r2
 801998c:	608b      	str	r3, [r1, #8]
 801998e:	4620      	mov	r0, r4
 8019990:	f001 f966 	bl	801ac60 <_Bfree>
 8019994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019996:	2200      	movs	r2, #0
 8019998:	601a      	str	r2, [r3, #0]
 801999a:	1e3b      	subs	r3, r7, #0
 801999c:	bfb9      	ittee	lt
 801999e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80199a2:	9303      	strlt	r3, [sp, #12]
 80199a4:	2300      	movge	r3, #0
 80199a6:	f8c8 3000 	strge.w	r3, [r8]
 80199aa:	9d03      	ldr	r5, [sp, #12]
 80199ac:	4bac      	ldr	r3, [pc, #688]	; (8019c60 <_dtoa_r+0x310>)
 80199ae:	bfbc      	itt	lt
 80199b0:	2201      	movlt	r2, #1
 80199b2:	f8c8 2000 	strlt.w	r2, [r8]
 80199b6:	43ab      	bics	r3, r5
 80199b8:	d11b      	bne.n	80199f2 <_dtoa_r+0xa2>
 80199ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80199bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80199c0:	6013      	str	r3, [r2, #0]
 80199c2:	9b02      	ldr	r3, [sp, #8]
 80199c4:	b923      	cbnz	r3, 80199d0 <_dtoa_r+0x80>
 80199c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80199ca:	2d00      	cmp	r5, #0
 80199cc:	f000 84dd 	beq.w	801a38a <_dtoa_r+0xa3a>
 80199d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80199d2:	b953      	cbnz	r3, 80199ea <_dtoa_r+0x9a>
 80199d4:	4ba3      	ldr	r3, [pc, #652]	; (8019c64 <_dtoa_r+0x314>)
 80199d6:	e020      	b.n	8019a1a <_dtoa_r+0xca>
 80199d8:	4ba3      	ldr	r3, [pc, #652]	; (8019c68 <_dtoa_r+0x318>)
 80199da:	9304      	str	r3, [sp, #16]
 80199dc:	3308      	adds	r3, #8
 80199de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80199e0:	6013      	str	r3, [r2, #0]
 80199e2:	9804      	ldr	r0, [sp, #16]
 80199e4:	b015      	add	sp, #84	; 0x54
 80199e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ea:	4b9e      	ldr	r3, [pc, #632]	; (8019c64 <_dtoa_r+0x314>)
 80199ec:	9304      	str	r3, [sp, #16]
 80199ee:	3303      	adds	r3, #3
 80199f0:	e7f5      	b.n	80199de <_dtoa_r+0x8e>
 80199f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80199f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80199fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019a02:	d10c      	bne.n	8019a1e <_dtoa_r+0xce>
 8019a04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a06:	2301      	movs	r3, #1
 8019a08:	6013      	str	r3, [r2, #0]
 8019a0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	f000 84b9 	beq.w	801a384 <_dtoa_r+0xa34>
 8019a12:	4b96      	ldr	r3, [pc, #600]	; (8019c6c <_dtoa_r+0x31c>)
 8019a14:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8019a16:	6013      	str	r3, [r2, #0]
 8019a18:	3b01      	subs	r3, #1
 8019a1a:	9304      	str	r3, [sp, #16]
 8019a1c:	e7e1      	b.n	80199e2 <_dtoa_r+0x92>
 8019a1e:	a913      	add	r1, sp, #76	; 0x4c
 8019a20:	aa12      	add	r2, sp, #72	; 0x48
 8019a22:	ed9d 0b04 	vldr	d0, [sp, #16]
 8019a26:	4620      	mov	r0, r4
 8019a28:	f001 fc28 	bl	801b27c <__d2b>
 8019a2c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8019a30:	9001      	str	r0, [sp, #4]
 8019a32:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019a34:	2e00      	cmp	r6, #0
 8019a36:	d046      	beq.n	8019ac6 <_dtoa_r+0x176>
 8019a38:	9805      	ldr	r0, [sp, #20]
 8019a3a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8019a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019a42:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8019a46:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019a4a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8019a4e:	2700      	movs	r7, #0
 8019a50:	ee07 aa90 	vmov	s15, sl
 8019a54:	ec43 2b16 	vmov	d6, r2, r3
 8019a58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019a5c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8019c48 <_dtoa_r+0x2f8>
 8019a60:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8019a64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019a68:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8019c50 <_dtoa_r+0x300>
 8019a6c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8019a70:	eeb0 7b46 	vmov.f64	d7, d6
 8019a74:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8019c58 <_dtoa_r+0x308>
 8019a78:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019a7c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019a80:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8019a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a88:	ee16 ba90 	vmov	fp, s13
 8019a8c:	d508      	bpl.n	8019aa0 <_dtoa_r+0x150>
 8019a8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019a92:	eeb4 6b47 	vcmp.f64	d6, d7
 8019a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a9a:	bf18      	it	ne
 8019a9c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8019aa0:	f1bb 0f16 	cmp.w	fp, #22
 8019aa4:	d834      	bhi.n	8019b10 <_dtoa_r+0x1c0>
 8019aa6:	4b72      	ldr	r3, [pc, #456]	; (8019c70 <_dtoa_r+0x320>)
 8019aa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019aac:	ed93 7b00 	vldr	d7, [r3]
 8019ab0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019ab4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019abc:	dd01      	ble.n	8019ac2 <_dtoa_r+0x172>
 8019abe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	e025      	b.n	8019b12 <_dtoa_r+0x1c2>
 8019ac6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019ac8:	eb01 0a03 	add.w	sl, r1, r3
 8019acc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8019ad0:	2b20      	cmp	r3, #32
 8019ad2:	dd17      	ble.n	8019b04 <_dtoa_r+0x1b4>
 8019ad4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8019ad8:	9a02      	ldr	r2, [sp, #8]
 8019ada:	409d      	lsls	r5, r3
 8019adc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8019ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8019ae4:	432b      	orrs	r3, r5
 8019ae6:	ee07 3a90 	vmov	s15, r3
 8019aea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8019aee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019af2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8019af6:	9805      	ldr	r0, [sp, #20]
 8019af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019afc:	2701      	movs	r7, #1
 8019afe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8019b02:	e7a5      	b.n	8019a50 <_dtoa_r+0x100>
 8019b04:	9a02      	ldr	r2, [sp, #8]
 8019b06:	f1c3 0320 	rsb	r3, r3, #32
 8019b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8019b0e:	e7ea      	b.n	8019ae6 <_dtoa_r+0x196>
 8019b10:	2301      	movs	r3, #1
 8019b12:	eba1 0a0a 	sub.w	sl, r1, sl
 8019b16:	9310      	str	r3, [sp, #64]	; 0x40
 8019b18:	f1ba 0301 	subs.w	r3, sl, #1
 8019b1c:	9307      	str	r3, [sp, #28]
 8019b1e:	bf43      	ittte	mi
 8019b20:	2300      	movmi	r3, #0
 8019b22:	f1ca 0a01 	rsbmi	sl, sl, #1
 8019b26:	9307      	strmi	r3, [sp, #28]
 8019b28:	f04f 0a00 	movpl.w	sl, #0
 8019b2c:	f1bb 0f00 	cmp.w	fp, #0
 8019b30:	db19      	blt.n	8019b66 <_dtoa_r+0x216>
 8019b32:	9b07      	ldr	r3, [sp, #28]
 8019b34:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8019b38:	445b      	add	r3, fp
 8019b3a:	9307      	str	r3, [sp, #28]
 8019b3c:	f04f 0800 	mov.w	r8, #0
 8019b40:	9b08      	ldr	r3, [sp, #32]
 8019b42:	2b09      	cmp	r3, #9
 8019b44:	d866      	bhi.n	8019c14 <_dtoa_r+0x2c4>
 8019b46:	2b05      	cmp	r3, #5
 8019b48:	bfc4      	itt	gt
 8019b4a:	3b04      	subgt	r3, #4
 8019b4c:	9308      	strgt	r3, [sp, #32]
 8019b4e:	9b08      	ldr	r3, [sp, #32]
 8019b50:	f1a3 0302 	sub.w	r3, r3, #2
 8019b54:	bfcc      	ite	gt
 8019b56:	2500      	movgt	r5, #0
 8019b58:	2501      	movle	r5, #1
 8019b5a:	2b03      	cmp	r3, #3
 8019b5c:	d866      	bhi.n	8019c2c <_dtoa_r+0x2dc>
 8019b5e:	e8df f003 	tbb	[pc, r3]
 8019b62:	5755      	.short	0x5755
 8019b64:	4909      	.short	0x4909
 8019b66:	2300      	movs	r3, #0
 8019b68:	ebaa 0a0b 	sub.w	sl, sl, fp
 8019b6c:	f1cb 0800 	rsb	r8, fp, #0
 8019b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b72:	e7e5      	b.n	8019b40 <_dtoa_r+0x1f0>
 8019b74:	2301      	movs	r3, #1
 8019b76:	9309      	str	r3, [sp, #36]	; 0x24
 8019b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	dd59      	ble.n	8019c32 <_dtoa_r+0x2e2>
 8019b7e:	9306      	str	r3, [sp, #24]
 8019b80:	4699      	mov	r9, r3
 8019b82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019b84:	2200      	movs	r2, #0
 8019b86:	6072      	str	r2, [r6, #4]
 8019b88:	2204      	movs	r2, #4
 8019b8a:	f102 0014 	add.w	r0, r2, #20
 8019b8e:	4298      	cmp	r0, r3
 8019b90:	6871      	ldr	r1, [r6, #4]
 8019b92:	d953      	bls.n	8019c3c <_dtoa_r+0x2ec>
 8019b94:	4620      	mov	r0, r4
 8019b96:	f001 f82f 	bl	801abf8 <_Balloc>
 8019b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019b9c:	6030      	str	r0, [r6, #0]
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	9304      	str	r3, [sp, #16]
 8019ba2:	f1b9 0f0e 	cmp.w	r9, #14
 8019ba6:	f200 80c2 	bhi.w	8019d2e <_dtoa_r+0x3de>
 8019baa:	2d00      	cmp	r5, #0
 8019bac:	f000 80bf 	beq.w	8019d2e <_dtoa_r+0x3de>
 8019bb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019bb4:	f1bb 0f00 	cmp.w	fp, #0
 8019bb8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8019bbc:	f340 80e6 	ble.w	8019d8c <_dtoa_r+0x43c>
 8019bc0:	4a2b      	ldr	r2, [pc, #172]	; (8019c70 <_dtoa_r+0x320>)
 8019bc2:	f00b 030f 	and.w	r3, fp, #15
 8019bc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019bca:	ed93 7b00 	vldr	d7, [r3]
 8019bce:	ea4f 132b 	mov.w	r3, fp, asr #4
 8019bd2:	06da      	lsls	r2, r3, #27
 8019bd4:	f140 80d8 	bpl.w	8019d88 <_dtoa_r+0x438>
 8019bd8:	4a26      	ldr	r2, [pc, #152]	; (8019c74 <_dtoa_r+0x324>)
 8019bda:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8019bde:	ed92 6b08 	vldr	d6, [r2, #32]
 8019be2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8019be6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019bea:	f003 030f 	and.w	r3, r3, #15
 8019bee:	2203      	movs	r2, #3
 8019bf0:	4920      	ldr	r1, [pc, #128]	; (8019c74 <_dtoa_r+0x324>)
 8019bf2:	e04a      	b.n	8019c8a <_dtoa_r+0x33a>
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8019bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bfa:	445b      	add	r3, fp
 8019bfc:	f103 0901 	add.w	r9, r3, #1
 8019c00:	9306      	str	r3, [sp, #24]
 8019c02:	464b      	mov	r3, r9
 8019c04:	2b01      	cmp	r3, #1
 8019c06:	bfb8      	it	lt
 8019c08:	2301      	movlt	r3, #1
 8019c0a:	e7ba      	b.n	8019b82 <_dtoa_r+0x232>
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	e7b2      	b.n	8019b76 <_dtoa_r+0x226>
 8019c10:	2300      	movs	r3, #0
 8019c12:	e7f0      	b.n	8019bf6 <_dtoa_r+0x2a6>
 8019c14:	2501      	movs	r5, #1
 8019c16:	2300      	movs	r3, #0
 8019c18:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8019c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c20:	9306      	str	r3, [sp, #24]
 8019c22:	4699      	mov	r9, r3
 8019c24:	2200      	movs	r2, #0
 8019c26:	2312      	movs	r3, #18
 8019c28:	920a      	str	r2, [sp, #40]	; 0x28
 8019c2a:	e7aa      	b.n	8019b82 <_dtoa_r+0x232>
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8019c30:	e7f4      	b.n	8019c1c <_dtoa_r+0x2cc>
 8019c32:	2301      	movs	r3, #1
 8019c34:	9306      	str	r3, [sp, #24]
 8019c36:	4699      	mov	r9, r3
 8019c38:	461a      	mov	r2, r3
 8019c3a:	e7f5      	b.n	8019c28 <_dtoa_r+0x2d8>
 8019c3c:	3101      	adds	r1, #1
 8019c3e:	6071      	str	r1, [r6, #4]
 8019c40:	0052      	lsls	r2, r2, #1
 8019c42:	e7a2      	b.n	8019b8a <_dtoa_r+0x23a>
 8019c44:	f3af 8000 	nop.w
 8019c48:	636f4361 	.word	0x636f4361
 8019c4c:	3fd287a7 	.word	0x3fd287a7
 8019c50:	8b60c8b3 	.word	0x8b60c8b3
 8019c54:	3fc68a28 	.word	0x3fc68a28
 8019c58:	509f79fb 	.word	0x509f79fb
 8019c5c:	3fd34413 	.word	0x3fd34413
 8019c60:	7ff00000 	.word	0x7ff00000
 8019c64:	0801fa32 	.word	0x0801fa32
 8019c68:	0801fa29 	.word	0x0801fa29
 8019c6c:	0801f8af 	.word	0x0801f8af
 8019c70:	0801fac0 	.word	0x0801fac0
 8019c74:	0801fa98 	.word	0x0801fa98
 8019c78:	07de      	lsls	r6, r3, #31
 8019c7a:	d504      	bpl.n	8019c86 <_dtoa_r+0x336>
 8019c7c:	ed91 6b00 	vldr	d6, [r1]
 8019c80:	3201      	adds	r2, #1
 8019c82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019c86:	105b      	asrs	r3, r3, #1
 8019c88:	3108      	adds	r1, #8
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d1f4      	bne.n	8019c78 <_dtoa_r+0x328>
 8019c8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019c92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019c96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	f000 80a7 	beq.w	8019df0 <_dtoa_r+0x4a0>
 8019ca2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019ca6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019caa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cb2:	f140 809d 	bpl.w	8019df0 <_dtoa_r+0x4a0>
 8019cb6:	f1b9 0f00 	cmp.w	r9, #0
 8019cba:	f000 8099 	beq.w	8019df0 <_dtoa_r+0x4a0>
 8019cbe:	9b06      	ldr	r3, [sp, #24]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	dd30      	ble.n	8019d26 <_dtoa_r+0x3d6>
 8019cc4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8019cc8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019cd0:	9d06      	ldr	r5, [sp, #24]
 8019cd2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8019cd6:	3201      	adds	r2, #1
 8019cd8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019cdc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8019ce0:	ee07 2a90 	vmov	s15, r2
 8019ce4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019ce8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8019cec:	ed8d 5b02 	vstr	d5, [sp, #8]
 8019cf0:	9a03      	ldr	r2, [sp, #12]
 8019cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019cf6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8019cfa:	2d00      	cmp	r5, #0
 8019cfc:	d17b      	bne.n	8019df6 <_dtoa_r+0x4a6>
 8019cfe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019d02:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019d06:	ec41 0b17 	vmov	d7, r0, r1
 8019d0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d12:	f300 8253 	bgt.w	801a1bc <_dtoa_r+0x86c>
 8019d16:	eeb1 7b47 	vneg.f64	d7, d7
 8019d1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d22:	f100 8249 	bmi.w	801a1b8 <_dtoa_r+0x868>
 8019d26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8019d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019d2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	f2c0 8119 	blt.w	8019f68 <_dtoa_r+0x618>
 8019d36:	f1bb 0f0e 	cmp.w	fp, #14
 8019d3a:	f300 8115 	bgt.w	8019f68 <_dtoa_r+0x618>
 8019d3e:	4bc3      	ldr	r3, [pc, #780]	; (801a04c <_dtoa_r+0x6fc>)
 8019d40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019d44:	ed93 6b00 	vldr	d6, [r3]
 8019d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	f280 80ba 	bge.w	8019ec4 <_dtoa_r+0x574>
 8019d50:	f1b9 0f00 	cmp.w	r9, #0
 8019d54:	f300 80b6 	bgt.w	8019ec4 <_dtoa_r+0x574>
 8019d58:	f040 822d 	bne.w	801a1b6 <_dtoa_r+0x866>
 8019d5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019d60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019d64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019d68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d70:	464d      	mov	r5, r9
 8019d72:	464f      	mov	r7, r9
 8019d74:	f280 8204 	bge.w	801a180 <_dtoa_r+0x830>
 8019d78:	9b04      	ldr	r3, [sp, #16]
 8019d7a:	9a04      	ldr	r2, [sp, #16]
 8019d7c:	1c5e      	adds	r6, r3, #1
 8019d7e:	2331      	movs	r3, #49	; 0x31
 8019d80:	7013      	strb	r3, [r2, #0]
 8019d82:	f10b 0b01 	add.w	fp, fp, #1
 8019d86:	e1ff      	b.n	801a188 <_dtoa_r+0x838>
 8019d88:	2202      	movs	r2, #2
 8019d8a:	e731      	b.n	8019bf0 <_dtoa_r+0x2a0>
 8019d8c:	d02e      	beq.n	8019dec <_dtoa_r+0x49c>
 8019d8e:	f1cb 0300 	rsb	r3, fp, #0
 8019d92:	4aae      	ldr	r2, [pc, #696]	; (801a04c <_dtoa_r+0x6fc>)
 8019d94:	f003 010f 	and.w	r1, r3, #15
 8019d98:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019d9c:	ed92 7b00 	vldr	d7, [r2]
 8019da0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8019da4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019da8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8019dac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8019db0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8019db4:	49a6      	ldr	r1, [pc, #664]	; (801a050 <_dtoa_r+0x700>)
 8019db6:	111b      	asrs	r3, r3, #4
 8019db8:	2000      	movs	r0, #0
 8019dba:	2202      	movs	r2, #2
 8019dbc:	b93b      	cbnz	r3, 8019dce <_dtoa_r+0x47e>
 8019dbe:	2800      	cmp	r0, #0
 8019dc0:	f43f af6b 	beq.w	8019c9a <_dtoa_r+0x34a>
 8019dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8019dc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019dcc:	e765      	b.n	8019c9a <_dtoa_r+0x34a>
 8019dce:	07dd      	lsls	r5, r3, #31
 8019dd0:	d509      	bpl.n	8019de6 <_dtoa_r+0x496>
 8019dd2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8019dd6:	ed91 7b00 	vldr	d7, [r1]
 8019dda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8019dde:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8019de2:	3201      	adds	r2, #1
 8019de4:	2001      	movs	r0, #1
 8019de6:	105b      	asrs	r3, r3, #1
 8019de8:	3108      	adds	r1, #8
 8019dea:	e7e7      	b.n	8019dbc <_dtoa_r+0x46c>
 8019dec:	2202      	movs	r2, #2
 8019dee:	e754      	b.n	8019c9a <_dtoa_r+0x34a>
 8019df0:	465b      	mov	r3, fp
 8019df2:	464d      	mov	r5, r9
 8019df4:	e770      	b.n	8019cd8 <_dtoa_r+0x388>
 8019df6:	4a95      	ldr	r2, [pc, #596]	; (801a04c <_dtoa_r+0x6fc>)
 8019df8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8019dfc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8019e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e02:	ec41 0b17 	vmov	d7, r0, r1
 8019e06:	b35a      	cbz	r2, 8019e60 <_dtoa_r+0x510>
 8019e08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8019e0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8019e10:	9e04      	ldr	r6, [sp, #16]
 8019e12:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8019e16:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019e1a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019e1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019e22:	ee14 2a90 	vmov	r2, s9
 8019e26:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019e2a:	3230      	adds	r2, #48	; 0x30
 8019e2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019e30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e38:	f806 2b01 	strb.w	r2, [r6], #1
 8019e3c:	d43b      	bmi.n	8019eb6 <_dtoa_r+0x566>
 8019e3e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8019e42:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e4a:	d472      	bmi.n	8019f32 <_dtoa_r+0x5e2>
 8019e4c:	9a04      	ldr	r2, [sp, #16]
 8019e4e:	1ab2      	subs	r2, r6, r2
 8019e50:	4295      	cmp	r5, r2
 8019e52:	f77f af68 	ble.w	8019d26 <_dtoa_r+0x3d6>
 8019e56:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019e5a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019e5e:	e7de      	b.n	8019e1e <_dtoa_r+0x4ce>
 8019e60:	9a04      	ldr	r2, [sp, #16]
 8019e62:	ee24 7b07 	vmul.f64	d7, d4, d7
 8019e66:	1956      	adds	r6, r2, r5
 8019e68:	4611      	mov	r1, r2
 8019e6a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019e6e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019e72:	ee14 2a90 	vmov	r2, s9
 8019e76:	3230      	adds	r2, #48	; 0x30
 8019e78:	f801 2b01 	strb.w	r2, [r1], #1
 8019e7c:	42b1      	cmp	r1, r6
 8019e7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019e82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8019e86:	d11a      	bne.n	8019ebe <_dtoa_r+0x56e>
 8019e88:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8019e8c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019e90:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8019e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e98:	dc4b      	bgt.n	8019f32 <_dtoa_r+0x5e2>
 8019e9a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8019e9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea6:	f57f af3e 	bpl.w	8019d26 <_dtoa_r+0x3d6>
 8019eaa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8019eae:	2a30      	cmp	r2, #48	; 0x30
 8019eb0:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 8019eb4:	d001      	beq.n	8019eba <_dtoa_r+0x56a>
 8019eb6:	469b      	mov	fp, r3
 8019eb8:	e02a      	b.n	8019f10 <_dtoa_r+0x5c0>
 8019eba:	460e      	mov	r6, r1
 8019ebc:	e7f5      	b.n	8019eaa <_dtoa_r+0x55a>
 8019ebe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019ec2:	e7d4      	b.n	8019e6e <_dtoa_r+0x51e>
 8019ec4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019ec8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8019ecc:	9e04      	ldr	r6, [sp, #16]
 8019ece:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019ed2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8019ed6:	ee15 3a10 	vmov	r3, s10
 8019eda:	3330      	adds	r3, #48	; 0x30
 8019edc:	f806 3b01 	strb.w	r3, [r6], #1
 8019ee0:	9b04      	ldr	r3, [sp, #16]
 8019ee2:	1af3      	subs	r3, r6, r3
 8019ee4:	4599      	cmp	r9, r3
 8019ee6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8019eea:	eea3 7b46 	vfms.f64	d7, d3, d6
 8019eee:	d133      	bne.n	8019f58 <_dtoa_r+0x608>
 8019ef0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8019ef4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019efc:	dc18      	bgt.n	8019f30 <_dtoa_r+0x5e0>
 8019efe:	eeb4 7b46 	vcmp.f64	d7, d6
 8019f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f06:	d103      	bne.n	8019f10 <_dtoa_r+0x5c0>
 8019f08:	ee15 3a10 	vmov	r3, s10
 8019f0c:	07db      	lsls	r3, r3, #31
 8019f0e:	d40f      	bmi.n	8019f30 <_dtoa_r+0x5e0>
 8019f10:	9901      	ldr	r1, [sp, #4]
 8019f12:	4620      	mov	r0, r4
 8019f14:	f000 fea4 	bl	801ac60 <_Bfree>
 8019f18:	2300      	movs	r3, #0
 8019f1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f1c:	7033      	strb	r3, [r6, #0]
 8019f1e:	f10b 0301 	add.w	r3, fp, #1
 8019f22:	6013      	str	r3, [r2, #0]
 8019f24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	f43f ad5b 	beq.w	80199e2 <_dtoa_r+0x92>
 8019f2c:	601e      	str	r6, [r3, #0]
 8019f2e:	e558      	b.n	80199e2 <_dtoa_r+0x92>
 8019f30:	465b      	mov	r3, fp
 8019f32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019f36:	2939      	cmp	r1, #57	; 0x39
 8019f38:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8019f3c:	d106      	bne.n	8019f4c <_dtoa_r+0x5fc>
 8019f3e:	9904      	ldr	r1, [sp, #16]
 8019f40:	4291      	cmp	r1, r2
 8019f42:	d107      	bne.n	8019f54 <_dtoa_r+0x604>
 8019f44:	2230      	movs	r2, #48	; 0x30
 8019f46:	700a      	strb	r2, [r1, #0]
 8019f48:	3301      	adds	r3, #1
 8019f4a:	460a      	mov	r2, r1
 8019f4c:	7811      	ldrb	r1, [r2, #0]
 8019f4e:	3101      	adds	r1, #1
 8019f50:	7011      	strb	r1, [r2, #0]
 8019f52:	e7b0      	b.n	8019eb6 <_dtoa_r+0x566>
 8019f54:	4616      	mov	r6, r2
 8019f56:	e7ec      	b.n	8019f32 <_dtoa_r+0x5e2>
 8019f58:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019f5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f64:	d1b3      	bne.n	8019ece <_dtoa_r+0x57e>
 8019f66:	e7d3      	b.n	8019f10 <_dtoa_r+0x5c0>
 8019f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f6a:	2a00      	cmp	r2, #0
 8019f6c:	f000 808d 	beq.w	801a08a <_dtoa_r+0x73a>
 8019f70:	9a08      	ldr	r2, [sp, #32]
 8019f72:	2a01      	cmp	r2, #1
 8019f74:	dc72      	bgt.n	801a05c <_dtoa_r+0x70c>
 8019f76:	2f00      	cmp	r7, #0
 8019f78:	d06c      	beq.n	801a054 <_dtoa_r+0x704>
 8019f7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019f7e:	4645      	mov	r5, r8
 8019f80:	4656      	mov	r6, sl
 8019f82:	9a07      	ldr	r2, [sp, #28]
 8019f84:	2101      	movs	r1, #1
 8019f86:	441a      	add	r2, r3
 8019f88:	4620      	mov	r0, r4
 8019f8a:	449a      	add	sl, r3
 8019f8c:	9207      	str	r2, [sp, #28]
 8019f8e:	f000 ff45 	bl	801ae1c <__i2b>
 8019f92:	4607      	mov	r7, r0
 8019f94:	2e00      	cmp	r6, #0
 8019f96:	dd0b      	ble.n	8019fb0 <_dtoa_r+0x660>
 8019f98:	9b07      	ldr	r3, [sp, #28]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	dd08      	ble.n	8019fb0 <_dtoa_r+0x660>
 8019f9e:	42b3      	cmp	r3, r6
 8019fa0:	9a07      	ldr	r2, [sp, #28]
 8019fa2:	bfa8      	it	ge
 8019fa4:	4633      	movge	r3, r6
 8019fa6:	ebaa 0a03 	sub.w	sl, sl, r3
 8019faa:	1af6      	subs	r6, r6, r3
 8019fac:	1ad3      	subs	r3, r2, r3
 8019fae:	9307      	str	r3, [sp, #28]
 8019fb0:	f1b8 0f00 	cmp.w	r8, #0
 8019fb4:	d01d      	beq.n	8019ff2 <_dtoa_r+0x6a2>
 8019fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d06a      	beq.n	801a092 <_dtoa_r+0x742>
 8019fbc:	b18d      	cbz	r5, 8019fe2 <_dtoa_r+0x692>
 8019fbe:	4639      	mov	r1, r7
 8019fc0:	462a      	mov	r2, r5
 8019fc2:	4620      	mov	r0, r4
 8019fc4:	f000 ffca 	bl	801af5c <__pow5mult>
 8019fc8:	9a01      	ldr	r2, [sp, #4]
 8019fca:	4601      	mov	r1, r0
 8019fcc:	4607      	mov	r7, r0
 8019fce:	4620      	mov	r0, r4
 8019fd0:	f000 ff2d 	bl	801ae2e <__multiply>
 8019fd4:	9901      	ldr	r1, [sp, #4]
 8019fd6:	900c      	str	r0, [sp, #48]	; 0x30
 8019fd8:	4620      	mov	r0, r4
 8019fda:	f000 fe41 	bl	801ac60 <_Bfree>
 8019fde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fe0:	9301      	str	r3, [sp, #4]
 8019fe2:	ebb8 0205 	subs.w	r2, r8, r5
 8019fe6:	d004      	beq.n	8019ff2 <_dtoa_r+0x6a2>
 8019fe8:	9901      	ldr	r1, [sp, #4]
 8019fea:	4620      	mov	r0, r4
 8019fec:	f000 ffb6 	bl	801af5c <__pow5mult>
 8019ff0:	9001      	str	r0, [sp, #4]
 8019ff2:	2101      	movs	r1, #1
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	f000 ff11 	bl	801ae1c <__i2b>
 8019ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019ffc:	4605      	mov	r5, r0
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	f000 81ca 	beq.w	801a398 <_dtoa_r+0xa48>
 801a004:	461a      	mov	r2, r3
 801a006:	4601      	mov	r1, r0
 801a008:	4620      	mov	r0, r4
 801a00a:	f000 ffa7 	bl	801af5c <__pow5mult>
 801a00e:	9b08      	ldr	r3, [sp, #32]
 801a010:	2b01      	cmp	r3, #1
 801a012:	4605      	mov	r5, r0
 801a014:	dc44      	bgt.n	801a0a0 <_dtoa_r+0x750>
 801a016:	9b02      	ldr	r3, [sp, #8]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d13c      	bne.n	801a096 <_dtoa_r+0x746>
 801a01c:	9b03      	ldr	r3, [sp, #12]
 801a01e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a022:	2b00      	cmp	r3, #0
 801a024:	d137      	bne.n	801a096 <_dtoa_r+0x746>
 801a026:	9b03      	ldr	r3, [sp, #12]
 801a028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a02c:	0d1b      	lsrs	r3, r3, #20
 801a02e:	051b      	lsls	r3, r3, #20
 801a030:	2b00      	cmp	r3, #0
 801a032:	d033      	beq.n	801a09c <_dtoa_r+0x74c>
 801a034:	9b07      	ldr	r3, [sp, #28]
 801a036:	3301      	adds	r3, #1
 801a038:	f10a 0a01 	add.w	sl, sl, #1
 801a03c:	9307      	str	r3, [sp, #28]
 801a03e:	f04f 0801 	mov.w	r8, #1
 801a042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a044:	bb73      	cbnz	r3, 801a0a4 <_dtoa_r+0x754>
 801a046:	2001      	movs	r0, #1
 801a048:	e034      	b.n	801a0b4 <_dtoa_r+0x764>
 801a04a:	bf00      	nop
 801a04c:	0801fac0 	.word	0x0801fac0
 801a050:	0801fa98 	.word	0x0801fa98
 801a054:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a05a:	e790      	b.n	8019f7e <_dtoa_r+0x62e>
 801a05c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 801a060:	45a8      	cmp	r8, r5
 801a062:	bfbf      	itttt	lt
 801a064:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801a066:	eba5 0808 	sublt.w	r8, r5, r8
 801a06a:	4443      	addlt	r3, r8
 801a06c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801a06e:	bfb6      	itet	lt
 801a070:	46a8      	movlt	r8, r5
 801a072:	eba8 0505 	subge.w	r5, r8, r5
 801a076:	2500      	movlt	r5, #0
 801a078:	f1b9 0f00 	cmp.w	r9, #0
 801a07c:	bfb9      	ittee	lt
 801a07e:	ebaa 0609 	sublt.w	r6, sl, r9
 801a082:	2300      	movlt	r3, #0
 801a084:	4656      	movge	r6, sl
 801a086:	464b      	movge	r3, r9
 801a088:	e77b      	b.n	8019f82 <_dtoa_r+0x632>
 801a08a:	4645      	mov	r5, r8
 801a08c:	4656      	mov	r6, sl
 801a08e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a090:	e780      	b.n	8019f94 <_dtoa_r+0x644>
 801a092:	4642      	mov	r2, r8
 801a094:	e7a8      	b.n	8019fe8 <_dtoa_r+0x698>
 801a096:	f04f 0800 	mov.w	r8, #0
 801a09a:	e7d2      	b.n	801a042 <_dtoa_r+0x6f2>
 801a09c:	4698      	mov	r8, r3
 801a09e:	e7d0      	b.n	801a042 <_dtoa_r+0x6f2>
 801a0a0:	f04f 0800 	mov.w	r8, #0
 801a0a4:	692b      	ldr	r3, [r5, #16]
 801a0a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801a0aa:	6918      	ldr	r0, [r3, #16]
 801a0ac:	f000 fe68 	bl	801ad80 <__hi0bits>
 801a0b0:	f1c0 0020 	rsb	r0, r0, #32
 801a0b4:	9b07      	ldr	r3, [sp, #28]
 801a0b6:	4418      	add	r0, r3
 801a0b8:	f010 001f 	ands.w	r0, r0, #31
 801a0bc:	d047      	beq.n	801a14e <_dtoa_r+0x7fe>
 801a0be:	f1c0 0320 	rsb	r3, r0, #32
 801a0c2:	2b04      	cmp	r3, #4
 801a0c4:	dd3b      	ble.n	801a13e <_dtoa_r+0x7ee>
 801a0c6:	9b07      	ldr	r3, [sp, #28]
 801a0c8:	f1c0 001c 	rsb	r0, r0, #28
 801a0cc:	4482      	add	sl, r0
 801a0ce:	4406      	add	r6, r0
 801a0d0:	4403      	add	r3, r0
 801a0d2:	9307      	str	r3, [sp, #28]
 801a0d4:	f1ba 0f00 	cmp.w	sl, #0
 801a0d8:	dd05      	ble.n	801a0e6 <_dtoa_r+0x796>
 801a0da:	4652      	mov	r2, sl
 801a0dc:	9901      	ldr	r1, [sp, #4]
 801a0de:	4620      	mov	r0, r4
 801a0e0:	f000 ff8a 	bl	801aff8 <__lshift>
 801a0e4:	9001      	str	r0, [sp, #4]
 801a0e6:	9b07      	ldr	r3, [sp, #28]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	dd05      	ble.n	801a0f8 <_dtoa_r+0x7a8>
 801a0ec:	4629      	mov	r1, r5
 801a0ee:	461a      	mov	r2, r3
 801a0f0:	4620      	mov	r0, r4
 801a0f2:	f000 ff81 	bl	801aff8 <__lshift>
 801a0f6:	4605      	mov	r5, r0
 801a0f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a0fa:	b353      	cbz	r3, 801a152 <_dtoa_r+0x802>
 801a0fc:	4629      	mov	r1, r5
 801a0fe:	9801      	ldr	r0, [sp, #4]
 801a100:	f000 ffce 	bl	801b0a0 <__mcmp>
 801a104:	2800      	cmp	r0, #0
 801a106:	da24      	bge.n	801a152 <_dtoa_r+0x802>
 801a108:	2300      	movs	r3, #0
 801a10a:	220a      	movs	r2, #10
 801a10c:	9901      	ldr	r1, [sp, #4]
 801a10e:	4620      	mov	r0, r4
 801a110:	f000 fdbd 	bl	801ac8e <__multadd>
 801a114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a116:	9001      	str	r0, [sp, #4]
 801a118:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	f000 8142 	beq.w	801a3a6 <_dtoa_r+0xa56>
 801a122:	2300      	movs	r3, #0
 801a124:	4639      	mov	r1, r7
 801a126:	220a      	movs	r2, #10
 801a128:	4620      	mov	r0, r4
 801a12a:	f000 fdb0 	bl	801ac8e <__multadd>
 801a12e:	9b06      	ldr	r3, [sp, #24]
 801a130:	2b00      	cmp	r3, #0
 801a132:	4607      	mov	r7, r0
 801a134:	dc4b      	bgt.n	801a1ce <_dtoa_r+0x87e>
 801a136:	9b08      	ldr	r3, [sp, #32]
 801a138:	2b02      	cmp	r3, #2
 801a13a:	dd48      	ble.n	801a1ce <_dtoa_r+0x87e>
 801a13c:	e011      	b.n	801a162 <_dtoa_r+0x812>
 801a13e:	d0c9      	beq.n	801a0d4 <_dtoa_r+0x784>
 801a140:	9a07      	ldr	r2, [sp, #28]
 801a142:	331c      	adds	r3, #28
 801a144:	441a      	add	r2, r3
 801a146:	449a      	add	sl, r3
 801a148:	441e      	add	r6, r3
 801a14a:	4613      	mov	r3, r2
 801a14c:	e7c1      	b.n	801a0d2 <_dtoa_r+0x782>
 801a14e:	4603      	mov	r3, r0
 801a150:	e7f6      	b.n	801a140 <_dtoa_r+0x7f0>
 801a152:	f1b9 0f00 	cmp.w	r9, #0
 801a156:	dc34      	bgt.n	801a1c2 <_dtoa_r+0x872>
 801a158:	9b08      	ldr	r3, [sp, #32]
 801a15a:	2b02      	cmp	r3, #2
 801a15c:	dd31      	ble.n	801a1c2 <_dtoa_r+0x872>
 801a15e:	f8cd 9018 	str.w	r9, [sp, #24]
 801a162:	9b06      	ldr	r3, [sp, #24]
 801a164:	b963      	cbnz	r3, 801a180 <_dtoa_r+0x830>
 801a166:	4629      	mov	r1, r5
 801a168:	2205      	movs	r2, #5
 801a16a:	4620      	mov	r0, r4
 801a16c:	f000 fd8f 	bl	801ac8e <__multadd>
 801a170:	4601      	mov	r1, r0
 801a172:	4605      	mov	r5, r0
 801a174:	9801      	ldr	r0, [sp, #4]
 801a176:	f000 ff93 	bl	801b0a0 <__mcmp>
 801a17a:	2800      	cmp	r0, #0
 801a17c:	f73f adfc 	bgt.w	8019d78 <_dtoa_r+0x428>
 801a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a182:	9e04      	ldr	r6, [sp, #16]
 801a184:	ea6f 0b03 	mvn.w	fp, r3
 801a188:	f04f 0900 	mov.w	r9, #0
 801a18c:	4629      	mov	r1, r5
 801a18e:	4620      	mov	r0, r4
 801a190:	f000 fd66 	bl	801ac60 <_Bfree>
 801a194:	2f00      	cmp	r7, #0
 801a196:	f43f aebb 	beq.w	8019f10 <_dtoa_r+0x5c0>
 801a19a:	f1b9 0f00 	cmp.w	r9, #0
 801a19e:	d005      	beq.n	801a1ac <_dtoa_r+0x85c>
 801a1a0:	45b9      	cmp	r9, r7
 801a1a2:	d003      	beq.n	801a1ac <_dtoa_r+0x85c>
 801a1a4:	4649      	mov	r1, r9
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f000 fd5a 	bl	801ac60 <_Bfree>
 801a1ac:	4639      	mov	r1, r7
 801a1ae:	4620      	mov	r0, r4
 801a1b0:	f000 fd56 	bl	801ac60 <_Bfree>
 801a1b4:	e6ac      	b.n	8019f10 <_dtoa_r+0x5c0>
 801a1b6:	2500      	movs	r5, #0
 801a1b8:	462f      	mov	r7, r5
 801a1ba:	e7e1      	b.n	801a180 <_dtoa_r+0x830>
 801a1bc:	469b      	mov	fp, r3
 801a1be:	462f      	mov	r7, r5
 801a1c0:	e5da      	b.n	8019d78 <_dtoa_r+0x428>
 801a1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1c4:	f8cd 9018 	str.w	r9, [sp, #24]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	f000 80f3 	beq.w	801a3b4 <_dtoa_r+0xa64>
 801a1ce:	2e00      	cmp	r6, #0
 801a1d0:	dd05      	ble.n	801a1de <_dtoa_r+0x88e>
 801a1d2:	4639      	mov	r1, r7
 801a1d4:	4632      	mov	r2, r6
 801a1d6:	4620      	mov	r0, r4
 801a1d8:	f000 ff0e 	bl	801aff8 <__lshift>
 801a1dc:	4607      	mov	r7, r0
 801a1de:	f1b8 0f00 	cmp.w	r8, #0
 801a1e2:	d04c      	beq.n	801a27e <_dtoa_r+0x92e>
 801a1e4:	6879      	ldr	r1, [r7, #4]
 801a1e6:	4620      	mov	r0, r4
 801a1e8:	f000 fd06 	bl	801abf8 <_Balloc>
 801a1ec:	693a      	ldr	r2, [r7, #16]
 801a1ee:	3202      	adds	r2, #2
 801a1f0:	4606      	mov	r6, r0
 801a1f2:	0092      	lsls	r2, r2, #2
 801a1f4:	f107 010c 	add.w	r1, r7, #12
 801a1f8:	300c      	adds	r0, #12
 801a1fa:	f7fd fdc9 	bl	8017d90 <memcpy>
 801a1fe:	2201      	movs	r2, #1
 801a200:	4631      	mov	r1, r6
 801a202:	4620      	mov	r0, r4
 801a204:	f000 fef8 	bl	801aff8 <__lshift>
 801a208:	9b02      	ldr	r3, [sp, #8]
 801a20a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801a20e:	f003 0301 	and.w	r3, r3, #1
 801a212:	46b9      	mov	r9, r7
 801a214:	9307      	str	r3, [sp, #28]
 801a216:	4607      	mov	r7, r0
 801a218:	4629      	mov	r1, r5
 801a21a:	9801      	ldr	r0, [sp, #4]
 801a21c:	f7ff fb0b 	bl	8019836 <quorem>
 801a220:	4649      	mov	r1, r9
 801a222:	4606      	mov	r6, r0
 801a224:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a228:	9801      	ldr	r0, [sp, #4]
 801a22a:	f000 ff39 	bl	801b0a0 <__mcmp>
 801a22e:	463a      	mov	r2, r7
 801a230:	9002      	str	r0, [sp, #8]
 801a232:	4629      	mov	r1, r5
 801a234:	4620      	mov	r0, r4
 801a236:	f000 ff4d 	bl	801b0d4 <__mdiff>
 801a23a:	68c3      	ldr	r3, [r0, #12]
 801a23c:	4602      	mov	r2, r0
 801a23e:	bb03      	cbnz	r3, 801a282 <_dtoa_r+0x932>
 801a240:	4601      	mov	r1, r0
 801a242:	9009      	str	r0, [sp, #36]	; 0x24
 801a244:	9801      	ldr	r0, [sp, #4]
 801a246:	f000 ff2b 	bl	801b0a0 <__mcmp>
 801a24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a24c:	4603      	mov	r3, r0
 801a24e:	4611      	mov	r1, r2
 801a250:	4620      	mov	r0, r4
 801a252:	9309      	str	r3, [sp, #36]	; 0x24
 801a254:	f000 fd04 	bl	801ac60 <_Bfree>
 801a258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a25a:	b9a3      	cbnz	r3, 801a286 <_dtoa_r+0x936>
 801a25c:	9a08      	ldr	r2, [sp, #32]
 801a25e:	b992      	cbnz	r2, 801a286 <_dtoa_r+0x936>
 801a260:	9a07      	ldr	r2, [sp, #28]
 801a262:	b982      	cbnz	r2, 801a286 <_dtoa_r+0x936>
 801a264:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a268:	d029      	beq.n	801a2be <_dtoa_r+0x96e>
 801a26a:	9b02      	ldr	r3, [sp, #8]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	dd01      	ble.n	801a274 <_dtoa_r+0x924>
 801a270:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801a274:	f10a 0601 	add.w	r6, sl, #1
 801a278:	f88a 8000 	strb.w	r8, [sl]
 801a27c:	e786      	b.n	801a18c <_dtoa_r+0x83c>
 801a27e:	4638      	mov	r0, r7
 801a280:	e7c2      	b.n	801a208 <_dtoa_r+0x8b8>
 801a282:	2301      	movs	r3, #1
 801a284:	e7e3      	b.n	801a24e <_dtoa_r+0x8fe>
 801a286:	9a02      	ldr	r2, [sp, #8]
 801a288:	2a00      	cmp	r2, #0
 801a28a:	db04      	blt.n	801a296 <_dtoa_r+0x946>
 801a28c:	d124      	bne.n	801a2d8 <_dtoa_r+0x988>
 801a28e:	9a08      	ldr	r2, [sp, #32]
 801a290:	bb12      	cbnz	r2, 801a2d8 <_dtoa_r+0x988>
 801a292:	9a07      	ldr	r2, [sp, #28]
 801a294:	bb02      	cbnz	r2, 801a2d8 <_dtoa_r+0x988>
 801a296:	2b00      	cmp	r3, #0
 801a298:	ddec      	ble.n	801a274 <_dtoa_r+0x924>
 801a29a:	2201      	movs	r2, #1
 801a29c:	9901      	ldr	r1, [sp, #4]
 801a29e:	4620      	mov	r0, r4
 801a2a0:	f000 feaa 	bl	801aff8 <__lshift>
 801a2a4:	4629      	mov	r1, r5
 801a2a6:	9001      	str	r0, [sp, #4]
 801a2a8:	f000 fefa 	bl	801b0a0 <__mcmp>
 801a2ac:	2800      	cmp	r0, #0
 801a2ae:	dc03      	bgt.n	801a2b8 <_dtoa_r+0x968>
 801a2b0:	d1e0      	bne.n	801a274 <_dtoa_r+0x924>
 801a2b2:	f018 0f01 	tst.w	r8, #1
 801a2b6:	d0dd      	beq.n	801a274 <_dtoa_r+0x924>
 801a2b8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a2bc:	d1d8      	bne.n	801a270 <_dtoa_r+0x920>
 801a2be:	2339      	movs	r3, #57	; 0x39
 801a2c0:	f10a 0601 	add.w	r6, sl, #1
 801a2c4:	f88a 3000 	strb.w	r3, [sl]
 801a2c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a2cc:	2b39      	cmp	r3, #57	; 0x39
 801a2ce:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801a2d2:	d04c      	beq.n	801a36e <_dtoa_r+0xa1e>
 801a2d4:	3301      	adds	r3, #1
 801a2d6:	e051      	b.n	801a37c <_dtoa_r+0xa2c>
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	f10a 0601 	add.w	r6, sl, #1
 801a2de:	dd05      	ble.n	801a2ec <_dtoa_r+0x99c>
 801a2e0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801a2e4:	d0eb      	beq.n	801a2be <_dtoa_r+0x96e>
 801a2e6:	f108 0801 	add.w	r8, r8, #1
 801a2ea:	e7c5      	b.n	801a278 <_dtoa_r+0x928>
 801a2ec:	9b04      	ldr	r3, [sp, #16]
 801a2ee:	9a06      	ldr	r2, [sp, #24]
 801a2f0:	f806 8c01 	strb.w	r8, [r6, #-1]
 801a2f4:	1af3      	subs	r3, r6, r3
 801a2f6:	4293      	cmp	r3, r2
 801a2f8:	d021      	beq.n	801a33e <_dtoa_r+0x9ee>
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	220a      	movs	r2, #10
 801a2fe:	9901      	ldr	r1, [sp, #4]
 801a300:	4620      	mov	r0, r4
 801a302:	f000 fcc4 	bl	801ac8e <__multadd>
 801a306:	45b9      	cmp	r9, r7
 801a308:	9001      	str	r0, [sp, #4]
 801a30a:	f04f 0300 	mov.w	r3, #0
 801a30e:	f04f 020a 	mov.w	r2, #10
 801a312:	4649      	mov	r1, r9
 801a314:	4620      	mov	r0, r4
 801a316:	d105      	bne.n	801a324 <_dtoa_r+0x9d4>
 801a318:	f000 fcb9 	bl	801ac8e <__multadd>
 801a31c:	4681      	mov	r9, r0
 801a31e:	4607      	mov	r7, r0
 801a320:	46b2      	mov	sl, r6
 801a322:	e779      	b.n	801a218 <_dtoa_r+0x8c8>
 801a324:	f000 fcb3 	bl	801ac8e <__multadd>
 801a328:	4639      	mov	r1, r7
 801a32a:	4681      	mov	r9, r0
 801a32c:	2300      	movs	r3, #0
 801a32e:	220a      	movs	r2, #10
 801a330:	4620      	mov	r0, r4
 801a332:	f000 fcac 	bl	801ac8e <__multadd>
 801a336:	4607      	mov	r7, r0
 801a338:	e7f2      	b.n	801a320 <_dtoa_r+0x9d0>
 801a33a:	f04f 0900 	mov.w	r9, #0
 801a33e:	2201      	movs	r2, #1
 801a340:	9901      	ldr	r1, [sp, #4]
 801a342:	4620      	mov	r0, r4
 801a344:	f000 fe58 	bl	801aff8 <__lshift>
 801a348:	4629      	mov	r1, r5
 801a34a:	9001      	str	r0, [sp, #4]
 801a34c:	f000 fea8 	bl	801b0a0 <__mcmp>
 801a350:	2800      	cmp	r0, #0
 801a352:	dcb9      	bgt.n	801a2c8 <_dtoa_r+0x978>
 801a354:	d102      	bne.n	801a35c <_dtoa_r+0xa0c>
 801a356:	f018 0f01 	tst.w	r8, #1
 801a35a:	d1b5      	bne.n	801a2c8 <_dtoa_r+0x978>
 801a35c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a360:	2b30      	cmp	r3, #48	; 0x30
 801a362:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 801a366:	f47f af11 	bne.w	801a18c <_dtoa_r+0x83c>
 801a36a:	4616      	mov	r6, r2
 801a36c:	e7f6      	b.n	801a35c <_dtoa_r+0xa0c>
 801a36e:	9b04      	ldr	r3, [sp, #16]
 801a370:	4293      	cmp	r3, r2
 801a372:	d105      	bne.n	801a380 <_dtoa_r+0xa30>
 801a374:	9a04      	ldr	r2, [sp, #16]
 801a376:	f10b 0b01 	add.w	fp, fp, #1
 801a37a:	2331      	movs	r3, #49	; 0x31
 801a37c:	7013      	strb	r3, [r2, #0]
 801a37e:	e705      	b.n	801a18c <_dtoa_r+0x83c>
 801a380:	4616      	mov	r6, r2
 801a382:	e7a1      	b.n	801a2c8 <_dtoa_r+0x978>
 801a384:	4b16      	ldr	r3, [pc, #88]	; (801a3e0 <_dtoa_r+0xa90>)
 801a386:	f7ff bb48 	b.w	8019a1a <_dtoa_r+0xca>
 801a38a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	f47f ab23 	bne.w	80199d8 <_dtoa_r+0x88>
 801a392:	4b14      	ldr	r3, [pc, #80]	; (801a3e4 <_dtoa_r+0xa94>)
 801a394:	f7ff bb41 	b.w	8019a1a <_dtoa_r+0xca>
 801a398:	9b08      	ldr	r3, [sp, #32]
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	f77f ae3b 	ble.w	801a016 <_dtoa_r+0x6c6>
 801a3a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801a3a4:	e64f      	b.n	801a046 <_dtoa_r+0x6f6>
 801a3a6:	9b06      	ldr	r3, [sp, #24]
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	dc03      	bgt.n	801a3b4 <_dtoa_r+0xa64>
 801a3ac:	9b08      	ldr	r3, [sp, #32]
 801a3ae:	2b02      	cmp	r3, #2
 801a3b0:	f73f aed7 	bgt.w	801a162 <_dtoa_r+0x812>
 801a3b4:	9e04      	ldr	r6, [sp, #16]
 801a3b6:	9801      	ldr	r0, [sp, #4]
 801a3b8:	4629      	mov	r1, r5
 801a3ba:	f7ff fa3c 	bl	8019836 <quorem>
 801a3be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801a3c2:	f806 8b01 	strb.w	r8, [r6], #1
 801a3c6:	9b04      	ldr	r3, [sp, #16]
 801a3c8:	9a06      	ldr	r2, [sp, #24]
 801a3ca:	1af3      	subs	r3, r6, r3
 801a3cc:	429a      	cmp	r2, r3
 801a3ce:	ddb4      	ble.n	801a33a <_dtoa_r+0x9ea>
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	220a      	movs	r2, #10
 801a3d4:	9901      	ldr	r1, [sp, #4]
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	f000 fc59 	bl	801ac8e <__multadd>
 801a3dc:	9001      	str	r0, [sp, #4]
 801a3de:	e7ea      	b.n	801a3b6 <_dtoa_r+0xa66>
 801a3e0:	0801f8ae 	.word	0x0801f8ae
 801a3e4:	0801fa29 	.word	0x0801fa29

0801a3e8 <std>:
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	b510      	push	{r4, lr}
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	e9c0 3300 	strd	r3, r3, [r0]
 801a3f2:	6083      	str	r3, [r0, #8]
 801a3f4:	8181      	strh	r1, [r0, #12]
 801a3f6:	6643      	str	r3, [r0, #100]	; 0x64
 801a3f8:	81c2      	strh	r2, [r0, #14]
 801a3fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a3fe:	6183      	str	r3, [r0, #24]
 801a400:	4619      	mov	r1, r3
 801a402:	2208      	movs	r2, #8
 801a404:	305c      	adds	r0, #92	; 0x5c
 801a406:	f7fd fce7 	bl	8017dd8 <memset>
 801a40a:	4b05      	ldr	r3, [pc, #20]	; (801a420 <std+0x38>)
 801a40c:	6263      	str	r3, [r4, #36]	; 0x24
 801a40e:	4b05      	ldr	r3, [pc, #20]	; (801a424 <std+0x3c>)
 801a410:	62a3      	str	r3, [r4, #40]	; 0x28
 801a412:	4b05      	ldr	r3, [pc, #20]	; (801a428 <std+0x40>)
 801a414:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a416:	4b05      	ldr	r3, [pc, #20]	; (801a42c <std+0x44>)
 801a418:	6224      	str	r4, [r4, #32]
 801a41a:	6323      	str	r3, [r4, #48]	; 0x30
 801a41c:	bd10      	pop	{r4, pc}
 801a41e:	bf00      	nop
 801a420:	0801baa9 	.word	0x0801baa9
 801a424:	0801bacb 	.word	0x0801bacb
 801a428:	0801bb03 	.word	0x0801bb03
 801a42c:	0801bb27 	.word	0x0801bb27

0801a430 <_cleanup_r>:
 801a430:	4901      	ldr	r1, [pc, #4]	; (801a438 <_cleanup_r+0x8>)
 801a432:	f000 b885 	b.w	801a540 <_fwalk_reent>
 801a436:	bf00      	nop
 801a438:	0801be01 	.word	0x0801be01

0801a43c <__sfmoreglue>:
 801a43c:	b570      	push	{r4, r5, r6, lr}
 801a43e:	1e4a      	subs	r2, r1, #1
 801a440:	2568      	movs	r5, #104	; 0x68
 801a442:	4355      	muls	r5, r2
 801a444:	460e      	mov	r6, r1
 801a446:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a44a:	f001 f831 	bl	801b4b0 <_malloc_r>
 801a44e:	4604      	mov	r4, r0
 801a450:	b140      	cbz	r0, 801a464 <__sfmoreglue+0x28>
 801a452:	2100      	movs	r1, #0
 801a454:	e9c0 1600 	strd	r1, r6, [r0]
 801a458:	300c      	adds	r0, #12
 801a45a:	60a0      	str	r0, [r4, #8]
 801a45c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a460:	f7fd fcba 	bl	8017dd8 <memset>
 801a464:	4620      	mov	r0, r4
 801a466:	bd70      	pop	{r4, r5, r6, pc}

0801a468 <__sinit>:
 801a468:	6983      	ldr	r3, [r0, #24]
 801a46a:	b510      	push	{r4, lr}
 801a46c:	4604      	mov	r4, r0
 801a46e:	bb33      	cbnz	r3, 801a4be <__sinit+0x56>
 801a470:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a474:	6503      	str	r3, [r0, #80]	; 0x50
 801a476:	4b12      	ldr	r3, [pc, #72]	; (801a4c0 <__sinit+0x58>)
 801a478:	4a12      	ldr	r2, [pc, #72]	; (801a4c4 <__sinit+0x5c>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	6282      	str	r2, [r0, #40]	; 0x28
 801a47e:	4298      	cmp	r0, r3
 801a480:	bf04      	itt	eq
 801a482:	2301      	moveq	r3, #1
 801a484:	6183      	streq	r3, [r0, #24]
 801a486:	f000 f81f 	bl	801a4c8 <__sfp>
 801a48a:	6060      	str	r0, [r4, #4]
 801a48c:	4620      	mov	r0, r4
 801a48e:	f000 f81b 	bl	801a4c8 <__sfp>
 801a492:	60a0      	str	r0, [r4, #8]
 801a494:	4620      	mov	r0, r4
 801a496:	f000 f817 	bl	801a4c8 <__sfp>
 801a49a:	2200      	movs	r2, #0
 801a49c:	60e0      	str	r0, [r4, #12]
 801a49e:	2104      	movs	r1, #4
 801a4a0:	6860      	ldr	r0, [r4, #4]
 801a4a2:	f7ff ffa1 	bl	801a3e8 <std>
 801a4a6:	2201      	movs	r2, #1
 801a4a8:	2109      	movs	r1, #9
 801a4aa:	68a0      	ldr	r0, [r4, #8]
 801a4ac:	f7ff ff9c 	bl	801a3e8 <std>
 801a4b0:	2202      	movs	r2, #2
 801a4b2:	2112      	movs	r1, #18
 801a4b4:	68e0      	ldr	r0, [r4, #12]
 801a4b6:	f7ff ff97 	bl	801a3e8 <std>
 801a4ba:	2301      	movs	r3, #1
 801a4bc:	61a3      	str	r3, [r4, #24]
 801a4be:	bd10      	pop	{r4, pc}
 801a4c0:	0801f890 	.word	0x0801f890
 801a4c4:	0801a431 	.word	0x0801a431

0801a4c8 <__sfp>:
 801a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4ca:	4b1b      	ldr	r3, [pc, #108]	; (801a538 <__sfp+0x70>)
 801a4cc:	681e      	ldr	r6, [r3, #0]
 801a4ce:	69b3      	ldr	r3, [r6, #24]
 801a4d0:	4607      	mov	r7, r0
 801a4d2:	b913      	cbnz	r3, 801a4da <__sfp+0x12>
 801a4d4:	4630      	mov	r0, r6
 801a4d6:	f7ff ffc7 	bl	801a468 <__sinit>
 801a4da:	3648      	adds	r6, #72	; 0x48
 801a4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a4e0:	3b01      	subs	r3, #1
 801a4e2:	d503      	bpl.n	801a4ec <__sfp+0x24>
 801a4e4:	6833      	ldr	r3, [r6, #0]
 801a4e6:	b133      	cbz	r3, 801a4f6 <__sfp+0x2e>
 801a4e8:	6836      	ldr	r6, [r6, #0]
 801a4ea:	e7f7      	b.n	801a4dc <__sfp+0x14>
 801a4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a4f0:	b16d      	cbz	r5, 801a50e <__sfp+0x46>
 801a4f2:	3468      	adds	r4, #104	; 0x68
 801a4f4:	e7f4      	b.n	801a4e0 <__sfp+0x18>
 801a4f6:	2104      	movs	r1, #4
 801a4f8:	4638      	mov	r0, r7
 801a4fa:	f7ff ff9f 	bl	801a43c <__sfmoreglue>
 801a4fe:	6030      	str	r0, [r6, #0]
 801a500:	2800      	cmp	r0, #0
 801a502:	d1f1      	bne.n	801a4e8 <__sfp+0x20>
 801a504:	230c      	movs	r3, #12
 801a506:	603b      	str	r3, [r7, #0]
 801a508:	4604      	mov	r4, r0
 801a50a:	4620      	mov	r0, r4
 801a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a50e:	4b0b      	ldr	r3, [pc, #44]	; (801a53c <__sfp+0x74>)
 801a510:	6665      	str	r5, [r4, #100]	; 0x64
 801a512:	e9c4 5500 	strd	r5, r5, [r4]
 801a516:	60a5      	str	r5, [r4, #8]
 801a518:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a51c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a520:	2208      	movs	r2, #8
 801a522:	4629      	mov	r1, r5
 801a524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a528:	f7fd fc56 	bl	8017dd8 <memset>
 801a52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a534:	e7e9      	b.n	801a50a <__sfp+0x42>
 801a536:	bf00      	nop
 801a538:	0801f890 	.word	0x0801f890
 801a53c:	ffff0001 	.word	0xffff0001

0801a540 <_fwalk_reent>:
 801a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a544:	4680      	mov	r8, r0
 801a546:	4689      	mov	r9, r1
 801a548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a54c:	2600      	movs	r6, #0
 801a54e:	b914      	cbnz	r4, 801a556 <_fwalk_reent+0x16>
 801a550:	4630      	mov	r0, r6
 801a552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a556:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801a55a:	3f01      	subs	r7, #1
 801a55c:	d501      	bpl.n	801a562 <_fwalk_reent+0x22>
 801a55e:	6824      	ldr	r4, [r4, #0]
 801a560:	e7f5      	b.n	801a54e <_fwalk_reent+0xe>
 801a562:	89ab      	ldrh	r3, [r5, #12]
 801a564:	2b01      	cmp	r3, #1
 801a566:	d907      	bls.n	801a578 <_fwalk_reent+0x38>
 801a568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a56c:	3301      	adds	r3, #1
 801a56e:	d003      	beq.n	801a578 <_fwalk_reent+0x38>
 801a570:	4629      	mov	r1, r5
 801a572:	4640      	mov	r0, r8
 801a574:	47c8      	blx	r9
 801a576:	4306      	orrs	r6, r0
 801a578:	3568      	adds	r5, #104	; 0x68
 801a57a:	e7ee      	b.n	801a55a <_fwalk_reent+0x1a>

0801a57c <rshift>:
 801a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a57e:	6906      	ldr	r6, [r0, #16]
 801a580:	114b      	asrs	r3, r1, #5
 801a582:	429e      	cmp	r6, r3
 801a584:	f100 0414 	add.w	r4, r0, #20
 801a588:	dd30      	ble.n	801a5ec <rshift+0x70>
 801a58a:	f011 011f 	ands.w	r1, r1, #31
 801a58e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801a592:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801a596:	d108      	bne.n	801a5aa <rshift+0x2e>
 801a598:	4621      	mov	r1, r4
 801a59a:	42b2      	cmp	r2, r6
 801a59c:	460b      	mov	r3, r1
 801a59e:	d211      	bcs.n	801a5c4 <rshift+0x48>
 801a5a0:	f852 3b04 	ldr.w	r3, [r2], #4
 801a5a4:	f841 3b04 	str.w	r3, [r1], #4
 801a5a8:	e7f7      	b.n	801a59a <rshift+0x1e>
 801a5aa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801a5ae:	f1c1 0c20 	rsb	ip, r1, #32
 801a5b2:	40cd      	lsrs	r5, r1
 801a5b4:	3204      	adds	r2, #4
 801a5b6:	4623      	mov	r3, r4
 801a5b8:	42b2      	cmp	r2, r6
 801a5ba:	4617      	mov	r7, r2
 801a5bc:	d30c      	bcc.n	801a5d8 <rshift+0x5c>
 801a5be:	601d      	str	r5, [r3, #0]
 801a5c0:	b105      	cbz	r5, 801a5c4 <rshift+0x48>
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	1b1a      	subs	r2, r3, r4
 801a5c6:	42a3      	cmp	r3, r4
 801a5c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a5cc:	bf08      	it	eq
 801a5ce:	2300      	moveq	r3, #0
 801a5d0:	6102      	str	r2, [r0, #16]
 801a5d2:	bf08      	it	eq
 801a5d4:	6143      	streq	r3, [r0, #20]
 801a5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5d8:	683f      	ldr	r7, [r7, #0]
 801a5da:	fa07 f70c 	lsl.w	r7, r7, ip
 801a5de:	433d      	orrs	r5, r7
 801a5e0:	f843 5b04 	str.w	r5, [r3], #4
 801a5e4:	f852 5b04 	ldr.w	r5, [r2], #4
 801a5e8:	40cd      	lsrs	r5, r1
 801a5ea:	e7e5      	b.n	801a5b8 <rshift+0x3c>
 801a5ec:	4623      	mov	r3, r4
 801a5ee:	e7e9      	b.n	801a5c4 <rshift+0x48>

0801a5f0 <__hexdig_fun>:
 801a5f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a5f4:	2b09      	cmp	r3, #9
 801a5f6:	d802      	bhi.n	801a5fe <__hexdig_fun+0xe>
 801a5f8:	3820      	subs	r0, #32
 801a5fa:	b2c0      	uxtb	r0, r0
 801a5fc:	4770      	bx	lr
 801a5fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a602:	2b05      	cmp	r3, #5
 801a604:	d801      	bhi.n	801a60a <__hexdig_fun+0x1a>
 801a606:	3847      	subs	r0, #71	; 0x47
 801a608:	e7f7      	b.n	801a5fa <__hexdig_fun+0xa>
 801a60a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a60e:	2b05      	cmp	r3, #5
 801a610:	d801      	bhi.n	801a616 <__hexdig_fun+0x26>
 801a612:	3827      	subs	r0, #39	; 0x27
 801a614:	e7f1      	b.n	801a5fa <__hexdig_fun+0xa>
 801a616:	2000      	movs	r0, #0
 801a618:	4770      	bx	lr

0801a61a <__gethex>:
 801a61a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a61e:	b08b      	sub	sp, #44	; 0x2c
 801a620:	468a      	mov	sl, r1
 801a622:	9002      	str	r0, [sp, #8]
 801a624:	9816      	ldr	r0, [sp, #88]	; 0x58
 801a626:	9306      	str	r3, [sp, #24]
 801a628:	4690      	mov	r8, r2
 801a62a:	f000 facd 	bl	801abc8 <__localeconv_l>
 801a62e:	6803      	ldr	r3, [r0, #0]
 801a630:	9303      	str	r3, [sp, #12]
 801a632:	4618      	mov	r0, r3
 801a634:	f7e5 fe04 	bl	8000240 <strlen>
 801a638:	9b03      	ldr	r3, [sp, #12]
 801a63a:	9001      	str	r0, [sp, #4]
 801a63c:	4403      	add	r3, r0
 801a63e:	f04f 0b00 	mov.w	fp, #0
 801a642:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801a646:	9307      	str	r3, [sp, #28]
 801a648:	f8da 3000 	ldr.w	r3, [sl]
 801a64c:	3302      	adds	r3, #2
 801a64e:	461f      	mov	r7, r3
 801a650:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a654:	2830      	cmp	r0, #48	; 0x30
 801a656:	d06c      	beq.n	801a732 <__gethex+0x118>
 801a658:	f7ff ffca 	bl	801a5f0 <__hexdig_fun>
 801a65c:	4604      	mov	r4, r0
 801a65e:	2800      	cmp	r0, #0
 801a660:	d16a      	bne.n	801a738 <__gethex+0x11e>
 801a662:	9a01      	ldr	r2, [sp, #4]
 801a664:	9903      	ldr	r1, [sp, #12]
 801a666:	4638      	mov	r0, r7
 801a668:	f7fe fa44 	bl	8018af4 <strncmp>
 801a66c:	2800      	cmp	r0, #0
 801a66e:	d166      	bne.n	801a73e <__gethex+0x124>
 801a670:	9b01      	ldr	r3, [sp, #4]
 801a672:	5cf8      	ldrb	r0, [r7, r3]
 801a674:	18fe      	adds	r6, r7, r3
 801a676:	f7ff ffbb 	bl	801a5f0 <__hexdig_fun>
 801a67a:	2800      	cmp	r0, #0
 801a67c:	d062      	beq.n	801a744 <__gethex+0x12a>
 801a67e:	4633      	mov	r3, r6
 801a680:	7818      	ldrb	r0, [r3, #0]
 801a682:	2830      	cmp	r0, #48	; 0x30
 801a684:	461f      	mov	r7, r3
 801a686:	f103 0301 	add.w	r3, r3, #1
 801a68a:	d0f9      	beq.n	801a680 <__gethex+0x66>
 801a68c:	f7ff ffb0 	bl	801a5f0 <__hexdig_fun>
 801a690:	fab0 f580 	clz	r5, r0
 801a694:	096d      	lsrs	r5, r5, #5
 801a696:	4634      	mov	r4, r6
 801a698:	f04f 0b01 	mov.w	fp, #1
 801a69c:	463a      	mov	r2, r7
 801a69e:	4616      	mov	r6, r2
 801a6a0:	3201      	adds	r2, #1
 801a6a2:	7830      	ldrb	r0, [r6, #0]
 801a6a4:	f7ff ffa4 	bl	801a5f0 <__hexdig_fun>
 801a6a8:	2800      	cmp	r0, #0
 801a6aa:	d1f8      	bne.n	801a69e <__gethex+0x84>
 801a6ac:	9a01      	ldr	r2, [sp, #4]
 801a6ae:	9903      	ldr	r1, [sp, #12]
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	f7fe fa1f 	bl	8018af4 <strncmp>
 801a6b6:	b950      	cbnz	r0, 801a6ce <__gethex+0xb4>
 801a6b8:	b954      	cbnz	r4, 801a6d0 <__gethex+0xb6>
 801a6ba:	9b01      	ldr	r3, [sp, #4]
 801a6bc:	18f4      	adds	r4, r6, r3
 801a6be:	4622      	mov	r2, r4
 801a6c0:	4616      	mov	r6, r2
 801a6c2:	3201      	adds	r2, #1
 801a6c4:	7830      	ldrb	r0, [r6, #0]
 801a6c6:	f7ff ff93 	bl	801a5f0 <__hexdig_fun>
 801a6ca:	2800      	cmp	r0, #0
 801a6cc:	d1f8      	bne.n	801a6c0 <__gethex+0xa6>
 801a6ce:	b10c      	cbz	r4, 801a6d4 <__gethex+0xba>
 801a6d0:	1ba4      	subs	r4, r4, r6
 801a6d2:	00a4      	lsls	r4, r4, #2
 801a6d4:	7833      	ldrb	r3, [r6, #0]
 801a6d6:	2b50      	cmp	r3, #80	; 0x50
 801a6d8:	d001      	beq.n	801a6de <__gethex+0xc4>
 801a6da:	2b70      	cmp	r3, #112	; 0x70
 801a6dc:	d140      	bne.n	801a760 <__gethex+0x146>
 801a6de:	7873      	ldrb	r3, [r6, #1]
 801a6e0:	2b2b      	cmp	r3, #43	; 0x2b
 801a6e2:	d031      	beq.n	801a748 <__gethex+0x12e>
 801a6e4:	2b2d      	cmp	r3, #45	; 0x2d
 801a6e6:	d033      	beq.n	801a750 <__gethex+0x136>
 801a6e8:	1c71      	adds	r1, r6, #1
 801a6ea:	f04f 0900 	mov.w	r9, #0
 801a6ee:	7808      	ldrb	r0, [r1, #0]
 801a6f0:	f7ff ff7e 	bl	801a5f0 <__hexdig_fun>
 801a6f4:	1e43      	subs	r3, r0, #1
 801a6f6:	b2db      	uxtb	r3, r3
 801a6f8:	2b18      	cmp	r3, #24
 801a6fa:	d831      	bhi.n	801a760 <__gethex+0x146>
 801a6fc:	f1a0 0210 	sub.w	r2, r0, #16
 801a700:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a704:	f7ff ff74 	bl	801a5f0 <__hexdig_fun>
 801a708:	1e43      	subs	r3, r0, #1
 801a70a:	b2db      	uxtb	r3, r3
 801a70c:	2b18      	cmp	r3, #24
 801a70e:	d922      	bls.n	801a756 <__gethex+0x13c>
 801a710:	f1b9 0f00 	cmp.w	r9, #0
 801a714:	d000      	beq.n	801a718 <__gethex+0xfe>
 801a716:	4252      	negs	r2, r2
 801a718:	4414      	add	r4, r2
 801a71a:	f8ca 1000 	str.w	r1, [sl]
 801a71e:	b30d      	cbz	r5, 801a764 <__gethex+0x14a>
 801a720:	f1bb 0f00 	cmp.w	fp, #0
 801a724:	bf0c      	ite	eq
 801a726:	2706      	moveq	r7, #6
 801a728:	2700      	movne	r7, #0
 801a72a:	4638      	mov	r0, r7
 801a72c:	b00b      	add	sp, #44	; 0x2c
 801a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a732:	f10b 0b01 	add.w	fp, fp, #1
 801a736:	e78a      	b.n	801a64e <__gethex+0x34>
 801a738:	2500      	movs	r5, #0
 801a73a:	462c      	mov	r4, r5
 801a73c:	e7ae      	b.n	801a69c <__gethex+0x82>
 801a73e:	463e      	mov	r6, r7
 801a740:	2501      	movs	r5, #1
 801a742:	e7c7      	b.n	801a6d4 <__gethex+0xba>
 801a744:	4604      	mov	r4, r0
 801a746:	e7fb      	b.n	801a740 <__gethex+0x126>
 801a748:	f04f 0900 	mov.w	r9, #0
 801a74c:	1cb1      	adds	r1, r6, #2
 801a74e:	e7ce      	b.n	801a6ee <__gethex+0xd4>
 801a750:	f04f 0901 	mov.w	r9, #1
 801a754:	e7fa      	b.n	801a74c <__gethex+0x132>
 801a756:	230a      	movs	r3, #10
 801a758:	fb03 0202 	mla	r2, r3, r2, r0
 801a75c:	3a10      	subs	r2, #16
 801a75e:	e7cf      	b.n	801a700 <__gethex+0xe6>
 801a760:	4631      	mov	r1, r6
 801a762:	e7da      	b.n	801a71a <__gethex+0x100>
 801a764:	1bf3      	subs	r3, r6, r7
 801a766:	3b01      	subs	r3, #1
 801a768:	4629      	mov	r1, r5
 801a76a:	2b07      	cmp	r3, #7
 801a76c:	dc49      	bgt.n	801a802 <__gethex+0x1e8>
 801a76e:	9802      	ldr	r0, [sp, #8]
 801a770:	f000 fa42 	bl	801abf8 <_Balloc>
 801a774:	9b01      	ldr	r3, [sp, #4]
 801a776:	f100 0914 	add.w	r9, r0, #20
 801a77a:	f04f 0b00 	mov.w	fp, #0
 801a77e:	f1c3 0301 	rsb	r3, r3, #1
 801a782:	4605      	mov	r5, r0
 801a784:	f8cd 9010 	str.w	r9, [sp, #16]
 801a788:	46da      	mov	sl, fp
 801a78a:	9308      	str	r3, [sp, #32]
 801a78c:	42b7      	cmp	r7, r6
 801a78e:	d33b      	bcc.n	801a808 <__gethex+0x1ee>
 801a790:	9804      	ldr	r0, [sp, #16]
 801a792:	f840 ab04 	str.w	sl, [r0], #4
 801a796:	eba0 0009 	sub.w	r0, r0, r9
 801a79a:	1080      	asrs	r0, r0, #2
 801a79c:	6128      	str	r0, [r5, #16]
 801a79e:	0147      	lsls	r7, r0, #5
 801a7a0:	4650      	mov	r0, sl
 801a7a2:	f000 faed 	bl	801ad80 <__hi0bits>
 801a7a6:	f8d8 6000 	ldr.w	r6, [r8]
 801a7aa:	1a3f      	subs	r7, r7, r0
 801a7ac:	42b7      	cmp	r7, r6
 801a7ae:	dd64      	ble.n	801a87a <__gethex+0x260>
 801a7b0:	1bbf      	subs	r7, r7, r6
 801a7b2:	4639      	mov	r1, r7
 801a7b4:	4628      	mov	r0, r5
 801a7b6:	f000 fdfe 	bl	801b3b6 <__any_on>
 801a7ba:	4682      	mov	sl, r0
 801a7bc:	b178      	cbz	r0, 801a7de <__gethex+0x1c4>
 801a7be:	1e7b      	subs	r3, r7, #1
 801a7c0:	1159      	asrs	r1, r3, #5
 801a7c2:	f003 021f 	and.w	r2, r3, #31
 801a7c6:	f04f 0a01 	mov.w	sl, #1
 801a7ca:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801a7ce:	fa0a f202 	lsl.w	r2, sl, r2
 801a7d2:	420a      	tst	r2, r1
 801a7d4:	d003      	beq.n	801a7de <__gethex+0x1c4>
 801a7d6:	4553      	cmp	r3, sl
 801a7d8:	dc46      	bgt.n	801a868 <__gethex+0x24e>
 801a7da:	f04f 0a02 	mov.w	sl, #2
 801a7de:	4639      	mov	r1, r7
 801a7e0:	4628      	mov	r0, r5
 801a7e2:	f7ff fecb 	bl	801a57c <rshift>
 801a7e6:	443c      	add	r4, r7
 801a7e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a7ec:	42a3      	cmp	r3, r4
 801a7ee:	da52      	bge.n	801a896 <__gethex+0x27c>
 801a7f0:	4629      	mov	r1, r5
 801a7f2:	9802      	ldr	r0, [sp, #8]
 801a7f4:	f000 fa34 	bl	801ac60 <_Bfree>
 801a7f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	6013      	str	r3, [r2, #0]
 801a7fe:	27a3      	movs	r7, #163	; 0xa3
 801a800:	e793      	b.n	801a72a <__gethex+0x110>
 801a802:	3101      	adds	r1, #1
 801a804:	105b      	asrs	r3, r3, #1
 801a806:	e7b0      	b.n	801a76a <__gethex+0x150>
 801a808:	1e73      	subs	r3, r6, #1
 801a80a:	9305      	str	r3, [sp, #20]
 801a80c:	9a07      	ldr	r2, [sp, #28]
 801a80e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a812:	4293      	cmp	r3, r2
 801a814:	d018      	beq.n	801a848 <__gethex+0x22e>
 801a816:	f1bb 0f20 	cmp.w	fp, #32
 801a81a:	d107      	bne.n	801a82c <__gethex+0x212>
 801a81c:	9b04      	ldr	r3, [sp, #16]
 801a81e:	f8c3 a000 	str.w	sl, [r3]
 801a822:	3304      	adds	r3, #4
 801a824:	f04f 0a00 	mov.w	sl, #0
 801a828:	9304      	str	r3, [sp, #16]
 801a82a:	46d3      	mov	fp, sl
 801a82c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801a830:	f7ff fede 	bl	801a5f0 <__hexdig_fun>
 801a834:	f000 000f 	and.w	r0, r0, #15
 801a838:	fa00 f00b 	lsl.w	r0, r0, fp
 801a83c:	ea4a 0a00 	orr.w	sl, sl, r0
 801a840:	f10b 0b04 	add.w	fp, fp, #4
 801a844:	9b05      	ldr	r3, [sp, #20]
 801a846:	e00d      	b.n	801a864 <__gethex+0x24a>
 801a848:	9b05      	ldr	r3, [sp, #20]
 801a84a:	9a08      	ldr	r2, [sp, #32]
 801a84c:	4413      	add	r3, r2
 801a84e:	42bb      	cmp	r3, r7
 801a850:	d3e1      	bcc.n	801a816 <__gethex+0x1fc>
 801a852:	4618      	mov	r0, r3
 801a854:	9a01      	ldr	r2, [sp, #4]
 801a856:	9903      	ldr	r1, [sp, #12]
 801a858:	9309      	str	r3, [sp, #36]	; 0x24
 801a85a:	f7fe f94b 	bl	8018af4 <strncmp>
 801a85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a860:	2800      	cmp	r0, #0
 801a862:	d1d8      	bne.n	801a816 <__gethex+0x1fc>
 801a864:	461e      	mov	r6, r3
 801a866:	e791      	b.n	801a78c <__gethex+0x172>
 801a868:	1eb9      	subs	r1, r7, #2
 801a86a:	4628      	mov	r0, r5
 801a86c:	f000 fda3 	bl	801b3b6 <__any_on>
 801a870:	2800      	cmp	r0, #0
 801a872:	d0b2      	beq.n	801a7da <__gethex+0x1c0>
 801a874:	f04f 0a03 	mov.w	sl, #3
 801a878:	e7b1      	b.n	801a7de <__gethex+0x1c4>
 801a87a:	da09      	bge.n	801a890 <__gethex+0x276>
 801a87c:	1bf7      	subs	r7, r6, r7
 801a87e:	4629      	mov	r1, r5
 801a880:	463a      	mov	r2, r7
 801a882:	9802      	ldr	r0, [sp, #8]
 801a884:	f000 fbb8 	bl	801aff8 <__lshift>
 801a888:	1be4      	subs	r4, r4, r7
 801a88a:	4605      	mov	r5, r0
 801a88c:	f100 0914 	add.w	r9, r0, #20
 801a890:	f04f 0a00 	mov.w	sl, #0
 801a894:	e7a8      	b.n	801a7e8 <__gethex+0x1ce>
 801a896:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801a89a:	42a0      	cmp	r0, r4
 801a89c:	dd6a      	ble.n	801a974 <__gethex+0x35a>
 801a89e:	1b04      	subs	r4, r0, r4
 801a8a0:	42a6      	cmp	r6, r4
 801a8a2:	dc2e      	bgt.n	801a902 <__gethex+0x2e8>
 801a8a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a8a8:	2b02      	cmp	r3, #2
 801a8aa:	d022      	beq.n	801a8f2 <__gethex+0x2d8>
 801a8ac:	2b03      	cmp	r3, #3
 801a8ae:	d024      	beq.n	801a8fa <__gethex+0x2e0>
 801a8b0:	2b01      	cmp	r3, #1
 801a8b2:	d115      	bne.n	801a8e0 <__gethex+0x2c6>
 801a8b4:	42a6      	cmp	r6, r4
 801a8b6:	d113      	bne.n	801a8e0 <__gethex+0x2c6>
 801a8b8:	2e01      	cmp	r6, #1
 801a8ba:	dc0b      	bgt.n	801a8d4 <__gethex+0x2ba>
 801a8bc:	9a06      	ldr	r2, [sp, #24]
 801a8be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a8c2:	6013      	str	r3, [r2, #0]
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	612b      	str	r3, [r5, #16]
 801a8c8:	f8c9 3000 	str.w	r3, [r9]
 801a8cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a8ce:	2762      	movs	r7, #98	; 0x62
 801a8d0:	601d      	str	r5, [r3, #0]
 801a8d2:	e72a      	b.n	801a72a <__gethex+0x110>
 801a8d4:	1e71      	subs	r1, r6, #1
 801a8d6:	4628      	mov	r0, r5
 801a8d8:	f000 fd6d 	bl	801b3b6 <__any_on>
 801a8dc:	2800      	cmp	r0, #0
 801a8de:	d1ed      	bne.n	801a8bc <__gethex+0x2a2>
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	9802      	ldr	r0, [sp, #8]
 801a8e4:	f000 f9bc 	bl	801ac60 <_Bfree>
 801a8e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	6013      	str	r3, [r2, #0]
 801a8ee:	2750      	movs	r7, #80	; 0x50
 801a8f0:	e71b      	b.n	801a72a <__gethex+0x110>
 801a8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d0e1      	beq.n	801a8bc <__gethex+0x2a2>
 801a8f8:	e7f2      	b.n	801a8e0 <__gethex+0x2c6>
 801a8fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d1dd      	bne.n	801a8bc <__gethex+0x2a2>
 801a900:	e7ee      	b.n	801a8e0 <__gethex+0x2c6>
 801a902:	1e67      	subs	r7, r4, #1
 801a904:	f1ba 0f00 	cmp.w	sl, #0
 801a908:	d131      	bne.n	801a96e <__gethex+0x354>
 801a90a:	b127      	cbz	r7, 801a916 <__gethex+0x2fc>
 801a90c:	4639      	mov	r1, r7
 801a90e:	4628      	mov	r0, r5
 801a910:	f000 fd51 	bl	801b3b6 <__any_on>
 801a914:	4682      	mov	sl, r0
 801a916:	117a      	asrs	r2, r7, #5
 801a918:	2301      	movs	r3, #1
 801a91a:	f007 071f 	and.w	r7, r7, #31
 801a91e:	fa03 f707 	lsl.w	r7, r3, r7
 801a922:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801a926:	4621      	mov	r1, r4
 801a928:	421f      	tst	r7, r3
 801a92a:	4628      	mov	r0, r5
 801a92c:	bf18      	it	ne
 801a92e:	f04a 0a02 	orrne.w	sl, sl, #2
 801a932:	1b36      	subs	r6, r6, r4
 801a934:	f7ff fe22 	bl	801a57c <rshift>
 801a938:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801a93c:	2702      	movs	r7, #2
 801a93e:	f1ba 0f00 	cmp.w	sl, #0
 801a942:	d048      	beq.n	801a9d6 <__gethex+0x3bc>
 801a944:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801a948:	2b02      	cmp	r3, #2
 801a94a:	d015      	beq.n	801a978 <__gethex+0x35e>
 801a94c:	2b03      	cmp	r3, #3
 801a94e:	d017      	beq.n	801a980 <__gethex+0x366>
 801a950:	2b01      	cmp	r3, #1
 801a952:	d109      	bne.n	801a968 <__gethex+0x34e>
 801a954:	f01a 0f02 	tst.w	sl, #2
 801a958:	d006      	beq.n	801a968 <__gethex+0x34e>
 801a95a:	f8d9 3000 	ldr.w	r3, [r9]
 801a95e:	ea4a 0a03 	orr.w	sl, sl, r3
 801a962:	f01a 0f01 	tst.w	sl, #1
 801a966:	d10e      	bne.n	801a986 <__gethex+0x36c>
 801a968:	f047 0710 	orr.w	r7, r7, #16
 801a96c:	e033      	b.n	801a9d6 <__gethex+0x3bc>
 801a96e:	f04f 0a01 	mov.w	sl, #1
 801a972:	e7d0      	b.n	801a916 <__gethex+0x2fc>
 801a974:	2701      	movs	r7, #1
 801a976:	e7e2      	b.n	801a93e <__gethex+0x324>
 801a978:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a97a:	f1c3 0301 	rsb	r3, r3, #1
 801a97e:	9315      	str	r3, [sp, #84]	; 0x54
 801a980:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a982:	2b00      	cmp	r3, #0
 801a984:	d0f0      	beq.n	801a968 <__gethex+0x34e>
 801a986:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801a98a:	f105 0314 	add.w	r3, r5, #20
 801a98e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801a992:	eb03 010a 	add.w	r1, r3, sl
 801a996:	f04f 0c00 	mov.w	ip, #0
 801a99a:	4618      	mov	r0, r3
 801a99c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a9a0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801a9a4:	d01c      	beq.n	801a9e0 <__gethex+0x3c6>
 801a9a6:	3201      	adds	r2, #1
 801a9a8:	6002      	str	r2, [r0, #0]
 801a9aa:	2f02      	cmp	r7, #2
 801a9ac:	f105 0314 	add.w	r3, r5, #20
 801a9b0:	d138      	bne.n	801aa24 <__gethex+0x40a>
 801a9b2:	f8d8 2000 	ldr.w	r2, [r8]
 801a9b6:	3a01      	subs	r2, #1
 801a9b8:	42b2      	cmp	r2, r6
 801a9ba:	d10a      	bne.n	801a9d2 <__gethex+0x3b8>
 801a9bc:	1171      	asrs	r1, r6, #5
 801a9be:	2201      	movs	r2, #1
 801a9c0:	f006 061f 	and.w	r6, r6, #31
 801a9c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a9c8:	fa02 f606 	lsl.w	r6, r2, r6
 801a9cc:	421e      	tst	r6, r3
 801a9ce:	bf18      	it	ne
 801a9d0:	4617      	movne	r7, r2
 801a9d2:	f047 0720 	orr.w	r7, r7, #32
 801a9d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a9d8:	601d      	str	r5, [r3, #0]
 801a9da:	9b06      	ldr	r3, [sp, #24]
 801a9dc:	601c      	str	r4, [r3, #0]
 801a9de:	e6a4      	b.n	801a72a <__gethex+0x110>
 801a9e0:	4299      	cmp	r1, r3
 801a9e2:	f843 cc04 	str.w	ip, [r3, #-4]
 801a9e6:	d8d8      	bhi.n	801a99a <__gethex+0x380>
 801a9e8:	68ab      	ldr	r3, [r5, #8]
 801a9ea:	4599      	cmp	r9, r3
 801a9ec:	db12      	blt.n	801aa14 <__gethex+0x3fa>
 801a9ee:	6869      	ldr	r1, [r5, #4]
 801a9f0:	9802      	ldr	r0, [sp, #8]
 801a9f2:	3101      	adds	r1, #1
 801a9f4:	f000 f900 	bl	801abf8 <_Balloc>
 801a9f8:	692a      	ldr	r2, [r5, #16]
 801a9fa:	3202      	adds	r2, #2
 801a9fc:	f105 010c 	add.w	r1, r5, #12
 801aa00:	4683      	mov	fp, r0
 801aa02:	0092      	lsls	r2, r2, #2
 801aa04:	300c      	adds	r0, #12
 801aa06:	f7fd f9c3 	bl	8017d90 <memcpy>
 801aa0a:	4629      	mov	r1, r5
 801aa0c:	9802      	ldr	r0, [sp, #8]
 801aa0e:	f000 f927 	bl	801ac60 <_Bfree>
 801aa12:	465d      	mov	r5, fp
 801aa14:	692b      	ldr	r3, [r5, #16]
 801aa16:	1c5a      	adds	r2, r3, #1
 801aa18:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801aa1c:	612a      	str	r2, [r5, #16]
 801aa1e:	2201      	movs	r2, #1
 801aa20:	615a      	str	r2, [r3, #20]
 801aa22:	e7c2      	b.n	801a9aa <__gethex+0x390>
 801aa24:	692a      	ldr	r2, [r5, #16]
 801aa26:	454a      	cmp	r2, r9
 801aa28:	dd0b      	ble.n	801aa42 <__gethex+0x428>
 801aa2a:	2101      	movs	r1, #1
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	f7ff fda5 	bl	801a57c <rshift>
 801aa32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801aa36:	3401      	adds	r4, #1
 801aa38:	42a3      	cmp	r3, r4
 801aa3a:	f6ff aed9 	blt.w	801a7f0 <__gethex+0x1d6>
 801aa3e:	2701      	movs	r7, #1
 801aa40:	e7c7      	b.n	801a9d2 <__gethex+0x3b8>
 801aa42:	f016 061f 	ands.w	r6, r6, #31
 801aa46:	d0fa      	beq.n	801aa3e <__gethex+0x424>
 801aa48:	449a      	add	sl, r3
 801aa4a:	f1c6 0620 	rsb	r6, r6, #32
 801aa4e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801aa52:	f000 f995 	bl	801ad80 <__hi0bits>
 801aa56:	42b0      	cmp	r0, r6
 801aa58:	dbe7      	blt.n	801aa2a <__gethex+0x410>
 801aa5a:	e7f0      	b.n	801aa3e <__gethex+0x424>

0801aa5c <L_shift>:
 801aa5c:	f1c2 0208 	rsb	r2, r2, #8
 801aa60:	0092      	lsls	r2, r2, #2
 801aa62:	b570      	push	{r4, r5, r6, lr}
 801aa64:	f1c2 0620 	rsb	r6, r2, #32
 801aa68:	6843      	ldr	r3, [r0, #4]
 801aa6a:	6804      	ldr	r4, [r0, #0]
 801aa6c:	fa03 f506 	lsl.w	r5, r3, r6
 801aa70:	432c      	orrs	r4, r5
 801aa72:	40d3      	lsrs	r3, r2
 801aa74:	6004      	str	r4, [r0, #0]
 801aa76:	f840 3f04 	str.w	r3, [r0, #4]!
 801aa7a:	4288      	cmp	r0, r1
 801aa7c:	d3f4      	bcc.n	801aa68 <L_shift+0xc>
 801aa7e:	bd70      	pop	{r4, r5, r6, pc}

0801aa80 <__match>:
 801aa80:	b530      	push	{r4, r5, lr}
 801aa82:	6803      	ldr	r3, [r0, #0]
 801aa84:	3301      	adds	r3, #1
 801aa86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa8a:	b914      	cbnz	r4, 801aa92 <__match+0x12>
 801aa8c:	6003      	str	r3, [r0, #0]
 801aa8e:	2001      	movs	r0, #1
 801aa90:	bd30      	pop	{r4, r5, pc}
 801aa92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801aa9a:	2d19      	cmp	r5, #25
 801aa9c:	bf98      	it	ls
 801aa9e:	3220      	addls	r2, #32
 801aaa0:	42a2      	cmp	r2, r4
 801aaa2:	d0f0      	beq.n	801aa86 <__match+0x6>
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	e7f3      	b.n	801aa90 <__match+0x10>

0801aaa8 <__hexnan>:
 801aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaac:	680b      	ldr	r3, [r1, #0]
 801aaae:	6801      	ldr	r1, [r0, #0]
 801aab0:	115f      	asrs	r7, r3, #5
 801aab2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801aab6:	f013 031f 	ands.w	r3, r3, #31
 801aaba:	b087      	sub	sp, #28
 801aabc:	bf18      	it	ne
 801aabe:	3704      	addne	r7, #4
 801aac0:	2500      	movs	r5, #0
 801aac2:	1f3e      	subs	r6, r7, #4
 801aac4:	4682      	mov	sl, r0
 801aac6:	4690      	mov	r8, r2
 801aac8:	9301      	str	r3, [sp, #4]
 801aaca:	f847 5c04 	str.w	r5, [r7, #-4]
 801aace:	46b1      	mov	r9, r6
 801aad0:	4634      	mov	r4, r6
 801aad2:	9502      	str	r5, [sp, #8]
 801aad4:	46ab      	mov	fp, r5
 801aad6:	784a      	ldrb	r2, [r1, #1]
 801aad8:	1c4b      	adds	r3, r1, #1
 801aada:	9303      	str	r3, [sp, #12]
 801aadc:	b342      	cbz	r2, 801ab30 <__hexnan+0x88>
 801aade:	4610      	mov	r0, r2
 801aae0:	9105      	str	r1, [sp, #20]
 801aae2:	9204      	str	r2, [sp, #16]
 801aae4:	f7ff fd84 	bl	801a5f0 <__hexdig_fun>
 801aae8:	2800      	cmp	r0, #0
 801aaea:	d143      	bne.n	801ab74 <__hexnan+0xcc>
 801aaec:	9a04      	ldr	r2, [sp, #16]
 801aaee:	9905      	ldr	r1, [sp, #20]
 801aaf0:	2a20      	cmp	r2, #32
 801aaf2:	d818      	bhi.n	801ab26 <__hexnan+0x7e>
 801aaf4:	9b02      	ldr	r3, [sp, #8]
 801aaf6:	459b      	cmp	fp, r3
 801aaf8:	dd13      	ble.n	801ab22 <__hexnan+0x7a>
 801aafa:	454c      	cmp	r4, r9
 801aafc:	d206      	bcs.n	801ab0c <__hexnan+0x64>
 801aafe:	2d07      	cmp	r5, #7
 801ab00:	dc04      	bgt.n	801ab0c <__hexnan+0x64>
 801ab02:	462a      	mov	r2, r5
 801ab04:	4649      	mov	r1, r9
 801ab06:	4620      	mov	r0, r4
 801ab08:	f7ff ffa8 	bl	801aa5c <L_shift>
 801ab0c:	4544      	cmp	r4, r8
 801ab0e:	d944      	bls.n	801ab9a <__hexnan+0xf2>
 801ab10:	2300      	movs	r3, #0
 801ab12:	f1a4 0904 	sub.w	r9, r4, #4
 801ab16:	f844 3c04 	str.w	r3, [r4, #-4]
 801ab1a:	f8cd b008 	str.w	fp, [sp, #8]
 801ab1e:	464c      	mov	r4, r9
 801ab20:	461d      	mov	r5, r3
 801ab22:	9903      	ldr	r1, [sp, #12]
 801ab24:	e7d7      	b.n	801aad6 <__hexnan+0x2e>
 801ab26:	2a29      	cmp	r2, #41	; 0x29
 801ab28:	d14a      	bne.n	801abc0 <__hexnan+0x118>
 801ab2a:	3102      	adds	r1, #2
 801ab2c:	f8ca 1000 	str.w	r1, [sl]
 801ab30:	f1bb 0f00 	cmp.w	fp, #0
 801ab34:	d044      	beq.n	801abc0 <__hexnan+0x118>
 801ab36:	454c      	cmp	r4, r9
 801ab38:	d206      	bcs.n	801ab48 <__hexnan+0xa0>
 801ab3a:	2d07      	cmp	r5, #7
 801ab3c:	dc04      	bgt.n	801ab48 <__hexnan+0xa0>
 801ab3e:	462a      	mov	r2, r5
 801ab40:	4649      	mov	r1, r9
 801ab42:	4620      	mov	r0, r4
 801ab44:	f7ff ff8a 	bl	801aa5c <L_shift>
 801ab48:	4544      	cmp	r4, r8
 801ab4a:	d928      	bls.n	801ab9e <__hexnan+0xf6>
 801ab4c:	4643      	mov	r3, r8
 801ab4e:	f854 2b04 	ldr.w	r2, [r4], #4
 801ab52:	f843 2b04 	str.w	r2, [r3], #4
 801ab56:	42a6      	cmp	r6, r4
 801ab58:	d2f9      	bcs.n	801ab4e <__hexnan+0xa6>
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	f843 2b04 	str.w	r2, [r3], #4
 801ab60:	429e      	cmp	r6, r3
 801ab62:	d2fb      	bcs.n	801ab5c <__hexnan+0xb4>
 801ab64:	6833      	ldr	r3, [r6, #0]
 801ab66:	b91b      	cbnz	r3, 801ab70 <__hexnan+0xc8>
 801ab68:	4546      	cmp	r6, r8
 801ab6a:	d127      	bne.n	801abbc <__hexnan+0x114>
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	6033      	str	r3, [r6, #0]
 801ab70:	2005      	movs	r0, #5
 801ab72:	e026      	b.n	801abc2 <__hexnan+0x11a>
 801ab74:	3501      	adds	r5, #1
 801ab76:	2d08      	cmp	r5, #8
 801ab78:	f10b 0b01 	add.w	fp, fp, #1
 801ab7c:	dd06      	ble.n	801ab8c <__hexnan+0xe4>
 801ab7e:	4544      	cmp	r4, r8
 801ab80:	d9cf      	bls.n	801ab22 <__hexnan+0x7a>
 801ab82:	2300      	movs	r3, #0
 801ab84:	f844 3c04 	str.w	r3, [r4, #-4]
 801ab88:	2501      	movs	r5, #1
 801ab8a:	3c04      	subs	r4, #4
 801ab8c:	6822      	ldr	r2, [r4, #0]
 801ab8e:	f000 000f 	and.w	r0, r0, #15
 801ab92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ab96:	6020      	str	r0, [r4, #0]
 801ab98:	e7c3      	b.n	801ab22 <__hexnan+0x7a>
 801ab9a:	2508      	movs	r5, #8
 801ab9c:	e7c1      	b.n	801ab22 <__hexnan+0x7a>
 801ab9e:	9b01      	ldr	r3, [sp, #4]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d0df      	beq.n	801ab64 <__hexnan+0xbc>
 801aba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801aba8:	f1c3 0320 	rsb	r3, r3, #32
 801abac:	fa22 f303 	lsr.w	r3, r2, r3
 801abb0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801abb4:	401a      	ands	r2, r3
 801abb6:	f847 2c04 	str.w	r2, [r7, #-4]
 801abba:	e7d3      	b.n	801ab64 <__hexnan+0xbc>
 801abbc:	3e04      	subs	r6, #4
 801abbe:	e7d1      	b.n	801ab64 <__hexnan+0xbc>
 801abc0:	2004      	movs	r0, #4
 801abc2:	b007      	add	sp, #28
 801abc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abc8 <__localeconv_l>:
 801abc8:	30f0      	adds	r0, #240	; 0xf0
 801abca:	4770      	bx	lr

0801abcc <_localeconv_r>:
 801abcc:	4b04      	ldr	r3, [pc, #16]	; (801abe0 <_localeconv_r+0x14>)
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	6a18      	ldr	r0, [r3, #32]
 801abd2:	4b04      	ldr	r3, [pc, #16]	; (801abe4 <_localeconv_r+0x18>)
 801abd4:	2800      	cmp	r0, #0
 801abd6:	bf08      	it	eq
 801abd8:	4618      	moveq	r0, r3
 801abda:	30f0      	adds	r0, #240	; 0xf0
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop
 801abe0:	20001518 	.word	0x20001518
 801abe4:	2000157c 	.word	0x2000157c

0801abe8 <malloc>:
 801abe8:	4b02      	ldr	r3, [pc, #8]	; (801abf4 <malloc+0xc>)
 801abea:	4601      	mov	r1, r0
 801abec:	6818      	ldr	r0, [r3, #0]
 801abee:	f000 bc5f 	b.w	801b4b0 <_malloc_r>
 801abf2:	bf00      	nop
 801abf4:	20001518 	.word	0x20001518

0801abf8 <_Balloc>:
 801abf8:	b570      	push	{r4, r5, r6, lr}
 801abfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801abfc:	4604      	mov	r4, r0
 801abfe:	460e      	mov	r6, r1
 801ac00:	b93d      	cbnz	r5, 801ac12 <_Balloc+0x1a>
 801ac02:	2010      	movs	r0, #16
 801ac04:	f7ff fff0 	bl	801abe8 <malloc>
 801ac08:	6260      	str	r0, [r4, #36]	; 0x24
 801ac0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ac0e:	6005      	str	r5, [r0, #0]
 801ac10:	60c5      	str	r5, [r0, #12]
 801ac12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801ac14:	68eb      	ldr	r3, [r5, #12]
 801ac16:	b183      	cbz	r3, 801ac3a <_Balloc+0x42>
 801ac18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac1a:	68db      	ldr	r3, [r3, #12]
 801ac1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801ac20:	b9b8      	cbnz	r0, 801ac52 <_Balloc+0x5a>
 801ac22:	2101      	movs	r1, #1
 801ac24:	fa01 f506 	lsl.w	r5, r1, r6
 801ac28:	1d6a      	adds	r2, r5, #5
 801ac2a:	0092      	lsls	r2, r2, #2
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	f000 fbe3 	bl	801b3f8 <_calloc_r>
 801ac32:	b160      	cbz	r0, 801ac4e <_Balloc+0x56>
 801ac34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801ac38:	e00e      	b.n	801ac58 <_Balloc+0x60>
 801ac3a:	2221      	movs	r2, #33	; 0x21
 801ac3c:	2104      	movs	r1, #4
 801ac3e:	4620      	mov	r0, r4
 801ac40:	f000 fbda 	bl	801b3f8 <_calloc_r>
 801ac44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac46:	60e8      	str	r0, [r5, #12]
 801ac48:	68db      	ldr	r3, [r3, #12]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d1e4      	bne.n	801ac18 <_Balloc+0x20>
 801ac4e:	2000      	movs	r0, #0
 801ac50:	bd70      	pop	{r4, r5, r6, pc}
 801ac52:	6802      	ldr	r2, [r0, #0]
 801ac54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801ac58:	2300      	movs	r3, #0
 801ac5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ac5e:	e7f7      	b.n	801ac50 <_Balloc+0x58>

0801ac60 <_Bfree>:
 801ac60:	b570      	push	{r4, r5, r6, lr}
 801ac62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801ac64:	4606      	mov	r6, r0
 801ac66:	460d      	mov	r5, r1
 801ac68:	b93c      	cbnz	r4, 801ac7a <_Bfree+0x1a>
 801ac6a:	2010      	movs	r0, #16
 801ac6c:	f7ff ffbc 	bl	801abe8 <malloc>
 801ac70:	6270      	str	r0, [r6, #36]	; 0x24
 801ac72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ac76:	6004      	str	r4, [r0, #0]
 801ac78:	60c4      	str	r4, [r0, #12]
 801ac7a:	b13d      	cbz	r5, 801ac8c <_Bfree+0x2c>
 801ac7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801ac7e:	686a      	ldr	r2, [r5, #4]
 801ac80:	68db      	ldr	r3, [r3, #12]
 801ac82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ac86:	6029      	str	r1, [r5, #0]
 801ac88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801ac8c:	bd70      	pop	{r4, r5, r6, pc}

0801ac8e <__multadd>:
 801ac8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac92:	690d      	ldr	r5, [r1, #16]
 801ac94:	461f      	mov	r7, r3
 801ac96:	4606      	mov	r6, r0
 801ac98:	460c      	mov	r4, r1
 801ac9a:	f101 0c14 	add.w	ip, r1, #20
 801ac9e:	2300      	movs	r3, #0
 801aca0:	f8dc 0000 	ldr.w	r0, [ip]
 801aca4:	b281      	uxth	r1, r0
 801aca6:	fb02 7101 	mla	r1, r2, r1, r7
 801acaa:	0c0f      	lsrs	r7, r1, #16
 801acac:	0c00      	lsrs	r0, r0, #16
 801acae:	fb02 7000 	mla	r0, r2, r0, r7
 801acb2:	b289      	uxth	r1, r1
 801acb4:	3301      	adds	r3, #1
 801acb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801acba:	429d      	cmp	r5, r3
 801acbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801acc0:	f84c 1b04 	str.w	r1, [ip], #4
 801acc4:	dcec      	bgt.n	801aca0 <__multadd+0x12>
 801acc6:	b1d7      	cbz	r7, 801acfe <__multadd+0x70>
 801acc8:	68a3      	ldr	r3, [r4, #8]
 801acca:	42ab      	cmp	r3, r5
 801accc:	dc12      	bgt.n	801acf4 <__multadd+0x66>
 801acce:	6861      	ldr	r1, [r4, #4]
 801acd0:	4630      	mov	r0, r6
 801acd2:	3101      	adds	r1, #1
 801acd4:	f7ff ff90 	bl	801abf8 <_Balloc>
 801acd8:	6922      	ldr	r2, [r4, #16]
 801acda:	3202      	adds	r2, #2
 801acdc:	f104 010c 	add.w	r1, r4, #12
 801ace0:	4680      	mov	r8, r0
 801ace2:	0092      	lsls	r2, r2, #2
 801ace4:	300c      	adds	r0, #12
 801ace6:	f7fd f853 	bl	8017d90 <memcpy>
 801acea:	4621      	mov	r1, r4
 801acec:	4630      	mov	r0, r6
 801acee:	f7ff ffb7 	bl	801ac60 <_Bfree>
 801acf2:	4644      	mov	r4, r8
 801acf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801acf8:	3501      	adds	r5, #1
 801acfa:	615f      	str	r7, [r3, #20]
 801acfc:	6125      	str	r5, [r4, #16]
 801acfe:	4620      	mov	r0, r4
 801ad00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ad04 <__s2b>:
 801ad04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad08:	460c      	mov	r4, r1
 801ad0a:	4615      	mov	r5, r2
 801ad0c:	461f      	mov	r7, r3
 801ad0e:	2209      	movs	r2, #9
 801ad10:	3308      	adds	r3, #8
 801ad12:	4606      	mov	r6, r0
 801ad14:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad18:	2100      	movs	r1, #0
 801ad1a:	2201      	movs	r2, #1
 801ad1c:	429a      	cmp	r2, r3
 801ad1e:	db20      	blt.n	801ad62 <__s2b+0x5e>
 801ad20:	4630      	mov	r0, r6
 801ad22:	f7ff ff69 	bl	801abf8 <_Balloc>
 801ad26:	9b08      	ldr	r3, [sp, #32]
 801ad28:	6143      	str	r3, [r0, #20]
 801ad2a:	2d09      	cmp	r5, #9
 801ad2c:	f04f 0301 	mov.w	r3, #1
 801ad30:	6103      	str	r3, [r0, #16]
 801ad32:	dd19      	ble.n	801ad68 <__s2b+0x64>
 801ad34:	f104 0809 	add.w	r8, r4, #9
 801ad38:	46c1      	mov	r9, r8
 801ad3a:	442c      	add	r4, r5
 801ad3c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ad40:	4601      	mov	r1, r0
 801ad42:	3b30      	subs	r3, #48	; 0x30
 801ad44:	220a      	movs	r2, #10
 801ad46:	4630      	mov	r0, r6
 801ad48:	f7ff ffa1 	bl	801ac8e <__multadd>
 801ad4c:	45a1      	cmp	r9, r4
 801ad4e:	d1f5      	bne.n	801ad3c <__s2b+0x38>
 801ad50:	eb08 0405 	add.w	r4, r8, r5
 801ad54:	3c08      	subs	r4, #8
 801ad56:	1b2d      	subs	r5, r5, r4
 801ad58:	1963      	adds	r3, r4, r5
 801ad5a:	42bb      	cmp	r3, r7
 801ad5c:	db07      	blt.n	801ad6e <__s2b+0x6a>
 801ad5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad62:	0052      	lsls	r2, r2, #1
 801ad64:	3101      	adds	r1, #1
 801ad66:	e7d9      	b.n	801ad1c <__s2b+0x18>
 801ad68:	340a      	adds	r4, #10
 801ad6a:	2509      	movs	r5, #9
 801ad6c:	e7f3      	b.n	801ad56 <__s2b+0x52>
 801ad6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ad72:	4601      	mov	r1, r0
 801ad74:	3b30      	subs	r3, #48	; 0x30
 801ad76:	220a      	movs	r2, #10
 801ad78:	4630      	mov	r0, r6
 801ad7a:	f7ff ff88 	bl	801ac8e <__multadd>
 801ad7e:	e7eb      	b.n	801ad58 <__s2b+0x54>

0801ad80 <__hi0bits>:
 801ad80:	0c02      	lsrs	r2, r0, #16
 801ad82:	0412      	lsls	r2, r2, #16
 801ad84:	4603      	mov	r3, r0
 801ad86:	b9b2      	cbnz	r2, 801adb6 <__hi0bits+0x36>
 801ad88:	0403      	lsls	r3, r0, #16
 801ad8a:	2010      	movs	r0, #16
 801ad8c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ad90:	bf04      	itt	eq
 801ad92:	021b      	lsleq	r3, r3, #8
 801ad94:	3008      	addeq	r0, #8
 801ad96:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ad9a:	bf04      	itt	eq
 801ad9c:	011b      	lsleq	r3, r3, #4
 801ad9e:	3004      	addeq	r0, #4
 801ada0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ada4:	bf04      	itt	eq
 801ada6:	009b      	lsleq	r3, r3, #2
 801ada8:	3002      	addeq	r0, #2
 801adaa:	2b00      	cmp	r3, #0
 801adac:	db06      	blt.n	801adbc <__hi0bits+0x3c>
 801adae:	005b      	lsls	r3, r3, #1
 801adb0:	d503      	bpl.n	801adba <__hi0bits+0x3a>
 801adb2:	3001      	adds	r0, #1
 801adb4:	4770      	bx	lr
 801adb6:	2000      	movs	r0, #0
 801adb8:	e7e8      	b.n	801ad8c <__hi0bits+0xc>
 801adba:	2020      	movs	r0, #32
 801adbc:	4770      	bx	lr

0801adbe <__lo0bits>:
 801adbe:	6803      	ldr	r3, [r0, #0]
 801adc0:	f013 0207 	ands.w	r2, r3, #7
 801adc4:	4601      	mov	r1, r0
 801adc6:	d00b      	beq.n	801ade0 <__lo0bits+0x22>
 801adc8:	07da      	lsls	r2, r3, #31
 801adca:	d423      	bmi.n	801ae14 <__lo0bits+0x56>
 801adcc:	0798      	lsls	r0, r3, #30
 801adce:	bf49      	itett	mi
 801add0:	085b      	lsrmi	r3, r3, #1
 801add2:	089b      	lsrpl	r3, r3, #2
 801add4:	2001      	movmi	r0, #1
 801add6:	600b      	strmi	r3, [r1, #0]
 801add8:	bf5c      	itt	pl
 801adda:	600b      	strpl	r3, [r1, #0]
 801addc:	2002      	movpl	r0, #2
 801adde:	4770      	bx	lr
 801ade0:	b298      	uxth	r0, r3
 801ade2:	b9a8      	cbnz	r0, 801ae10 <__lo0bits+0x52>
 801ade4:	0c1b      	lsrs	r3, r3, #16
 801ade6:	2010      	movs	r0, #16
 801ade8:	f013 0fff 	tst.w	r3, #255	; 0xff
 801adec:	bf04      	itt	eq
 801adee:	0a1b      	lsreq	r3, r3, #8
 801adf0:	3008      	addeq	r0, #8
 801adf2:	071a      	lsls	r2, r3, #28
 801adf4:	bf04      	itt	eq
 801adf6:	091b      	lsreq	r3, r3, #4
 801adf8:	3004      	addeq	r0, #4
 801adfa:	079a      	lsls	r2, r3, #30
 801adfc:	bf04      	itt	eq
 801adfe:	089b      	lsreq	r3, r3, #2
 801ae00:	3002      	addeq	r0, #2
 801ae02:	07da      	lsls	r2, r3, #31
 801ae04:	d402      	bmi.n	801ae0c <__lo0bits+0x4e>
 801ae06:	085b      	lsrs	r3, r3, #1
 801ae08:	d006      	beq.n	801ae18 <__lo0bits+0x5a>
 801ae0a:	3001      	adds	r0, #1
 801ae0c:	600b      	str	r3, [r1, #0]
 801ae0e:	4770      	bx	lr
 801ae10:	4610      	mov	r0, r2
 801ae12:	e7e9      	b.n	801ade8 <__lo0bits+0x2a>
 801ae14:	2000      	movs	r0, #0
 801ae16:	4770      	bx	lr
 801ae18:	2020      	movs	r0, #32
 801ae1a:	4770      	bx	lr

0801ae1c <__i2b>:
 801ae1c:	b510      	push	{r4, lr}
 801ae1e:	460c      	mov	r4, r1
 801ae20:	2101      	movs	r1, #1
 801ae22:	f7ff fee9 	bl	801abf8 <_Balloc>
 801ae26:	2201      	movs	r2, #1
 801ae28:	6144      	str	r4, [r0, #20]
 801ae2a:	6102      	str	r2, [r0, #16]
 801ae2c:	bd10      	pop	{r4, pc}

0801ae2e <__multiply>:
 801ae2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae32:	4614      	mov	r4, r2
 801ae34:	690a      	ldr	r2, [r1, #16]
 801ae36:	6923      	ldr	r3, [r4, #16]
 801ae38:	429a      	cmp	r2, r3
 801ae3a:	bfb8      	it	lt
 801ae3c:	460b      	movlt	r3, r1
 801ae3e:	4688      	mov	r8, r1
 801ae40:	bfbc      	itt	lt
 801ae42:	46a0      	movlt	r8, r4
 801ae44:	461c      	movlt	r4, r3
 801ae46:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ae4a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ae4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ae52:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ae56:	eb07 0609 	add.w	r6, r7, r9
 801ae5a:	42b3      	cmp	r3, r6
 801ae5c:	bfb8      	it	lt
 801ae5e:	3101      	addlt	r1, #1
 801ae60:	f7ff feca 	bl	801abf8 <_Balloc>
 801ae64:	f100 0514 	add.w	r5, r0, #20
 801ae68:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801ae6c:	462b      	mov	r3, r5
 801ae6e:	2200      	movs	r2, #0
 801ae70:	4573      	cmp	r3, lr
 801ae72:	d316      	bcc.n	801aea2 <__multiply+0x74>
 801ae74:	f104 0214 	add.w	r2, r4, #20
 801ae78:	f108 0114 	add.w	r1, r8, #20
 801ae7c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801ae80:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ae84:	9300      	str	r3, [sp, #0]
 801ae86:	9b00      	ldr	r3, [sp, #0]
 801ae88:	9201      	str	r2, [sp, #4]
 801ae8a:	4293      	cmp	r3, r2
 801ae8c:	d80c      	bhi.n	801aea8 <__multiply+0x7a>
 801ae8e:	2e00      	cmp	r6, #0
 801ae90:	dd03      	ble.n	801ae9a <__multiply+0x6c>
 801ae92:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d05d      	beq.n	801af56 <__multiply+0x128>
 801ae9a:	6106      	str	r6, [r0, #16]
 801ae9c:	b003      	add	sp, #12
 801ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea2:	f843 2b04 	str.w	r2, [r3], #4
 801aea6:	e7e3      	b.n	801ae70 <__multiply+0x42>
 801aea8:	f8b2 b000 	ldrh.w	fp, [r2]
 801aeac:	f1bb 0f00 	cmp.w	fp, #0
 801aeb0:	d023      	beq.n	801aefa <__multiply+0xcc>
 801aeb2:	4689      	mov	r9, r1
 801aeb4:	46ac      	mov	ip, r5
 801aeb6:	f04f 0800 	mov.w	r8, #0
 801aeba:	f859 4b04 	ldr.w	r4, [r9], #4
 801aebe:	f8dc a000 	ldr.w	sl, [ip]
 801aec2:	b2a3      	uxth	r3, r4
 801aec4:	fa1f fa8a 	uxth.w	sl, sl
 801aec8:	fb0b a303 	mla	r3, fp, r3, sl
 801aecc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801aed0:	f8dc 4000 	ldr.w	r4, [ip]
 801aed4:	4443      	add	r3, r8
 801aed6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801aeda:	fb0b 840a 	mla	r4, fp, sl, r8
 801aede:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801aee2:	46e2      	mov	sl, ip
 801aee4:	b29b      	uxth	r3, r3
 801aee6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801aeea:	454f      	cmp	r7, r9
 801aeec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801aef0:	f84a 3b04 	str.w	r3, [sl], #4
 801aef4:	d82b      	bhi.n	801af4e <__multiply+0x120>
 801aef6:	f8cc 8004 	str.w	r8, [ip, #4]
 801aefa:	9b01      	ldr	r3, [sp, #4]
 801aefc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801af00:	3204      	adds	r2, #4
 801af02:	f1ba 0f00 	cmp.w	sl, #0
 801af06:	d020      	beq.n	801af4a <__multiply+0x11c>
 801af08:	682b      	ldr	r3, [r5, #0]
 801af0a:	4689      	mov	r9, r1
 801af0c:	46a8      	mov	r8, r5
 801af0e:	f04f 0b00 	mov.w	fp, #0
 801af12:	f8b9 c000 	ldrh.w	ip, [r9]
 801af16:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801af1a:	fb0a 440c 	mla	r4, sl, ip, r4
 801af1e:	445c      	add	r4, fp
 801af20:	46c4      	mov	ip, r8
 801af22:	b29b      	uxth	r3, r3
 801af24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801af28:	f84c 3b04 	str.w	r3, [ip], #4
 801af2c:	f859 3b04 	ldr.w	r3, [r9], #4
 801af30:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801af34:	0c1b      	lsrs	r3, r3, #16
 801af36:	fb0a b303 	mla	r3, sl, r3, fp
 801af3a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801af3e:	454f      	cmp	r7, r9
 801af40:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801af44:	d805      	bhi.n	801af52 <__multiply+0x124>
 801af46:	f8c8 3004 	str.w	r3, [r8, #4]
 801af4a:	3504      	adds	r5, #4
 801af4c:	e79b      	b.n	801ae86 <__multiply+0x58>
 801af4e:	46d4      	mov	ip, sl
 801af50:	e7b3      	b.n	801aeba <__multiply+0x8c>
 801af52:	46e0      	mov	r8, ip
 801af54:	e7dd      	b.n	801af12 <__multiply+0xe4>
 801af56:	3e01      	subs	r6, #1
 801af58:	e799      	b.n	801ae8e <__multiply+0x60>
	...

0801af5c <__pow5mult>:
 801af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af60:	4615      	mov	r5, r2
 801af62:	f012 0203 	ands.w	r2, r2, #3
 801af66:	4606      	mov	r6, r0
 801af68:	460f      	mov	r7, r1
 801af6a:	d007      	beq.n	801af7c <__pow5mult+0x20>
 801af6c:	3a01      	subs	r2, #1
 801af6e:	4c21      	ldr	r4, [pc, #132]	; (801aff4 <__pow5mult+0x98>)
 801af70:	2300      	movs	r3, #0
 801af72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801af76:	f7ff fe8a 	bl	801ac8e <__multadd>
 801af7a:	4607      	mov	r7, r0
 801af7c:	10ad      	asrs	r5, r5, #2
 801af7e:	d035      	beq.n	801afec <__pow5mult+0x90>
 801af80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801af82:	b93c      	cbnz	r4, 801af94 <__pow5mult+0x38>
 801af84:	2010      	movs	r0, #16
 801af86:	f7ff fe2f 	bl	801abe8 <malloc>
 801af8a:	6270      	str	r0, [r6, #36]	; 0x24
 801af8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801af90:	6004      	str	r4, [r0, #0]
 801af92:	60c4      	str	r4, [r0, #12]
 801af94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801af98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801af9c:	b94c      	cbnz	r4, 801afb2 <__pow5mult+0x56>
 801af9e:	f240 2171 	movw	r1, #625	; 0x271
 801afa2:	4630      	mov	r0, r6
 801afa4:	f7ff ff3a 	bl	801ae1c <__i2b>
 801afa8:	2300      	movs	r3, #0
 801afaa:	f8c8 0008 	str.w	r0, [r8, #8]
 801afae:	4604      	mov	r4, r0
 801afb0:	6003      	str	r3, [r0, #0]
 801afb2:	f04f 0800 	mov.w	r8, #0
 801afb6:	07eb      	lsls	r3, r5, #31
 801afb8:	d50a      	bpl.n	801afd0 <__pow5mult+0x74>
 801afba:	4639      	mov	r1, r7
 801afbc:	4622      	mov	r2, r4
 801afbe:	4630      	mov	r0, r6
 801afc0:	f7ff ff35 	bl	801ae2e <__multiply>
 801afc4:	4639      	mov	r1, r7
 801afc6:	4681      	mov	r9, r0
 801afc8:	4630      	mov	r0, r6
 801afca:	f7ff fe49 	bl	801ac60 <_Bfree>
 801afce:	464f      	mov	r7, r9
 801afd0:	106d      	asrs	r5, r5, #1
 801afd2:	d00b      	beq.n	801afec <__pow5mult+0x90>
 801afd4:	6820      	ldr	r0, [r4, #0]
 801afd6:	b938      	cbnz	r0, 801afe8 <__pow5mult+0x8c>
 801afd8:	4622      	mov	r2, r4
 801afda:	4621      	mov	r1, r4
 801afdc:	4630      	mov	r0, r6
 801afde:	f7ff ff26 	bl	801ae2e <__multiply>
 801afe2:	6020      	str	r0, [r4, #0]
 801afe4:	f8c0 8000 	str.w	r8, [r0]
 801afe8:	4604      	mov	r4, r0
 801afea:	e7e4      	b.n	801afb6 <__pow5mult+0x5a>
 801afec:	4638      	mov	r0, r7
 801afee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aff2:	bf00      	nop
 801aff4:	0801fb88 	.word	0x0801fb88

0801aff8 <__lshift>:
 801aff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801affc:	460c      	mov	r4, r1
 801affe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b002:	6923      	ldr	r3, [r4, #16]
 801b004:	6849      	ldr	r1, [r1, #4]
 801b006:	eb0a 0903 	add.w	r9, sl, r3
 801b00a:	68a3      	ldr	r3, [r4, #8]
 801b00c:	4607      	mov	r7, r0
 801b00e:	4616      	mov	r6, r2
 801b010:	f109 0501 	add.w	r5, r9, #1
 801b014:	42ab      	cmp	r3, r5
 801b016:	db32      	blt.n	801b07e <__lshift+0x86>
 801b018:	4638      	mov	r0, r7
 801b01a:	f7ff fded 	bl	801abf8 <_Balloc>
 801b01e:	2300      	movs	r3, #0
 801b020:	4680      	mov	r8, r0
 801b022:	f100 0114 	add.w	r1, r0, #20
 801b026:	461a      	mov	r2, r3
 801b028:	4553      	cmp	r3, sl
 801b02a:	db2b      	blt.n	801b084 <__lshift+0x8c>
 801b02c:	6920      	ldr	r0, [r4, #16]
 801b02e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b032:	f104 0314 	add.w	r3, r4, #20
 801b036:	f016 021f 	ands.w	r2, r6, #31
 801b03a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b03e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b042:	d025      	beq.n	801b090 <__lshift+0x98>
 801b044:	f1c2 0e20 	rsb	lr, r2, #32
 801b048:	2000      	movs	r0, #0
 801b04a:	681e      	ldr	r6, [r3, #0]
 801b04c:	468a      	mov	sl, r1
 801b04e:	4096      	lsls	r6, r2
 801b050:	4330      	orrs	r0, r6
 801b052:	f84a 0b04 	str.w	r0, [sl], #4
 801b056:	f853 0b04 	ldr.w	r0, [r3], #4
 801b05a:	459c      	cmp	ip, r3
 801b05c:	fa20 f00e 	lsr.w	r0, r0, lr
 801b060:	d814      	bhi.n	801b08c <__lshift+0x94>
 801b062:	6048      	str	r0, [r1, #4]
 801b064:	b108      	cbz	r0, 801b06a <__lshift+0x72>
 801b066:	f109 0502 	add.w	r5, r9, #2
 801b06a:	3d01      	subs	r5, #1
 801b06c:	4638      	mov	r0, r7
 801b06e:	f8c8 5010 	str.w	r5, [r8, #16]
 801b072:	4621      	mov	r1, r4
 801b074:	f7ff fdf4 	bl	801ac60 <_Bfree>
 801b078:	4640      	mov	r0, r8
 801b07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b07e:	3101      	adds	r1, #1
 801b080:	005b      	lsls	r3, r3, #1
 801b082:	e7c7      	b.n	801b014 <__lshift+0x1c>
 801b084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801b088:	3301      	adds	r3, #1
 801b08a:	e7cd      	b.n	801b028 <__lshift+0x30>
 801b08c:	4651      	mov	r1, sl
 801b08e:	e7dc      	b.n	801b04a <__lshift+0x52>
 801b090:	3904      	subs	r1, #4
 801b092:	f853 2b04 	ldr.w	r2, [r3], #4
 801b096:	f841 2f04 	str.w	r2, [r1, #4]!
 801b09a:	459c      	cmp	ip, r3
 801b09c:	d8f9      	bhi.n	801b092 <__lshift+0x9a>
 801b09e:	e7e4      	b.n	801b06a <__lshift+0x72>

0801b0a0 <__mcmp>:
 801b0a0:	6903      	ldr	r3, [r0, #16]
 801b0a2:	690a      	ldr	r2, [r1, #16]
 801b0a4:	1a9b      	subs	r3, r3, r2
 801b0a6:	b530      	push	{r4, r5, lr}
 801b0a8:	d10c      	bne.n	801b0c4 <__mcmp+0x24>
 801b0aa:	0092      	lsls	r2, r2, #2
 801b0ac:	3014      	adds	r0, #20
 801b0ae:	3114      	adds	r1, #20
 801b0b0:	1884      	adds	r4, r0, r2
 801b0b2:	4411      	add	r1, r2
 801b0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b0bc:	4295      	cmp	r5, r2
 801b0be:	d003      	beq.n	801b0c8 <__mcmp+0x28>
 801b0c0:	d305      	bcc.n	801b0ce <__mcmp+0x2e>
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	bd30      	pop	{r4, r5, pc}
 801b0c8:	42a0      	cmp	r0, r4
 801b0ca:	d3f3      	bcc.n	801b0b4 <__mcmp+0x14>
 801b0cc:	e7fa      	b.n	801b0c4 <__mcmp+0x24>
 801b0ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0d2:	e7f7      	b.n	801b0c4 <__mcmp+0x24>

0801b0d4 <__mdiff>:
 801b0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0d8:	460d      	mov	r5, r1
 801b0da:	4607      	mov	r7, r0
 801b0dc:	4611      	mov	r1, r2
 801b0de:	4628      	mov	r0, r5
 801b0e0:	4614      	mov	r4, r2
 801b0e2:	f7ff ffdd 	bl	801b0a0 <__mcmp>
 801b0e6:	1e06      	subs	r6, r0, #0
 801b0e8:	d108      	bne.n	801b0fc <__mdiff+0x28>
 801b0ea:	4631      	mov	r1, r6
 801b0ec:	4638      	mov	r0, r7
 801b0ee:	f7ff fd83 	bl	801abf8 <_Balloc>
 801b0f2:	2301      	movs	r3, #1
 801b0f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801b0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0fc:	bfa4      	itt	ge
 801b0fe:	4623      	movge	r3, r4
 801b100:	462c      	movge	r4, r5
 801b102:	4638      	mov	r0, r7
 801b104:	6861      	ldr	r1, [r4, #4]
 801b106:	bfa6      	itte	ge
 801b108:	461d      	movge	r5, r3
 801b10a:	2600      	movge	r6, #0
 801b10c:	2601      	movlt	r6, #1
 801b10e:	f7ff fd73 	bl	801abf8 <_Balloc>
 801b112:	692b      	ldr	r3, [r5, #16]
 801b114:	60c6      	str	r6, [r0, #12]
 801b116:	6926      	ldr	r6, [r4, #16]
 801b118:	f105 0914 	add.w	r9, r5, #20
 801b11c:	f104 0214 	add.w	r2, r4, #20
 801b120:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801b124:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801b128:	f100 0514 	add.w	r5, r0, #20
 801b12c:	f04f 0e00 	mov.w	lr, #0
 801b130:	f852 ab04 	ldr.w	sl, [r2], #4
 801b134:	f859 4b04 	ldr.w	r4, [r9], #4
 801b138:	fa1e f18a 	uxtah	r1, lr, sl
 801b13c:	b2a3      	uxth	r3, r4
 801b13e:	1ac9      	subs	r1, r1, r3
 801b140:	0c23      	lsrs	r3, r4, #16
 801b142:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801b146:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801b14a:	b289      	uxth	r1, r1
 801b14c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801b150:	45c8      	cmp	r8, r9
 801b152:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801b156:	4694      	mov	ip, r2
 801b158:	f845 3b04 	str.w	r3, [r5], #4
 801b15c:	d8e8      	bhi.n	801b130 <__mdiff+0x5c>
 801b15e:	45bc      	cmp	ip, r7
 801b160:	d304      	bcc.n	801b16c <__mdiff+0x98>
 801b162:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801b166:	b183      	cbz	r3, 801b18a <__mdiff+0xb6>
 801b168:	6106      	str	r6, [r0, #16]
 801b16a:	e7c5      	b.n	801b0f8 <__mdiff+0x24>
 801b16c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b170:	fa1e f381 	uxtah	r3, lr, r1
 801b174:	141a      	asrs	r2, r3, #16
 801b176:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b17a:	b29b      	uxth	r3, r3
 801b17c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b180:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b184:	f845 3b04 	str.w	r3, [r5], #4
 801b188:	e7e9      	b.n	801b15e <__mdiff+0x8a>
 801b18a:	3e01      	subs	r6, #1
 801b18c:	e7e9      	b.n	801b162 <__mdiff+0x8e>
	...

0801b190 <__ulp>:
 801b190:	4b12      	ldr	r3, [pc, #72]	; (801b1dc <__ulp+0x4c>)
 801b192:	ee10 2a90 	vmov	r2, s1
 801b196:	401a      	ands	r2, r3
 801b198:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	dd04      	ble.n	801b1aa <__ulp+0x1a>
 801b1a0:	2000      	movs	r0, #0
 801b1a2:	4619      	mov	r1, r3
 801b1a4:	ec41 0b10 	vmov	d0, r0, r1
 801b1a8:	4770      	bx	lr
 801b1aa:	425b      	negs	r3, r3
 801b1ac:	151b      	asrs	r3, r3, #20
 801b1ae:	2b13      	cmp	r3, #19
 801b1b0:	f04f 0000 	mov.w	r0, #0
 801b1b4:	f04f 0100 	mov.w	r1, #0
 801b1b8:	dc04      	bgt.n	801b1c4 <__ulp+0x34>
 801b1ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801b1be:	fa42 f103 	asr.w	r1, r2, r3
 801b1c2:	e7ef      	b.n	801b1a4 <__ulp+0x14>
 801b1c4:	3b14      	subs	r3, #20
 801b1c6:	2b1e      	cmp	r3, #30
 801b1c8:	f04f 0201 	mov.w	r2, #1
 801b1cc:	bfda      	itte	le
 801b1ce:	f1c3 031f 	rsble	r3, r3, #31
 801b1d2:	fa02 f303 	lslle.w	r3, r2, r3
 801b1d6:	4613      	movgt	r3, r2
 801b1d8:	4618      	mov	r0, r3
 801b1da:	e7e3      	b.n	801b1a4 <__ulp+0x14>
 801b1dc:	7ff00000 	.word	0x7ff00000

0801b1e0 <__b2d>:
 801b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1e2:	6905      	ldr	r5, [r0, #16]
 801b1e4:	f100 0714 	add.w	r7, r0, #20
 801b1e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801b1ec:	1f2e      	subs	r6, r5, #4
 801b1ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801b1f2:	4620      	mov	r0, r4
 801b1f4:	f7ff fdc4 	bl	801ad80 <__hi0bits>
 801b1f8:	f1c0 0320 	rsb	r3, r0, #32
 801b1fc:	280a      	cmp	r0, #10
 801b1fe:	600b      	str	r3, [r1, #0]
 801b200:	f8df c074 	ldr.w	ip, [pc, #116]	; 801b278 <__b2d+0x98>
 801b204:	dc14      	bgt.n	801b230 <__b2d+0x50>
 801b206:	f1c0 0e0b 	rsb	lr, r0, #11
 801b20a:	fa24 f10e 	lsr.w	r1, r4, lr
 801b20e:	42b7      	cmp	r7, r6
 801b210:	ea41 030c 	orr.w	r3, r1, ip
 801b214:	bf34      	ite	cc
 801b216:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b21a:	2100      	movcs	r1, #0
 801b21c:	3015      	adds	r0, #21
 801b21e:	fa04 f000 	lsl.w	r0, r4, r0
 801b222:	fa21 f10e 	lsr.w	r1, r1, lr
 801b226:	ea40 0201 	orr.w	r2, r0, r1
 801b22a:	ec43 2b10 	vmov	d0, r2, r3
 801b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b230:	42b7      	cmp	r7, r6
 801b232:	bf3a      	itte	cc
 801b234:	f1a5 0608 	subcc.w	r6, r5, #8
 801b238:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801b23c:	2100      	movcs	r1, #0
 801b23e:	380b      	subs	r0, #11
 801b240:	d015      	beq.n	801b26e <__b2d+0x8e>
 801b242:	4084      	lsls	r4, r0
 801b244:	f1c0 0520 	rsb	r5, r0, #32
 801b248:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801b24c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801b250:	42be      	cmp	r6, r7
 801b252:	fa21 fc05 	lsr.w	ip, r1, r5
 801b256:	ea44 030c 	orr.w	r3, r4, ip
 801b25a:	bf8c      	ite	hi
 801b25c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801b260:	2400      	movls	r4, #0
 801b262:	fa01 f000 	lsl.w	r0, r1, r0
 801b266:	40ec      	lsrs	r4, r5
 801b268:	ea40 0204 	orr.w	r2, r0, r4
 801b26c:	e7dd      	b.n	801b22a <__b2d+0x4a>
 801b26e:	ea44 030c 	orr.w	r3, r4, ip
 801b272:	460a      	mov	r2, r1
 801b274:	e7d9      	b.n	801b22a <__b2d+0x4a>
 801b276:	bf00      	nop
 801b278:	3ff00000 	.word	0x3ff00000

0801b27c <__d2b>:
 801b27c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b280:	460e      	mov	r6, r1
 801b282:	2101      	movs	r1, #1
 801b284:	ec59 8b10 	vmov	r8, r9, d0
 801b288:	4615      	mov	r5, r2
 801b28a:	f7ff fcb5 	bl	801abf8 <_Balloc>
 801b28e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801b292:	4607      	mov	r7, r0
 801b294:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b298:	bb34      	cbnz	r4, 801b2e8 <__d2b+0x6c>
 801b29a:	9301      	str	r3, [sp, #4]
 801b29c:	f1b8 0300 	subs.w	r3, r8, #0
 801b2a0:	d027      	beq.n	801b2f2 <__d2b+0x76>
 801b2a2:	a802      	add	r0, sp, #8
 801b2a4:	f840 3d08 	str.w	r3, [r0, #-8]!
 801b2a8:	f7ff fd89 	bl	801adbe <__lo0bits>
 801b2ac:	9900      	ldr	r1, [sp, #0]
 801b2ae:	b1f0      	cbz	r0, 801b2ee <__d2b+0x72>
 801b2b0:	9a01      	ldr	r2, [sp, #4]
 801b2b2:	f1c0 0320 	rsb	r3, r0, #32
 801b2b6:	fa02 f303 	lsl.w	r3, r2, r3
 801b2ba:	430b      	orrs	r3, r1
 801b2bc:	40c2      	lsrs	r2, r0
 801b2be:	617b      	str	r3, [r7, #20]
 801b2c0:	9201      	str	r2, [sp, #4]
 801b2c2:	9b01      	ldr	r3, [sp, #4]
 801b2c4:	61bb      	str	r3, [r7, #24]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	bf14      	ite	ne
 801b2ca:	2102      	movne	r1, #2
 801b2cc:	2101      	moveq	r1, #1
 801b2ce:	6139      	str	r1, [r7, #16]
 801b2d0:	b1c4      	cbz	r4, 801b304 <__d2b+0x88>
 801b2d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801b2d6:	4404      	add	r4, r0
 801b2d8:	6034      	str	r4, [r6, #0]
 801b2da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b2de:	6028      	str	r0, [r5, #0]
 801b2e0:	4638      	mov	r0, r7
 801b2e2:	b003      	add	sp, #12
 801b2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b2ec:	e7d5      	b.n	801b29a <__d2b+0x1e>
 801b2ee:	6179      	str	r1, [r7, #20]
 801b2f0:	e7e7      	b.n	801b2c2 <__d2b+0x46>
 801b2f2:	a801      	add	r0, sp, #4
 801b2f4:	f7ff fd63 	bl	801adbe <__lo0bits>
 801b2f8:	9b01      	ldr	r3, [sp, #4]
 801b2fa:	617b      	str	r3, [r7, #20]
 801b2fc:	2101      	movs	r1, #1
 801b2fe:	6139      	str	r1, [r7, #16]
 801b300:	3020      	adds	r0, #32
 801b302:	e7e5      	b.n	801b2d0 <__d2b+0x54>
 801b304:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801b308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b30c:	6030      	str	r0, [r6, #0]
 801b30e:	6918      	ldr	r0, [r3, #16]
 801b310:	f7ff fd36 	bl	801ad80 <__hi0bits>
 801b314:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801b318:	e7e1      	b.n	801b2de <__d2b+0x62>

0801b31a <__ratio>:
 801b31a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b31e:	4688      	mov	r8, r1
 801b320:	4669      	mov	r1, sp
 801b322:	4681      	mov	r9, r0
 801b324:	f7ff ff5c 	bl	801b1e0 <__b2d>
 801b328:	a901      	add	r1, sp, #4
 801b32a:	4640      	mov	r0, r8
 801b32c:	ec57 6b10 	vmov	r6, r7, d0
 801b330:	ee10 4a10 	vmov	r4, s0
 801b334:	f7ff ff54 	bl	801b1e0 <__b2d>
 801b338:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b33c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b340:	eba3 0c02 	sub.w	ip, r3, r2
 801b344:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b348:	1a9b      	subs	r3, r3, r2
 801b34a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b34e:	ec51 0b10 	vmov	r0, r1, d0
 801b352:	2b00      	cmp	r3, #0
 801b354:	ee10 aa10 	vmov	sl, s0
 801b358:	bfce      	itee	gt
 801b35a:	463a      	movgt	r2, r7
 801b35c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b360:	460a      	movle	r2, r1
 801b362:	463d      	mov	r5, r7
 801b364:	468b      	mov	fp, r1
 801b366:	bfcc      	ite	gt
 801b368:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801b36c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b370:	ec45 4b17 	vmov	d7, r4, r5
 801b374:	ec4b ab16 	vmov	d6, sl, fp
 801b378:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801b37c:	b003      	add	sp, #12
 801b37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b382 <__copybits>:
 801b382:	3901      	subs	r1, #1
 801b384:	b510      	push	{r4, lr}
 801b386:	1149      	asrs	r1, r1, #5
 801b388:	6914      	ldr	r4, [r2, #16]
 801b38a:	3101      	adds	r1, #1
 801b38c:	f102 0314 	add.w	r3, r2, #20
 801b390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b394:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b398:	42a3      	cmp	r3, r4
 801b39a:	4602      	mov	r2, r0
 801b39c:	d303      	bcc.n	801b3a6 <__copybits+0x24>
 801b39e:	2300      	movs	r3, #0
 801b3a0:	428a      	cmp	r2, r1
 801b3a2:	d305      	bcc.n	801b3b0 <__copybits+0x2e>
 801b3a4:	bd10      	pop	{r4, pc}
 801b3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3aa:	f840 2b04 	str.w	r2, [r0], #4
 801b3ae:	e7f3      	b.n	801b398 <__copybits+0x16>
 801b3b0:	f842 3b04 	str.w	r3, [r2], #4
 801b3b4:	e7f4      	b.n	801b3a0 <__copybits+0x1e>

0801b3b6 <__any_on>:
 801b3b6:	f100 0214 	add.w	r2, r0, #20
 801b3ba:	6900      	ldr	r0, [r0, #16]
 801b3bc:	114b      	asrs	r3, r1, #5
 801b3be:	4298      	cmp	r0, r3
 801b3c0:	b510      	push	{r4, lr}
 801b3c2:	db11      	blt.n	801b3e8 <__any_on+0x32>
 801b3c4:	dd0a      	ble.n	801b3dc <__any_on+0x26>
 801b3c6:	f011 011f 	ands.w	r1, r1, #31
 801b3ca:	d007      	beq.n	801b3dc <__any_on+0x26>
 801b3cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b3d0:	fa24 f001 	lsr.w	r0, r4, r1
 801b3d4:	fa00 f101 	lsl.w	r1, r0, r1
 801b3d8:	428c      	cmp	r4, r1
 801b3da:	d10b      	bne.n	801b3f4 <__any_on+0x3e>
 801b3dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	d803      	bhi.n	801b3ec <__any_on+0x36>
 801b3e4:	2000      	movs	r0, #0
 801b3e6:	bd10      	pop	{r4, pc}
 801b3e8:	4603      	mov	r3, r0
 801b3ea:	e7f7      	b.n	801b3dc <__any_on+0x26>
 801b3ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b3f0:	2900      	cmp	r1, #0
 801b3f2:	d0f5      	beq.n	801b3e0 <__any_on+0x2a>
 801b3f4:	2001      	movs	r0, #1
 801b3f6:	e7f6      	b.n	801b3e6 <__any_on+0x30>

0801b3f8 <_calloc_r>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	fb02 f401 	mul.w	r4, r2, r1
 801b3fe:	4621      	mov	r1, r4
 801b400:	f000 f856 	bl	801b4b0 <_malloc_r>
 801b404:	4605      	mov	r5, r0
 801b406:	b118      	cbz	r0, 801b410 <_calloc_r+0x18>
 801b408:	4622      	mov	r2, r4
 801b40a:	2100      	movs	r1, #0
 801b40c:	f7fc fce4 	bl	8017dd8 <memset>
 801b410:	4628      	mov	r0, r5
 801b412:	bd38      	pop	{r3, r4, r5, pc}

0801b414 <_free_r>:
 801b414:	b538      	push	{r3, r4, r5, lr}
 801b416:	4605      	mov	r5, r0
 801b418:	2900      	cmp	r1, #0
 801b41a:	d045      	beq.n	801b4a8 <_free_r+0x94>
 801b41c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b420:	1f0c      	subs	r4, r1, #4
 801b422:	2b00      	cmp	r3, #0
 801b424:	bfb8      	it	lt
 801b426:	18e4      	addlt	r4, r4, r3
 801b428:	f000 fd8a 	bl	801bf40 <__malloc_lock>
 801b42c:	4a1f      	ldr	r2, [pc, #124]	; (801b4ac <_free_r+0x98>)
 801b42e:	6813      	ldr	r3, [r2, #0]
 801b430:	4610      	mov	r0, r2
 801b432:	b933      	cbnz	r3, 801b442 <_free_r+0x2e>
 801b434:	6063      	str	r3, [r4, #4]
 801b436:	6014      	str	r4, [r2, #0]
 801b438:	4628      	mov	r0, r5
 801b43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b43e:	f000 bd80 	b.w	801bf42 <__malloc_unlock>
 801b442:	42a3      	cmp	r3, r4
 801b444:	d90c      	bls.n	801b460 <_free_r+0x4c>
 801b446:	6821      	ldr	r1, [r4, #0]
 801b448:	1862      	adds	r2, r4, r1
 801b44a:	4293      	cmp	r3, r2
 801b44c:	bf04      	itt	eq
 801b44e:	681a      	ldreq	r2, [r3, #0]
 801b450:	685b      	ldreq	r3, [r3, #4]
 801b452:	6063      	str	r3, [r4, #4]
 801b454:	bf04      	itt	eq
 801b456:	1852      	addeq	r2, r2, r1
 801b458:	6022      	streq	r2, [r4, #0]
 801b45a:	6004      	str	r4, [r0, #0]
 801b45c:	e7ec      	b.n	801b438 <_free_r+0x24>
 801b45e:	4613      	mov	r3, r2
 801b460:	685a      	ldr	r2, [r3, #4]
 801b462:	b10a      	cbz	r2, 801b468 <_free_r+0x54>
 801b464:	42a2      	cmp	r2, r4
 801b466:	d9fa      	bls.n	801b45e <_free_r+0x4a>
 801b468:	6819      	ldr	r1, [r3, #0]
 801b46a:	1858      	adds	r0, r3, r1
 801b46c:	42a0      	cmp	r0, r4
 801b46e:	d10b      	bne.n	801b488 <_free_r+0x74>
 801b470:	6820      	ldr	r0, [r4, #0]
 801b472:	4401      	add	r1, r0
 801b474:	1858      	adds	r0, r3, r1
 801b476:	4282      	cmp	r2, r0
 801b478:	6019      	str	r1, [r3, #0]
 801b47a:	d1dd      	bne.n	801b438 <_free_r+0x24>
 801b47c:	6810      	ldr	r0, [r2, #0]
 801b47e:	6852      	ldr	r2, [r2, #4]
 801b480:	605a      	str	r2, [r3, #4]
 801b482:	4401      	add	r1, r0
 801b484:	6019      	str	r1, [r3, #0]
 801b486:	e7d7      	b.n	801b438 <_free_r+0x24>
 801b488:	d902      	bls.n	801b490 <_free_r+0x7c>
 801b48a:	230c      	movs	r3, #12
 801b48c:	602b      	str	r3, [r5, #0]
 801b48e:	e7d3      	b.n	801b438 <_free_r+0x24>
 801b490:	6820      	ldr	r0, [r4, #0]
 801b492:	1821      	adds	r1, r4, r0
 801b494:	428a      	cmp	r2, r1
 801b496:	bf04      	itt	eq
 801b498:	6811      	ldreq	r1, [r2, #0]
 801b49a:	6852      	ldreq	r2, [r2, #4]
 801b49c:	6062      	str	r2, [r4, #4]
 801b49e:	bf04      	itt	eq
 801b4a0:	1809      	addeq	r1, r1, r0
 801b4a2:	6021      	streq	r1, [r4, #0]
 801b4a4:	605c      	str	r4, [r3, #4]
 801b4a6:	e7c7      	b.n	801b438 <_free_r+0x24>
 801b4a8:	bd38      	pop	{r3, r4, r5, pc}
 801b4aa:	bf00      	nop
 801b4ac:	2000584c 	.word	0x2000584c

0801b4b0 <_malloc_r>:
 801b4b0:	b570      	push	{r4, r5, r6, lr}
 801b4b2:	1ccd      	adds	r5, r1, #3
 801b4b4:	f025 0503 	bic.w	r5, r5, #3
 801b4b8:	3508      	adds	r5, #8
 801b4ba:	2d0c      	cmp	r5, #12
 801b4bc:	bf38      	it	cc
 801b4be:	250c      	movcc	r5, #12
 801b4c0:	2d00      	cmp	r5, #0
 801b4c2:	4606      	mov	r6, r0
 801b4c4:	db01      	blt.n	801b4ca <_malloc_r+0x1a>
 801b4c6:	42a9      	cmp	r1, r5
 801b4c8:	d903      	bls.n	801b4d2 <_malloc_r+0x22>
 801b4ca:	230c      	movs	r3, #12
 801b4cc:	6033      	str	r3, [r6, #0]
 801b4ce:	2000      	movs	r0, #0
 801b4d0:	bd70      	pop	{r4, r5, r6, pc}
 801b4d2:	f000 fd35 	bl	801bf40 <__malloc_lock>
 801b4d6:	4a21      	ldr	r2, [pc, #132]	; (801b55c <_malloc_r+0xac>)
 801b4d8:	6814      	ldr	r4, [r2, #0]
 801b4da:	4621      	mov	r1, r4
 801b4dc:	b991      	cbnz	r1, 801b504 <_malloc_r+0x54>
 801b4de:	4c20      	ldr	r4, [pc, #128]	; (801b560 <_malloc_r+0xb0>)
 801b4e0:	6823      	ldr	r3, [r4, #0]
 801b4e2:	b91b      	cbnz	r3, 801b4ec <_malloc_r+0x3c>
 801b4e4:	4630      	mov	r0, r6
 801b4e6:	f000 facf 	bl	801ba88 <_sbrk_r>
 801b4ea:	6020      	str	r0, [r4, #0]
 801b4ec:	4629      	mov	r1, r5
 801b4ee:	4630      	mov	r0, r6
 801b4f0:	f000 faca 	bl	801ba88 <_sbrk_r>
 801b4f4:	1c43      	adds	r3, r0, #1
 801b4f6:	d124      	bne.n	801b542 <_malloc_r+0x92>
 801b4f8:	230c      	movs	r3, #12
 801b4fa:	6033      	str	r3, [r6, #0]
 801b4fc:	4630      	mov	r0, r6
 801b4fe:	f000 fd20 	bl	801bf42 <__malloc_unlock>
 801b502:	e7e4      	b.n	801b4ce <_malloc_r+0x1e>
 801b504:	680b      	ldr	r3, [r1, #0]
 801b506:	1b5b      	subs	r3, r3, r5
 801b508:	d418      	bmi.n	801b53c <_malloc_r+0x8c>
 801b50a:	2b0b      	cmp	r3, #11
 801b50c:	d90f      	bls.n	801b52e <_malloc_r+0x7e>
 801b50e:	600b      	str	r3, [r1, #0]
 801b510:	50cd      	str	r5, [r1, r3]
 801b512:	18cc      	adds	r4, r1, r3
 801b514:	4630      	mov	r0, r6
 801b516:	f000 fd14 	bl	801bf42 <__malloc_unlock>
 801b51a:	f104 000b 	add.w	r0, r4, #11
 801b51e:	1d23      	adds	r3, r4, #4
 801b520:	f020 0007 	bic.w	r0, r0, #7
 801b524:	1ac3      	subs	r3, r0, r3
 801b526:	d0d3      	beq.n	801b4d0 <_malloc_r+0x20>
 801b528:	425a      	negs	r2, r3
 801b52a:	50e2      	str	r2, [r4, r3]
 801b52c:	e7d0      	b.n	801b4d0 <_malloc_r+0x20>
 801b52e:	428c      	cmp	r4, r1
 801b530:	684b      	ldr	r3, [r1, #4]
 801b532:	bf16      	itet	ne
 801b534:	6063      	strne	r3, [r4, #4]
 801b536:	6013      	streq	r3, [r2, #0]
 801b538:	460c      	movne	r4, r1
 801b53a:	e7eb      	b.n	801b514 <_malloc_r+0x64>
 801b53c:	460c      	mov	r4, r1
 801b53e:	6849      	ldr	r1, [r1, #4]
 801b540:	e7cc      	b.n	801b4dc <_malloc_r+0x2c>
 801b542:	1cc4      	adds	r4, r0, #3
 801b544:	f024 0403 	bic.w	r4, r4, #3
 801b548:	42a0      	cmp	r0, r4
 801b54a:	d005      	beq.n	801b558 <_malloc_r+0xa8>
 801b54c:	1a21      	subs	r1, r4, r0
 801b54e:	4630      	mov	r0, r6
 801b550:	f000 fa9a 	bl	801ba88 <_sbrk_r>
 801b554:	3001      	adds	r0, #1
 801b556:	d0cf      	beq.n	801b4f8 <_malloc_r+0x48>
 801b558:	6025      	str	r5, [r4, #0]
 801b55a:	e7db      	b.n	801b514 <_malloc_r+0x64>
 801b55c:	2000584c 	.word	0x2000584c
 801b560:	20005850 	.word	0x20005850

0801b564 <__ssputs_r>:
 801b564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b568:	688e      	ldr	r6, [r1, #8]
 801b56a:	429e      	cmp	r6, r3
 801b56c:	4682      	mov	sl, r0
 801b56e:	460c      	mov	r4, r1
 801b570:	4690      	mov	r8, r2
 801b572:	4699      	mov	r9, r3
 801b574:	d837      	bhi.n	801b5e6 <__ssputs_r+0x82>
 801b576:	898a      	ldrh	r2, [r1, #12]
 801b578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b57c:	d031      	beq.n	801b5e2 <__ssputs_r+0x7e>
 801b57e:	6825      	ldr	r5, [r4, #0]
 801b580:	6909      	ldr	r1, [r1, #16]
 801b582:	1a6f      	subs	r7, r5, r1
 801b584:	6965      	ldr	r5, [r4, #20]
 801b586:	2302      	movs	r3, #2
 801b588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b58c:	fb95 f5f3 	sdiv	r5, r5, r3
 801b590:	f109 0301 	add.w	r3, r9, #1
 801b594:	443b      	add	r3, r7
 801b596:	429d      	cmp	r5, r3
 801b598:	bf38      	it	cc
 801b59a:	461d      	movcc	r5, r3
 801b59c:	0553      	lsls	r3, r2, #21
 801b59e:	d530      	bpl.n	801b602 <__ssputs_r+0x9e>
 801b5a0:	4629      	mov	r1, r5
 801b5a2:	f7ff ff85 	bl	801b4b0 <_malloc_r>
 801b5a6:	4606      	mov	r6, r0
 801b5a8:	b950      	cbnz	r0, 801b5c0 <__ssputs_r+0x5c>
 801b5aa:	230c      	movs	r3, #12
 801b5ac:	f8ca 3000 	str.w	r3, [sl]
 801b5b0:	89a3      	ldrh	r3, [r4, #12]
 801b5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5b6:	81a3      	strh	r3, [r4, #12]
 801b5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5c0:	463a      	mov	r2, r7
 801b5c2:	6921      	ldr	r1, [r4, #16]
 801b5c4:	f7fc fbe4 	bl	8017d90 <memcpy>
 801b5c8:	89a3      	ldrh	r3, [r4, #12]
 801b5ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b5ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5d2:	81a3      	strh	r3, [r4, #12]
 801b5d4:	6126      	str	r6, [r4, #16]
 801b5d6:	6165      	str	r5, [r4, #20]
 801b5d8:	443e      	add	r6, r7
 801b5da:	1bed      	subs	r5, r5, r7
 801b5dc:	6026      	str	r6, [r4, #0]
 801b5de:	60a5      	str	r5, [r4, #8]
 801b5e0:	464e      	mov	r6, r9
 801b5e2:	454e      	cmp	r6, r9
 801b5e4:	d900      	bls.n	801b5e8 <__ssputs_r+0x84>
 801b5e6:	464e      	mov	r6, r9
 801b5e8:	4632      	mov	r2, r6
 801b5ea:	4641      	mov	r1, r8
 801b5ec:	6820      	ldr	r0, [r4, #0]
 801b5ee:	f7fc fbda 	bl	8017da6 <memmove>
 801b5f2:	68a3      	ldr	r3, [r4, #8]
 801b5f4:	1b9b      	subs	r3, r3, r6
 801b5f6:	60a3      	str	r3, [r4, #8]
 801b5f8:	6823      	ldr	r3, [r4, #0]
 801b5fa:	441e      	add	r6, r3
 801b5fc:	6026      	str	r6, [r4, #0]
 801b5fe:	2000      	movs	r0, #0
 801b600:	e7dc      	b.n	801b5bc <__ssputs_r+0x58>
 801b602:	462a      	mov	r2, r5
 801b604:	f000 fc9e 	bl	801bf44 <_realloc_r>
 801b608:	4606      	mov	r6, r0
 801b60a:	2800      	cmp	r0, #0
 801b60c:	d1e2      	bne.n	801b5d4 <__ssputs_r+0x70>
 801b60e:	6921      	ldr	r1, [r4, #16]
 801b610:	4650      	mov	r0, sl
 801b612:	f7ff feff 	bl	801b414 <_free_r>
 801b616:	e7c8      	b.n	801b5aa <__ssputs_r+0x46>

0801b618 <_svfiprintf_r>:
 801b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b61c:	461d      	mov	r5, r3
 801b61e:	898b      	ldrh	r3, [r1, #12]
 801b620:	061f      	lsls	r7, r3, #24
 801b622:	b09d      	sub	sp, #116	; 0x74
 801b624:	4680      	mov	r8, r0
 801b626:	460c      	mov	r4, r1
 801b628:	4616      	mov	r6, r2
 801b62a:	d50f      	bpl.n	801b64c <_svfiprintf_r+0x34>
 801b62c:	690b      	ldr	r3, [r1, #16]
 801b62e:	b96b      	cbnz	r3, 801b64c <_svfiprintf_r+0x34>
 801b630:	2140      	movs	r1, #64	; 0x40
 801b632:	f7ff ff3d 	bl	801b4b0 <_malloc_r>
 801b636:	6020      	str	r0, [r4, #0]
 801b638:	6120      	str	r0, [r4, #16]
 801b63a:	b928      	cbnz	r0, 801b648 <_svfiprintf_r+0x30>
 801b63c:	230c      	movs	r3, #12
 801b63e:	f8c8 3000 	str.w	r3, [r8]
 801b642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b646:	e0c8      	b.n	801b7da <_svfiprintf_r+0x1c2>
 801b648:	2340      	movs	r3, #64	; 0x40
 801b64a:	6163      	str	r3, [r4, #20]
 801b64c:	2300      	movs	r3, #0
 801b64e:	9309      	str	r3, [sp, #36]	; 0x24
 801b650:	2320      	movs	r3, #32
 801b652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b656:	2330      	movs	r3, #48	; 0x30
 801b658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b65c:	9503      	str	r5, [sp, #12]
 801b65e:	f04f 0b01 	mov.w	fp, #1
 801b662:	4637      	mov	r7, r6
 801b664:	463d      	mov	r5, r7
 801b666:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b66a:	b10b      	cbz	r3, 801b670 <_svfiprintf_r+0x58>
 801b66c:	2b25      	cmp	r3, #37	; 0x25
 801b66e:	d13e      	bne.n	801b6ee <_svfiprintf_r+0xd6>
 801b670:	ebb7 0a06 	subs.w	sl, r7, r6
 801b674:	d00b      	beq.n	801b68e <_svfiprintf_r+0x76>
 801b676:	4653      	mov	r3, sl
 801b678:	4632      	mov	r2, r6
 801b67a:	4621      	mov	r1, r4
 801b67c:	4640      	mov	r0, r8
 801b67e:	f7ff ff71 	bl	801b564 <__ssputs_r>
 801b682:	3001      	adds	r0, #1
 801b684:	f000 80a4 	beq.w	801b7d0 <_svfiprintf_r+0x1b8>
 801b688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b68a:	4453      	add	r3, sl
 801b68c:	9309      	str	r3, [sp, #36]	; 0x24
 801b68e:	783b      	ldrb	r3, [r7, #0]
 801b690:	2b00      	cmp	r3, #0
 801b692:	f000 809d 	beq.w	801b7d0 <_svfiprintf_r+0x1b8>
 801b696:	2300      	movs	r3, #0
 801b698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b69c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6a0:	9304      	str	r3, [sp, #16]
 801b6a2:	9307      	str	r3, [sp, #28]
 801b6a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b6a8:	931a      	str	r3, [sp, #104]	; 0x68
 801b6aa:	462f      	mov	r7, r5
 801b6ac:	2205      	movs	r2, #5
 801b6ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b6b2:	4850      	ldr	r0, [pc, #320]	; (801b7f4 <_svfiprintf_r+0x1dc>)
 801b6b4:	f7e4 fdcc 	bl	8000250 <memchr>
 801b6b8:	9b04      	ldr	r3, [sp, #16]
 801b6ba:	b9d0      	cbnz	r0, 801b6f2 <_svfiprintf_r+0xda>
 801b6bc:	06d9      	lsls	r1, r3, #27
 801b6be:	bf44      	itt	mi
 801b6c0:	2220      	movmi	r2, #32
 801b6c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b6c6:	071a      	lsls	r2, r3, #28
 801b6c8:	bf44      	itt	mi
 801b6ca:	222b      	movmi	r2, #43	; 0x2b
 801b6cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b6d0:	782a      	ldrb	r2, [r5, #0]
 801b6d2:	2a2a      	cmp	r2, #42	; 0x2a
 801b6d4:	d015      	beq.n	801b702 <_svfiprintf_r+0xea>
 801b6d6:	9a07      	ldr	r2, [sp, #28]
 801b6d8:	462f      	mov	r7, r5
 801b6da:	2000      	movs	r0, #0
 801b6dc:	250a      	movs	r5, #10
 801b6de:	4639      	mov	r1, r7
 801b6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b6e4:	3b30      	subs	r3, #48	; 0x30
 801b6e6:	2b09      	cmp	r3, #9
 801b6e8:	d94d      	bls.n	801b786 <_svfiprintf_r+0x16e>
 801b6ea:	b1b8      	cbz	r0, 801b71c <_svfiprintf_r+0x104>
 801b6ec:	e00f      	b.n	801b70e <_svfiprintf_r+0xf6>
 801b6ee:	462f      	mov	r7, r5
 801b6f0:	e7b8      	b.n	801b664 <_svfiprintf_r+0x4c>
 801b6f2:	4a40      	ldr	r2, [pc, #256]	; (801b7f4 <_svfiprintf_r+0x1dc>)
 801b6f4:	1a80      	subs	r0, r0, r2
 801b6f6:	fa0b f000 	lsl.w	r0, fp, r0
 801b6fa:	4318      	orrs	r0, r3
 801b6fc:	9004      	str	r0, [sp, #16]
 801b6fe:	463d      	mov	r5, r7
 801b700:	e7d3      	b.n	801b6aa <_svfiprintf_r+0x92>
 801b702:	9a03      	ldr	r2, [sp, #12]
 801b704:	1d11      	adds	r1, r2, #4
 801b706:	6812      	ldr	r2, [r2, #0]
 801b708:	9103      	str	r1, [sp, #12]
 801b70a:	2a00      	cmp	r2, #0
 801b70c:	db01      	blt.n	801b712 <_svfiprintf_r+0xfa>
 801b70e:	9207      	str	r2, [sp, #28]
 801b710:	e004      	b.n	801b71c <_svfiprintf_r+0x104>
 801b712:	4252      	negs	r2, r2
 801b714:	f043 0302 	orr.w	r3, r3, #2
 801b718:	9207      	str	r2, [sp, #28]
 801b71a:	9304      	str	r3, [sp, #16]
 801b71c:	783b      	ldrb	r3, [r7, #0]
 801b71e:	2b2e      	cmp	r3, #46	; 0x2e
 801b720:	d10c      	bne.n	801b73c <_svfiprintf_r+0x124>
 801b722:	787b      	ldrb	r3, [r7, #1]
 801b724:	2b2a      	cmp	r3, #42	; 0x2a
 801b726:	d133      	bne.n	801b790 <_svfiprintf_r+0x178>
 801b728:	9b03      	ldr	r3, [sp, #12]
 801b72a:	1d1a      	adds	r2, r3, #4
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	9203      	str	r2, [sp, #12]
 801b730:	2b00      	cmp	r3, #0
 801b732:	bfb8      	it	lt
 801b734:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b738:	3702      	adds	r7, #2
 801b73a:	9305      	str	r3, [sp, #20]
 801b73c:	4d2e      	ldr	r5, [pc, #184]	; (801b7f8 <_svfiprintf_r+0x1e0>)
 801b73e:	7839      	ldrb	r1, [r7, #0]
 801b740:	2203      	movs	r2, #3
 801b742:	4628      	mov	r0, r5
 801b744:	f7e4 fd84 	bl	8000250 <memchr>
 801b748:	b138      	cbz	r0, 801b75a <_svfiprintf_r+0x142>
 801b74a:	2340      	movs	r3, #64	; 0x40
 801b74c:	1b40      	subs	r0, r0, r5
 801b74e:	fa03 f000 	lsl.w	r0, r3, r0
 801b752:	9b04      	ldr	r3, [sp, #16]
 801b754:	4303      	orrs	r3, r0
 801b756:	3701      	adds	r7, #1
 801b758:	9304      	str	r3, [sp, #16]
 801b75a:	7839      	ldrb	r1, [r7, #0]
 801b75c:	4827      	ldr	r0, [pc, #156]	; (801b7fc <_svfiprintf_r+0x1e4>)
 801b75e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b762:	2206      	movs	r2, #6
 801b764:	1c7e      	adds	r6, r7, #1
 801b766:	f7e4 fd73 	bl	8000250 <memchr>
 801b76a:	2800      	cmp	r0, #0
 801b76c:	d038      	beq.n	801b7e0 <_svfiprintf_r+0x1c8>
 801b76e:	4b24      	ldr	r3, [pc, #144]	; (801b800 <_svfiprintf_r+0x1e8>)
 801b770:	bb13      	cbnz	r3, 801b7b8 <_svfiprintf_r+0x1a0>
 801b772:	9b03      	ldr	r3, [sp, #12]
 801b774:	3307      	adds	r3, #7
 801b776:	f023 0307 	bic.w	r3, r3, #7
 801b77a:	3308      	adds	r3, #8
 801b77c:	9303      	str	r3, [sp, #12]
 801b77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b780:	444b      	add	r3, r9
 801b782:	9309      	str	r3, [sp, #36]	; 0x24
 801b784:	e76d      	b.n	801b662 <_svfiprintf_r+0x4a>
 801b786:	fb05 3202 	mla	r2, r5, r2, r3
 801b78a:	2001      	movs	r0, #1
 801b78c:	460f      	mov	r7, r1
 801b78e:	e7a6      	b.n	801b6de <_svfiprintf_r+0xc6>
 801b790:	2300      	movs	r3, #0
 801b792:	3701      	adds	r7, #1
 801b794:	9305      	str	r3, [sp, #20]
 801b796:	4619      	mov	r1, r3
 801b798:	250a      	movs	r5, #10
 801b79a:	4638      	mov	r0, r7
 801b79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7a0:	3a30      	subs	r2, #48	; 0x30
 801b7a2:	2a09      	cmp	r2, #9
 801b7a4:	d903      	bls.n	801b7ae <_svfiprintf_r+0x196>
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d0c8      	beq.n	801b73c <_svfiprintf_r+0x124>
 801b7aa:	9105      	str	r1, [sp, #20]
 801b7ac:	e7c6      	b.n	801b73c <_svfiprintf_r+0x124>
 801b7ae:	fb05 2101 	mla	r1, r5, r1, r2
 801b7b2:	2301      	movs	r3, #1
 801b7b4:	4607      	mov	r7, r0
 801b7b6:	e7f0      	b.n	801b79a <_svfiprintf_r+0x182>
 801b7b8:	ab03      	add	r3, sp, #12
 801b7ba:	9300      	str	r3, [sp, #0]
 801b7bc:	4622      	mov	r2, r4
 801b7be:	4b11      	ldr	r3, [pc, #68]	; (801b804 <_svfiprintf_r+0x1ec>)
 801b7c0:	a904      	add	r1, sp, #16
 801b7c2:	4640      	mov	r0, r8
 801b7c4:	f7fc fb98 	bl	8017ef8 <_printf_float>
 801b7c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801b7cc:	4681      	mov	r9, r0
 801b7ce:	d1d6      	bne.n	801b77e <_svfiprintf_r+0x166>
 801b7d0:	89a3      	ldrh	r3, [r4, #12]
 801b7d2:	065b      	lsls	r3, r3, #25
 801b7d4:	f53f af35 	bmi.w	801b642 <_svfiprintf_r+0x2a>
 801b7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7da:	b01d      	add	sp, #116	; 0x74
 801b7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7e0:	ab03      	add	r3, sp, #12
 801b7e2:	9300      	str	r3, [sp, #0]
 801b7e4:	4622      	mov	r2, r4
 801b7e6:	4b07      	ldr	r3, [pc, #28]	; (801b804 <_svfiprintf_r+0x1ec>)
 801b7e8:	a904      	add	r1, sp, #16
 801b7ea:	4640      	mov	r0, r8
 801b7ec:	f7fc fe26 	bl	801843c <_printf_i>
 801b7f0:	e7ea      	b.n	801b7c8 <_svfiprintf_r+0x1b0>
 801b7f2:	bf00      	nop
 801b7f4:	0801fb94 	.word	0x0801fb94
 801b7f8:	0801fb9a 	.word	0x0801fb9a
 801b7fc:	0801fb9e 	.word	0x0801fb9e
 801b800:	08017ef9 	.word	0x08017ef9
 801b804:	0801b565 	.word	0x0801b565

0801b808 <__sfputc_r>:
 801b808:	6893      	ldr	r3, [r2, #8]
 801b80a:	3b01      	subs	r3, #1
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	b410      	push	{r4}
 801b810:	6093      	str	r3, [r2, #8]
 801b812:	da08      	bge.n	801b826 <__sfputc_r+0x1e>
 801b814:	6994      	ldr	r4, [r2, #24]
 801b816:	42a3      	cmp	r3, r4
 801b818:	db01      	blt.n	801b81e <__sfputc_r+0x16>
 801b81a:	290a      	cmp	r1, #10
 801b81c:	d103      	bne.n	801b826 <__sfputc_r+0x1e>
 801b81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b822:	f000 b985 	b.w	801bb30 <__swbuf_r>
 801b826:	6813      	ldr	r3, [r2, #0]
 801b828:	1c58      	adds	r0, r3, #1
 801b82a:	6010      	str	r0, [r2, #0]
 801b82c:	7019      	strb	r1, [r3, #0]
 801b82e:	4608      	mov	r0, r1
 801b830:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b834:	4770      	bx	lr

0801b836 <__sfputs_r>:
 801b836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b838:	4606      	mov	r6, r0
 801b83a:	460f      	mov	r7, r1
 801b83c:	4614      	mov	r4, r2
 801b83e:	18d5      	adds	r5, r2, r3
 801b840:	42ac      	cmp	r4, r5
 801b842:	d101      	bne.n	801b848 <__sfputs_r+0x12>
 801b844:	2000      	movs	r0, #0
 801b846:	e007      	b.n	801b858 <__sfputs_r+0x22>
 801b848:	463a      	mov	r2, r7
 801b84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b84e:	4630      	mov	r0, r6
 801b850:	f7ff ffda 	bl	801b808 <__sfputc_r>
 801b854:	1c43      	adds	r3, r0, #1
 801b856:	d1f3      	bne.n	801b840 <__sfputs_r+0xa>
 801b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b85c <_vfiprintf_r>:
 801b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b860:	460c      	mov	r4, r1
 801b862:	b09d      	sub	sp, #116	; 0x74
 801b864:	4617      	mov	r7, r2
 801b866:	461d      	mov	r5, r3
 801b868:	4606      	mov	r6, r0
 801b86a:	b118      	cbz	r0, 801b874 <_vfiprintf_r+0x18>
 801b86c:	6983      	ldr	r3, [r0, #24]
 801b86e:	b90b      	cbnz	r3, 801b874 <_vfiprintf_r+0x18>
 801b870:	f7fe fdfa 	bl	801a468 <__sinit>
 801b874:	4b7c      	ldr	r3, [pc, #496]	; (801ba68 <_vfiprintf_r+0x20c>)
 801b876:	429c      	cmp	r4, r3
 801b878:	d158      	bne.n	801b92c <_vfiprintf_r+0xd0>
 801b87a:	6874      	ldr	r4, [r6, #4]
 801b87c:	89a3      	ldrh	r3, [r4, #12]
 801b87e:	0718      	lsls	r0, r3, #28
 801b880:	d55e      	bpl.n	801b940 <_vfiprintf_r+0xe4>
 801b882:	6923      	ldr	r3, [r4, #16]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d05b      	beq.n	801b940 <_vfiprintf_r+0xe4>
 801b888:	2300      	movs	r3, #0
 801b88a:	9309      	str	r3, [sp, #36]	; 0x24
 801b88c:	2320      	movs	r3, #32
 801b88e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b892:	2330      	movs	r3, #48	; 0x30
 801b894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b898:	9503      	str	r5, [sp, #12]
 801b89a:	f04f 0b01 	mov.w	fp, #1
 801b89e:	46b8      	mov	r8, r7
 801b8a0:	4645      	mov	r5, r8
 801b8a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b8a6:	b10b      	cbz	r3, 801b8ac <_vfiprintf_r+0x50>
 801b8a8:	2b25      	cmp	r3, #37	; 0x25
 801b8aa:	d154      	bne.n	801b956 <_vfiprintf_r+0xfa>
 801b8ac:	ebb8 0a07 	subs.w	sl, r8, r7
 801b8b0:	d00b      	beq.n	801b8ca <_vfiprintf_r+0x6e>
 801b8b2:	4653      	mov	r3, sl
 801b8b4:	463a      	mov	r2, r7
 801b8b6:	4621      	mov	r1, r4
 801b8b8:	4630      	mov	r0, r6
 801b8ba:	f7ff ffbc 	bl	801b836 <__sfputs_r>
 801b8be:	3001      	adds	r0, #1
 801b8c0:	f000 80c2 	beq.w	801ba48 <_vfiprintf_r+0x1ec>
 801b8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8c6:	4453      	add	r3, sl
 801b8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801b8ca:	f898 3000 	ldrb.w	r3, [r8]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	f000 80ba 	beq.w	801ba48 <_vfiprintf_r+0x1ec>
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8de:	9304      	str	r3, [sp, #16]
 801b8e0:	9307      	str	r3, [sp, #28]
 801b8e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b8e6:	931a      	str	r3, [sp, #104]	; 0x68
 801b8e8:	46a8      	mov	r8, r5
 801b8ea:	2205      	movs	r2, #5
 801b8ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b8f0:	485e      	ldr	r0, [pc, #376]	; (801ba6c <_vfiprintf_r+0x210>)
 801b8f2:	f7e4 fcad 	bl	8000250 <memchr>
 801b8f6:	9b04      	ldr	r3, [sp, #16]
 801b8f8:	bb78      	cbnz	r0, 801b95a <_vfiprintf_r+0xfe>
 801b8fa:	06d9      	lsls	r1, r3, #27
 801b8fc:	bf44      	itt	mi
 801b8fe:	2220      	movmi	r2, #32
 801b900:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b904:	071a      	lsls	r2, r3, #28
 801b906:	bf44      	itt	mi
 801b908:	222b      	movmi	r2, #43	; 0x2b
 801b90a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b90e:	782a      	ldrb	r2, [r5, #0]
 801b910:	2a2a      	cmp	r2, #42	; 0x2a
 801b912:	d02a      	beq.n	801b96a <_vfiprintf_r+0x10e>
 801b914:	9a07      	ldr	r2, [sp, #28]
 801b916:	46a8      	mov	r8, r5
 801b918:	2000      	movs	r0, #0
 801b91a:	250a      	movs	r5, #10
 801b91c:	4641      	mov	r1, r8
 801b91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b922:	3b30      	subs	r3, #48	; 0x30
 801b924:	2b09      	cmp	r3, #9
 801b926:	d969      	bls.n	801b9fc <_vfiprintf_r+0x1a0>
 801b928:	b360      	cbz	r0, 801b984 <_vfiprintf_r+0x128>
 801b92a:	e024      	b.n	801b976 <_vfiprintf_r+0x11a>
 801b92c:	4b50      	ldr	r3, [pc, #320]	; (801ba70 <_vfiprintf_r+0x214>)
 801b92e:	429c      	cmp	r4, r3
 801b930:	d101      	bne.n	801b936 <_vfiprintf_r+0xda>
 801b932:	68b4      	ldr	r4, [r6, #8]
 801b934:	e7a2      	b.n	801b87c <_vfiprintf_r+0x20>
 801b936:	4b4f      	ldr	r3, [pc, #316]	; (801ba74 <_vfiprintf_r+0x218>)
 801b938:	429c      	cmp	r4, r3
 801b93a:	bf08      	it	eq
 801b93c:	68f4      	ldreq	r4, [r6, #12]
 801b93e:	e79d      	b.n	801b87c <_vfiprintf_r+0x20>
 801b940:	4621      	mov	r1, r4
 801b942:	4630      	mov	r0, r6
 801b944:	f000 f958 	bl	801bbf8 <__swsetup_r>
 801b948:	2800      	cmp	r0, #0
 801b94a:	d09d      	beq.n	801b888 <_vfiprintf_r+0x2c>
 801b94c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b950:	b01d      	add	sp, #116	; 0x74
 801b952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b956:	46a8      	mov	r8, r5
 801b958:	e7a2      	b.n	801b8a0 <_vfiprintf_r+0x44>
 801b95a:	4a44      	ldr	r2, [pc, #272]	; (801ba6c <_vfiprintf_r+0x210>)
 801b95c:	1a80      	subs	r0, r0, r2
 801b95e:	fa0b f000 	lsl.w	r0, fp, r0
 801b962:	4318      	orrs	r0, r3
 801b964:	9004      	str	r0, [sp, #16]
 801b966:	4645      	mov	r5, r8
 801b968:	e7be      	b.n	801b8e8 <_vfiprintf_r+0x8c>
 801b96a:	9a03      	ldr	r2, [sp, #12]
 801b96c:	1d11      	adds	r1, r2, #4
 801b96e:	6812      	ldr	r2, [r2, #0]
 801b970:	9103      	str	r1, [sp, #12]
 801b972:	2a00      	cmp	r2, #0
 801b974:	db01      	blt.n	801b97a <_vfiprintf_r+0x11e>
 801b976:	9207      	str	r2, [sp, #28]
 801b978:	e004      	b.n	801b984 <_vfiprintf_r+0x128>
 801b97a:	4252      	negs	r2, r2
 801b97c:	f043 0302 	orr.w	r3, r3, #2
 801b980:	9207      	str	r2, [sp, #28]
 801b982:	9304      	str	r3, [sp, #16]
 801b984:	f898 3000 	ldrb.w	r3, [r8]
 801b988:	2b2e      	cmp	r3, #46	; 0x2e
 801b98a:	d10e      	bne.n	801b9aa <_vfiprintf_r+0x14e>
 801b98c:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b990:	2b2a      	cmp	r3, #42	; 0x2a
 801b992:	d138      	bne.n	801ba06 <_vfiprintf_r+0x1aa>
 801b994:	9b03      	ldr	r3, [sp, #12]
 801b996:	1d1a      	adds	r2, r3, #4
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	9203      	str	r2, [sp, #12]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	bfb8      	it	lt
 801b9a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b9a4:	f108 0802 	add.w	r8, r8, #2
 801b9a8:	9305      	str	r3, [sp, #20]
 801b9aa:	4d33      	ldr	r5, [pc, #204]	; (801ba78 <_vfiprintf_r+0x21c>)
 801b9ac:	f898 1000 	ldrb.w	r1, [r8]
 801b9b0:	2203      	movs	r2, #3
 801b9b2:	4628      	mov	r0, r5
 801b9b4:	f7e4 fc4c 	bl	8000250 <memchr>
 801b9b8:	b140      	cbz	r0, 801b9cc <_vfiprintf_r+0x170>
 801b9ba:	2340      	movs	r3, #64	; 0x40
 801b9bc:	1b40      	subs	r0, r0, r5
 801b9be:	fa03 f000 	lsl.w	r0, r3, r0
 801b9c2:	9b04      	ldr	r3, [sp, #16]
 801b9c4:	4303      	orrs	r3, r0
 801b9c6:	f108 0801 	add.w	r8, r8, #1
 801b9ca:	9304      	str	r3, [sp, #16]
 801b9cc:	f898 1000 	ldrb.w	r1, [r8]
 801b9d0:	482a      	ldr	r0, [pc, #168]	; (801ba7c <_vfiprintf_r+0x220>)
 801b9d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b9d6:	2206      	movs	r2, #6
 801b9d8:	f108 0701 	add.w	r7, r8, #1
 801b9dc:	f7e4 fc38 	bl	8000250 <memchr>
 801b9e0:	2800      	cmp	r0, #0
 801b9e2:	d037      	beq.n	801ba54 <_vfiprintf_r+0x1f8>
 801b9e4:	4b26      	ldr	r3, [pc, #152]	; (801ba80 <_vfiprintf_r+0x224>)
 801b9e6:	bb1b      	cbnz	r3, 801ba30 <_vfiprintf_r+0x1d4>
 801b9e8:	9b03      	ldr	r3, [sp, #12]
 801b9ea:	3307      	adds	r3, #7
 801b9ec:	f023 0307 	bic.w	r3, r3, #7
 801b9f0:	3308      	adds	r3, #8
 801b9f2:	9303      	str	r3, [sp, #12]
 801b9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9f6:	444b      	add	r3, r9
 801b9f8:	9309      	str	r3, [sp, #36]	; 0x24
 801b9fa:	e750      	b.n	801b89e <_vfiprintf_r+0x42>
 801b9fc:	fb05 3202 	mla	r2, r5, r2, r3
 801ba00:	2001      	movs	r0, #1
 801ba02:	4688      	mov	r8, r1
 801ba04:	e78a      	b.n	801b91c <_vfiprintf_r+0xc0>
 801ba06:	2300      	movs	r3, #0
 801ba08:	f108 0801 	add.w	r8, r8, #1
 801ba0c:	9305      	str	r3, [sp, #20]
 801ba0e:	4619      	mov	r1, r3
 801ba10:	250a      	movs	r5, #10
 801ba12:	4640      	mov	r0, r8
 801ba14:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba18:	3a30      	subs	r2, #48	; 0x30
 801ba1a:	2a09      	cmp	r2, #9
 801ba1c:	d903      	bls.n	801ba26 <_vfiprintf_r+0x1ca>
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d0c3      	beq.n	801b9aa <_vfiprintf_r+0x14e>
 801ba22:	9105      	str	r1, [sp, #20]
 801ba24:	e7c1      	b.n	801b9aa <_vfiprintf_r+0x14e>
 801ba26:	fb05 2101 	mla	r1, r5, r1, r2
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	4680      	mov	r8, r0
 801ba2e:	e7f0      	b.n	801ba12 <_vfiprintf_r+0x1b6>
 801ba30:	ab03      	add	r3, sp, #12
 801ba32:	9300      	str	r3, [sp, #0]
 801ba34:	4622      	mov	r2, r4
 801ba36:	4b13      	ldr	r3, [pc, #76]	; (801ba84 <_vfiprintf_r+0x228>)
 801ba38:	a904      	add	r1, sp, #16
 801ba3a:	4630      	mov	r0, r6
 801ba3c:	f7fc fa5c 	bl	8017ef8 <_printf_float>
 801ba40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801ba44:	4681      	mov	r9, r0
 801ba46:	d1d5      	bne.n	801b9f4 <_vfiprintf_r+0x198>
 801ba48:	89a3      	ldrh	r3, [r4, #12]
 801ba4a:	065b      	lsls	r3, r3, #25
 801ba4c:	f53f af7e 	bmi.w	801b94c <_vfiprintf_r+0xf0>
 801ba50:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba52:	e77d      	b.n	801b950 <_vfiprintf_r+0xf4>
 801ba54:	ab03      	add	r3, sp, #12
 801ba56:	9300      	str	r3, [sp, #0]
 801ba58:	4622      	mov	r2, r4
 801ba5a:	4b0a      	ldr	r3, [pc, #40]	; (801ba84 <_vfiprintf_r+0x228>)
 801ba5c:	a904      	add	r1, sp, #16
 801ba5e:	4630      	mov	r0, r6
 801ba60:	f7fc fcec 	bl	801843c <_printf_i>
 801ba64:	e7ec      	b.n	801ba40 <_vfiprintf_r+0x1e4>
 801ba66:	bf00      	nop
 801ba68:	0801fa58 	.word	0x0801fa58
 801ba6c:	0801fb94 	.word	0x0801fb94
 801ba70:	0801fa78 	.word	0x0801fa78
 801ba74:	0801fa38 	.word	0x0801fa38
 801ba78:	0801fb9a 	.word	0x0801fb9a
 801ba7c:	0801fb9e 	.word	0x0801fb9e
 801ba80:	08017ef9 	.word	0x08017ef9
 801ba84:	0801b837 	.word	0x0801b837

0801ba88 <_sbrk_r>:
 801ba88:	b538      	push	{r3, r4, r5, lr}
 801ba8a:	4c06      	ldr	r4, [pc, #24]	; (801baa4 <_sbrk_r+0x1c>)
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	4605      	mov	r5, r0
 801ba90:	4608      	mov	r0, r1
 801ba92:	6023      	str	r3, [r4, #0]
 801ba94:	f7fc f8c6 	bl	8017c24 <_sbrk>
 801ba98:	1c43      	adds	r3, r0, #1
 801ba9a:	d102      	bne.n	801baa2 <_sbrk_r+0x1a>
 801ba9c:	6823      	ldr	r3, [r4, #0]
 801ba9e:	b103      	cbz	r3, 801baa2 <_sbrk_r+0x1a>
 801baa0:	602b      	str	r3, [r5, #0]
 801baa2:	bd38      	pop	{r3, r4, r5, pc}
 801baa4:	20008fcc 	.word	0x20008fcc

0801baa8 <__sread>:
 801baa8:	b510      	push	{r4, lr}
 801baaa:	460c      	mov	r4, r1
 801baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bab0:	f000 fa6e 	bl	801bf90 <_read_r>
 801bab4:	2800      	cmp	r0, #0
 801bab6:	bfab      	itete	ge
 801bab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801baba:	89a3      	ldrhlt	r3, [r4, #12]
 801babc:	181b      	addge	r3, r3, r0
 801babe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bac2:	bfac      	ite	ge
 801bac4:	6563      	strge	r3, [r4, #84]	; 0x54
 801bac6:	81a3      	strhlt	r3, [r4, #12]
 801bac8:	bd10      	pop	{r4, pc}

0801baca <__swrite>:
 801baca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bace:	461f      	mov	r7, r3
 801bad0:	898b      	ldrh	r3, [r1, #12]
 801bad2:	05db      	lsls	r3, r3, #23
 801bad4:	4605      	mov	r5, r0
 801bad6:	460c      	mov	r4, r1
 801bad8:	4616      	mov	r6, r2
 801bada:	d505      	bpl.n	801bae8 <__swrite+0x1e>
 801badc:	2302      	movs	r3, #2
 801bade:	2200      	movs	r2, #0
 801bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bae4:	f000 f9b6 	bl	801be54 <_lseek_r>
 801bae8:	89a3      	ldrh	r3, [r4, #12]
 801baea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801baee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801baf2:	81a3      	strh	r3, [r4, #12]
 801baf4:	4632      	mov	r2, r6
 801baf6:	463b      	mov	r3, r7
 801baf8:	4628      	mov	r0, r5
 801bafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bafe:	f000 b869 	b.w	801bbd4 <_write_r>

0801bb02 <__sseek>:
 801bb02:	b510      	push	{r4, lr}
 801bb04:	460c      	mov	r4, r1
 801bb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb0a:	f000 f9a3 	bl	801be54 <_lseek_r>
 801bb0e:	1c43      	adds	r3, r0, #1
 801bb10:	89a3      	ldrh	r3, [r4, #12]
 801bb12:	bf15      	itete	ne
 801bb14:	6560      	strne	r0, [r4, #84]	; 0x54
 801bb16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bb1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bb1e:	81a3      	strheq	r3, [r4, #12]
 801bb20:	bf18      	it	ne
 801bb22:	81a3      	strhne	r3, [r4, #12]
 801bb24:	bd10      	pop	{r4, pc}

0801bb26 <__sclose>:
 801bb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb2a:	f000 b8d3 	b.w	801bcd4 <_close_r>
	...

0801bb30 <__swbuf_r>:
 801bb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb32:	460e      	mov	r6, r1
 801bb34:	4614      	mov	r4, r2
 801bb36:	4605      	mov	r5, r0
 801bb38:	b118      	cbz	r0, 801bb42 <__swbuf_r+0x12>
 801bb3a:	6983      	ldr	r3, [r0, #24]
 801bb3c:	b90b      	cbnz	r3, 801bb42 <__swbuf_r+0x12>
 801bb3e:	f7fe fc93 	bl	801a468 <__sinit>
 801bb42:	4b21      	ldr	r3, [pc, #132]	; (801bbc8 <__swbuf_r+0x98>)
 801bb44:	429c      	cmp	r4, r3
 801bb46:	d12a      	bne.n	801bb9e <__swbuf_r+0x6e>
 801bb48:	686c      	ldr	r4, [r5, #4]
 801bb4a:	69a3      	ldr	r3, [r4, #24]
 801bb4c:	60a3      	str	r3, [r4, #8]
 801bb4e:	89a3      	ldrh	r3, [r4, #12]
 801bb50:	071a      	lsls	r2, r3, #28
 801bb52:	d52e      	bpl.n	801bbb2 <__swbuf_r+0x82>
 801bb54:	6923      	ldr	r3, [r4, #16]
 801bb56:	b363      	cbz	r3, 801bbb2 <__swbuf_r+0x82>
 801bb58:	6923      	ldr	r3, [r4, #16]
 801bb5a:	6820      	ldr	r0, [r4, #0]
 801bb5c:	1ac0      	subs	r0, r0, r3
 801bb5e:	6963      	ldr	r3, [r4, #20]
 801bb60:	b2f6      	uxtb	r6, r6
 801bb62:	4283      	cmp	r3, r0
 801bb64:	4637      	mov	r7, r6
 801bb66:	dc04      	bgt.n	801bb72 <__swbuf_r+0x42>
 801bb68:	4621      	mov	r1, r4
 801bb6a:	4628      	mov	r0, r5
 801bb6c:	f000 f948 	bl	801be00 <_fflush_r>
 801bb70:	bb28      	cbnz	r0, 801bbbe <__swbuf_r+0x8e>
 801bb72:	68a3      	ldr	r3, [r4, #8]
 801bb74:	3b01      	subs	r3, #1
 801bb76:	60a3      	str	r3, [r4, #8]
 801bb78:	6823      	ldr	r3, [r4, #0]
 801bb7a:	1c5a      	adds	r2, r3, #1
 801bb7c:	6022      	str	r2, [r4, #0]
 801bb7e:	701e      	strb	r6, [r3, #0]
 801bb80:	6963      	ldr	r3, [r4, #20]
 801bb82:	3001      	adds	r0, #1
 801bb84:	4283      	cmp	r3, r0
 801bb86:	d004      	beq.n	801bb92 <__swbuf_r+0x62>
 801bb88:	89a3      	ldrh	r3, [r4, #12]
 801bb8a:	07db      	lsls	r3, r3, #31
 801bb8c:	d519      	bpl.n	801bbc2 <__swbuf_r+0x92>
 801bb8e:	2e0a      	cmp	r6, #10
 801bb90:	d117      	bne.n	801bbc2 <__swbuf_r+0x92>
 801bb92:	4621      	mov	r1, r4
 801bb94:	4628      	mov	r0, r5
 801bb96:	f000 f933 	bl	801be00 <_fflush_r>
 801bb9a:	b190      	cbz	r0, 801bbc2 <__swbuf_r+0x92>
 801bb9c:	e00f      	b.n	801bbbe <__swbuf_r+0x8e>
 801bb9e:	4b0b      	ldr	r3, [pc, #44]	; (801bbcc <__swbuf_r+0x9c>)
 801bba0:	429c      	cmp	r4, r3
 801bba2:	d101      	bne.n	801bba8 <__swbuf_r+0x78>
 801bba4:	68ac      	ldr	r4, [r5, #8]
 801bba6:	e7d0      	b.n	801bb4a <__swbuf_r+0x1a>
 801bba8:	4b09      	ldr	r3, [pc, #36]	; (801bbd0 <__swbuf_r+0xa0>)
 801bbaa:	429c      	cmp	r4, r3
 801bbac:	bf08      	it	eq
 801bbae:	68ec      	ldreq	r4, [r5, #12]
 801bbb0:	e7cb      	b.n	801bb4a <__swbuf_r+0x1a>
 801bbb2:	4621      	mov	r1, r4
 801bbb4:	4628      	mov	r0, r5
 801bbb6:	f000 f81f 	bl	801bbf8 <__swsetup_r>
 801bbba:	2800      	cmp	r0, #0
 801bbbc:	d0cc      	beq.n	801bb58 <__swbuf_r+0x28>
 801bbbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bbc2:	4638      	mov	r0, r7
 801bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbc6:	bf00      	nop
 801bbc8:	0801fa58 	.word	0x0801fa58
 801bbcc:	0801fa78 	.word	0x0801fa78
 801bbd0:	0801fa38 	.word	0x0801fa38

0801bbd4 <_write_r>:
 801bbd4:	b538      	push	{r3, r4, r5, lr}
 801bbd6:	4c07      	ldr	r4, [pc, #28]	; (801bbf4 <_write_r+0x20>)
 801bbd8:	4605      	mov	r5, r0
 801bbda:	4608      	mov	r0, r1
 801bbdc:	4611      	mov	r1, r2
 801bbde:	2200      	movs	r2, #0
 801bbe0:	6022      	str	r2, [r4, #0]
 801bbe2:	461a      	mov	r2, r3
 801bbe4:	f7fb ffcd 	bl	8017b82 <_write>
 801bbe8:	1c43      	adds	r3, r0, #1
 801bbea:	d102      	bne.n	801bbf2 <_write_r+0x1e>
 801bbec:	6823      	ldr	r3, [r4, #0]
 801bbee:	b103      	cbz	r3, 801bbf2 <_write_r+0x1e>
 801bbf0:	602b      	str	r3, [r5, #0]
 801bbf2:	bd38      	pop	{r3, r4, r5, pc}
 801bbf4:	20008fcc 	.word	0x20008fcc

0801bbf8 <__swsetup_r>:
 801bbf8:	4b32      	ldr	r3, [pc, #200]	; (801bcc4 <__swsetup_r+0xcc>)
 801bbfa:	b570      	push	{r4, r5, r6, lr}
 801bbfc:	681d      	ldr	r5, [r3, #0]
 801bbfe:	4606      	mov	r6, r0
 801bc00:	460c      	mov	r4, r1
 801bc02:	b125      	cbz	r5, 801bc0e <__swsetup_r+0x16>
 801bc04:	69ab      	ldr	r3, [r5, #24]
 801bc06:	b913      	cbnz	r3, 801bc0e <__swsetup_r+0x16>
 801bc08:	4628      	mov	r0, r5
 801bc0a:	f7fe fc2d 	bl	801a468 <__sinit>
 801bc0e:	4b2e      	ldr	r3, [pc, #184]	; (801bcc8 <__swsetup_r+0xd0>)
 801bc10:	429c      	cmp	r4, r3
 801bc12:	d10f      	bne.n	801bc34 <__swsetup_r+0x3c>
 801bc14:	686c      	ldr	r4, [r5, #4]
 801bc16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc1a:	b29a      	uxth	r2, r3
 801bc1c:	0715      	lsls	r5, r2, #28
 801bc1e:	d42c      	bmi.n	801bc7a <__swsetup_r+0x82>
 801bc20:	06d0      	lsls	r0, r2, #27
 801bc22:	d411      	bmi.n	801bc48 <__swsetup_r+0x50>
 801bc24:	2209      	movs	r2, #9
 801bc26:	6032      	str	r2, [r6, #0]
 801bc28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc2c:	81a3      	strh	r3, [r4, #12]
 801bc2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc32:	e03e      	b.n	801bcb2 <__swsetup_r+0xba>
 801bc34:	4b25      	ldr	r3, [pc, #148]	; (801bccc <__swsetup_r+0xd4>)
 801bc36:	429c      	cmp	r4, r3
 801bc38:	d101      	bne.n	801bc3e <__swsetup_r+0x46>
 801bc3a:	68ac      	ldr	r4, [r5, #8]
 801bc3c:	e7eb      	b.n	801bc16 <__swsetup_r+0x1e>
 801bc3e:	4b24      	ldr	r3, [pc, #144]	; (801bcd0 <__swsetup_r+0xd8>)
 801bc40:	429c      	cmp	r4, r3
 801bc42:	bf08      	it	eq
 801bc44:	68ec      	ldreq	r4, [r5, #12]
 801bc46:	e7e6      	b.n	801bc16 <__swsetup_r+0x1e>
 801bc48:	0751      	lsls	r1, r2, #29
 801bc4a:	d512      	bpl.n	801bc72 <__swsetup_r+0x7a>
 801bc4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc4e:	b141      	cbz	r1, 801bc62 <__swsetup_r+0x6a>
 801bc50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc54:	4299      	cmp	r1, r3
 801bc56:	d002      	beq.n	801bc5e <__swsetup_r+0x66>
 801bc58:	4630      	mov	r0, r6
 801bc5a:	f7ff fbdb 	bl	801b414 <_free_r>
 801bc5e:	2300      	movs	r3, #0
 801bc60:	6363      	str	r3, [r4, #52]	; 0x34
 801bc62:	89a3      	ldrh	r3, [r4, #12]
 801bc64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bc68:	81a3      	strh	r3, [r4, #12]
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	6063      	str	r3, [r4, #4]
 801bc6e:	6923      	ldr	r3, [r4, #16]
 801bc70:	6023      	str	r3, [r4, #0]
 801bc72:	89a3      	ldrh	r3, [r4, #12]
 801bc74:	f043 0308 	orr.w	r3, r3, #8
 801bc78:	81a3      	strh	r3, [r4, #12]
 801bc7a:	6923      	ldr	r3, [r4, #16]
 801bc7c:	b94b      	cbnz	r3, 801bc92 <__swsetup_r+0x9a>
 801bc7e:	89a3      	ldrh	r3, [r4, #12]
 801bc80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bc84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc88:	d003      	beq.n	801bc92 <__swsetup_r+0x9a>
 801bc8a:	4621      	mov	r1, r4
 801bc8c:	4630      	mov	r0, r6
 801bc8e:	f000 f917 	bl	801bec0 <__smakebuf_r>
 801bc92:	89a2      	ldrh	r2, [r4, #12]
 801bc94:	f012 0301 	ands.w	r3, r2, #1
 801bc98:	d00c      	beq.n	801bcb4 <__swsetup_r+0xbc>
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	60a3      	str	r3, [r4, #8]
 801bc9e:	6963      	ldr	r3, [r4, #20]
 801bca0:	425b      	negs	r3, r3
 801bca2:	61a3      	str	r3, [r4, #24]
 801bca4:	6923      	ldr	r3, [r4, #16]
 801bca6:	b953      	cbnz	r3, 801bcbe <__swsetup_r+0xc6>
 801bca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801bcb0:	d1ba      	bne.n	801bc28 <__swsetup_r+0x30>
 801bcb2:	bd70      	pop	{r4, r5, r6, pc}
 801bcb4:	0792      	lsls	r2, r2, #30
 801bcb6:	bf58      	it	pl
 801bcb8:	6963      	ldrpl	r3, [r4, #20]
 801bcba:	60a3      	str	r3, [r4, #8]
 801bcbc:	e7f2      	b.n	801bca4 <__swsetup_r+0xac>
 801bcbe:	2000      	movs	r0, #0
 801bcc0:	e7f7      	b.n	801bcb2 <__swsetup_r+0xba>
 801bcc2:	bf00      	nop
 801bcc4:	20001518 	.word	0x20001518
 801bcc8:	0801fa58 	.word	0x0801fa58
 801bccc:	0801fa78 	.word	0x0801fa78
 801bcd0:	0801fa38 	.word	0x0801fa38

0801bcd4 <_close_r>:
 801bcd4:	b538      	push	{r3, r4, r5, lr}
 801bcd6:	4c06      	ldr	r4, [pc, #24]	; (801bcf0 <_close_r+0x1c>)
 801bcd8:	2300      	movs	r3, #0
 801bcda:	4605      	mov	r5, r0
 801bcdc:	4608      	mov	r0, r1
 801bcde:	6023      	str	r3, [r4, #0]
 801bce0:	f7fb ff6b 	bl	8017bba <_close>
 801bce4:	1c43      	adds	r3, r0, #1
 801bce6:	d102      	bne.n	801bcee <_close_r+0x1a>
 801bce8:	6823      	ldr	r3, [r4, #0]
 801bcea:	b103      	cbz	r3, 801bcee <_close_r+0x1a>
 801bcec:	602b      	str	r3, [r5, #0]
 801bcee:	bd38      	pop	{r3, r4, r5, pc}
 801bcf0:	20008fcc 	.word	0x20008fcc

0801bcf4 <__sflush_r>:
 801bcf4:	898a      	ldrh	r2, [r1, #12]
 801bcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcfa:	4605      	mov	r5, r0
 801bcfc:	0710      	lsls	r0, r2, #28
 801bcfe:	460c      	mov	r4, r1
 801bd00:	d458      	bmi.n	801bdb4 <__sflush_r+0xc0>
 801bd02:	684b      	ldr	r3, [r1, #4]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	dc05      	bgt.n	801bd14 <__sflush_r+0x20>
 801bd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	dc02      	bgt.n	801bd14 <__sflush_r+0x20>
 801bd0e:	2000      	movs	r0, #0
 801bd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bd16:	2e00      	cmp	r6, #0
 801bd18:	d0f9      	beq.n	801bd0e <__sflush_r+0x1a>
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bd20:	682f      	ldr	r7, [r5, #0]
 801bd22:	6a21      	ldr	r1, [r4, #32]
 801bd24:	602b      	str	r3, [r5, #0]
 801bd26:	d032      	beq.n	801bd8e <__sflush_r+0x9a>
 801bd28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bd2a:	89a3      	ldrh	r3, [r4, #12]
 801bd2c:	075a      	lsls	r2, r3, #29
 801bd2e:	d505      	bpl.n	801bd3c <__sflush_r+0x48>
 801bd30:	6863      	ldr	r3, [r4, #4]
 801bd32:	1ac0      	subs	r0, r0, r3
 801bd34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bd36:	b10b      	cbz	r3, 801bd3c <__sflush_r+0x48>
 801bd38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bd3a:	1ac0      	subs	r0, r0, r3
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	4602      	mov	r2, r0
 801bd40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bd42:	6a21      	ldr	r1, [r4, #32]
 801bd44:	4628      	mov	r0, r5
 801bd46:	47b0      	blx	r6
 801bd48:	1c43      	adds	r3, r0, #1
 801bd4a:	89a3      	ldrh	r3, [r4, #12]
 801bd4c:	d106      	bne.n	801bd5c <__sflush_r+0x68>
 801bd4e:	6829      	ldr	r1, [r5, #0]
 801bd50:	291d      	cmp	r1, #29
 801bd52:	d848      	bhi.n	801bde6 <__sflush_r+0xf2>
 801bd54:	4a29      	ldr	r2, [pc, #164]	; (801bdfc <__sflush_r+0x108>)
 801bd56:	40ca      	lsrs	r2, r1
 801bd58:	07d6      	lsls	r6, r2, #31
 801bd5a:	d544      	bpl.n	801bde6 <__sflush_r+0xf2>
 801bd5c:	2200      	movs	r2, #0
 801bd5e:	6062      	str	r2, [r4, #4]
 801bd60:	04d9      	lsls	r1, r3, #19
 801bd62:	6922      	ldr	r2, [r4, #16]
 801bd64:	6022      	str	r2, [r4, #0]
 801bd66:	d504      	bpl.n	801bd72 <__sflush_r+0x7e>
 801bd68:	1c42      	adds	r2, r0, #1
 801bd6a:	d101      	bne.n	801bd70 <__sflush_r+0x7c>
 801bd6c:	682b      	ldr	r3, [r5, #0]
 801bd6e:	b903      	cbnz	r3, 801bd72 <__sflush_r+0x7e>
 801bd70:	6560      	str	r0, [r4, #84]	; 0x54
 801bd72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd74:	602f      	str	r7, [r5, #0]
 801bd76:	2900      	cmp	r1, #0
 801bd78:	d0c9      	beq.n	801bd0e <__sflush_r+0x1a>
 801bd7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd7e:	4299      	cmp	r1, r3
 801bd80:	d002      	beq.n	801bd88 <__sflush_r+0x94>
 801bd82:	4628      	mov	r0, r5
 801bd84:	f7ff fb46 	bl	801b414 <_free_r>
 801bd88:	2000      	movs	r0, #0
 801bd8a:	6360      	str	r0, [r4, #52]	; 0x34
 801bd8c:	e7c0      	b.n	801bd10 <__sflush_r+0x1c>
 801bd8e:	2301      	movs	r3, #1
 801bd90:	4628      	mov	r0, r5
 801bd92:	47b0      	blx	r6
 801bd94:	1c41      	adds	r1, r0, #1
 801bd96:	d1c8      	bne.n	801bd2a <__sflush_r+0x36>
 801bd98:	682b      	ldr	r3, [r5, #0]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d0c5      	beq.n	801bd2a <__sflush_r+0x36>
 801bd9e:	2b1d      	cmp	r3, #29
 801bda0:	d001      	beq.n	801bda6 <__sflush_r+0xb2>
 801bda2:	2b16      	cmp	r3, #22
 801bda4:	d101      	bne.n	801bdaa <__sflush_r+0xb6>
 801bda6:	602f      	str	r7, [r5, #0]
 801bda8:	e7b1      	b.n	801bd0e <__sflush_r+0x1a>
 801bdaa:	89a3      	ldrh	r3, [r4, #12]
 801bdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bdb0:	81a3      	strh	r3, [r4, #12]
 801bdb2:	e7ad      	b.n	801bd10 <__sflush_r+0x1c>
 801bdb4:	690f      	ldr	r7, [r1, #16]
 801bdb6:	2f00      	cmp	r7, #0
 801bdb8:	d0a9      	beq.n	801bd0e <__sflush_r+0x1a>
 801bdba:	0793      	lsls	r3, r2, #30
 801bdbc:	680e      	ldr	r6, [r1, #0]
 801bdbe:	bf08      	it	eq
 801bdc0:	694b      	ldreq	r3, [r1, #20]
 801bdc2:	600f      	str	r7, [r1, #0]
 801bdc4:	bf18      	it	ne
 801bdc6:	2300      	movne	r3, #0
 801bdc8:	eba6 0807 	sub.w	r8, r6, r7
 801bdcc:	608b      	str	r3, [r1, #8]
 801bdce:	f1b8 0f00 	cmp.w	r8, #0
 801bdd2:	dd9c      	ble.n	801bd0e <__sflush_r+0x1a>
 801bdd4:	4643      	mov	r3, r8
 801bdd6:	463a      	mov	r2, r7
 801bdd8:	6a21      	ldr	r1, [r4, #32]
 801bdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bddc:	4628      	mov	r0, r5
 801bdde:	47b0      	blx	r6
 801bde0:	2800      	cmp	r0, #0
 801bde2:	dc06      	bgt.n	801bdf2 <__sflush_r+0xfe>
 801bde4:	89a3      	ldrh	r3, [r4, #12]
 801bde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bdea:	81a3      	strh	r3, [r4, #12]
 801bdec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bdf0:	e78e      	b.n	801bd10 <__sflush_r+0x1c>
 801bdf2:	4407      	add	r7, r0
 801bdf4:	eba8 0800 	sub.w	r8, r8, r0
 801bdf8:	e7e9      	b.n	801bdce <__sflush_r+0xda>
 801bdfa:	bf00      	nop
 801bdfc:	20400001 	.word	0x20400001

0801be00 <_fflush_r>:
 801be00:	b538      	push	{r3, r4, r5, lr}
 801be02:	690b      	ldr	r3, [r1, #16]
 801be04:	4605      	mov	r5, r0
 801be06:	460c      	mov	r4, r1
 801be08:	b1db      	cbz	r3, 801be42 <_fflush_r+0x42>
 801be0a:	b118      	cbz	r0, 801be14 <_fflush_r+0x14>
 801be0c:	6983      	ldr	r3, [r0, #24]
 801be0e:	b90b      	cbnz	r3, 801be14 <_fflush_r+0x14>
 801be10:	f7fe fb2a 	bl	801a468 <__sinit>
 801be14:	4b0c      	ldr	r3, [pc, #48]	; (801be48 <_fflush_r+0x48>)
 801be16:	429c      	cmp	r4, r3
 801be18:	d109      	bne.n	801be2e <_fflush_r+0x2e>
 801be1a:	686c      	ldr	r4, [r5, #4]
 801be1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be20:	b17b      	cbz	r3, 801be42 <_fflush_r+0x42>
 801be22:	4621      	mov	r1, r4
 801be24:	4628      	mov	r0, r5
 801be26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be2a:	f7ff bf63 	b.w	801bcf4 <__sflush_r>
 801be2e:	4b07      	ldr	r3, [pc, #28]	; (801be4c <_fflush_r+0x4c>)
 801be30:	429c      	cmp	r4, r3
 801be32:	d101      	bne.n	801be38 <_fflush_r+0x38>
 801be34:	68ac      	ldr	r4, [r5, #8]
 801be36:	e7f1      	b.n	801be1c <_fflush_r+0x1c>
 801be38:	4b05      	ldr	r3, [pc, #20]	; (801be50 <_fflush_r+0x50>)
 801be3a:	429c      	cmp	r4, r3
 801be3c:	bf08      	it	eq
 801be3e:	68ec      	ldreq	r4, [r5, #12]
 801be40:	e7ec      	b.n	801be1c <_fflush_r+0x1c>
 801be42:	2000      	movs	r0, #0
 801be44:	bd38      	pop	{r3, r4, r5, pc}
 801be46:	bf00      	nop
 801be48:	0801fa58 	.word	0x0801fa58
 801be4c:	0801fa78 	.word	0x0801fa78
 801be50:	0801fa38 	.word	0x0801fa38

0801be54 <_lseek_r>:
 801be54:	b538      	push	{r3, r4, r5, lr}
 801be56:	4c07      	ldr	r4, [pc, #28]	; (801be74 <_lseek_r+0x20>)
 801be58:	4605      	mov	r5, r0
 801be5a:	4608      	mov	r0, r1
 801be5c:	4611      	mov	r1, r2
 801be5e:	2200      	movs	r2, #0
 801be60:	6022      	str	r2, [r4, #0]
 801be62:	461a      	mov	r2, r3
 801be64:	f7fb fed0 	bl	8017c08 <_lseek>
 801be68:	1c43      	adds	r3, r0, #1
 801be6a:	d102      	bne.n	801be72 <_lseek_r+0x1e>
 801be6c:	6823      	ldr	r3, [r4, #0]
 801be6e:	b103      	cbz	r3, 801be72 <_lseek_r+0x1e>
 801be70:	602b      	str	r3, [r5, #0]
 801be72:	bd38      	pop	{r3, r4, r5, pc}
 801be74:	20008fcc 	.word	0x20008fcc

0801be78 <__swhatbuf_r>:
 801be78:	b570      	push	{r4, r5, r6, lr}
 801be7a:	460e      	mov	r6, r1
 801be7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be80:	2900      	cmp	r1, #0
 801be82:	b096      	sub	sp, #88	; 0x58
 801be84:	4614      	mov	r4, r2
 801be86:	461d      	mov	r5, r3
 801be88:	da07      	bge.n	801be9a <__swhatbuf_r+0x22>
 801be8a:	2300      	movs	r3, #0
 801be8c:	602b      	str	r3, [r5, #0]
 801be8e:	89b3      	ldrh	r3, [r6, #12]
 801be90:	061a      	lsls	r2, r3, #24
 801be92:	d410      	bmi.n	801beb6 <__swhatbuf_r+0x3e>
 801be94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801be98:	e00e      	b.n	801beb8 <__swhatbuf_r+0x40>
 801be9a:	466a      	mov	r2, sp
 801be9c:	f000 f88a 	bl	801bfb4 <_fstat_r>
 801bea0:	2800      	cmp	r0, #0
 801bea2:	dbf2      	blt.n	801be8a <__swhatbuf_r+0x12>
 801bea4:	9a01      	ldr	r2, [sp, #4]
 801bea6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801beaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801beae:	425a      	negs	r2, r3
 801beb0:	415a      	adcs	r2, r3
 801beb2:	602a      	str	r2, [r5, #0]
 801beb4:	e7ee      	b.n	801be94 <__swhatbuf_r+0x1c>
 801beb6:	2340      	movs	r3, #64	; 0x40
 801beb8:	2000      	movs	r0, #0
 801beba:	6023      	str	r3, [r4, #0]
 801bebc:	b016      	add	sp, #88	; 0x58
 801bebe:	bd70      	pop	{r4, r5, r6, pc}

0801bec0 <__smakebuf_r>:
 801bec0:	898b      	ldrh	r3, [r1, #12]
 801bec2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bec4:	079d      	lsls	r5, r3, #30
 801bec6:	4606      	mov	r6, r0
 801bec8:	460c      	mov	r4, r1
 801beca:	d507      	bpl.n	801bedc <__smakebuf_r+0x1c>
 801becc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bed0:	6023      	str	r3, [r4, #0]
 801bed2:	6123      	str	r3, [r4, #16]
 801bed4:	2301      	movs	r3, #1
 801bed6:	6163      	str	r3, [r4, #20]
 801bed8:	b002      	add	sp, #8
 801beda:	bd70      	pop	{r4, r5, r6, pc}
 801bedc:	ab01      	add	r3, sp, #4
 801bede:	466a      	mov	r2, sp
 801bee0:	f7ff ffca 	bl	801be78 <__swhatbuf_r>
 801bee4:	9900      	ldr	r1, [sp, #0]
 801bee6:	4605      	mov	r5, r0
 801bee8:	4630      	mov	r0, r6
 801beea:	f7ff fae1 	bl	801b4b0 <_malloc_r>
 801beee:	b948      	cbnz	r0, 801bf04 <__smakebuf_r+0x44>
 801bef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bef4:	059a      	lsls	r2, r3, #22
 801bef6:	d4ef      	bmi.n	801bed8 <__smakebuf_r+0x18>
 801bef8:	f023 0303 	bic.w	r3, r3, #3
 801befc:	f043 0302 	orr.w	r3, r3, #2
 801bf00:	81a3      	strh	r3, [r4, #12]
 801bf02:	e7e3      	b.n	801becc <__smakebuf_r+0xc>
 801bf04:	4b0d      	ldr	r3, [pc, #52]	; (801bf3c <__smakebuf_r+0x7c>)
 801bf06:	62b3      	str	r3, [r6, #40]	; 0x28
 801bf08:	89a3      	ldrh	r3, [r4, #12]
 801bf0a:	6020      	str	r0, [r4, #0]
 801bf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf10:	81a3      	strh	r3, [r4, #12]
 801bf12:	9b00      	ldr	r3, [sp, #0]
 801bf14:	6163      	str	r3, [r4, #20]
 801bf16:	9b01      	ldr	r3, [sp, #4]
 801bf18:	6120      	str	r0, [r4, #16]
 801bf1a:	b15b      	cbz	r3, 801bf34 <__smakebuf_r+0x74>
 801bf1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf20:	4630      	mov	r0, r6
 801bf22:	f000 f859 	bl	801bfd8 <_isatty_r>
 801bf26:	b128      	cbz	r0, 801bf34 <__smakebuf_r+0x74>
 801bf28:	89a3      	ldrh	r3, [r4, #12]
 801bf2a:	f023 0303 	bic.w	r3, r3, #3
 801bf2e:	f043 0301 	orr.w	r3, r3, #1
 801bf32:	81a3      	strh	r3, [r4, #12]
 801bf34:	89a3      	ldrh	r3, [r4, #12]
 801bf36:	431d      	orrs	r5, r3
 801bf38:	81a5      	strh	r5, [r4, #12]
 801bf3a:	e7cd      	b.n	801bed8 <__smakebuf_r+0x18>
 801bf3c:	0801a431 	.word	0x0801a431

0801bf40 <__malloc_lock>:
 801bf40:	4770      	bx	lr

0801bf42 <__malloc_unlock>:
 801bf42:	4770      	bx	lr

0801bf44 <_realloc_r>:
 801bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf46:	4607      	mov	r7, r0
 801bf48:	4614      	mov	r4, r2
 801bf4a:	460e      	mov	r6, r1
 801bf4c:	b921      	cbnz	r1, 801bf58 <_realloc_r+0x14>
 801bf4e:	4611      	mov	r1, r2
 801bf50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bf54:	f7ff baac 	b.w	801b4b0 <_malloc_r>
 801bf58:	b922      	cbnz	r2, 801bf64 <_realloc_r+0x20>
 801bf5a:	f7ff fa5b 	bl	801b414 <_free_r>
 801bf5e:	4625      	mov	r5, r4
 801bf60:	4628      	mov	r0, r5
 801bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf64:	f000 f848 	bl	801bff8 <_malloc_usable_size_r>
 801bf68:	42a0      	cmp	r0, r4
 801bf6a:	d20f      	bcs.n	801bf8c <_realloc_r+0x48>
 801bf6c:	4621      	mov	r1, r4
 801bf6e:	4638      	mov	r0, r7
 801bf70:	f7ff fa9e 	bl	801b4b0 <_malloc_r>
 801bf74:	4605      	mov	r5, r0
 801bf76:	2800      	cmp	r0, #0
 801bf78:	d0f2      	beq.n	801bf60 <_realloc_r+0x1c>
 801bf7a:	4631      	mov	r1, r6
 801bf7c:	4622      	mov	r2, r4
 801bf7e:	f7fb ff07 	bl	8017d90 <memcpy>
 801bf82:	4631      	mov	r1, r6
 801bf84:	4638      	mov	r0, r7
 801bf86:	f7ff fa45 	bl	801b414 <_free_r>
 801bf8a:	e7e9      	b.n	801bf60 <_realloc_r+0x1c>
 801bf8c:	4635      	mov	r5, r6
 801bf8e:	e7e7      	b.n	801bf60 <_realloc_r+0x1c>

0801bf90 <_read_r>:
 801bf90:	b538      	push	{r3, r4, r5, lr}
 801bf92:	4c07      	ldr	r4, [pc, #28]	; (801bfb0 <_read_r+0x20>)
 801bf94:	4605      	mov	r5, r0
 801bf96:	4608      	mov	r0, r1
 801bf98:	4611      	mov	r1, r2
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	6022      	str	r2, [r4, #0]
 801bf9e:	461a      	mov	r2, r3
 801bfa0:	f7fb fdd2 	bl	8017b48 <_read>
 801bfa4:	1c43      	adds	r3, r0, #1
 801bfa6:	d102      	bne.n	801bfae <_read_r+0x1e>
 801bfa8:	6823      	ldr	r3, [r4, #0]
 801bfaa:	b103      	cbz	r3, 801bfae <_read_r+0x1e>
 801bfac:	602b      	str	r3, [r5, #0]
 801bfae:	bd38      	pop	{r3, r4, r5, pc}
 801bfb0:	20008fcc 	.word	0x20008fcc

0801bfb4 <_fstat_r>:
 801bfb4:	b538      	push	{r3, r4, r5, lr}
 801bfb6:	4c07      	ldr	r4, [pc, #28]	; (801bfd4 <_fstat_r+0x20>)
 801bfb8:	2300      	movs	r3, #0
 801bfba:	4605      	mov	r5, r0
 801bfbc:	4608      	mov	r0, r1
 801bfbe:	4611      	mov	r1, r2
 801bfc0:	6023      	str	r3, [r4, #0]
 801bfc2:	f7fb fe06 	bl	8017bd2 <_fstat>
 801bfc6:	1c43      	adds	r3, r0, #1
 801bfc8:	d102      	bne.n	801bfd0 <_fstat_r+0x1c>
 801bfca:	6823      	ldr	r3, [r4, #0]
 801bfcc:	b103      	cbz	r3, 801bfd0 <_fstat_r+0x1c>
 801bfce:	602b      	str	r3, [r5, #0]
 801bfd0:	bd38      	pop	{r3, r4, r5, pc}
 801bfd2:	bf00      	nop
 801bfd4:	20008fcc 	.word	0x20008fcc

0801bfd8 <_isatty_r>:
 801bfd8:	b538      	push	{r3, r4, r5, lr}
 801bfda:	4c06      	ldr	r4, [pc, #24]	; (801bff4 <_isatty_r+0x1c>)
 801bfdc:	2300      	movs	r3, #0
 801bfde:	4605      	mov	r5, r0
 801bfe0:	4608      	mov	r0, r1
 801bfe2:	6023      	str	r3, [r4, #0]
 801bfe4:	f7fb fe05 	bl	8017bf2 <_isatty>
 801bfe8:	1c43      	adds	r3, r0, #1
 801bfea:	d102      	bne.n	801bff2 <_isatty_r+0x1a>
 801bfec:	6823      	ldr	r3, [r4, #0]
 801bfee:	b103      	cbz	r3, 801bff2 <_isatty_r+0x1a>
 801bff0:	602b      	str	r3, [r5, #0]
 801bff2:	bd38      	pop	{r3, r4, r5, pc}
 801bff4:	20008fcc 	.word	0x20008fcc

0801bff8 <_malloc_usable_size_r>:
 801bff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bffc:	1f18      	subs	r0, r3, #4
 801bffe:	2b00      	cmp	r3, #0
 801c000:	bfbc      	itt	lt
 801c002:	580b      	ldrlt	r3, [r1, r0]
 801c004:	18c0      	addlt	r0, r0, r3
 801c006:	4770      	bx	lr

0801c008 <_init>:
 801c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c00a:	bf00      	nop
 801c00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c00e:	bc08      	pop	{r3}
 801c010:	469e      	mov	lr, r3
 801c012:	4770      	bx	lr

0801c014 <_fini>:
 801c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c016:	bf00      	nop
 801c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c01a:	bc08      	pop	{r3}
 801c01c:	469e      	mov	lr, r3
 801c01e:	4770      	bx	lr
